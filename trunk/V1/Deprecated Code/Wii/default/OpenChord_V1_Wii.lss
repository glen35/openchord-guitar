
OpenChord_V1_Wii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001f7a  0000200e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800126  00800126  00002034  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000157  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011c5  00000000  00000000  000021cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000411  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd3  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00004474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f9  00000000  00000000  000048da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__ctors_end>
       4:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
       8:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
       c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      10:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      14:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      18:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      1c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      20:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      24:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      28:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      2c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      30:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      34:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      38:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      3c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      40:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      44:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      48:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      4c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      50:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      54:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      58:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      5c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>
      60:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_24>
      64:	0c 94 66 05 	jmp	0xacc	; 0xacc <__bad_interrupt>

00000068 <ans_tbl>:
      68:	a8 77 a6 e0 f7 43 5a 35 85 e2 72 97 8f b7 1a 62     .w...CZ5..r....b
      78:	87 38 0d 67 c7 be 4f 3e 20 76 37 8f 68 b7 a9 26     .8.g..O> v7.h..&
      88:	3f 2b 10 e3 30 7e 90 0e 85 0a                       ?+..0~....

00000092 <sboxes>:
      92:	70 51 03 86 40 0d 4f eb 3e cc d1 87 35 bd f5 0b     pQ..@.O.>...5...
      a2:	5e d0 f8 f2 d5 e2 6c 31 0c ad fc 21 c3 78 c1 06     ^.....l1...!.x..
      b2:	c2 4c 55 e6 4a 34 48 11 1e da e7 1a 84 a0 96 a7     .LU.J4H.........
      c2:	e3 7f af 63 9c fa 23 5b 79 c8 9e ba b2 c9 22 12     ...c..#[y.....".
      d2:	4b b3 a1 b6 32 49 a2 e1 89 39 10 66 c5 07 8f 54     K...2I...9.f...T
      e2:	ea 91 ca 3f f9 19 f0 d7 46 bc 28 1b 61 e8 2f 6a     ...?....F.(.a./j
      f2:	ae 9d f6 4e 09 14 77 4d db 1f 2e 7b 7c f1 43 a3     ...N..wM...{|.C.
     102:	00 b8 13 8c 85 b9 29 75 88 fd d2 56 1c 50 97 41     ......)u...V.P.A
     112:	e5 3b 60 b5 c0 64 ee 98 d6 2d 25 a4 aa cd 7d a8     .;`..d...-%...}.
     122:	83 c6 ab be 44 99 26 3c ce 9f bf d3 cb 76 7a 7e     ....D.&<.....vz~
     132:	82 01 8a 9a 80 1d 0e b0 5c d4 38 62 f4 30 e0 8e     ........\.8b.0..
     142:	53 b7 02 57 ac a6 52 0a 6d 92 65 17 24 33 45 72     S..W..R.m.e.$3Er
     152:	74 b1 b4 f7 5d ed 2c ff 47 37 5a 90 bb df 2a 16     t...].,.G7Z...*.
     162:	59 95 d9 c4 27 67 73 c7 68 fe a5 dd 6b 5f 93 d8     Y...'gs.h...k_..
     172:	ec 05 3a 8d 6e fb 3d a9 69 36 f3 94 de ef 15 6f     ..:.n.=.i6.....o
     182:	8b 9b 08 0f dc 81 18 20 04 e4 71 cf e9 2b 42 58     ....... ..q..+BX
     192:	01 a0 a9 62 d6 3f 85 a7 b6 d4 fa 15 66 17 09 bd     ...b.?......f...
     1a2:	5d 14 34 26 59 72 91 54 06 4f f8 b0 5b 74 93 99     ].4&Yr.T.O..[t..
     1b2:	8c f2 45 cd ea 4e ad 10 4a e5 ca ee df c6 6f 9f     ..E..N..J.....o.
     1c2:	88 8e 02 cc 08 a8 77 94 6d 21 b1 28 e4 39 79 96     ......w.m!.(.9y.
     1d2:	60 71 81 16 2e e6 78 b9 c4 46 9a 42 ae b7 7c 43     `q....x..F.B..|C
     1e2:	b3 22 1a 86 c2 32 3d 2d 9c d2 29 e9 63 9b d1 31     ."...2=-..).c..1
     1f2:	38 5e 1e 36 41 bb 03 18 2b 3e bf 68 61 fc 52 c0     8^.6A...+>.ha.R.
     202:	de e0 0a 58 13 5a 00 be 1c 90 0e 53 12 fd e2 6e     ...X.Z.....S...n
     212:	ba ce 24 27 44 7f 87 a3 a1 d5 50 40 e3 f9 83 f7     ..$'D.....P@....
     222:	c7 a2 35 c8 db 19 ab 2f 11 25 ed 33 9e 55 e1 48     ..5..../.%.3.U.H
     232:	af 73 84 da 2a aa 51 eb 9d 95 b2 cb e7 70 80 fe     .s..*.Q......p..
     242:	4c 65 04 ef c5 f1 c3 3a b4 f5 5f 23 89 dd 30 a5     Le.....:.._#..0.
     252:	8b d3 f6 dc 4d 64 d7 f0 8f ec 56 37 5c a4 0d 07     ....Md....V7\...
     262:	76 8a 2c 0b b5 d8 c1 1f e8 3b f4 4b 1b 47 6c 49     v.,......;.K.GlI
     272:	67 7b 92 cf 75 7e 20 d9 7d 3c 97 7a d0 05 6b 0f     g{..u~ .}<.z..k.
     282:	1d fb 82 98 57 8d f3 6a bc ac c9 a6 ff b8 69 0c     ....W..j......i.
     292:	4c 4d 72 07 5a 49 33 8d a2 ab 46 3d 63 0d a0 97     LMr.ZI3...F=c...
     2a2:	ff f0 f5 fa c0 e9 db 62 e4 e1 74 43 dc 86 18 29     .......b..tC...)
     2b2:	37 f4 06 e2 ed 6f 90 48 1e 2d 1d ea 73 94 54 df     7....o.H.-..s.T.
     2c2:	25 f6 47 27 d9 11 77 c9 84 1c 5b 5c 51 81 a6 22     %.G'..w...[\Q.."
     2d2:	3e 24 96 c8 8a ec 82 7c 09 b8 45 4a 57 bb 2f 50     >$.....|..EJW./P
     2e2:	75 8e 61 70 8c 6c af d0 fd b4 1b ae de fe 3b b5     u.ap.l........;.
     2f2:	36 bd 55 01 0e 9c 41 56 5f b3 26 03 83 ba 13 4b     6.U...AV_.&....K
     302:	ca c5 0a f8 60 a5 b9 c7 c3 98 32 fb 12 f9 a7 92     ....`.....2.....
     312:	aa 68 f3 78 7e 05 20 21 02 e8 bf f2 b0 59 8f d2     .h.x~. !.....Y..
     322:	cb 87 65 15 f1 1a b2 30 ad ee 58 a3 8b 66 1f 2c     ..e....0..X..f.,
     332:	d7 5d 19 85 a8 e6 d3 6b a1 0c 91 93 6a 5e 0b 79     .].....k....j^.y
     342:	e3 dd 00 4f 3c 89 6e 71 69 a9 ac 40 e5 99 28 c6     ...O<.nqi..@..(.
     352:	31 4e 7a cd 08 9e 7d ef 17 fc 88 d8 a4 6d 44 95     1Nz...}......mD.
     362:	d1 b7 d4 9b be 2a 34 64 2b cf 2e eb 38 ce 23 e0     .....*4d+...8.#.
     372:	3a 3f f7 7b 9f 10 53 bc 52 67 16 e7 80 76 04 c4     :?.{..S.Rg...v..
     382:	b6 c1 c2 7f 9a da d5 39 42 14 9d b1 0f 35 d6 cc     .......9B....5..
     392:	b9 da 38 0c a2 9c 09 1f 06 b1 b6 fd 1a 69 23 30     ..8..........i#0
     3a2:	c4 de 01 d1 f4 58 29 37 1c 7d d5 bf ff bd c8 c9     .....X)7.}......
     3b2:	cf 65 be 7b 78 97 98 67 08 b3 26 57 f7 fa 40 ad     .e.{x..g..&W..@.
     3c2:	8e 75 a6 7c db 91 8b 51 99 d4 17 7a 90 8d ce 63     .u.|...Q...z...c
     3d2:	cb 4e a0 ab 18 3a 5b 50 7f 21 74 c1 bb b8 b7 ba     .N...:[P.!t.....
     3e2:	0b 35 95 31 59 9a 4d 04 07 1e 5a 76 13 f3 71 83     .5.1Y.M...Zv..q.
     3f2:	d0 86 03 a8 39 42 aa 28 e6 e4 d8 5d d3 d0 6e 6f     ....9B.(...]..no
     402:	96 fb 5e bc 56 c2 5f 85 9b e7 af d2 3b 84 6a a7     ..^.V._.....;.j.
     412:	53 c5 44 49 a5 f9 36 72 3d 2c d9 1b a1 f5 4f 93     S.DI..6r=,....O.
     422:	9d 68 47 41 16 ca 2a 4c a3 87 d6 e5 19 2e 77 15     .hGA..*L......w.
     432:	6d 70 c0 df b2 00 46 ed c6 6c 43 60 92 2d a9 22     mp....F..lC`.-."
     442:	45 8f 34 55 ae a4 0a 66 32 e0 dc 02 ac e8 20 8c     E.4U...f2..... .
     452:	89 62 4a fe ee c3 e3 3c f1 79 05 e9 f6 27 33 cc     .bJ....<.y...'3.
     462:	f2 9e 11 81 7e 80 10 8a 82 9f 48 0d d7 b4 fc 2f     ....~.....H..../
     472:	b5 c7 dd 88 14 6b 2b 54 ea 1d 94 5c b0 ef 12 24     .....k+T...\...$
     482:	cd eb e1 e2 64 73 3f 0e 52 61 25 3e f8 0f 4b ec     ....ds?.Ra%>..K.
     492:	c0 00 30 f6 02 49 3d 10 6e 20 c9 a6 2f fe 2c 2b     ..0..I=.n ../.,+
     4a2:	75 2e 45 26 ab 48 a9 80 fc 04 cc d3 b5 ba a3 38     u.E&.H.........8
     4b2:	31 7d 01 d9 a7 7b 96 b6 63 69 4e f7 de e0 78 ca     1}...{..ciN...x.
     4c2:	50 aa 41 91 65 88 e4 21 85 da 3a 27 be 1c 3e 42     P.A.e..!..:'..>B
     4d2:	5e 17 52 7f 1f 89 24 6f 8f 5c 67 74 0e 12 87 8d     ^.R...$o.\gt....
     4e2:	e9 34 ed 73 c4 f8 61 5b 05 df 59 4c 97 79 83 18     .4.s..a[..YL.y..
     4f2:	a4 55 95 eb bd 53 f5 f1 57 66 46 9f b2 81 09 51     .U...S..WfF....Q
     502:	86 22 16 dd 23 93 76 29 c2 d7 1d d4 bf 36 3f ea     ."..#.v).....6?.
     512:	4b 11 32 b9 62 54 60 d6 6d 43 9a 0d 92 9c b0 ef     K.2.bT`.mC......
     522:	58 6c 9d 77 2d 70 fa f3 b3 0b e2 40 7e f4 8a e5     Xl.w-p.....@~...
     532:	8c 3c 56 71 d1 64 e1 82 0a cb 13 15 90 ec 03 99     .<Vq.d..........
     542:	af 14 5d 0f 33 4a 94 a5 a8 35 1b e3 6a c6 28 ff     ..].3J...5..j.(.
     552:	4d e7 25 84 ac 08 ae c5 a2 2a b8 37 0c 7a a0 c3     M.%......*.7.z..
     562:	ce ad 06 1a 9e 8b fb d5 d0 c1 1e d0 b4 9b b1 44     ...............D
     572:	f2 47 c7 68 cf 72 bb 4f 5a f9 dc 6b db d2 e8 7c     .G.h.r.OZ..k...|
     582:	c8 ee 98 a1 e6 d8 39 07 5f fd 8e 19 b7 3b bc cd     ......9._....;..
     592:	7c e3 81 73 b2 11 bf 6f 20 98 fe 75 96 ef 6c da     |..s...o ..u..l.
     5a2:	50 e1 09 72 54 45 ba 34 80 5b ed 3e 53 2c 87 a4     P..rTE.4.[.>S,..
     5b2:	57 f3 33 3f 3c b7 67 b4 a3 25 60 4f 07 6b 1b 47     W.3?<.g..%`O.k.G
     5c2:	15 0f e4 0a ea d1 32 78 36 49 8d 4b d2 bc a5 dc     ......2x6I.K....
     5d2:	1d 0d 4d cd 9a 82 5f fc 94 65 be e2 f4 c9 1e 44     ..M..._..e.....D
     5e2:	cb 9e 0c 64 71 26 63 b3 14 e8 40 70 8a 0e 19 42     ...dq&c...@p...B
     5f2:	6d ac 88 10 5c df 41 a9 ad e5 fb 74 cc d5 06 8e     m...\.A....t....
     602:	59 86 ce 1f 3d 76 e0 8f b9 77 27 7b a6 d8 29 d3     Y...=v...w'{..).
     612:	ec b8 13 f7 fa c3 51 6a de 4a 5a eb c2 8b 23 48     ......Qj.JZ...#H
     622:	92 cf 62 a8 99 f8 d0 2e 85 61 43 c8 bd f0 05 93     ..b......aC.....
     632:	ca 4e f1 7d 30 fd c4 69 66 2f 08 b1 52 f9 21 e6     .N.}0..if/..R.!.
     642:	7a 2b dd 39 84 ff c0 91 d6 37 d4 7f 2d 9b 5d a1     z+.9.....7..-.].
     652:	3b 6e b5 c5 46 04 f5 90 ee 7e 83 1c 03 56 b6 aa     ;n..F....~...V..
     662:	00 17 01 35 55 79 0b 12 bb 1a 31 e7 02 28 16 c1     ...5Uy....1..(..
     672:	f6 a2 db 18 9c 89 68 38 97 ab c7 2a d7 3a f2 c6     ......h8...*.:..
     682:	24 4c b0 58 a0 22 5e 9d d9 a7 e9 ae af 8c 95 9f     $L.X."^.........
     692:	28 b7 20 d7 b0 30 c3 09 19 c0 67 d6 00 3c 7e e7     (. ..0....g..<~.
     6a2:	e9 f4 08 5a f8 b8 2e 05 a6 25 9e 5c d8 15 0d e1     ...Z.....%.\....
     6b2:	f6 11 54 6b cd 21 46 66 5e 84 ad 06 38 29 44 c5     ..Tk.!Ff^...8)D.
     6c2:	a2 ce f1 aa c1 40 71 86 b5 ef fc 36 a8 cb 0a 48     .....@q....6...H
     6d2:	27 45 64 a3 af 8c b2 c6 9f 07 89 dc 17 d3 49 79     'Ed...........Iy
     6e2:	fb fe 1d d0 b9 88 43 52 bc 01 78 2b 7d 94 c7 0e     ......CR..x+}...
     6f2:	de a5 d5 9b cc f7 61 7a c2 74 81 39 03 ab 96 a0     ......az.t.9....
     702:	37 bd 2d 72 75 3f c9 d4 8e 6f f9 8d ed 62 db 1c     7.-ru?...o...b..
     712:	df 04 ac 1b 6c 14 4b 63 d0 bf b4 82 ec 7b 1a 59     ....l.Kc.....{.Y
     722:	92 d2 10 60 b6 3d 5f e6 80 6e 70 c4 f2 35 d9 7c     ...`.=_..np..5.|
     732:	ee e5 41 a4 5b 50 dd bb 4c f3 1f 9d 5d 57 55 51     ..A.[P..L...]WUQ
     742:	97 e3 58 42 4d 9c 73 ba c8 77 31 69 26 ae ea 8a     ..XBM.s..w1i&...
     752:	da 22 b3 87 56 fa 93 0b 34 16 33 e8 e4 53 be a9     ."..V...4.3..S..
     762:	b1 3a 3e f5 90 6a cf 3b 12 fd 8f 9a a7 47 91 99     .:>..j.;.....G..
     772:	eb 0f 24 ff 23 18 85 4e 7f 0c e0 a1 d2 d1 2c 2a     ..$.#..N......,*
     782:	4a 02 4f 1e 95 68 8b 98 83 6d 76 ca 65 32 13 2f     J.O..h...mv.e2./
     792:	c3 82 9a a4 ba 81 60 37 34 35 fc 80 a8 51 65 67     ......`745...Qeg
     7a2:	ed 30 5f 10 d3 4a 27 2f 13 b9 2a d2 cc e1 ef ae     .0_..J'/..*.....
     7b2:	eb be f4 bd cf 43 b3 c5 88 84 b7 dd 39 40 ce 48     .....C......9@.H
     7c2:	6d 9b 72 61 7e e7 a1 4e 53 2e 77 3b e2 c9 36 22     m.ra~..NS.w;..6"
     7d2:	1b 6e 73 b1 03 b2 4c 87 a9 d4 4d 0f d8 15 6c aa     .ns...L...M...l.
     7e2:	18 f6 49 57 5d fb 7a 14 94 63 a0 11 b0 9e de 05     ..IW].z..c......
     7f2:	46 c8 ee 47 db dc 24 89 9c 91 97 29 e9 7b c1 07     F..G..$....).{..
     802:	1e b8 fd fe ac c6 62 98 4f f1 79 e0 e8 6b 78 56     ......b.O.y..kxV
     812:	b6 8d 04 50 86 ca 6f 20 e6 ea e5 76 17 1c 74 7f     ...P..o ...v..t.
     822:	bc 0d 2c 85 f7 66 96 e4 8b 75 3f 4b d9 38 af 7c     ..,..f...u?K.8.|
     832:	da 0b 83 2d 31 32 a2 f5 1d 59 41 45 bf 3c 1f f8     ...-12...YAE.<..
     842:	f9 8a d0 16 25 69 12 99 9d 21 95 ab 01 a6 d7 b5     ....%i...!......
     852:	c0 7d ff 58 0e 3a 92 d1 55 e3 08 9f d6 3e 52 8e     .}.X.:..U....>R.
     862:	fa a3 c7 02 cd df 8f 64 19 8c f3 a7 0c 5e 0a 6a     .......d.....^.j
     872:	09 f0 93 5b 42 c2 06 23 ec 71 ad b4 cb bb 70 28     ...[B..#.q....p(
     882:	d5 1a 5c 33 68 5a 00 44 90 a5 c4 26 3d 2b f2 54     ..\3hZ.D...&=+.T
     892:	96 ad da 1f ed 33 e1 81 69 08 0d 0a db 35 77 9a     .....3..i....5w.
     8a2:	64 d1 fc 78 aa 1b d0 67 a0 dd fa 6c 63 71 05 84     d..x...g...lcq..
     8b2:	17 6a 89 4f 66 7f c6 50 55 92 6f bd e7 d2 40 72     .j.Of..PU.o...@r
     8c2:	8d bb ec 06 42 8a e4 88 9d 7e 7a 82 27 13 41 1a     ....B....~z.'.A.
     8d2:	af c8 a4 76 b4 c2 fe 6d 1c d9 61 30 b3 7c ea f7     ...v...m..a0.|..
     8e2:	29 0f f2 3b 51 c1 de 5f e5 2a 2f 99 0b 5d a3 2b     )..;Q.._.*/..].+
     8f2:	4a ab 95 a5 d3 58 56 ee 28 31 00 cc 15 46 ca e6     J....XV.(1...F..
     902:	86 38 3c 65 f5 e3 9f d6 5b 09 49 83 70 2d 53 a9     .8<e....[.I.p-S.
     912:	7d e2 c4 ac 8e 5e b8 25 f4 b9 57 f3 f1 68 47 b2     }....^.%..W..hG.
     922:	a2 59 20 ce 34 79 5c 90 0e 1e be d5 22 23 b1 c9     .Y .4y\....."#..
     932:	18 62 16 2e 91 3e 07 8f d8 3f 93 3d d4 9b df 85     .b...>...?.=....
     942:	21 fb 11 74 97 c7 d7 dc 4c 19 45 98 e9 43 02 4b     !..t....L.E..C.K
     952:	bc c3 04 9c 6b f0 75 52 a7 26 f6 c5 ba cf b0 b7     ....k.uR.&......
     962:	ae 5a a1 bf 03 8b 80 12 6e 0c eb f9 c0 44 24 ef     .Z......n....D$.
     972:	10 f8 a8 8c e8 7b ff 9e 2c cd 60 36 87 b5 94 a6     .....{..,.`6....
     982:	54 73 3a 14 4e 01 1d b6 fd 37 48 4d 39 cb e0 32     Ts:.N....7HM9..2
	...

00000a92 <__ctors_end>:
     a92:	11 24       	eor	r1, r1
     a94:	1f be       	out	0x3f, r1	; 63
     a96:	cf ef       	ldi	r28, 0xFF	; 255
     a98:	d8 e0       	ldi	r29, 0x08	; 8
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	cd bf       	out	0x3d, r28	; 61

00000a9e <__do_copy_data>:
     a9e:	11 e0       	ldi	r17, 0x01	; 1
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	ea e7       	ldi	r30, 0x7A	; 122
     aa6:	ff e1       	ldi	r31, 0x1F	; 31
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <.do_copy_data_start>

00000aaa <.do_copy_data_loop>:
     aaa:	05 90       	lpm	r0, Z+
     aac:	0d 92       	st	X+, r0

00000aae <.do_copy_data_start>:
     aae:	a6 32       	cpi	r26, 0x26	; 38
     ab0:	b1 07       	cpc	r27, r17
     ab2:	d9 f7       	brne	.-10     	; 0xaaa <.do_copy_data_loop>

00000ab4 <__do_clear_bss>:
     ab4:	12 e0       	ldi	r17, 0x02	; 2
     ab6:	a6 e2       	ldi	r26, 0x26	; 38
     ab8:	b1 e0       	ldi	r27, 0x01	; 1
     aba:	01 c0       	rjmp	.+2      	; 0xabe <.do_clear_bss_start>

00000abc <.do_clear_bss_loop>:
     abc:	1d 92       	st	X+, r1

00000abe <.do_clear_bss_start>:
     abe:	ab 36       	cpi	r26, 0x6B	; 107
     ac0:	b1 07       	cpc	r27, r17
     ac2:	e1 f7       	brne	.-8      	; 0xabc <.do_clear_bss_loop>
     ac4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <main>
     ac8:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <_exit>

00000acc <__bad_interrupt>:
     acc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ad0 <wm_timer_inc>:
												int buttonStringPatterns[][6], char *controllerMode);

void wm_timer_inc()  // This function is unused by me.
{
        return;
}
     ad0:	08 95       	ret

00000ad2 <setTimer>:



void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
     ad2:	e4 e6       	ldi	r30, 0x64	; 100
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	87 7f       	andi	r24, 0xF7	; 247
     ada:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
     adc:	e0 e8       	ldi	r30, 0x80	; 128
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	8f 77       	andi	r24, 0x7F	; 127
     ae4:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  ///  to the pins
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 7b       	andi	r24, 0xBF	; 191
     aea:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  
     aec:	80 81       	ld	r24, Z
     aee:	8f 7d       	andi	r24, 0xDF	; 223
     af0:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     af2:	80 81       	ld	r24, Z
     af4:	8f 7e       	andi	r24, 0xEF	; 239
     af6:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
     af8:	80 81       	ld	r24, Z
     afa:	8d 7f       	andi	r24, 0xFD	; 253
     afc:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
     afe:	80 81       	ld	r24, Z
     b00:	8e 7f       	andi	r24, 0xFE	; 254
     b02:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
     b04:	e1 e8       	ldi	r30, 0x81	; 129
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
     b0e:	80 81       	ld	r24, Z
     b10:	8f 7e       	andi	r24, 0xEF	; 239
     b12:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
     b14:	80 81       	ld	r24, Z
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
     b1a:	80 81       	ld	r24, Z
     b1c:	8d 7f       	andi	r24, 0xFD	; 253
     b1e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
     b20:	80 81       	ld	r24, Z
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
     b26:	08 95       	ret

00000b28 <readFrets>:


//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
void readFrets(int guitarString, int* stringState)
{
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	eb 01       	movw	r28, r22
  	string_port &= ~(1<<guitarString);  // Set the string LOW
     b30:	9b b1       	in	r25, 0x0b	; 11
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <readFrets+0x14>
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	8a 95       	dec	r24
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <readFrets+0x10>
     b40:	12 2f       	mov	r17, r18
     b42:	82 2f       	mov	r24, r18
     b44:	80 95       	com	r24
     b46:	89 23       	and	r24, r25
     b48:	8b b9       	out	0x0b, r24	; 11
     b4a:	84 e1       	ldi	r24, 0x14	; 20
     b4c:	90 e0       	ldi	r25, 0x00	; 0

inline void doXnops(int x)
{
	while (x >= 0)
	{
		nop();
     b4e:	00 00       	nop
		x--;
     b50:	01 97       	sbiw	r24, 0x01	; 1
	return;
}

inline void doXnops(int x)
{
	while (x >= 0)
     b52:	2f ef       	ldi	r18, 0xFF	; 255
     b54:	8f 3f       	cpi	r24, 0xFF	; 255
     b56:	92 07       	cpc	r25, r18
     b58:	d1 f7       	brne	.-12     	; 0xb4e <readFrets+0x26>

	// Then we have to delay for a while, since right after the switch, the pin values
	// jump around a bit
	doXnops(20);	
	// Read the values on the frets
  	int i = fret_pin;               
     b5a:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;
     b5c:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// More delay funcitonality... without these delays, there is some bouncing
     b5e:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// on the pins, so the read screws up.
     b60:	83 b1       	in	r24, 0x03	; 3
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	*stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
     b62:	81 fd       	sbrc	r24, 1
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <readFrets+0x44>
     b66:	42 e0       	ldi	r20, 0x02	; 2
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <readFrets+0x48>
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
 	*stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
     b70:	82 fd       	sbrc	r24, 2
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <readFrets+0x52>
     b74:	24 e0       	ldi	r18, 0x04	; 4
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <readFrets+0x56>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
 	*stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
     b7e:	83 fd       	sbrc	r24, 3
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <readFrets+0x60>
     b82:	a8 e0       	ldi	r26, 0x08	; 8
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <readFrets+0x64>
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
 	*stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
     b8c:	84 fd       	sbrc	r24, 4
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <readFrets+0x6e>
     b90:	e0 e1       	ldi	r30, 0x10	; 16
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <readFrets+0x72>
     b96:	e0 e0       	ldi	r30, 0x00	; 0
     b98:	f0 e0       	ldi	r31, 0x00	; 0
 	*stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
     b9a:	85 fd       	sbrc	r24, 5
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <readFrets+0x7c>
     b9e:	60 e2       	ldi	r22, 0x20	; 32
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <readFrets+0x80>
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
     ba8:	86 b1       	in	r24, 0x06	; 6
 	*stringState |= ( (!(i & (1<<strum_pin))) << 0); //pick touching the string
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	96 95       	lsr	r25
     bae:	87 95       	ror	r24
     bb0:	96 95       	lsr	r25
     bb2:	87 95       	ror	r24
     bb4:	80 95       	com	r24
     bb6:	90 95       	com	r25
     bb8:	81 70       	andi	r24, 0x01	; 1
     bba:	90 70       	andi	r25, 0x00	; 0
     bbc:	48 2b       	or	r20, r24
     bbe:	59 2b       	or	r21, r25
     bc0:	42 2b       	or	r20, r18
     bc2:	53 2b       	or	r21, r19
     bc4:	4a 2b       	or	r20, r26
     bc6:	5b 2b       	or	r21, r27
     bc8:	4e 2b       	or	r20, r30
     bca:	5f 2b       	or	r21, r31
     bcc:	46 2b       	or	r20, r22
     bce:	57 2b       	or	r21, r23
     bd0:	59 83       	std	Y+1, r21	; 0x01
     bd2:	48 83       	st	Y, r20

	//Turn the string back HIGH and return
	string_port |= (1<<guitarString); 
     bd4:	8b b1       	in	r24, 0x0b	; 11
     bd6:	18 2b       	or	r17, r24
     bd8:	1b b9       	out	0x0b, r17	; 11
	return;
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	08 95       	ret

00000be2 <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{
     be2:	2f 92       	push	r2
     be4:	3f 92       	push	r3
     be6:	4f 92       	push	r4
     be8:	5f 92       	push	r5
     bea:	6f 92       	push	r6
     bec:	7f 92       	push	r7
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	c8 55       	subi	r28, 0x58	; 88
     c0c:	d0 40       	sbci	r29, 0x00	; 0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
        return;
}

inline void init(void) // This just initialized variables, mostly to zero
{
	int zero6array[6] = {0,0,0,0,0,0};  // These 3 lines set greenTimers and triedGreen to zeros
     c18:	fe 01       	movw	r30, r28
     c1a:	3d 96       	adiw	r30, 0x0d	; 13
     c1c:	8c e0       	ldi	r24, 0x0C	; 12
     c1e:	df 01       	movw	r26, r30
     c20:	1d 92       	st	X+, r1
     c22:	8a 95       	dec	r24
     c24:	e9 f7       	brne	.-6      	; 0xc20 <main+0x3e>
	memcpy(greenTimers, zero6array, 6);  
     c26:	aa e4       	ldi	r26, 0x4A	; 74
     c28:	b2 e0       	ldi	r27, 0x02	; 2
     c2a:	86 e0       	ldi	r24, 0x06	; 6
     c2c:	01 90       	ld	r0, Z+
     c2e:	0d 92       	st	X+, r0
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	e1 f7       	brne	.-8      	; 0xc2c <main+0x4a>
	memcpy(triedGreen, zero6array, 6);
     c34:	a8 e5       	ldi	r26, 0x58	; 88
     c36:	b2 e0       	ldi	r27, 0x02	; 2
     c38:	fe 01       	movw	r30, r28
     c3a:	3d 96       	adiw	r30, 0x0d	; 13
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	01 90       	ld	r0, Z+
     c40:	0d 92       	st	X+, r0
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	e1 f7       	brne	.-8      	; 0xc3e <main+0x5c>

    // initialize button data array
    but_dat[0] = 0b00011111;
     c46:	8f e1       	ldi	r24, 0x1F	; 31
     c48:	80 93 64 02 	sts	0x0264, r24
    but_dat[1] = 0b00011111;
     c4c:	80 93 65 02 	sts	0x0265, r24
    but_dat[2] = 0b00001111; // last 5 bits are touchbar data, should be 0F for no touching
     c50:	8f e0       	ldi	r24, 0x0F	; 15
     c52:	80 93 66 02 	sts	0x0266, r24
    but_dat[3] = 0b00001111; // last 5 bits are whammy bar data, should be 0F probably
     c56:	80 93 67 02 	sts	0x0267, r24
    but_dat[4] = 0b11111111; // no buttons pressed (with the Wiimote, 0 is pressed)
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	80 93 68 02 	sts	0x0268, r24
    but_dat[5] = 0b11111111; // no buttons pressed
     c60:	80 93 69 02 	sts	0x0269, r24

	// Set the fret pins as input pins, with internal resistor
	fret_ddr &= ~(1<<green_pin);        // input
     c64:	21 98       	cbi	0x04, 1	; 4
	fret_port |= (1<<green_pin);		//pull-up enabled	
     c66:	29 9a       	sbi	0x05, 1	; 5
	fret_ddr &= ~(1<<red_pin);
     c68:	22 98       	cbi	0x04, 2	; 4
	fret_port |= (1<<red_pin);
     c6a:	2a 9a       	sbi	0x05, 2	; 5
	fret_ddr &= ~(1<<yellow_pin);
     c6c:	23 98       	cbi	0x04, 3	; 4
	fret_port |= (1<<yellow_pin);
     c6e:	2b 9a       	sbi	0x05, 3	; 5
	fret_ddr &= ~(1<<blue_pin);
     c70:	24 98       	cbi	0x04, 4	; 4
	fret_port |= (1<<blue_pin);
     c72:	2c 9a       	sbi	0x05, 4	; 5
	fret_ddr &= ~(1<<orange_pin);
     c74:	25 98       	cbi	0x04, 5	; 4
	fret_port |= (1<<orange_pin);
     c76:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	misc_ddr &= ~(1<<plus_pin);
     c78:	38 98       	cbi	0x07, 0	; 7
	misc_port |= (1<<plus_pin);
     c7a:	40 9a       	sbi	0x08, 0	; 8
	misc_ddr &= ~(1<<minus_pin);
     c7c:	39 98       	cbi	0x07, 1	; 7
	misc_port |= (1<<minus_pin);
     c7e:	41 9a       	sbi	0x08, 1	; 8
	
	pick_ddr &= ~(1<<strum_pin);
     c80:	3a 98       	cbi	0x07, 2	; 7
	pick_port |= (1<<strum_pin);
     c82:	42 9a       	sbi	0x08, 2	; 8

	

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	string_ddr |= (1<<first_string);  //output
     c84:	57 9a       	sbi	0x0a, 7	; 10
	string_port |= (1<<first_string); // set high
     c86:	5f 9a       	sbi	0x0b, 7	; 11
	string_ddr |= (1<<second_string);  
     c88:	56 9a       	sbi	0x0a, 6	; 10
	string_port |= (1<<second_string);
     c8a:	5e 9a       	sbi	0x0b, 6	; 11
	string_ddr |= (1<<third_string);  
     c8c:	55 9a       	sbi	0x0a, 5	; 10
	string_port |= (1<<third_string);
     c8e:	5d 9a       	sbi	0x0b, 5	; 11
	string_ddr |= (1<<fourth_string);  
     c90:	52 9a       	sbi	0x0a, 2	; 10
	string_port |= (1<<fourth_string);
     c92:	5a 9a       	sbi	0x0b, 2	; 11
	string_ddr |= (1<<fifth_string);  
     c94:	51 9a       	sbi	0x0a, 1	; 10
	string_port |= (1<<fifth_string);
     c96:	59 9a       	sbi	0x0b, 1	; 11
	string_ddr |= (1<<sixth_string);  
     c98:	50 9a       	sbi	0x0a, 0	; 10
	string_port |= (1<<sixth_string);
     c9a:	58 9a       	sbi	0x0b, 0	; 11
*/ 
{

	init(); // Initialize the pins and stuff

	int stringState[6] = {0,0,0,0,0,0}; // This stores an int for each string,
     c9c:	8e 01       	movw	r16, r28
     c9e:	0f 5f       	subi	r16, 0xFF	; 255
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	8c e0       	ldi	r24, 0x0C	; 12
     ca4:	f8 01       	movw	r30, r16
     ca6:	11 92       	st	Z+, r1
     ca8:	8a 95       	dec	r24
     caa:	e9 f7       	brne	.-6      	; 0xca6 <main+0xc4>

	int buttonStringPatterns[NUMBER_OF_FRETS][6];


  	// Start the wiimote communication and make wiimote think this is a guitar
    wm_init(guitar_id, but_dat, cal_data, wm_timer_inc);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	64 e6       	ldi	r22, 0x64	; 100
     cb2:	72 e0       	ldi	r23, 0x02	; 2
     cb4:	46 e0       	ldi	r20, 0x06	; 6
     cb6:	51 e0       	ldi	r21, 0x01	; 1
     cb8:	28 e6       	ldi	r18, 0x68	; 104
     cba:	35 e0       	ldi	r19, 0x05	; 5
     cbc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <wm_init>

	setTimer(); // Start the timer going
     cc0:	0e 94 69 05 	call	0xad2	; 0xad2 <setTimer>
     cc4:	22 24       	eor	r2, r2
     cc6:	aa 24       	eor	r10, r10
     cc8:	bb 24       	eor	r11, r11
     cca:	33 24       	eor	r3, r3
     ccc:	77 24       	eor	r7, r7

    while(1)
    {
        // We first read all the strings for button hits and store them into
		//  our stringState array.  Strum processing is also handled here for now.
        readFrets(first_string,  &stringState[0]);
     cce:	66 96       	adiw	r28, 0x16	; 22
     cd0:	0f af       	std	Y+63, r16	; 0x3f
     cd2:	66 97       	sbiw	r28, 0x16	; 22
     cd4:	67 96       	adiw	r28, 0x17	; 23
     cd6:	1f af       	std	Y+63, r17	; 0x3f
     cd8:	67 97       	sbiw	r28, 0x17	; 23
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	66 96       	adiw	r28, 0x16	; 22
     ce0:	6f ad       	ldd	r22, Y+63	; 0x3f
     ce2:	66 97       	sbiw	r28, 0x16	; 22
     ce4:	67 96       	adiw	r28, 0x17	; 23
     ce6:	7f ad       	ldd	r23, Y+63	; 0x3f
     ce8:	67 97       	sbiw	r28, 0x17	; 23
     cea:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>
		readFrets(second_string, &stringState[1]);
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	be 01       	movw	r22, r28
     cf4:	6d 5f       	subi	r22, 0xFD	; 253
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>
		readFrets(third_string,  &stringState[2]);
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	be 01       	movw	r22, r28
     d02:	6b 5f       	subi	r22, 0xFB	; 251
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>
		readFrets(fourth_string, &stringState[3]);
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	be 01       	movw	r22, r28
     d10:	69 5f       	subi	r22, 0xF9	; 249
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>
		readFrets(fifth_string,  &stringState[4]);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	be 01       	movw	r22, r28
     d1e:	67 5f       	subi	r22, 0xF7	; 247
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>
		readFrets(sixth_string,  &stringState[5]);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	be 01       	movw	r22, r28
     d2c:	65 5f       	subi	r22, 0xF5	; 245
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	0e 94 94 05 	call	0xb28	; 0xb28 <readFrets>

		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	7f 16       	cp	r7, r31
     d38:	21 f0       	breq	.+8      	; 0xd42 <main+0x160>
     d3a:	24 e0       	ldi	r18, 0x04	; 4
     d3c:	72 16       	cp	r7, r18
     d3e:	09 f0       	breq	.+2      	; 0xd42 <main+0x160>
     d40:	50 c1       	rjmp	.+672    	; 0xfe2 <main+0x400>
		{
			// Check to see if we're trying to enter Config Mode; disabled if we're playing with frets
			if (configMode == 0)
     d42:	22 20       	and	r2, r2
     d44:	09 f0       	breq	.+2      	; 0xd48 <main+0x166>
     d46:	75 c0       	rjmp	.+234    	; 0xe32 <main+0x250>
// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.

inline char testForConfigMode(int stringState[], int buttonStringPatterns[][6], char *controllerMode)
{
	if ((stringState[0] == 0b00110000) &&
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	c0 97       	sbiw	r24, 0x30	; 48
     d4e:	09 f0       	breq	.+2      	; 0xd52 <main+0x170>
     d50:	4c c1       	rjmp	.+664    	; 0xfea <main+0x408>
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	c0 97       	sbiw	r24, 0x30	; 48
     d58:	09 f0       	breq	.+2      	; 0xd5c <main+0x17a>
     d5a:	47 c1       	rjmp	.+654    	; 0xfea <main+0x408>
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	c0 97       	sbiw	r24, 0x30	; 48
     d62:	09 f0       	breq	.+2      	; 0xd66 <main+0x184>
     d64:	42 c1       	rjmp	.+644    	; 0xfea <main+0x408>
     d66:	8f 81       	ldd	r24, Y+7	; 0x07
     d68:	98 85       	ldd	r25, Y+8	; 0x08
     d6a:	89 2b       	or	r24, r25
     d6c:	09 f0       	breq	.+2      	; 0xd70 <main+0x18e>
     d6e:	3d c1       	rjmp	.+634    	; 0xfea <main+0x408>
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	89 2b       	or	r24, r25
     d76:	09 f0       	breq	.+2      	; 0xd7a <main+0x198>
     d78:	38 c1       	rjmp	.+624    	; 0xfea <main+0x408>
     d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d7e:	89 2b       	or	r24, r25
     d80:	09 f0       	breq	.+2      	; 0xd84 <main+0x1a2>
     d82:	33 c1       	rjmp	.+614    	; 0xfea <main+0x408>
		(stringState[4] == 0b00000000) &&
		(stringState[5] == 0b00000000))
	{
		// If we're playing with notes, when we enter config mode, we need to clear the 
		//  button string patterns once so we can rebuild them.
		if (*controllerMode == NOTES)
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	78 16       	cp	r7, r24
     d88:	09 f0       	breq	.+2      	; 0xd8c <main+0x1aa>
     d8a:	d3 c4       	rjmp	.+2470   	; 0x1732 <main+0xb50>
		{
			buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
     d8c:	1a 8e       	std	Y+26, r1	; 0x1a
     d8e:	19 8e       	std	Y+25, r1	; 0x19
     d90:	1c 8e       	std	Y+28, r1	; 0x1c
     d92:	1b 8e       	std	Y+27, r1	; 0x1b
			buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
     d94:	1e 8e       	std	Y+30, r1	; 0x1e
     d96:	1d 8e       	std	Y+29, r1	; 0x1d
     d98:	18 a2       	std	Y+32, r1	; 0x20
     d9a:	1f 8e       	std	Y+31, r1	; 0x1f
			buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
     d9c:	1a a2       	std	Y+34, r1	; 0x22
     d9e:	19 a2       	std	Y+33, r1	; 0x21
     da0:	1c a2       	std	Y+36, r1	; 0x24
     da2:	1b a2       	std	Y+35, r1	; 0x23
			buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
     da4:	1e a2       	std	Y+38, r1	; 0x26
     da6:	1d a2       	std	Y+37, r1	; 0x25
     da8:	18 a6       	std	Y+40, r1	; 0x28
     daa:	1f a2       	std	Y+39, r1	; 0x27
			buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
     dac:	1a a6       	std	Y+42, r1	; 0x2a
     dae:	19 a6       	std	Y+41, r1	; 0x29
     db0:	1c a6       	std	Y+44, r1	; 0x2c
     db2:	1b a6       	std	Y+43, r1	; 0x2b
			buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
     db4:	1e a6       	std	Y+46, r1	; 0x2e
     db6:	1d a6       	std	Y+45, r1	; 0x2d
     db8:	18 aa       	std	Y+48, r1	; 0x30
     dba:	1f a6       	std	Y+47, r1	; 0x2f
			buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
     dbc:	1a aa       	std	Y+50, r1	; 0x32
     dbe:	19 aa       	std	Y+49, r1	; 0x31
     dc0:	1c aa       	std	Y+52, r1	; 0x34
     dc2:	1b aa       	std	Y+51, r1	; 0x33
			buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
     dc4:	1e aa       	std	Y+54, r1	; 0x36
     dc6:	1d aa       	std	Y+53, r1	; 0x35
     dc8:	18 ae       	std	Y+56, r1	; 0x38
     dca:	1f aa       	std	Y+55, r1	; 0x37
			buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
     dcc:	1a ae       	std	Y+58, r1	; 0x3a
     dce:	19 ae       	std	Y+57, r1	; 0x39
     dd0:	1c ae       	std	Y+60, r1	; 0x3c
     dd2:	1b ae       	std	Y+59, r1	; 0x3b
			buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
     dd4:	1e ae       	std	Y+62, r1	; 0x3e
     dd6:	1d ae       	std	Y+61, r1	; 0x3d
     dd8:	21 96       	adiw	r28, 0x01	; 1
     dda:	1f ae       	std	Y+63, r1	; 0x3f
     ddc:	1e ae       	std	Y+62, r1	; 0x3e
     dde:	21 97       	sbiw	r28, 0x01	; 1
			buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
     de0:	23 96       	adiw	r28, 0x03	; 3
     de2:	1f ae       	std	Y+63, r1	; 0x3f
     de4:	1e ae       	std	Y+62, r1	; 0x3e
     de6:	23 97       	sbiw	r28, 0x03	; 3
     de8:	25 96       	adiw	r28, 0x05	; 5
     dea:	1f ae       	std	Y+63, r1	; 0x3f
     dec:	1e ae       	std	Y+62, r1	; 0x3e
     dee:	25 97       	sbiw	r28, 0x05	; 5
			buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
     df0:	27 96       	adiw	r28, 0x07	; 7
     df2:	1f ae       	std	Y+63, r1	; 0x3f
     df4:	1e ae       	std	Y+62, r1	; 0x3e
     df6:	27 97       	sbiw	r28, 0x07	; 7
     df8:	29 96       	adiw	r28, 0x09	; 9
     dfa:	1f ae       	std	Y+63, r1	; 0x3f
     dfc:	1e ae       	std	Y+62, r1	; 0x3e
     dfe:	29 97       	sbiw	r28, 0x09	; 9
			buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
     e00:	2b 96       	adiw	r28, 0x0b	; 11
     e02:	1f ae       	std	Y+63, r1	; 0x3f
     e04:	1e ae       	std	Y+62, r1	; 0x3e
     e06:	2b 97       	sbiw	r28, 0x0b	; 11
     e08:	2d 96       	adiw	r28, 0x0d	; 13
     e0a:	1f ae       	std	Y+63, r1	; 0x3f
     e0c:	1e ae       	std	Y+62, r1	; 0x3e
     e0e:	2d 97       	sbiw	r28, 0x0d	; 13
			buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     e10:	2f 96       	adiw	r28, 0x0f	; 15
     e12:	1f ae       	std	Y+63, r1	; 0x3f
     e14:	1e ae       	std	Y+62, r1	; 0x3e
     e16:	2f 97       	sbiw	r28, 0x0f	; 15
     e18:	61 96       	adiw	r28, 0x11	; 17
     e1a:	1f ae       	std	Y+63, r1	; 0x3f
     e1c:	1e ae       	std	Y+62, r1	; 0x3e
     e1e:	61 97       	sbiw	r28, 0x11	; 17
			buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;\
     e20:	63 96       	adiw	r28, 0x13	; 19
     e22:	1f ae       	std	Y+63, r1	; 0x3f
     e24:	1e ae       	std	Y+62, r1	; 0x3e
     e26:	63 97       	sbiw	r28, 0x13	; 19
     e28:	65 96       	adiw	r28, 0x15	; 21
     e2a:	1f ae       	std	Y+63, r1	; 0x3f
     e2c:	1e ae       	std	Y+62, r1	; 0x3e
     e2e:	65 97       	sbiw	r28, 0x15	; 21
     e30:	80 c4       	rjmp	.+2304   	; 0x1732 <main+0xb50>
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
			}

			// Config Mode operation
			if (configMode == 1) 
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	29 16       	cp	r2, r25
     e36:	09 f0       	breq	.+2      	; 0xe3a <main+0x258>
     e38:	77 c4       	rjmp	.+2286   	; 0x1728 <main+0xb46>
		return 0;
}

inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     e3a:	49 81       	ldd	r20, Y+1	; 0x01
     e3c:	5a 81       	ldd	r21, Y+2	; 0x02
     e3e:	41 15       	cp	r20, r1
     e40:	51 05       	cpc	r21, r1
     e42:	09 f0       	breq	.+2      	; 0xe46 <main+0x264>
     e44:	7a c4       	rjmp	.+2292   	; 0x173a <main+0xb58>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	c0 97       	sbiw	r24, 0x30	; 48
     e4c:	09 f0       	breq	.+2      	; 0xe50 <main+0x26e>
     e4e:	75 c4       	rjmp	.+2282   	; 0x173a <main+0xb58>
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	c0 97       	sbiw	r24, 0x30	; 48
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0x278>
     e58:	70 c4       	rjmp	.+2272   	; 0x173a <main+0xb58>
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	98 85       	ldd	r25, Y+8	; 0x08
     e5e:	89 2b       	or	r24, r25
     e60:	09 f0       	breq	.+2      	; 0xe64 <main+0x282>
     e62:	6b c4       	rjmp	.+2262   	; 0x173a <main+0xb58>
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	89 2b       	or	r24, r25
     e6a:	09 f0       	breq	.+2      	; 0xe6e <main+0x28c>
     e6c:	66 c4       	rjmp	.+2252   	; 0x173a <main+0xb58>
     e6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e70:	9c 85       	ldd	r25, Y+12	; 0x0c
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <main+0x296>
     e76:	61 c4       	rjmp	.+2242   	; 0x173a <main+0xb58>
     e78:	6a c4       	rjmp	.+2260   	; 0x174e <main+0xb6c>
	but_dat[5] = 0b11111111;

	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
		but_dat[5] &= ~(1 << GREEN_BIT);
     e7a:	8f ee       	ldi	r24, 0xEF	; 239
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <main+0x2ca>
	else if(*buttonToAssign == 1)
     e7e:	a1 e0       	ldi	r26, 0x01	; 1
     e80:	aa 16       	cp	r10, r26
     e82:	b1 04       	cpc	r11, r1
     e84:	11 f4       	brne	.+4      	; 0xe8a <main+0x2a8>
		but_dat[5] &= ~(1 << RED_BIT);
     e86:	8f eb       	ldi	r24, 0xBF	; 191
     e88:	11 c0       	rjmp	.+34     	; 0xeac <main+0x2ca>
	else if(*buttonToAssign == 2)
     e8a:	b2 e0       	ldi	r27, 0x02	; 2
     e8c:	ab 16       	cp	r10, r27
     e8e:	b1 04       	cpc	r11, r1
     e90:	11 f4       	brne	.+4      	; 0xe96 <main+0x2b4>
		but_dat[5] &= ~(1 << YELLOW_BIT);
     e92:	87 ef       	ldi	r24, 0xF7	; 247
     e94:	0b c0       	rjmp	.+22     	; 0xeac <main+0x2ca>
	else if(*buttonToAssign == 3)
     e96:	e3 e0       	ldi	r30, 0x03	; 3
     e98:	ae 16       	cp	r10, r30
     e9a:	b1 04       	cpc	r11, r1
     e9c:	11 f4       	brne	.+4      	; 0xea2 <main+0x2c0>
		but_dat[5] &= ~(1 << BLUE_BIT);
     e9e:	8f ed       	ldi	r24, 0xDF	; 223
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <main+0x2ca>
	else if(*buttonToAssign == 4)
     ea2:	f4 e0       	ldi	r31, 0x04	; 4
     ea4:	af 16       	cp	r10, r31
     ea6:	b1 04       	cpc	r11, r1
     ea8:	19 f4       	brne	.+6      	; 0xeb0 <main+0x2ce>
		but_dat[5] &= ~(1 << ORANGE_BIT);
     eaa:	8f e7       	ldi	r24, 0x7F	; 127
     eac:	80 93 69 02 	sts	0x0269, r24

	int i = misc_pin; // check for plus and minus
	char plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing sets it low

	// Code to debounce our plus button
	if (plusOn != 0)
     eb0:	30 99       	sbic	0x06, 0	; 6
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <main+0x316>
	{
		// Setup a timer if 
		if (previousPlusOn == 0)
     eb4:	80 91 6a 02 	lds	r24, 0x026A
     eb8:	88 23       	and	r24, r24
     eba:	61 f4       	brne	.+24     	; 0xed4 <main+0x2f2>
		{
			debounceTimer = TCNT1;
     ebc:	80 91 84 00 	lds	r24, 0x0084
     ec0:	90 91 85 00 	lds	r25, 0x0085
     ec4:	90 93 57 02 	sts	0x0257, r25
     ec8:	80 93 56 02 	sts	0x0256, r24
			previousPlusOn = 1;
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	20 93 6a 02 	sts	0x026A, r18
     ed2:	79 c0       	rjmp	.+242    	; 0xfc6 <main+0x3e4>
			plusOn = 0;
		}
		else if ( (TCNT1 - debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - debounceTimer >= 0))
     ed4:	80 91 84 00 	lds	r24, 0x0084
     ed8:	90 91 85 00 	lds	r25, 0x0085
     edc:	20 91 56 02 	lds	r18, 0x0256
     ee0:	30 91 57 02 	lds	r19, 0x0257
     ee4:	82 1b       	sub	r24, r18
     ee6:	93 0b       	sbc	r25, r19
     ee8:	88 5e       	subi	r24, 0xE8	; 232
     eea:	93 40       	sbci	r25, 0x03	; 3
     eec:	40 f4       	brcc	.+16     	; 0xefe <main+0x31c>
     eee:	80 91 84 00 	lds	r24, 0x0084
     ef2:	90 91 85 00 	lds	r25, 0x0085
     ef6:	67 c0       	rjmp	.+206    	; 0xfc6 <main+0x3e4>
			plusOn = 0;
		}		
	}
	else
	{
		previousPlusOn = 0;
     ef8:	10 92 6a 02 	sts	0x026A, r1
     efc:	64 c0       	rjmp	.+200    	; 0xfc6 <main+0x3e4>
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((plusOn) && (*plusLock == 0))
     efe:	33 20       	and	r3, r3
     f00:	09 f0       	breq	.+2      	; 0xf04 <main+0x322>
     f02:	62 c0       	rjmp	.+196    	; 0xfc8 <main+0x3e6>
	{

		if (*controllerMode == CHORDS) 
     f04:	b4 e0       	ldi	r27, 0x04	; 4
     f06:	7b 16       	cp	r7, r27
     f08:	d9 f4       	brne	.+54     	; 0xf40 <main+0x35e>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
     f0a:	f5 01       	movw	r30, r10
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ea 0d       	add	r30, r10
     f12:	fb 1d       	adc	r31, r11
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	8c 0f       	add	r24, r28
     f22:	9d 1f       	adc	r25, r29
     f24:	e8 0f       	add	r30, r24
     f26:	f9 1f       	adc	r31, r25
     f28:	11 82       	std	Z+1, r1	; 0x01
     f2a:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
     f2c:	13 82       	std	Z+3, r1	; 0x03
     f2e:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
     f30:	15 82       	std	Z+5, r1	; 0x05
     f32:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
     f34:	17 82       	std	Z+7, r1	; 0x07
     f36:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
     f38:	11 86       	std	Z+9, r1	; 0x09
     f3a:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
     f3c:	13 86       	std	Z+11, r1	; 0x0b
     f3e:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
     f40:	f5 01       	movw	r30, r10
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	ea 0d       	add	r30, r10
     f48:	fb 1d       	adc	r31, r11
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	a9 e1       	ldi	r26, 0x19	; 25
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ac 0f       	add	r26, r28
     f58:	bd 1f       	adc	r27, r29
     f5a:	ea 0f       	add	r30, r26
     f5c:	fb 1f       	adc	r31, r27
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	84 2b       	or	r24, r20
     f64:	95 2b       	or	r25, r21
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	2b 81       	ldd	r18, Y+3	; 0x03
     f70:	3c 81       	ldd	r19, Y+4	; 0x04
     f72:	82 2b       	or	r24, r18
     f74:	93 2b       	or	r25, r19
     f76:	93 83       	std	Z+3, r25	; 0x03
     f78:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	95 81       	ldd	r25, Z+5	; 0x05
     f7e:	2d 81       	ldd	r18, Y+5	; 0x05
     f80:	3e 81       	ldd	r19, Y+6	; 0x06
     f82:	82 2b       	or	r24, r18
     f84:	93 2b       	or	r25, r19
     f86:	95 83       	std	Z+5, r25	; 0x05
     f88:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
     f8a:	86 81       	ldd	r24, Z+6	; 0x06
     f8c:	97 81       	ldd	r25, Z+7	; 0x07
     f8e:	2f 81       	ldd	r18, Y+7	; 0x07
     f90:	38 85       	ldd	r19, Y+8	; 0x08
     f92:	82 2b       	or	r24, r18
     f94:	93 2b       	or	r25, r19
     f96:	97 83       	std	Z+7, r25	; 0x07
     f98:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
     f9a:	80 85       	ldd	r24, Z+8	; 0x08
     f9c:	91 85       	ldd	r25, Z+9	; 0x09
     f9e:	29 85       	ldd	r18, Y+9	; 0x09
     fa0:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa2:	82 2b       	or	r24, r18
     fa4:	93 2b       	or	r25, r19
     fa6:	91 87       	std	Z+9, r25	; 0x09
     fa8:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
     faa:	82 85       	ldd	r24, Z+10	; 0x0a
     fac:	93 85       	ldd	r25, Z+11	; 0x0b
     fae:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb0:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb2:	82 2b       	or	r24, r18
     fb4:	93 2b       	or	r25, r19
     fb6:	93 87       	std	Z+11, r25	; 0x0b
     fb8:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;
		*buttonToAssign += 1;
     fba:	08 94       	sec
     fbc:	a1 1c       	adc	r10, r1
     fbe:	b1 1c       	adc	r11, r1
     fc0:	33 24       	eor	r3, r3
     fc2:	33 94       	inc	r3
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <main+0x3e6>
     fc6:	33 24       	eor	r3, r3
					// Now set up the data packet to the Wii to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					configSetButtons(&buttonToAssign, &plusLock, buttonStringPatterns, stringState, &controllerMode);

					// If we're done assigning buttons  return to normal mode or restat 
					if (buttonToAssign >= 5 && plusLock == 0)
     fc8:	b5 e0       	ldi	r27, 0x05	; 5
     fca:	ab 16       	cp	r10, r27
     fcc:	b1 04       	cpc	r11, r1
     fce:	0c f4       	brge	.+2      	; 0xfd2 <main+0x3f0>
     fd0:	c2 c3       	rjmp	.+1924   	; 0x1756 <main+0xb74>
     fd2:	33 20       	and	r3, r3
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <main+0x3f6>
     fd6:	bf c3       	rjmp	.+1918   	; 0x1756 <main+0xb74>
					{
						if (controllerMode == NOTES)
     fd8:	e2 e0       	ldi	r30, 0x02	; 2
     fda:	7e 16       	cp	r7, r30
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <main+0x3fe>
     fde:	b7 c3       	rjmp	.+1902   	; 0x174e <main+0xb6c>
     fe0:	b8 c3       	rjmp	.+1904   	; 0x1752 <main+0xb70>
							configMode = 0;
		}	}	}	} // End of Config Mode code


		// Normal operation
		if (configMode == 0)
     fe2:	22 20       	and	r2, r2
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <main+0x406>
     fe6:	a0 c3       	rjmp	.+1856   	; 0x1728 <main+0xb46>
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <main+0x40e>
     fea:	33 24       	eor	r3, r3
     fec:	aa 24       	eor	r10, r10
     fee:	bb 24       	eor	r11, r11
}

inline void resetStringPatterns(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00111000) &&
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	88 33       	cpi	r24, 0x38	; 56
     ff6:	91 05       	cpc	r25, r1
     ff8:	e9 f4       	brne	.+58     	; 0x1034 <main+0x452>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	c8 97       	sbiw	r24, 0x38	; 56
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x422>
    1002:	e7 c0       	rjmp	.+462    	; 0x11d2 <main+0x5f0>
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	c8 97       	sbiw	r24, 0x38	; 56
    100a:	09 f0       	breq	.+2      	; 0x100e <main+0x42c>
    100c:	e2 c0       	rjmp	.+452    	; 0x11d2 <main+0x5f0>
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	89 2b       	or	r24, r25
    1014:	09 f0       	breq	.+2      	; 0x1018 <main+0x436>
    1016:	dd c0       	rjmp	.+442    	; 0x11d2 <main+0x5f0>
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	89 2b       	or	r24, r25
    101e:	09 f0       	breq	.+2      	; 0x1022 <main+0x440>
    1020:	d8 c0       	rjmp	.+432    	; 0x11d2 <main+0x5f0>
    1022:	8b 85       	ldd	r24, Y+11	; 0x0b
    1024:	9c 85       	ldd	r25, Y+12	; 0x0c
    1026:	89 2b       	or	r24, r25
    1028:	09 f0       	breq	.+2      	; 0x102c <main+0x44a>
    102a:	d3 c0       	rjmp	.+422    	; 0x11d2 <main+0x5f0>
		(stringState[2] == 0b00111000) &&
		(stringState[3] == 0b00000000) &&
		(stringState[4] == 0b00000000) &&
		(stringState[5] == 0b00000000))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
    102c:	70 fc       	sbrc	r7, 0
    102e:	d1 c0       	rjmp	.+418    	; 0x11d2 <main+0x5f0>
			{++*controllerMode;}  //This puts it into a transitional mode
    1030:	73 94       	inc	r7
    1032:	cf c0       	rjmp	.+414    	; 0x11d2 <main+0x5f0>
	}

	// And if we're not pressing that anymore, finish the transition
	else if((stringState[0] == 0) &&
    1034:	89 2b       	or	r24, r25
    1036:	09 f0       	breq	.+2      	; 0x103a <main+0x458>
    1038:	cc c0       	rjmp	.+408    	; 0x11d2 <main+0x5f0>
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	89 2b       	or	r24, r25
    1040:	09 f0       	breq	.+2      	; 0x1044 <main+0x462>
    1042:	c7 c0       	rjmp	.+398    	; 0x11d2 <main+0x5f0>
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	89 2b       	or	r24, r25
    104a:	09 f0       	breq	.+2      	; 0x104e <main+0x46c>
    104c:	c2 c0       	rjmp	.+388    	; 0x11d2 <main+0x5f0>
			(stringState[1] == 0) &&
			(stringState[2] == 0)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
    104e:	f5 e0       	ldi	r31, 0x05	; 5
    1050:	7f 16       	cp	r7, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <main+0x476>
    1054:	77 24       	eor	r7, r7
    1056:	bd c0       	rjmp	.+378    	; 0x11d2 <main+0x5f0>
		{	
			*controllerMode = FRETS;
		}
		
		// Now, reset the buttonStringPattern array to be appropriate for the mode
		if (*controllerMode  == FRETS_TO_NOTES)
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	72 16       	cp	r7, r18
    105c:	09 f0       	breq	.+2      	; 0x1060 <main+0x47e>
    105e:	5d c0       	rjmp	.+186    	; 0x111a <main+0x538>
		{
		    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    1060:	1a 8e       	std	Y+26, r1	; 0x1a
    1062:	19 8e       	std	Y+25, r1	; 0x19
			buttonStringPatterns[0][1] = 0b0001100; 
    1064:	4c e0       	ldi	r20, 0x0C	; 12
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	5c 8f       	std	Y+28, r21	; 0x1c
    106a:	4b 8f       	std	Y+27, r20	; 0x1b
			buttonStringPatterns[0][2] = 0b0000000;	
    106c:	1e 8e       	std	Y+30, r1	; 0x1e
    106e:	1d 8e       	std	Y+29, r1	; 0x1d
			buttonStringPatterns[0][3] = 0b0000110;
    1070:	66 e0       	ldi	r22, 0x06	; 6
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	78 a3       	std	Y+32, r23	; 0x20
    1076:	6f 8f       	std	Y+31, r22	; 0x1f
			buttonStringPatterns[0][4] = 0b0000000;
    1078:	1a a2       	std	Y+34, r1	; 0x22
    107a:	19 a2       	std	Y+33, r1	; 0x21
			buttonStringPatterns[0][5] = 0b0000010;
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c a3       	std	Y+36, r25	; 0x24
    1082:	8b a3       	std	Y+35, r24	; 0x23

			buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
    1084:	9e a3       	std	Y+38, r25	; 0x26
    1086:	8d a3       	std	Y+37, r24	; 0x25
			buttonStringPatterns[1][1] = 0b0000000; 
    1088:	18 a6       	std	Y+40, r1	; 0x28
    108a:	1f a2       	std	Y+39, r1	; 0x27
			buttonStringPatterns[1][2] = 0b0000001;
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3a a7       	std	Y+42, r19	; 0x2a
    1092:	29 a7       	std	Y+41, r18	; 0x29
			buttonStringPatterns[1][3] = 0b0000000;
    1094:	1c a6       	std	Y+44, r1	; 0x2c
    1096:	1b a6       	std	Y+43, r1	; 0x2b
			buttonStringPatterns[1][4] = 0b0000001;
    1098:	3e a7       	std	Y+46, r19	; 0x2e
    109a:	2d a7       	std	Y+45, r18	; 0x2d
			buttonStringPatterns[1][5] = 0b0001100;
    109c:	58 ab       	std	Y+48, r21	; 0x30
    109e:	4f a7       	std	Y+47, r20	; 0x2f

			buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
    10a0:	5a ab       	std	Y+50, r21	; 0x32
    10a2:	49 ab       	std	Y+49, r20	; 0x31
			buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
    10a4:	1c aa       	std	Y+52, r1	; 0x34
    10a6:	1b aa       	std	Y+51, r1	; 0x33
			buttonStringPatterns[2][2] = 0b0000110;
    10a8:	7e ab       	std	Y+54, r23	; 0x36
    10aa:	6d ab       	std	Y+53, r22	; 0x35
			buttonStringPatterns[2][3] = 0b0000000;
    10ac:	18 ae       	std	Y+56, r1	; 0x38
    10ae:	1f aa       	std	Y+55, r1	; 0x37
			buttonStringPatterns[2][4] = 0b0000010;
    10b0:	9a af       	std	Y+58, r25	; 0x3a
    10b2:	89 af       	std	Y+57, r24	; 0x39
			buttonStringPatterns[2][5] = 0b0000000;
    10b4:	1c ae       	std	Y+60, r1	; 0x3c
    10b6:	1b ae       	std	Y+59, r1	; 0x3b
									  
			buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    10b8:	1e ae       	std	Y+62, r1	; 0x3e
    10ba:	1d ae       	std	Y+61, r1	; 0x3d
			buttonStringPatterns[3][1] = 0b0000001; 
    10bc:	21 96       	adiw	r28, 0x01	; 1
    10be:	3f af       	std	Y+63, r19	; 0x3f
    10c0:	2e af       	std	Y+62, r18	; 0x3e
    10c2:	21 97       	sbiw	r28, 0x01	; 1
			buttonStringPatterns[3][2] = 0b0001100;
    10c4:	23 96       	adiw	r28, 0x03	; 3
    10c6:	5f af       	std	Y+63, r21	; 0x3f
    10c8:	4e af       	std	Y+62, r20	; 0x3e
    10ca:	23 97       	sbiw	r28, 0x03	; 3
			buttonStringPatterns[3][3] = 0b0000000;
    10cc:	25 96       	adiw	r28, 0x05	; 5
    10ce:	1f ae       	std	Y+63, r1	; 0x3f
    10d0:	1e ae       	std	Y+62, r1	; 0x3e
    10d2:	25 97       	sbiw	r28, 0x05	; 5
			buttonStringPatterns[3][4] = 0b0001100;
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	5f af       	std	Y+63, r21	; 0x3f
    10d8:	4e af       	std	Y+62, r20	; 0x3e
    10da:	27 97       	sbiw	r28, 0x07	; 7
			buttonStringPatterns[3][5] = 0b0000000;
    10dc:	29 96       	adiw	r28, 0x09	; 9
    10de:	1f ae       	std	Y+63, r1	; 0x3f
    10e0:	1e ae       	std	Y+62, r1	; 0x3e
    10e2:	29 97       	sbiw	r28, 0x09	; 9

			buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
    10e4:	2b 96       	adiw	r28, 0x0b	; 11
    10e6:	1f ae       	std	Y+63, r1	; 0x3f
    10e8:	1e ae       	std	Y+62, r1	; 0x3e
    10ea:	2b 97       	sbiw	r28, 0x0b	; 11
			buttonStringPatterns[4][1] = 0b0000110; 
    10ec:	2d 96       	adiw	r28, 0x0d	; 13
    10ee:	7f af       	std	Y+63, r23	; 0x3f
    10f0:	6e af       	std	Y+62, r22	; 0x3e
    10f2:	2d 97       	sbiw	r28, 0x0d	; 13
			buttonStringPatterns[4][2] = 0b0000000;
    10f4:	2f 96       	adiw	r28, 0x0f	; 15
    10f6:	1f ae       	std	Y+63, r1	; 0x3f
    10f8:	1e ae       	std	Y+62, r1	; 0x3e
    10fa:	2f 97       	sbiw	r28, 0x0f	; 15
			buttonStringPatterns[4][3] = 0b0000001;
    10fc:	61 96       	adiw	r28, 0x11	; 17
    10fe:	3f af       	std	Y+63, r19	; 0x3f
    1100:	2e af       	std	Y+62, r18	; 0x3e
    1102:	61 97       	sbiw	r28, 0x11	; 17
			buttonStringPatterns[4][4] = 0b0000000;
    1104:	63 96       	adiw	r28, 0x13	; 19
    1106:	1f ae       	std	Y+63, r1	; 0x3f
    1108:	1e ae       	std	Y+62, r1	; 0x3e
    110a:	63 97       	sbiw	r28, 0x13	; 19
			buttonStringPatterns[4][5] = 0b0000001;
    110c:	65 96       	adiw	r28, 0x15	; 21
    110e:	3f af       	std	Y+63, r19	; 0x3f
    1110:	2e af       	std	Y+62, r18	; 0x3e
    1112:	65 97       	sbiw	r28, 0x15	; 21
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	78 2e       	mov	r7, r24
    1118:	5c c0       	rjmp	.+184    	; 0x11d2 <main+0x5f0>

			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	78 16       	cp	r7, r24
    111e:	09 f0       	breq	.+2      	; 0x1122 <main+0x540>
    1120:	58 c0       	rjmp	.+176    	; 0x11d2 <main+0x5f0>
		{
		    buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
    1122:	2e e0       	ldi	r18, 0x0E	; 14
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3a 8f       	std	Y+26, r19	; 0x1a
    1128:	29 8f       	std	Y+25, r18	; 0x19
			buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
    112a:	3c 8f       	std	Y+28, r19	; 0x1c
    112c:	2b 8f       	std	Y+27, r18	; 0x1b
			buttonStringPatterns[0][2] = 0b0000000;	
    112e:	1e 8e       	std	Y+30, r1	; 0x1e
    1130:	1d 8e       	std	Y+29, r1	; 0x1d
			buttonStringPatterns[0][3] = 0b0000000;
    1132:	18 a2       	std	Y+32, r1	; 0x20
    1134:	1f 8e       	std	Y+31, r1	; 0x1f
			buttonStringPatterns[0][4] = 0b0000000;
    1136:	1a a2       	std	Y+34, r1	; 0x22
    1138:	19 a2       	std	Y+33, r1	; 0x21
			buttonStringPatterns[0][5] = 0b0001110;
    113a:	3c a3       	std	Y+36, r19	; 0x24
    113c:	2b a3       	std	Y+35, r18	; 0x23

			buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
    113e:	1e a2       	std	Y+38, r1	; 0x26
    1140:	1d a2       	std	Y+37, r1	; 0x25
			buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
    1142:	38 a7       	std	Y+40, r19	; 0x28
    1144:	2f a3       	std	Y+39, r18	; 0x27
			buttonStringPatterns[1][2] = 0b0001110;
    1146:	3a a7       	std	Y+42, r19	; 0x2a
    1148:	29 a7       	std	Y+41, r18	; 0x29
			buttonStringPatterns[1][3] = 0b0000000;
    114a:	1c a6       	std	Y+44, r1	; 0x2c
    114c:	1b a6       	std	Y+43, r1	; 0x2b
			buttonStringPatterns[1][4] = 0b0001110;
    114e:	3e a7       	std	Y+46, r19	; 0x2e
    1150:	2d a7       	std	Y+45, r18	; 0x2d
			buttonStringPatterns[1][5] = 0b0000000;
    1152:	18 aa       	std	Y+48, r1	; 0x30
    1154:	1f a6       	std	Y+47, r1	; 0x2f

			buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
    1156:	1a aa       	std	Y+50, r1	; 0x32
    1158:	19 aa       	std	Y+49, r1	; 0x31
			buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c ab       	std	Y+52, r25	; 0x34
    1160:	8b ab       	std	Y+51, r24	; 0x33
			buttonStringPatterns[2][2] = 0b0000110;
    1162:	9e ab       	std	Y+54, r25	; 0x36
    1164:	8d ab       	std	Y+53, r24	; 0x35
			buttonStringPatterns[2][3] = 0b0000110;
    1166:	98 af       	std	Y+56, r25	; 0x38
    1168:	8f ab       	std	Y+55, r24	; 0x37
			buttonStringPatterns[2][4] = 0b0000000;
    116a:	1a ae       	std	Y+58, r1	; 0x3a
    116c:	19 ae       	std	Y+57, r1	; 0x39
			buttonStringPatterns[2][5] = 0b0000000;
    116e:	1c ae       	std	Y+60, r1	; 0x3c
    1170:	1b ae       	std	Y+59, r1	; 0x3b
									  
			buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    1172:	1e ae       	std	Y+62, r1	; 0x3e
    1174:	1d ae       	std	Y+61, r1	; 0x3d
			buttonStringPatterns[3][1] = 0b0000000; // This an A chord
    1176:	21 96       	adiw	r28, 0x01	; 1
    1178:	1f ae       	std	Y+63, r1	; 0x3f
    117a:	1e ae       	std	Y+62, r1	; 0x3e
    117c:	21 97       	sbiw	r28, 0x01	; 1
			buttonStringPatterns[3][2] = 0b0000110;
    117e:	23 96       	adiw	r28, 0x03	; 3
    1180:	9f af       	std	Y+63, r25	; 0x3f
    1182:	8e af       	std	Y+62, r24	; 0x3e
    1184:	23 97       	sbiw	r28, 0x03	; 3
			buttonStringPatterns[3][3] = 0b0000110;
    1186:	25 96       	adiw	r28, 0x05	; 5
    1188:	9f af       	std	Y+63, r25	; 0x3f
    118a:	8e af       	std	Y+62, r24	; 0x3e
    118c:	25 97       	sbiw	r28, 0x05	; 5
			buttonStringPatterns[3][4] = 0b0000110;
    118e:	27 96       	adiw	r28, 0x07	; 7
    1190:	9f af       	std	Y+63, r25	; 0x3f
    1192:	8e af       	std	Y+62, r24	; 0x3e
    1194:	27 97       	sbiw	r28, 0x07	; 7
			buttonStringPatterns[3][5] = 0b0000000;
    1196:	29 96       	adiw	r28, 0x09	; 9
    1198:	1f ae       	std	Y+63, r1	; 0x3f
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	29 97       	sbiw	r28, 0x09	; 9

			buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
    119e:	2b 96       	adiw	r28, 0x0b	; 11
    11a0:	1f ae       	std	Y+63, r1	; 0x3f
    11a2:	1e ae       	std	Y+62, r1	; 0x3e
    11a4:	2b 97       	sbiw	r28, 0x0b	; 11
			buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
    11a6:	2d 96       	adiw	r28, 0x0d	; 13
    11a8:	1f ae       	std	Y+63, r1	; 0x3f
    11aa:	1e ae       	std	Y+62, r1	; 0x3e
    11ac:	2d 97       	sbiw	r28, 0x0d	; 13
			buttonStringPatterns[4][2] = 0b0000000;
    11ae:	2f 96       	adiw	r28, 0x0f	; 15
    11b0:	1f ae       	std	Y+63, r1	; 0x3f
    11b2:	1e ae       	std	Y+62, r1	; 0x3e
    11b4:	2f 97       	sbiw	r28, 0x0f	; 15
			buttonStringPatterns[4][3] = 0b0001110;
    11b6:	61 96       	adiw	r28, 0x11	; 17
    11b8:	3f af       	std	Y+63, r19	; 0x3f
    11ba:	2e af       	std	Y+62, r18	; 0x3e
    11bc:	61 97       	sbiw	r28, 0x11	; 17
			buttonStringPatterns[4][4] = 0b0001110;
    11be:	63 96       	adiw	r28, 0x13	; 19
    11c0:	3f af       	std	Y+63, r19	; 0x3f
    11c2:	2e af       	std	Y+62, r18	; 0x3e
    11c4:	63 97       	sbiw	r28, 0x13	; 19
			buttonStringPatterns[4][5] = 0b0001110;
    11c6:	65 96       	adiw	r28, 0x15	; 21
    11c8:	3f af       	std	Y+63, r19	; 0x3f
    11ca:	2e af       	std	Y+62, r18	; 0x3e
    11cc:	65 97       	sbiw	r28, 0x15	; 21
    11ce:	04 e0       	ldi	r16, 0x04	; 4
    11d0:	70 2e       	mov	r7, r16
			resetStringPatterns(stringState, buttonStringPatterns, &controllerMode);
			

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			if (!(controllerMode % 2))
    11d2:	70 fe       	sbrs	r7, 0
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <main+0x604>
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	99 24       	eor	r9, r9
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	cc 24       	eor	r12, r12
    11de:	00 e0       	ldi	r16, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	dd 24       	eor	r13, r13
    11e4:	53 c2       	rjmp	.+1190   	; 0x168c <main+0xaaa>
												int buttonStringPatterns[][6], char* controllerMode)
{
	// Give us a place to store our data
//dataForController processedData = newDataForController();

	if (*controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	79 16       	cp	r7, r25
    11ea:	09 f0       	breq	.+2      	; 0x11ee <main+0x60c>
    11ec:	1a c1       	rjmp	.+564    	; 0x1422 <main+0x840>
    11ee:	66 96       	adiw	r28, 0x16	; 22
    11f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    11f2:	66 97       	sbiw	r28, 0x16	; 22
    11f4:	67 96       	adiw	r28, 0x17	; 23
    11f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    11f8:	67 97       	sbiw	r28, 0x17	; 23
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	99 24       	eor	r9, r9
    1202:	70 e0       	ldi	r23, 0x00	; 0
	{
		for (int guitarString = 0; guitarString < 6; guitarString++)
		 {

			if (stringState[guitarString] & 1)
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	80 ff       	sbrs	r24, 0
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <main+0x642>
			{
				stringState[guitarString] &= ~1; //Set the last bit to zero
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
				if (guitarString < 3)
    1212:	23 30       	cpi	r18, 0x03	; 3
    1214:	31 05       	cpc	r19, r1
    1216:	24 f0       	brlt	.+8      	; 0x1220 <main+0x63e>
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	99 24       	eor	r9, r9
    121c:	93 94       	inc	r9
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <main+0x642>
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	99 24       	eor	r9, r9
	// Give us a place to store our data
//dataForController processedData = newDataForController();

	if (*controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
	{
		for (int guitarString = 0; guitarString < 6; guitarString++)
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	32 96       	adiw	r30, 0x02	; 2
    122a:	26 30       	cpi	r18, 0x06	; 6
    122c:	31 05       	cpc	r19, r1
    122e:	51 f7       	brne	.-44     	; 0x1204 <main+0x622>
				}
			}
		}
	
		// green
		if(stringState[0] == buttonStringPatterns[0][0] &&
    1230:	49 81       	ldd	r20, Y+1	; 0x01
    1232:	5a 81       	ldd	r21, Y+2	; 0x02
    1234:	89 8d       	ldd	r24, Y+25	; 0x19
    1236:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1238:	48 17       	cp	r20, r24
    123a:	59 07       	cpc	r21, r25
    123c:	31 f5       	brne	.+76     	; 0x128a <main+0x6a8>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1246:	28 17       	cp	r18, r24
    1248:	39 07       	cpc	r19, r25
    124a:	f9 f4       	brne	.+62     	; 0x128a <main+0x6a8>
    124c:	2d 81       	ldd	r18, Y+5	; 0x05
    124e:	3e 81       	ldd	r19, Y+6	; 0x06
    1250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1252:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1254:	28 17       	cp	r18, r24
    1256:	39 07       	cpc	r19, r25
    1258:	c1 f4       	brne	.+48     	; 0x128a <main+0x6a8>
    125a:	2f 81       	ldd	r18, Y+7	; 0x07
    125c:	38 85       	ldd	r19, Y+8	; 0x08
    125e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1260:	98 a1       	ldd	r25, Y+32	; 0x20
    1262:	28 17       	cp	r18, r24
    1264:	39 07       	cpc	r19, r25
    1266:	89 f4       	brne	.+34     	; 0x128a <main+0x6a8>
    1268:	29 85       	ldd	r18, Y+9	; 0x09
    126a:	3a 85       	ldd	r19, Y+10	; 0x0a
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	9a a1       	ldd	r25, Y+34	; 0x22
    1270:	28 17       	cp	r18, r24
    1272:	39 07       	cpc	r19, r25
    1274:	51 f4       	brne	.+20     	; 0x128a <main+0x6a8>
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	2b 85       	ldd	r18, Y+11	; 0x0b
    127a:	3c 85       	ldd	r19, Y+12	; 0x0c
    127c:	8b a1       	ldd	r24, Y+35	; 0x23
    127e:	9c a1       	ldd	r25, Y+36	; 0x24
    1280:	28 17       	cp	r18, r24
    1282:	39 07       	cpc	r19, r25
    1284:	19 f4       	brne	.+6      	; 0x128c <main+0x6aa>
    1286:	11 e0       	ldi	r17, 0x01	; 1
    1288:	01 c0       	rjmp	.+2      	; 0x128c <main+0x6aa>
    128a:	10 e0       	ldi	r17, 0x00	; 0
			{
				data->greenOn = 1;
	  		}

		// red
		if(stringState[0] == buttonStringPatterns[1][0] &&
    128c:	8d a1       	ldd	r24, Y+37	; 0x25
    128e:	9e a1       	ldd	r25, Y+38	; 0x26
    1290:	48 17       	cp	r20, r24
    1292:	59 07       	cpc	r21, r25
    1294:	39 f5       	brne	.+78     	; 0x12e4 <main+0x702>
    1296:	2b 81       	ldd	r18, Y+3	; 0x03
    1298:	3c 81       	ldd	r19, Y+4	; 0x04
    129a:	8f a1       	ldd	r24, Y+39	; 0x27
    129c:	98 a5       	ldd	r25, Y+40	; 0x28
    129e:	28 17       	cp	r18, r24
    12a0:	39 07       	cpc	r19, r25
    12a2:	01 f5       	brne	.+64     	; 0x12e4 <main+0x702>
    12a4:	2d 81       	ldd	r18, Y+5	; 0x05
    12a6:	3e 81       	ldd	r19, Y+6	; 0x06
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	c9 f4       	brne	.+50     	; 0x12e4 <main+0x702>
    12b2:	2f 81       	ldd	r18, Y+7	; 0x07
    12b4:	38 85       	ldd	r19, Y+8	; 0x08
    12b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	91 f4       	brne	.+36     	; 0x12e4 <main+0x702>
    12c0:	29 85       	ldd	r18, Y+9	; 0x09
    12c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	59 f4       	brne	.+22     	; 0x12e4 <main+0x702>
    12ce:	cc 24       	eor	r12, r12
    12d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    12d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    12d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d6:	98 a9       	ldd	r25, Y+48	; 0x30
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <main+0x704>
    12de:	cc 24       	eor	r12, r12
    12e0:	c3 94       	inc	r12
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <main+0x704>
    12e4:	cc 24       	eor	r12, r12
			{
				data->redOn = 1;
	  		}
	
		// yellow
		if(stringState[0] == buttonStringPatterns[2][0] &&
    12e6:	89 a9       	ldd	r24, Y+49	; 0x31
    12e8:	9a a9       	ldd	r25, Y+50	; 0x32
    12ea:	48 17       	cp	r20, r24
    12ec:	59 07       	cpc	r21, r25
    12ee:	31 f5       	brne	.+76     	; 0x133c <main+0x75a>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	8b a9       	ldd	r24, Y+51	; 0x33
    12f6:	9c a9       	ldd	r25, Y+52	; 0x34
    12f8:	28 17       	cp	r18, r24
    12fa:	39 07       	cpc	r19, r25
    12fc:	f9 f4       	brne	.+62     	; 0x133c <main+0x75a>
    12fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1300:	3e 81       	ldd	r19, Y+6	; 0x06
    1302:	8d a9       	ldd	r24, Y+53	; 0x35
    1304:	9e a9       	ldd	r25, Y+54	; 0x36
    1306:	28 17       	cp	r18, r24
    1308:	39 07       	cpc	r19, r25
    130a:	c1 f4       	brne	.+48     	; 0x133c <main+0x75a>
    130c:	2f 81       	ldd	r18, Y+7	; 0x07
    130e:	38 85       	ldd	r19, Y+8	; 0x08
    1310:	8f a9       	ldd	r24, Y+55	; 0x37
    1312:	98 ad       	ldd	r25, Y+56	; 0x38
    1314:	28 17       	cp	r18, r24
    1316:	39 07       	cpc	r19, r25
    1318:	89 f4       	brne	.+34     	; 0x133c <main+0x75a>
    131a:	29 85       	ldd	r18, Y+9	; 0x09
    131c:	3a 85       	ldd	r19, Y+10	; 0x0a
    131e:	89 ad       	ldd	r24, Y+57	; 0x39
    1320:	9a ad       	ldd	r25, Y+58	; 0x3a
    1322:	28 17       	cp	r18, r24
    1324:	39 07       	cpc	r19, r25
    1326:	51 f4       	brne	.+20     	; 0x133c <main+0x75a>
    1328:	00 e0       	ldi	r16, 0x00	; 0
    132a:	2b 85       	ldd	r18, Y+11	; 0x0b
    132c:	3c 85       	ldd	r19, Y+12	; 0x0c
    132e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1330:	9c ad       	ldd	r25, Y+60	; 0x3c
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	19 f4       	brne	.+6      	; 0x133e <main+0x75c>
    1338:	01 e0       	ldi	r16, 0x01	; 1
    133a:	01 c0       	rjmp	.+2      	; 0x133e <main+0x75c>
    133c:	00 e0       	ldi	r16, 0x00	; 0
			{
				 data->yellowOn = 1;
	  		}

		// blue
		if(stringState[0] == buttonStringPatterns[3][0] &&
    133e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1340:	9e ad       	ldd	r25, Y+62	; 0x3e
    1342:	48 17       	cp	r20, r24
    1344:	59 07       	cpc	r21, r25
    1346:	81 f5       	brne	.+96     	; 0x13a8 <main+0x7c6>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	21 96       	adiw	r28, 0x01	; 1
    134e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1350:	9f ad       	ldd	r25, Y+63	; 0x3f
    1352:	21 97       	sbiw	r28, 0x01	; 1
    1354:	28 17       	cp	r18, r24
    1356:	39 07       	cpc	r19, r25
    1358:	39 f5       	brne	.+78     	; 0x13a8 <main+0x7c6>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	23 96       	adiw	r28, 0x03	; 3
    1360:	8e ad       	ldd	r24, Y+62	; 0x3e
    1362:	9f ad       	ldd	r25, Y+63	; 0x3f
    1364:	23 97       	sbiw	r28, 0x03	; 3
    1366:	28 17       	cp	r18, r24
    1368:	39 07       	cpc	r19, r25
    136a:	f1 f4       	brne	.+60     	; 0x13a8 <main+0x7c6>
    136c:	2f 81       	ldd	r18, Y+7	; 0x07
    136e:	38 85       	ldd	r19, Y+8	; 0x08
    1370:	25 96       	adiw	r28, 0x05	; 5
    1372:	8e ad       	ldd	r24, Y+62	; 0x3e
    1374:	9f ad       	ldd	r25, Y+63	; 0x3f
    1376:	25 97       	sbiw	r28, 0x05	; 5
    1378:	28 17       	cp	r18, r24
    137a:	39 07       	cpc	r19, r25
    137c:	a9 f4       	brne	.+42     	; 0x13a8 <main+0x7c6>
    137e:	29 85       	ldd	r18, Y+9	; 0x09
    1380:	3a 85       	ldd	r19, Y+10	; 0x0a
    1382:	27 96       	adiw	r28, 0x07	; 7
    1384:	8e ad       	ldd	r24, Y+62	; 0x3e
    1386:	9f ad       	ldd	r25, Y+63	; 0x3f
    1388:	27 97       	sbiw	r28, 0x07	; 7
    138a:	28 17       	cp	r18, r24
    138c:	39 07       	cpc	r19, r25
    138e:	61 f4       	brne	.+24     	; 0x13a8 <main+0x7c6>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	2b 85       	ldd	r18, Y+11	; 0x0b
    1394:	3c 85       	ldd	r19, Y+12	; 0x0c
    1396:	29 96       	adiw	r28, 0x09	; 9
    1398:	8e ad       	ldd	r24, Y+62	; 0x3e
    139a:	9f ad       	ldd	r25, Y+63	; 0x3f
    139c:	29 97       	sbiw	r28, 0x09	; 9
    139e:	28 17       	cp	r18, r24
    13a0:	39 07       	cpc	r19, r25
    13a2:	19 f4       	brne	.+6      	; 0x13aa <main+0x7c8>
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <main+0x7c8>
    13a8:	60 e0       	ldi	r22, 0x00	; 0
			{
				 data->blueOn = 1;
	  		}

		// orange
		if(stringState[0] == buttonStringPatterns[4][0] &&
    13aa:	2b 96       	adiw	r28, 0x0b	; 11
    13ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    13ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    13b0:	2b 97       	sbiw	r28, 0x0b	; 11
    13b2:	48 17       	cp	r20, r24
    13b4:	59 07       	cpc	r21, r25
    13b6:	09 f0       	breq	.+2      	; 0x13ba <main+0x7d8>
    13b8:	d1 c1       	rjmp	.+930    	; 0x175c <main+0xb7a>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	2d 96       	adiw	r28, 0x0d	; 13
    13c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    13c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    13c4:	2d 97       	sbiw	r28, 0x0d	; 13
    13c6:	28 17       	cp	r18, r24
    13c8:	39 07       	cpc	r19, r25
    13ca:	09 f0       	breq	.+2      	; 0x13ce <main+0x7ec>
    13cc:	c7 c1       	rjmp	.+910    	; 0x175c <main+0xb7a>
    13ce:	2d 81       	ldd	r18, Y+5	; 0x05
    13d0:	3e 81       	ldd	r19, Y+6	; 0x06
    13d2:	2f 96       	adiw	r28, 0x0f	; 15
    13d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    13d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    13d8:	2f 97       	sbiw	r28, 0x0f	; 15
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	09 f0       	breq	.+2      	; 0x13e2 <main+0x800>
    13e0:	bd c1       	rjmp	.+890    	; 0x175c <main+0xb7a>
    13e2:	2f 81       	ldd	r18, Y+7	; 0x07
    13e4:	38 85       	ldd	r19, Y+8	; 0x08
    13e6:	61 96       	adiw	r28, 0x11	; 17
    13e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    13ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <main+0x814>
    13f4:	b3 c1       	rjmp	.+870    	; 0x175c <main+0xb7a>
    13f6:	29 85       	ldd	r18, Y+9	; 0x09
    13f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13fa:	63 96       	adiw	r28, 0x13	; 19
    13fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    13fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1400:	63 97       	sbiw	r28, 0x13	; 19
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x828>
    1408:	a9 c1       	rjmp	.+850    	; 0x175c <main+0xb7a>
    140a:	dd 24       	eor	r13, r13
    140c:	2b 85       	ldd	r18, Y+11	; 0x0b
    140e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1410:	65 96       	adiw	r28, 0x15	; 21
    1412:	8e ad       	ldd	r24, Y+62	; 0x3e
    1414:	9f ad       	ldd	r25, Y+63	; 0x3f
    1416:	65 97       	sbiw	r28, 0x15	; 21
    1418:	28 17       	cp	r18, r24
    141a:	39 07       	cpc	r19, r25
    141c:	09 f0       	breq	.+2      	; 0x1420 <main+0x83e>
    141e:	48 c1       	rjmp	.+656    	; 0x16b0 <main+0xace>
    1420:	45 c1       	rjmp	.+650    	; 0x16ac <main+0xaca>
			{
				 data->orangeOn = 1;
	  		}
	}

	else if (*controllerMode == NOTES) // We're playing with notes
    1422:	a2 e0       	ldi	r26, 0x02	; 2
    1424:	7a 16       	cp	r7, r26
    1426:	09 f0       	breq	.+2      	; 0x142a <main+0x848>
    1428:	99 c0       	rjmp	.+306    	; 0x155c <main+0x97a>
    142a:	66 96       	adiw	r28, 0x16	; 22
    142c:	8f ad       	ldd	r24, Y+63	; 0x3f
    142e:	66 97       	sbiw	r28, 0x16	; 22
    1430:	67 96       	adiw	r28, 0x17	; 23
    1432:	9f ad       	ldd	r25, Y+63	; 0x3f
    1434:	67 97       	sbiw	r28, 0x17	; 23
    1436:	7c 01       	movw	r14, r24
    1438:	fe 01       	movw	r30, r28
    143a:	79 96       	adiw	r30, 0x19	; 25
    143c:	1d e3       	ldi	r17, 0x3D	; 61
    143e:	81 2e       	mov	r8, r17
    1440:	91 2c       	mov	r9, r1
    1442:	8c 0e       	add	r8, r28
    1444:	9d 1e       	adc	r9, r29
    1446:	dd 24       	eor	r13, r13
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	cc 24       	eor	r12, r12
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	4f ef       	ldi	r20, 0xFF	; 255
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
		char buttonPressed = 0;
		char strumPressed  = 0;

		for (int i = 0; i < 6; i++)
		{
			if (stringState[i] != 0) // Only look at strings that are being touched or strummed
    1456:	d7 01       	movw	r26, r14
    1458:	2d 91       	ld	r18, X+
    145a:	3c 91       	ld	r19, X
    145c:	21 15       	cp	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <main+0x882>
    1462:	63 c0       	rjmp	.+198    	; 0x152a <main+0x948>
			{
				// Check for open strings being strummed first
				if (stringState[i] == 1) // This means we're strumming an open string
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	31 05       	cpc	r19, r1
    1468:	29 f5       	brne	.+74     	; 0x14b4 <main+0x8d2>
				{
					if (stringState[i] == buttonStringPatterns[0][i])
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	11 f4       	brne	.+4      	; 0x1476 <main+0x894>
    1472:	45 2f       	mov	r20, r21
    1474:	11 e0       	ldi	r17, 0x01	; 1
					{
						strumOn = i;
						data->greenOn =  1;	
					}
					if (stringState[i] == buttonStringPatterns[1][i])
    1476:	84 85       	ldd	r24, Z+12	; 0x0c
    1478:	95 85       	ldd	r25, Z+13	; 0x0d
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	19 f4       	brne	.+6      	; 0x1484 <main+0x8a2>
    147e:	45 2f       	mov	r20, r21
    1480:	cc 24       	eor	r12, r12
    1482:	c3 94       	inc	r12
					{
						strumOn = i;
						data->redOn =  1;	
					}
					if (stringState[i] == buttonStringPatterns[2][i])
    1484:	80 8d       	ldd	r24, Z+24	; 0x18
    1486:	91 8d       	ldd	r25, Z+25	; 0x19
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	11 f4       	brne	.+4      	; 0x1490 <main+0x8ae>
    148c:	45 2f       	mov	r20, r21
    148e:	01 e0       	ldi	r16, 0x01	; 1
					{
						strumOn = i;
						data->yellowOn =  1;
					}				
					if (stringState[i] == buttonStringPatterns[3][i])
    1490:	d4 01       	movw	r26, r8
    1492:	8d 91       	ld	r24, X+
    1494:	9c 91       	ld	r25, X
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	11 f4       	brne	.+4      	; 0x149e <main+0x8bc>
    149a:	45 2f       	mov	r20, r21
    149c:	61 e0       	ldi	r22, 0x01	; 1
					{
						strumOn = i;
						data->blueOn =  1;
					}				
					if (stringState[i] == buttonStringPatterns[4][i])
    149e:	d4 01       	movw	r26, r8
    14a0:	1c 96       	adiw	r26, 0x0c	; 12
    14a2:	8d 91       	ld	r24, X+
    14a4:	9c 91       	ld	r25, X
    14a6:	1d 97       	sbiw	r26, 0x0d	; 13
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	31 f4       	brne	.+12     	; 0x14b8 <main+0x8d6>
    14ac:	45 2f       	mov	r20, r21
    14ae:	dd 24       	eor	r13, r13
    14b0:	d3 94       	inc	r13
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <main+0x8d6>
				}
				 // Now we have checked for strummed notes, we need to check for pressed notes
				 //  so that we can display them for reference as well as use them when strummed
				else
					// First see if we're strumming or not
					strumPressed = stringState[i] & 1;
    14b4:	72 2f       	mov	r23, r18
    14b6:	71 70       	andi	r23, 0x01	; 1

					// Now ensure the strum bit is zero
					stringState[i] &= (~1);
    14b8:	2e 7f       	andi	r18, 0xFE	; 254
    14ba:	d7 01       	movw	r26, r14
    14bc:	2d 93       	st	X+, r18
    14be:	3c 93       	st	X, r19

					// Take care of displaying closed notes
					if (stringState[i] == buttonStringPatterns[0][i]&& 
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <main+0x8f0>
    14ca:	21 15       	cp	r18, r1
    14cc:	31 05       	cpc	r19, r1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <main+0x8f0>
    14d0:	11 e0       	ldi	r17, 0x01	; 1
											buttonStringPatterns[0][i] != 0)
					{
						data->greenOn =  1;	
						buttonPressed = 1;
					}
					if (stringState[i] == buttonStringPatterns[1][i] && 
    14d2:	84 85       	ldd	r24, Z+12	; 0x0c
    14d4:	95 85       	ldd	r25, Z+13	; 0x0d
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	29 f4       	brne	.+10     	; 0x14e6 <main+0x904>
    14dc:	21 15       	cp	r18, r1
    14de:	31 05       	cpc	r19, r1
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <main+0x904>
    14e2:	cc 24       	eor	r12, r12
    14e4:	c3 94       	inc	r12
											buttonStringPatterns[1][i] != 0)
					{
						data->redOn =  1;	
						buttonPressed = 1;
					}
					if (stringState[i] == buttonStringPatterns[2][i] && 
    14e6:	80 8d       	ldd	r24, Z+24	; 0x18
    14e8:	91 8d       	ldd	r25, Z+25	; 0x19
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <main+0x916>
    14f0:	21 15       	cp	r18, r1
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <main+0x916>
    14f6:	01 e0       	ldi	r16, 0x01	; 1
											buttonStringPatterns[2][i] != 0)
						{
						data->yellowOn =  1;
						buttonPressed = 1;
					}
					if (stringState[i] == buttonStringPatterns[3][i] && 
    14f8:	d4 01       	movw	r26, r8
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	28 17       	cp	r18, r24
    1500:	39 07       	cpc	r19, r25
    1502:	21 f4       	brne	.+8      	; 0x150c <main+0x92a>
    1504:	21 15       	cp	r18, r1
    1506:	31 05       	cpc	r19, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <main+0x92a>
    150a:	61 e0       	ldi	r22, 0x01	; 1
											buttonStringPatterns[3][i] != 0)
					{
						data->blueOn =  1;
						buttonPressed = 1;
						}				
					if (stringState[i] == buttonStringPatterns[4][i] && 
    150c:	d4 01       	movw	r26, r8
    150e:	1c 96       	adiw	r26, 0x0c	; 12
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	1d 97       	sbiw	r26, 0x0d	; 13
    1516:	28 17       	cp	r18, r24
    1518:	39 07       	cpc	r19, r25
    151a:	21 f4       	brne	.+8      	; 0x1524 <main+0x942>
    151c:	23 2b       	or	r18, r19
    151e:	11 f0       	breq	.+4      	; 0x1524 <main+0x942>
    1520:	dd 24       	eor	r13, r13
    1522:	d3 94       	inc	r13
					{
						data->orangeOn =  1;
						buttonPressed = 1;									
					}
						// Now deal with strumming
					if ((buttonPressed = 1) && (strumPressed == 1))
    1524:	71 30       	cpi	r23, 0x01	; 1
    1526:	09 f4       	brne	.+2      	; 0x152a <main+0x948>
    1528:	45 2f       	mov	r20, r21
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	e8 0e       	add	r14, r24
    1530:	f9 1e       	adc	r15, r25
    1532:	5f 5f       	subi	r21, 0xFF	; 255
    1534:	32 96       	adiw	r30, 0x02	; 2
    1536:	88 0e       	add	r8, r24
    1538:	99 1e       	adc	r9, r25
		data->downOn = 0;
		char strumOn = -1; // This holds which string the pick is strumming
		char buttonPressed = 0;
		char strumPressed  = 0;

		for (int i = 0; i < 6; i++)
    153a:	56 30       	cpi	r21, 0x06	; 6
    153c:	09 f0       	breq	.+2      	; 0x1540 <main+0x95e>
    153e:	8b cf       	rjmp	.-234    	; 0x1456 <main+0x874>
				}
		}

		//Now set the strum buttons properly

		if ((strumOn >= 0) && (strumOn < 3))
    1540:	43 30       	cpi	r20, 0x03	; 3
    1542:	10 f4       	brcc	.+4      	; 0x1548 <main+0x966>
    1544:	71 e0       	ldi	r23, 0x01	; 1
    1546:	08 c0       	rjmp	.+16     	; 0x1558 <main+0x976>
		{
			data->downOn = 1;
		}
		else if ((strumOn >= 3) && (strumOn < 6 ) && (data->downOn != 1))
    1548:	43 50       	subi	r20, 0x03	; 3
    154a:	43 30       	cpi	r20, 0x03	; 3
    154c:	20 f4       	brcc	.+8      	; 0x1556 <main+0x974>
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	99 24       	eor	r9, r9
    1552:	93 94       	inc	r9
    1554:	ad c0       	rjmp	.+346    	; 0x16b0 <main+0xace>
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	99 24       	eor	r9, r9
    155a:	aa c0       	rjmp	.+340    	; 0x16b0 <main+0xace>
    155c:	66 96       	adiw	r28, 0x16	; 22
    155e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1560:	66 97       	sbiw	r28, 0x16	; 22
    1562:	67 96       	adiw	r28, 0x17	; 23
    1564:	9f ad       	ldd	r25, Y+63	; 0x3f
    1566:	67 97       	sbiw	r28, 0x17	; 23
    1568:	7c 01       	movw	r14, r24
    156a:	e8 e5       	ldi	r30, 0x58	; 88
    156c:	f2 e0       	ldi	r31, 0x02	; 2
    156e:	aa e4       	ldi	r26, 0x4A	; 74
    1570:	b2 e0       	ldi	r27, 0x02	; 2
    1572:	69 96       	adiw	r28, 0x19	; 25
    1574:	bf af       	std	Y+63, r27	; 0x3f
    1576:	ae af       	std	Y+62, r26	; 0x3e
    1578:	69 97       	sbiw	r28, 0x19	; 25
    157a:	dd 24       	eor	r13, r13
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	cc 24       	eor	r12, r12
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	99 24       	eor	r9, r9
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
			{
			    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
			    {        
					// so we start the counter and say we did touch it.
			      greenTimers[guitarString] = TCNT1;
			      triedGreen[guitarString] = 1;
    158c:	b1 e0       	ldi	r27, 0x01	; 1
    158e:	4b 2e       	mov	r4, r27
    1590:	51 2c       	mov	r5, r1
		 */

		for(int guitarString = 0; guitarString < 6; guitarString++)
		{
			// find the proper value by masking the stringState variable for each fret
			char orange = (stringState[guitarString] & (1<<5));
    1592:	d7 01       	movw	r26, r14
    1594:	6c 90       	ld	r6, X
			char blue   = (stringState[guitarString] & (1<<4));
    1596:	96 2d       	mov	r25, r6
    1598:	90 71       	andi	r25, 0x10	; 16
			char yellow = (stringState[guitarString] & (1<<3));
    159a:	26 2d       	mov	r18, r6
    159c:	28 70       	andi	r18, 0x08	; 8
			char red    = (stringState[guitarString] & (1<<2));
    159e:	36 2d       	mov	r19, r6
    15a0:	34 70       	andi	r19, 0x04	; 4
			char green  = (stringState[guitarString] & (1<<1));
    15a2:	a2 e0       	ldi	r26, 0x02	; 2
    15a4:	8a 2e       	mov	r8, r26
    15a6:	86 20       	and	r8, r6

			if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    15a8:	65 fe       	sbrs	r6, 5
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <main+0x9dc>
    15ac:	99 23       	and	r25, r25
    15ae:	89 f0       	breq	.+34     	; 0x15d2 <main+0x9f0>
    15b0:	dd 20       	and	r13, r13
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <main+0x9e0>
			{    
			    data->orangeOn = 1;
			    triedGreen[guitarString] = 0;
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	10 82       	st	Z, r1
    15b8:	dd 24       	eor	r13, r13
    15ba:	d3 94       	inc	r13
    15bc:	48 c0       	rjmp	.+144    	; 0x164e <main+0xa6c>
			}
			else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    15be:	99 23       	and	r25, r25
    15c0:	41 f0       	breq	.+16     	; 0x15d2 <main+0x9f0>
    15c2:	22 23       	and	r18, r18
    15c4:	81 f0       	breq	.+32     	; 0x15e6 <main+0xa04>
    15c6:	66 23       	and	r22, r22
    15c8:	31 f4       	brne	.+12     	; 0x15d6 <main+0x9f4>
			{
			    data->blueOn = 1;
			    triedGreen[guitarString] = 0;
    15ca:	11 82       	std	Z+1, r1	; 0x01
    15cc:	10 82       	st	Z, r1
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	3e c0       	rjmp	.+124    	; 0x164e <main+0xa6c>
			}
			else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    15d2:	22 23       	and	r18, r18
    15d4:	41 f0       	breq	.+16     	; 0x15e6 <main+0xa04>
    15d6:	33 23       	and	r19, r19
    15d8:	89 f0       	breq	.+34     	; 0x15fc <main+0xa1a>
    15da:	00 23       	and	r16, r16
    15dc:	31 f4       	brne	.+12     	; 0x15ea <main+0xa08>
			{
			    data->yellowOn = 1;
			    triedGreen[guitarString] = 0;
    15de:	11 82       	std	Z+1, r1	; 0x01
    15e0:	10 82       	st	Z, r1
    15e2:	01 e0       	ldi	r16, 0x01	; 1
    15e4:	34 c0       	rjmp	.+104    	; 0x164e <main+0xa6c>
			}
			else if ((red != 0) && (green != 0) && (data->redOn == 0))
    15e6:	33 23       	and	r19, r19
    15e8:	49 f0       	breq	.+18     	; 0x15fc <main+0xa1a>
    15ea:	88 20       	and	r8, r8
    15ec:	71 f1       	breq	.+92     	; 0x164a <main+0xa68>
    15ee:	cc 20       	and	r12, r12
    15f0:	39 f4       	brne	.+14     	; 0x1600 <main+0xa1e>
			{
			    data->redOn = 1;
			    triedGreen[guitarString] = 0;
    15f2:	11 82       	std	Z+1, r1	; 0x01
    15f4:	10 82       	st	Z, r1
    15f6:	cc 24       	eor	r12, r12
    15f8:	c3 94       	inc	r12
    15fa:	29 c0       	rjmp	.+82     	; 0x164e <main+0xa6c>
			}
			else if (green != 0)
    15fc:	88 20       	and	r8, r8
    15fe:	29 f1       	breq	.+74     	; 0x164a <main+0xa68>
			{
			    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	89 2b       	or	r24, r25
    1606:	69 f4       	brne	.+26     	; 0x1622 <main+0xa40>
			    {        
					// so we start the counter and say we did touch it.
			      greenTimers[guitarString] = TCNT1;
    1608:	80 91 84 00 	lds	r24, 0x0084
    160c:	90 91 85 00 	lds	r25, 0x0085
    1610:	69 96       	adiw	r28, 0x19	; 25
    1612:	ae ad       	ldd	r26, Y+62	; 0x3e
    1614:	bf ad       	ldd	r27, Y+63	; 0x3f
    1616:	69 97       	sbiw	r28, 0x19	; 25
    1618:	8d 93       	st	X+, r24
    161a:	9c 93       	st	X, r25
			      triedGreen[guitarString] = 1;
    161c:	51 82       	std	Z+1, r5	; 0x01
    161e:	40 82       	st	Z, r4
    1620:	16 c0       	rjmp	.+44     	; 0x164e <main+0xa6c>
			    }
			    else //triedGreen == true
			    {
					// now we test to see if the counter has counted high enough, and
					// if it has, then we do record a green hit.
					int test = TCNT1 - greenTimers[guitarString];
    1622:	80 91 84 00 	lds	r24, 0x0084
    1626:	90 91 85 00 	lds	r25, 0x0085
    162a:	69 96       	adiw	r28, 0x19	; 25
    162c:	ae ad       	ldd	r26, Y+62	; 0x3e
    162e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1630:	69 97       	sbiw	r28, 0x19	; 25
    1632:	2d 91       	ld	r18, X+
    1634:	3c 91       	ld	r19, X
			    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    1636:	11 23       	and	r17, r17
    1638:	51 f4       	brne	.+20     	; 0x164e <main+0xa6c>
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	82 1b       	sub	r24, r18
    163e:	93 0b       	sbc	r25, r19
    1640:	84 36       	cpi	r24, 0x64	; 100
    1642:	91 05       	cpc	r25, r1
    1644:	20 f0       	brcs	.+8      	; 0x164e <main+0xa6c>
    1646:	11 e0       	ldi	r17, 0x01	; 1
    1648:	02 c0       	rjmp	.+4      	; 0x164e <main+0xa6c>
			    }
			}
 
		    else  //no buttons pressed
		    {
		        triedGreen[guitarString] = 0;
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	10 82       	st	Z, r1
			the strum has a direction, so if you strum the
			top 3 strings, you strum down, and if you strum
			the bottom 3 strings, you're strumming up.
		*/
			// Check for strumming
			if (stringState[guitarString] & 1)
    164e:	60 fe       	sbrs	r6, 0
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <main+0xa82>
			{
				if (guitarString < 3)
    1652:	43 30       	cpi	r20, 0x03	; 3
    1654:	51 05       	cpc	r21, r1
    1656:	24 f0       	brlt	.+8      	; 0x1660 <main+0xa7e>
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	99 24       	eor	r9, r9
    165c:	93 94       	inc	r9
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <main+0xa82>
    1660:	71 e0       	ldi	r23, 0x01	; 1
    1662:	99 24       	eor	r9, r9
			timing on that one, so when you press just green, it starts counting
			instead of turing greenOn on, so if the red fret is turned on before it
			counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
		 */

		for(int guitarString = 0; guitarString < 6; guitarString++)
    1664:	4f 5f       	subi	r20, 0xFF	; 255
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	e8 0e       	add	r14, r24
    166e:	f9 1e       	adc	r15, r25
    1670:	32 96       	adiw	r30, 0x02	; 2
    1672:	69 96       	adiw	r28, 0x19	; 25
    1674:	ae ad       	ldd	r26, Y+62	; 0x3e
    1676:	bf ad       	ldd	r27, Y+63	; 0x3f
    1678:	69 97       	sbiw	r28, 0x19	; 25
    167a:	12 96       	adiw	r26, 0x02	; 2
    167c:	69 96       	adiw	r28, 0x19	; 25
    167e:	bf af       	std	Y+63, r27	; 0x3f
    1680:	ae af       	std	Y+62, r26	; 0x3e
    1682:	69 97       	sbiw	r28, 0x19	; 25
    1684:	46 30       	cpi	r20, 0x06	; 6
    1686:	51 05       	cpc	r21, r1
    1688:	09 f0       	breq	.+2      	; 0x168c <main+0xaaa>
    168a:	83 cf       	rjmp	.-250    	; 0x1592 <main+0x9b0>
			if (!(controllerMode % 2))
				processStringState(&data, stringState, buttonStringPatterns, &controllerMode);

			// Now, if we're in a transitional controller mode, we'll forget that data and substitue 
			// visual cue data to show that we're changing to a specific mode
			if (controllerMode == FRETS_TO_NOTES)
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	7b 16       	cp	r7, r27
    1690:	19 f4       	brne	.+6      	; 0x1698 <main+0xab6>
    1692:	11 e0       	ldi	r17, 0x01	; 1
    1694:	01 e0       	ldi	r16, 0x01	; 1
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <main+0xace>
			{
				data.greenOn = 1;
				data.yellowOn = 1;
			}
			else if (controllerMode == NOTES_TO_CHORDS)
    1698:	e3 e0       	ldi	r30, 0x03	; 3
    169a:	7e 16       	cp	r7, r30
    169c:	19 f4       	brne	.+6      	; 0x16a4 <main+0xac2>
    169e:	11 e0       	ldi	r17, 0x01	; 1
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <main+0xace>
			{
				data.greenOn = 1;
				data.blueOn = 1;
			}
			else if (controllerMode == CHORDS_TO_FRETS)
    16a4:	f5 e0       	ldi	r31, 0x05	; 5
    16a6:	7f 16       	cp	r7, r31
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <main+0xace>
    16aa:	11 e0       	ldi	r17, 0x01	; 1
    16ac:	dd 24       	eor	r13, r13
    16ae:	d3 94       	inc	r13

inline void setButtons(dataForController data, char* controllerMode)
// This function takes the 'color'On values set by readF and sets up the but_dat array accordingly
{
	//set the buttons in the button data array to all 1's
	but_dat[4] = 0b11111111;
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	80 93 68 02 	sts	0x0268, r24
	but_dat[5] &= ~(data.blueOn << BLUE_BIT);
	but_dat[5] &= ~(data.yellowOn << YELLOW_BIT);
	but_dat[5] &= ~(data.redOn << RED_BIT);
	but_dat[5] &= ~(data.greenOn << GREEN_BIT);

	but_dat[5] &= ~(data.upOn << UP_BIT);
    16b6:	d7 94       	ror	r13
    16b8:	dd 24       	eor	r13, r13
    16ba:	d7 94       	ror	r13
    16bc:	62 95       	swap	r22
    16be:	66 0f       	add	r22, r22
    16c0:	60 7e       	andi	r22, 0xE0	; 224
    16c2:	6d 29       	or	r22, r13
    16c4:	96 2a       	or	r9, r22
    16c6:	00 0f       	add	r16, r16
    16c8:	00 0f       	add	r16, r16
    16ca:	00 0f       	add	r16, r16
    16cc:	09 29       	or	r16, r9
    16ce:	c2 94       	swap	r12
    16d0:	cc 0c       	add	r12, r12
    16d2:	cc 0c       	add	r12, r12
    16d4:	e0 ec       	ldi	r30, 0xC0	; 192
    16d6:	ce 22       	and	r12, r30
    16d8:	c0 2a       	or	r12, r16
    16da:	12 95       	swap	r17
    16dc:	10 7f       	andi	r17, 0xF0	; 240
    16de:	1c 29       	or	r17, r12
    16e0:	10 95       	com	r17
    16e2:	10 93 69 02 	sts	0x0269, r17
	but_dat[4] &= ~(data.downOn << DOWN_BIT);

	int i = misc_pin; // check for plus and minus
    16e6:	86 b1       	in	r24, 0x06	; 6
    16e8:	90 e0       	ldi	r25, 0x00	; 0
	char plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing sets it low
	char minusOn = !(i & (1<<minus_pin));

	but_dat[4] &= ~(plusOn << PLUS_BIT);
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	9c 01       	movw	r18, r24
    16f0:	24 27       	eor	r18, r20
    16f2:	35 27       	eor	r19, r21
    16f4:	21 70       	andi	r18, 0x01	; 1
    16f6:	30 70       	andi	r19, 0x00	; 0
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	72 95       	swap	r23
    1702:	77 0f       	add	r23, r23
    1704:	77 0f       	add	r23, r23
    1706:	70 7c       	andi	r23, 0xC0	; 192
    1708:	72 2b       	or	r23, r18
	but_dat[4] &= ~(minusOn << MINUS_BIT);
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	84 27       	eor	r24, r20
    1710:	95 27       	eor	r25, r21
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	24 e0       	ldi	r18, 0x04	; 4
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	2a 95       	dec	r18
    171e:	e1 f7       	brne	.-8      	; 0x1718 <main+0xb36>
    1720:	78 2b       	or	r23, r24
    1722:	70 95       	com	r23
    1724:	70 93 68 02 	sts	0x0268, r23
		    setButtons(data, &controllerMode);
		}
		
    	// Finally, regardless of mode, we send that packet to the 
		// TWI transfer register, handled by the wiimote.c library
	    wm_newaction(but_dat);
    1728:	84 e6       	ldi	r24, 0x64	; 100
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <wm_newaction>
    1730:	d4 ca       	rjmp	.-2648   	; 0xcda <main+0xf8>

	} // End of while loop
    1732:	33 24       	eor	r3, r3
    1734:	aa 24       	eor	r10, r10
    1736:	bb 24       	eor	r11, r11
    1738:	80 cb       	rjmp	.-2304   	; 0xe3a <main+0x258>

inline void configSetButtons(int* buttonToAssign, char* plusLock, int buttonStringPatterns[][6], 
						int stringState[], char* controllerMode)
{
	//set the buttons in the button data array to all 1's
	but_dat[4] = 0b11111111;
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	80 93 68 02 	sts	0x0268, r24
	but_dat[5] = 0b11111111;
    1740:	80 93 69 02 	sts	0x0269, r24

	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    1744:	a1 14       	cp	r10, r1
    1746:	b1 04       	cpc	r11, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <main+0xb6a>
    174a:	97 cb       	rjmp	.-2258   	; 0xe7a <main+0x298>
    174c:	98 cb       	rjmp	.-2256   	; 0xe7e <main+0x29c>
    174e:	22 24       	eor	r2, r2
    1750:	4f cc       	rjmp	.-1890   	; 0xff0 <main+0x40e>
    1752:	aa 24       	eor	r10, r10
    1754:	bb 24       	eor	r11, r11
    1756:	22 24       	eor	r2, r2
    1758:	23 94       	inc	r2
    175a:	e6 cf       	rjmp	.-52     	; 0x1728 <main+0xb46>
    175c:	dd 24       	eor	r13, r13
    175e:	a8 cf       	rjmp	.-176    	; 0x16b0 <main+0xace>

00001760 <twi_slave_init>:
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    1760:	10 92 47 02 	sts	0x0247, r1
    1764:	10 92 46 02 	sts	0x0246, r1

        // set slave address
        TWAR = addr << 1;
    1768:	88 0f       	add	r24, r24
    176a:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    176e:	85 e4       	ldi	r24, 0x45	; 69
    1770:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    1774:	78 94       	sei
}
    1776:	08 95       	ret

00001778 <twi_clear_int>:

void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
    1778:	88 23       	and	r24, r24
    177a:	11 f0       	breq	.+4      	; 0x1780 <twi_clear_int+0x8>
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    177c:	85 ec       	ldi	r24, 0xC5	; 197
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <twi_clear_int+0xa>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1780:	85 e8       	ldi	r24, 0x85	; 133
    1782:	80 93 bc 00 	sts	0x00BC, r24
    1786:	08 95       	ret

00001788 <wm_ror8>:
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	86 1b       	sub	r24, r22
    1794:	97 0b       	sbc	r25, r23
    1796:	a9 01       	movw	r20, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <wm_ror8+0x16>
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <wm_ror8+0x12>
    17a2:	ca 01       	movw	r24, r20
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <wm_ror8+0x22>
    17a6:	35 95       	asr	r19
    17a8:	27 95       	ror	r18
    17aa:	6a 95       	dec	r22
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <wm_ror8+0x1e>
}
    17ae:	82 2b       	or	r24, r18
    17b0:	08 95       	ret

000017b2 <wm_newaction>:
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy(twi_reg, d, 6);
    17b2:	a6 e4       	ldi	r26, 0x46	; 70
    17b4:	b1 e0       	ldi	r27, 0x01	; 1
    17b6:	fc 01       	movw	r30, r24
    17b8:	86 e0       	ldi	r24, 0x06	; 6
    17ba:	01 90       	ld	r0, Z+
    17bc:	0d 92       	st	X+, r0
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <wm_newaction+0x8>
}
    17c2:	08 95       	ret

000017c4 <wm_init>:

void wm_init(unsigned char * id, unsigned char * t, unsigned char * cal_data, void (*function)(void))
{
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	18 2f       	mov	r17, r24
    17ca:	09 2f       	mov	r16, r25
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy(twi_reg, d, 6);
    17cc:	a6 e4       	ldi	r26, 0x46	; 70
    17ce:	b1 e0       	ldi	r27, 0x01	; 1
    17d0:	fb 01       	movw	r30, r22
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	01 90       	ld	r0, Z+
    17d6:	0d 92       	st	X+, r0
    17d8:	81 50       	subi	r24, 0x01	; 1
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <wm_init+0x10>
        // link user function
        // wm_sample_event = function;

        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption
    17dc:	10 92 36 02 	sts	0x0236, r1
    17e0:	81 2f       	mov	r24, r17
    17e2:	90 2f       	mov	r25, r16
    17e4:	9c 01       	movw	r18, r24
    17e6:	d9 01       	movw	r26, r18
    17e8:	2a ef       	ldi	r18, 0xFA	; 250
    17ea:	30 e0       	ldi	r19, 0x00	; 0

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
        {
                twi_reg[j] = id[i];
    17ec:	8d 91       	ld	r24, X+
    17ee:	f9 01       	movw	r30, r18
    17f0:	ea 5b       	subi	r30, 0xBA	; 186
    17f2:	fe 4f       	sbci	r31, 0xFE	; 254
    17f4:	80 83       	st	Z, r24
        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	20 30       	cpi	r18, 0x00	; 0
    17fe:	38 07       	cpc	r19, r24
    1800:	a9 f7       	brne	.-22     	; 0x17ec <wm_init+0x28>
    1802:	da 01       	movw	r26, r20
    1804:	20 e2       	ldi	r18, 0x20	; 32
    1806:	30 e0       	ldi	r19, 0x00	; 0
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
        {
                twi_reg[j] = cal_data[i];
    1808:	8d 91       	ld	r24, X+
    180a:	f9 01       	movw	r30, r18
    180c:	ea 5b       	subi	r30, 0xBA	; 186
    180e:	fe 4f       	sbci	r31, 0xFE	; 254
    1810:	80 83       	st	Z, r24
        {
                twi_reg[j] = id[i];
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
    1812:	2f 5f       	subi	r18, 0xFF	; 255
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	26 32       	cpi	r18, 0x26	; 38
    1818:	31 05       	cpc	r19, r1
    181a:	b1 f7       	brne	.-20     	; 0x1808 <wm_init+0x44>
        /*dev_detect_port &= 0xFF ^ _BV(dev_detect_pin);
        dev_detect_ddr |= _BV(dev_detect_pin);
        _delay_ms(50); // delay to simulate disconnect
		*/
        // ready twi bus, no pull-ups
        twi_port &= 0xFF ^ _BV(twi_scl_pin);
    181c:	45 98       	cbi	0x08, 5	; 8
        twi_port &= 0xFF ^ _BV(twi_sda_pin);
    181e:	44 98       	cbi	0x08, 4	; 8
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    1820:	10 92 47 02 	sts	0x0247, r1
    1824:	10 92 46 02 	sts	0x0246, r1

        // set slave address
        TWAR = addr << 1;
    1828:	84 ea       	ldi	r24, 0xA4	; 164
    182a:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    182e:	85 e4       	ldi	r24, 0x45	; 69
    1830:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    1834:	78 94       	sei
        // start twi slave, link events
        twi_slave_init(0x52);

        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret

0000183c <wm_gentabs>:
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
}

void wm_gentabs()
{
    183c:	2f 92       	push	r2
    183e:	3f 92       	push	r3
    1840:	4f 92       	push	r4
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	8f 92       	push	r8
    184a:	9f 92       	push	r9
    184c:	af 92       	push	r10
    184e:	bf 92       	push	r11
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	68 97       	sbiw	r28, 0x18	; 24
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	48 e6       	ldi	r20, 0x68	; 104
    1872:	64 2e       	mov	r6, r20
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	74 2e       	mov	r7, r20
    1878:	88 24       	eor	r8, r8
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    187a:	37 e0       	ldi	r19, 0x07	; 7
    187c:	23 2e       	mov	r2, r19
    187e:	31 2c       	mov	r3, r1
    1880:	2c 0e       	add	r2, r28
    1882:	3d 1e       	adc	r3, r29
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    1884:	28 e0       	ldi	r18, 0x08	; 8
    1886:	42 2e       	mov	r4, r18
    1888:	51 2c       	mov	r5, r1
    188a:	cb c0       	rjmp	.+406    	; 0x1a22 <wm_gentabs+0x1e6>
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
    188c:	84 91       	lpm	r24, Z+
    188e:	8d 93       	st	X+, r24
    1890:	31 96       	adiw	r30, 0x01	; 1
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    1892:	a2 15       	cp	r26, r2
    1894:	b3 05       	cpc	r27, r3
    1896:	d1 f7       	brne	.-12     	; 0x188c <wm_gentabs+0x50>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
    189c:	fc 01       	movw	r30, r24
    189e:	ea 5d       	subi	r30, 0xDA	; 218
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	e0 81       	ld	r30, Z
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	ee 56       	subi	r30, 0x6E	; 110
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	e4 91       	lpm	r30, Z+
    18ac:	ad e0       	ldi	r26, 0x0D	; 13
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ac 0f       	add	r26, r28
    18b2:	bd 1f       	adc	r27, r29
    18b4:	a8 0f       	add	r26, r24
    18b6:	b9 1f       	adc	r27, r25
    18b8:	ec 93       	st	X, r30
    18ba:	01 96       	adiw	r24, 0x01	; 1
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
    18bc:	8a 30       	cpi	r24, 0x0A	; 10
    18be:	91 05       	cpc	r25, r1
    18c0:	69 f7       	brne	.-38     	; 0x189c <wm_gentabs+0x60>
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    18c2:	aa 88       	ldd	r10, Y+18	; 0x12
    18c4:	cf 84       	ldd	r12, Y+15	; 0x0f
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    18c6:	29 81       	ldd	r18, Y+1	; 0x01
    18c8:	2a 25       	eor	r18, r10
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4c 2d       	mov	r20, r12
    18ce:	47 70       	andi	r20, 0x07	; 7
    18d0:	50 e0       	ldi	r21, 0x00	; 0
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    18d2:	9e 88       	ldd	r9, Y+22	; 0x16
    18d4:	b9 88       	ldd	r11, Y+17	; 0x11
    18d6:	c2 01       	movw	r24, r4
    18d8:	84 1b       	sub	r24, r20
    18da:	95 0b       	sbc	r25, r21
    18dc:	b9 01       	movw	r22, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <wm_gentabs+0xa8>
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	8a 95       	dec	r24
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <wm_gentabs+0xa4>
    18e8:	cb 01       	movw	r24, r22
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <wm_gentabs+0xb4>
    18ec:	35 95       	asr	r19
    18ee:	27 95       	ror	r18
    18f0:	4a 95       	dec	r20
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <wm_gentabs+0xb0>
    18f4:	82 2b       	or	r24, r18
    18f6:	89 19       	sub	r24, r9
    18f8:	8b 25       	eor	r24, r11
    18fa:	8f 83       	std	Y+7, r24	; 0x07
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    18fc:	ee 84       	ldd	r14, Y+14	; 0x0e
    18fe:	dd 84       	ldd	r13, Y+13	; 0x0d
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    1900:	2a 81       	ldd	r18, Y+2	; 0x02
    1902:	2e 25       	eor	r18, r14
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4d 2d       	mov	r20, r13
    1908:	47 70       	andi	r20, 0x07	; 7
    190a:	50 e0       	ldi	r21, 0x00	; 0
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    190c:	ac 89       	ldd	r26, Y+20	; 0x14
    190e:	c2 01       	movw	r24, r4
    1910:	84 1b       	sub	r24, r20
    1912:	95 0b       	sbc	r25, r21
    1914:	f9 01       	movw	r30, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <wm_gentabs+0xe0>
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <wm_gentabs+0xdc>
    1920:	cf 01       	movw	r24, r30
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <wm_gentabs+0xec>
    1924:	35 95       	asr	r19
    1926:	27 95       	ror	r18
    1928:	4a 95       	dec	r20
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <wm_gentabs+0xe8>
    192c:	82 2b       	or	r24, r18
    192e:	8a 19       	sub	r24, r10
    1930:	8a 27       	eor	r24, r26
    1932:	88 87       	std	Y+8, r24	; 0x08
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    1934:	eb 89       	ldd	r30, Y+19	; 0x13
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	2e 27       	eor	r18, r30
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	0d 89       	ldd	r16, Y+21	; 0x15
    193e:	07 70       	andi	r16, 0x07	; 7
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	b2 01       	movw	r22, r4
    1944:	60 1b       	sub	r22, r16
    1946:	71 0b       	sbc	r23, r17
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    1948:	c9 01       	movw	r24, r18
    194a:	06 2e       	mov	r0, r22
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <wm_gentabs+0x116>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <wm_gentabs+0x112>
    1956:	00 2e       	mov	r0, r16
    1958:	02 c0       	rjmp	.+4      	; 0x195e <wm_gentabs+0x122>
    195a:	35 95       	asr	r19
    195c:	27 95       	ror	r18
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <wm_gentabs+0x11e>
    1962:	82 2b       	or	r24, r18
    1964:	8c 19       	sub	r24, r12
    1966:	8d 25       	eor	r24, r13
    1968:	89 87       	std	Y+9, r24	; 0x09
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	2b 25       	eor	r18, r11
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a 2f       	mov	r20, r26
    1972:	47 70       	andi	r20, 0x07	; 7
    1974:	84 2f       	mov	r24, r20
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	98 8f       	std	Y+24, r25	; 0x18
    197a:	8f 8b       	std	Y+23, r24	; 0x17
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
    197c:	d8 88       	ldd	r13, Y+16	; 0x10
    197e:	c2 01       	movw	r24, r4
    1980:	4f 89       	ldd	r20, Y+23	; 0x17
    1982:	58 8d       	ldd	r21, Y+24	; 0x18
    1984:	84 1b       	sub	r24, r20
    1986:	95 0b       	sbc	r25, r21
    1988:	a9 01       	movw	r20, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <wm_gentabs+0x154>
    198c:	44 0f       	add	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	8a 95       	dec	r24
    1992:	e2 f7       	brpl	.-8      	; 0x198c <wm_gentabs+0x150>
    1994:	ca 01       	movw	r24, r20
    1996:	0f 88       	ldd	r0, Y+23	; 0x17
    1998:	02 c0       	rjmp	.+4      	; 0x199e <wm_gentabs+0x162>
    199a:	35 95       	asr	r19
    199c:	27 95       	ror	r18
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <wm_gentabs+0x15e>
    19a2:	82 2b       	or	r24, r18
    19a4:	8d 19       	sub	r24, r13
    19a6:	8c 25       	eor	r24, r12
    19a8:	8a 87       	std	Y+10, r24	; 0x0a
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	e8 26       	eor	r14, r24
    19ae:	ff 24       	eor	r15, r15
    19b0:	e7 70       	andi	r30, 0x07	; 7
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
    19b4:	c2 01       	movw	r24, r4
    19b6:	8e 1b       	sub	r24, r30
    19b8:	9f 0b       	sbc	r25, r31
    19ba:	97 01       	movw	r18, r14
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <wm_gentabs+0x186>
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <wm_gentabs+0x182>
    19c6:	c9 01       	movw	r24, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <wm_gentabs+0x192>
    19ca:	f5 94       	asr	r15
    19cc:	e7 94       	ror	r14
    19ce:	ea 95       	dec	r30
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <wm_gentabs+0x18e>
    19d2:	8e 29       	or	r24, r14
    19d4:	8d 19       	sub	r24, r13
    19d6:	8b 25       	eor	r24, r11
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	a8 27       	eor	r26, r24
    19de:	b0 e0       	ldi	r27, 0x00	; 0
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
                tkey[5] = ((wm_ror8((ans[5] ^ t0[7]), (t0[8] % 8)) - t0[5]) ^ t0[9]);
    19e0:	ad 01       	movw	r20, r26
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <wm_gentabs+0x1ac>
    19e4:	44 0f       	add	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	6a 95       	dec	r22
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <wm_gentabs+0x1a8>
    19ec:	ba 01       	movw	r22, r20
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <wm_gentabs+0x1b8>
    19f0:	b5 95       	asr	r27
    19f2:	a7 95       	ror	r26
    19f4:	0a 95       	dec	r16
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <wm_gentabs+0x1b4>
    19f8:	6a 2b       	or	r22, r26
    19fa:	6a 19       	sub	r22, r10
    19fc:	69 25       	eor	r22, r9
    19fe:	6c 87       	std	Y+12, r22	; 0x0c

                // compare with actual key
                if(memcmp(tkey, wm_key, 6) == 0) break; // if match, then use this idx
    1a00:	c1 01       	movw	r24, r2
    1a02:	60 e3       	ldi	r22, 0x30	; 48
    1a04:	71 e0       	ldi	r23, 0x01	; 1
    1a06:	46 e0       	ldi	r20, 0x06	; 6
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <memcmp>
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <wm_gentabs+0x1ee>
void wm_gentabs()
{
        unsigned char idx;

        // check all idx
        for(idx = 0; idx < 7; idx++)
    1a12:	83 94       	inc	r8
    1a14:	66 e0       	ldi	r22, 0x06	; 6
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	66 0e       	add	r6, r22
    1a1a:	77 1e       	adc	r7, r23
    1a1c:	77 e0       	ldi	r23, 0x07	; 7
    1a1e:	87 16       	cp	r8, r23
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <wm_gentabs+0x1ee>
    1a22:	de 01       	movw	r26, r28
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	f3 01       	movw	r30, r6
    1a28:	31 cf       	rjmp	.-414    	; 0x188c <wm_gentabs+0x50>
                // compare with actual key
                if(memcmp(tkey, wm_key, 6) == 0) break; // if match, then use this idx
        }

        // generate encryption from idx key and rand
        wm_ft[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[3]]));
    1a2a:	28 2d       	mov	r18, r8
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	2f 5f       	subi	r18, 0xFF	; 255
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	52 2f       	mov	r21, r18
    1a34:	44 27       	eor	r20, r20
    1a36:	80 91 34 01 	lds	r24, 0x0134
    1a3a:	fa 01       	movw	r30, r20
    1a3c:	e8 0f       	add	r30, r24
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	ee 56       	subi	r30, 0x6E	; 110
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	94 91       	lpm	r25, Z+
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	32 2f       	mov	r19, r18
    1a4c:	22 27       	eor	r18, r18
    1a4e:	80 91 29 01 	lds	r24, 0x0129
    1a52:	f9 01       	movw	r30, r18
    1a54:	e8 0f       	add	r30, r24
    1a56:	f1 1d       	adc	r31, r1
    1a58:	ee 56       	subi	r30, 0x6E	; 110
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	e4 91       	lpm	r30, Z+
    1a5e:	e9 27       	eor	r30, r25
    1a60:	e0 93 36 01 	sts	0x0136, r30
        wm_ft[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    1a64:	80 91 32 01 	lds	r24, 0x0132
    1a68:	fa 01       	movw	r30, r20
    1a6a:	e8 0f       	add	r30, r24
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	ee 56       	subi	r30, 0x6E	; 110
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	94 91       	lpm	r25, Z+
    1a74:	80 91 2b 01 	lds	r24, 0x012B
    1a78:	f9 01       	movw	r30, r18
    1a7a:	e8 0f       	add	r30, r24
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	ee 56       	subi	r30, 0x6E	; 110
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	e4 91       	lpm	r30, Z+
    1a84:	e9 27       	eor	r30, r25
    1a86:	e0 93 37 01 	sts	0x0137, r30
        wm_ft[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    1a8a:	80 91 35 01 	lds	r24, 0x0135
    1a8e:	fa 01       	movw	r30, r20
    1a90:	e8 0f       	add	r30, r24
    1a92:	f1 1d       	adc	r31, r1
    1a94:	ee 56       	subi	r30, 0x6E	; 110
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	94 91       	lpm	r25, Z+
    1a9a:	80 91 2d 01 	lds	r24, 0x012D
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f1 1d       	adc	r31, r1
    1aa4:	ee 56       	subi	r30, 0x6E	; 110
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	e4 91       	lpm	r30, Z+
    1aaa:	e9 27       	eor	r30, r25
    1aac:	e0 93 38 01 	sts	0x0138, r30
        wm_ft[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[2]]));
    1ab0:	80 91 30 01 	lds	r24, 0x0130
    1ab4:	fa 01       	movw	r30, r20
    1ab6:	e8 0f       	add	r30, r24
    1ab8:	f1 1d       	adc	r31, r1
    1aba:	ee 56       	subi	r30, 0x6E	; 110
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	94 91       	lpm	r25, Z+
    1ac0:	80 91 28 01 	lds	r24, 0x0128
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	ee 56       	subi	r30, 0x6E	; 110
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	e4 91       	lpm	r30, Z+
    1ad0:	e9 27       	eor	r30, r25
    1ad2:	e0 93 39 01 	sts	0x0139, r30
        wm_ft[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    1ad6:	80 91 31 01 	lds	r24, 0x0131
    1ada:	fa 01       	movw	r30, r20
    1adc:	e8 0f       	add	r30, r24
    1ade:	f1 1d       	adc	r31, r1
    1ae0:	ee 56       	subi	r30, 0x6E	; 110
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	94 91       	lpm	r25, Z+
    1ae6:	80 91 2a 01 	lds	r24, 0x012A
    1aea:	f9 01       	movw	r30, r18
    1aec:	e8 0f       	add	r30, r24
    1aee:	f1 1d       	adc	r31, r1
    1af0:	ee 56       	subi	r30, 0x6E	; 110
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	e4 91       	lpm	r30, Z+
    1af6:	e9 27       	eor	r30, r25
    1af8:	e0 93 3a 01 	sts	0x013A, r30
        wm_ft[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    1afc:	80 91 33 01 	lds	r24, 0x0133
    1b00:	fa 01       	movw	r30, r20
    1b02:	e8 0f       	add	r30, r24
    1b04:	f1 1d       	adc	r31, r1
    1b06:	ee 56       	subi	r30, 0x6E	; 110
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	94 91       	lpm	r25, Z+
    1b0c:	80 91 2f 01 	lds	r24, 0x012F
    1b10:	f9 01       	movw	r30, r18
    1b12:	e8 0f       	add	r30, r24
    1b14:	f1 1d       	adc	r31, r1
    1b16:	ee 56       	subi	r30, 0x6E	; 110
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	e4 91       	lpm	r30, Z+
    1b1c:	e9 27       	eor	r30, r25
    1b1e:	e0 93 3b 01 	sts	0x013B, r30
        wm_ft[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    1b22:	80 91 26 01 	lds	r24, 0x0126
    1b26:	fa 01       	movw	r30, r20
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	ee 56       	subi	r30, 0x6E	; 110
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	94 91       	lpm	r25, Z+
    1b32:	80 91 2c 01 	lds	r24, 0x012C
    1b36:	f9 01       	movw	r30, r18
    1b38:	e8 0f       	add	r30, r24
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	ee 56       	subi	r30, 0x6E	; 110
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	e4 91       	lpm	r30, Z+
    1b42:	e9 27       	eor	r30, r25
    1b44:	e0 93 3c 01 	sts	0x013C, r30
        wm_ft[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    1b48:	80 91 27 01 	lds	r24, 0x0127
    1b4c:	fa 01       	movw	r30, r20
    1b4e:	e8 0f       	add	r30, r24
    1b50:	f1 1d       	adc	r31, r1
    1b52:	ee 56       	subi	r30, 0x6E	; 110
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	94 91       	lpm	r25, Z+
    1b58:	80 91 2e 01 	lds	r24, 0x012E
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	e8 0f       	add	r30, r24
    1b60:	f1 1d       	adc	r31, r1
    1b62:	ee 56       	subi	r30, 0x6E	; 110
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	e4 91       	lpm	r30, Z+
    1b68:	e9 27       	eor	r30, r25
    1b6a:	e0 93 3d 01 	sts	0x013D, r30
        
        wm_sb[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[1]]));
    1b6e:	80 91 30 01 	lds	r24, 0x0130
    1b72:	fa 01       	movw	r30, r20
    1b74:	e8 0f       	add	r30, r24
    1b76:	f1 1d       	adc	r31, r1
    1b78:	ee 56       	subi	r30, 0x6E	; 110
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	94 91       	lpm	r25, Z+
    1b7e:	80 91 27 01 	lds	r24, 0x0127
    1b82:	f9 01       	movw	r30, r18
    1b84:	e8 0f       	add	r30, r24
    1b86:	f1 1d       	adc	r31, r1
    1b88:	ee 56       	subi	r30, 0x6E	; 110
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	e4 91       	lpm	r30, Z+
    1b8e:	e9 27       	eor	r30, r25
    1b90:	e0 93 3e 01 	sts	0x013E, r30
        wm_sb[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    1b94:	80 91 35 01 	lds	r24, 0x0135
    1b98:	fa 01       	movw	r30, r20
    1b9a:	e8 0f       	add	r30, r24
    1b9c:	f1 1d       	adc	r31, r1
    1b9e:	ee 56       	subi	r30, 0x6E	; 110
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	94 91       	lpm	r25, Z+
    1ba4:	80 91 2a 01 	lds	r24, 0x012A
    1ba8:	f9 01       	movw	r30, r18
    1baa:	e8 0f       	add	r30, r24
    1bac:	f1 1d       	adc	r31, r1
    1bae:	ee 56       	subi	r30, 0x6E	; 110
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	e4 91       	lpm	r30, Z+
    1bb4:	e9 27       	eor	r30, r25
    1bb6:	e0 93 3f 01 	sts	0x013F, r30
        wm_sb[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[0]]));
    1bba:	80 91 33 01 	lds	r24, 0x0133
    1bbe:	fa 01       	movw	r30, r20
    1bc0:	e8 0f       	add	r30, r24
    1bc2:	f1 1d       	adc	r31, r1
    1bc4:	ee 56       	subi	r30, 0x6E	; 110
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	94 91       	lpm	r25, Z+
    1bca:	80 91 26 01 	lds	r24, 0x0126
    1bce:	f9 01       	movw	r30, r18
    1bd0:	e8 0f       	add	r30, r24
    1bd2:	f1 1d       	adc	r31, r1
    1bd4:	ee 56       	subi	r30, 0x6E	; 110
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	e4 91       	lpm	r30, Z+
    1bda:	e9 27       	eor	r30, r25
    1bdc:	e0 93 40 01 	sts	0x0140, r30
        wm_sb[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    1be0:	80 91 32 01 	lds	r24, 0x0132
    1be4:	fa 01       	movw	r30, r20
    1be6:	e8 0f       	add	r30, r24
    1be8:	f1 1d       	adc	r31, r1
    1bea:	ee 56       	subi	r30, 0x6E	; 110
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	94 91       	lpm	r25, Z+
    1bf0:	80 91 2f 01 	lds	r24, 0x012F
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f1 1d       	adc	r31, r1
    1bfa:	ee 56       	subi	r30, 0x6E	; 110
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	e4 91       	lpm	r30, Z+
    1c00:	e9 27       	eor	r30, r25
    1c02:	e0 93 41 01 	sts	0x0141, r30
        wm_sb[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    1c06:	80 91 34 01 	lds	r24, 0x0134
    1c0a:	fa 01       	movw	r30, r20
    1c0c:	e8 0f       	add	r30, r24
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	ee 56       	subi	r30, 0x6E	; 110
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	94 91       	lpm	r25, Z+
    1c16:	80 91 2d 01 	lds	r24, 0x012D
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	e8 0f       	add	r30, r24
    1c1e:	f1 1d       	adc	r31, r1
    1c20:	ee 56       	subi	r30, 0x6E	; 110
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	e4 91       	lpm	r30, Z+
    1c26:	e9 27       	eor	r30, r25
    1c28:	e0 93 42 01 	sts	0x0142, r30
        wm_sb[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    1c2c:	80 91 31 01 	lds	r24, 0x0131
    1c30:	fa 01       	movw	r30, r20
    1c32:	e8 0f       	add	r30, r24
    1c34:	f1 1d       	adc	r31, r1
    1c36:	ee 56       	subi	r30, 0x6E	; 110
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	94 91       	lpm	r25, Z+
    1c3c:	80 91 2e 01 	lds	r24, 0x012E
    1c40:	f9 01       	movw	r30, r18
    1c42:	e8 0f       	add	r30, r24
    1c44:	f1 1d       	adc	r31, r1
    1c46:	ee 56       	subi	r30, 0x6E	; 110
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	e4 91       	lpm	r30, Z+
    1c4c:	e9 27       	eor	r30, r25
    1c4e:	e0 93 43 01 	sts	0x0143, r30
        wm_sb[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    1c52:	80 91 29 01 	lds	r24, 0x0129
    1c56:	fa 01       	movw	r30, r20
    1c58:	e8 0f       	add	r30, r24
    1c5a:	f1 1d       	adc	r31, r1
    1c5c:	ee 56       	subi	r30, 0x6E	; 110
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	94 91       	lpm	r25, Z+
    1c62:	80 91 2b 01 	lds	r24, 0x012B
    1c66:	f9 01       	movw	r30, r18
    1c68:	e8 0f       	add	r30, r24
    1c6a:	f1 1d       	adc	r31, r1
    1c6c:	ee 56       	subi	r30, 0x6E	; 110
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	e4 91       	lpm	r30, Z+
    1c72:	e9 27       	eor	r30, r25
    1c74:	e0 93 44 01 	sts	0x0144, r30
        wm_sb[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    1c78:	80 91 28 01 	lds	r24, 0x0128
    1c7c:	48 0f       	add	r20, r24
    1c7e:	51 1d       	adc	r21, r1
    1c80:	4e 56       	subi	r20, 0x6E	; 110
    1c82:	5f 4f       	sbci	r21, 0xFF	; 255
    1c84:	fa 01       	movw	r30, r20
    1c86:	94 91       	lpm	r25, Z+
    1c88:	80 91 2c 01 	lds	r24, 0x012C
    1c8c:	28 0f       	add	r18, r24
    1c8e:	31 1d       	adc	r19, r1
    1c90:	2e 56       	subi	r18, 0x6E	; 110
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	f9 01       	movw	r30, r18
    1c96:	84 91       	lpm	r24, Z+
    1c98:	89 27       	eor	r24, r25
    1c9a:	80 93 45 01 	sts	0x0145, r24
}
    1c9e:	68 96       	adiw	r28, 0x18	; 24
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	7f 90       	pop	r7
    1cc4:	6f 90       	pop	r6
    1cc6:	5f 90       	pop	r5
    1cc8:	4f 90       	pop	r4
    1cca:	3f 90       	pop	r3
    1ccc:	2f 90       	pop	r2
    1cce:	08 95       	ret

00001cd0 <wm_slaveRx>:
                wm_sample_event();
        }
}*/

void wm_slaveRx(unsigned char addr, unsigned char l)
{
    1cd0:	98 2f       	mov	r25, r24
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
    1cd2:	80 54       	subi	r24, 0x40	; 64
    1cd4:	86 30       	cpi	r24, 0x06	; 6
    1cd6:	a0 f4       	brcc	.+40     	; 0x1d00 <wm_slaveRx+0x30>
    1cd8:	20 e4       	ldi	r18, 0x40	; 64
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	49 e4       	ldi	r20, 0x49	; 73
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	fa 01       	movw	r30, r20
    1ce2:	e2 1b       	sub	r30, r18
    1ce4:	f3 0b       	sbc	r31, r19
        {
                for(unsigned int i = 0; i < 6; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    1ce6:	d9 01       	movw	r26, r18
    1ce8:	aa 5b       	subi	r26, 0xBA	; 186
    1cea:	be 4f       	sbci	r27, 0xFE	; 254
    1cec:	8c 91       	ld	r24, X
    1cee:	ea 5d       	subi	r30, 0xDA	; 218
    1cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf2:	80 83       	st	Z, r24
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
void wm_slaveRx(unsigned char addr, unsigned char l)
{
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
        {
                for(unsigned int i = 0; i < 6; i++)
    1cf8:	26 34       	cpi	r18, 0x46	; 70
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	89 f7       	brne	.-30     	; 0x1ce0 <wm_slaveRx+0x10>
    1cfe:	08 95       	ret
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
                }
        }
        else if(addr >= 0x46 && addr < 0x4C)
    1d00:	89 2f       	mov	r24, r25
    1d02:	86 54       	subi	r24, 0x46	; 70
    1d04:	86 30       	cpi	r24, 0x06	; 6
    1d06:	c8 f4       	brcc	.+50     	; 0x1d3a <wm_slaveRx+0x6a>
        {
                for(unsigned int i = 6; i < 10; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    1d08:	80 91 8c 01 	lds	r24, 0x018C
    1d0c:	80 93 29 01 	sts	0x0129, r24
    1d10:	80 91 8d 01 	lds	r24, 0x018D
    1d14:	80 93 28 01 	sts	0x0128, r24
    1d18:	80 91 8e 01 	lds	r24, 0x018E
    1d1c:	80 93 27 01 	sts	0x0127, r24
    1d20:	80 91 8f 01 	lds	r24, 0x018F
    1d24:	80 93 26 01 	sts	0x0126, r24
                }
                for(unsigned int i = 0; i < 2; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    1d28:	80 91 90 01 	lds	r24, 0x0190
    1d2c:	80 93 35 01 	sts	0x0135, r24
    1d30:	80 91 91 01 	lds	r24, 0x0191
    1d34:	80 93 34 01 	sts	0x0134, r24
    1d38:	08 95       	ret
                }
        }
        else if(addr >= 0x4C && addr < 0x50)
    1d3a:	89 2f       	mov	r24, r25
    1d3c:	8c 54       	subi	r24, 0x4C	; 76
    1d3e:	84 30       	cpi	r24, 0x04	; 4
    1d40:	c8 f4       	brcc	.+50     	; 0x1d74 <wm_slaveRx+0xa4>
        {
                for(unsigned int i = 2; i < 6; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    1d42:	80 91 92 01 	lds	r24, 0x0192
    1d46:	80 93 33 01 	sts	0x0133, r24
    1d4a:	80 91 93 01 	lds	r24, 0x0193
    1d4e:	80 93 32 01 	sts	0x0132, r24
    1d52:	80 91 94 01 	lds	r24, 0x0194
    1d56:	80 93 31 01 	sts	0x0131, r24
    1d5a:	80 91 95 01 	lds	r24, 0x0195
    1d5e:	80 93 30 01 	sts	0x0130, r24
                }
                if(addr + l == 0x50)
    1d62:	89 2f       	mov	r24, r25
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	86 0f       	add	r24, r22
    1d68:	91 1d       	adc	r25, r1
    1d6a:	80 35       	cpi	r24, 0x50	; 80
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <wm_slaveRx+0xa4>
                {
                        // generate decryption once all data is loaded
                        wm_gentabs();
    1d70:	0e 94 1e 0c 	call	0x183c	; 0x183c <wm_gentabs>
    1d74:	08 95       	ret

00001d76 <__vector_24>:
        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}

ISR(TWI_vect)
{
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
        switch(TW_STATUS)
    1d98:	80 91 b9 00 	lds	r24, 0x00B9
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	88 7f       	andi	r24, 0xF8	; 248
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	80 39       	cpi	r24, 0x90	; 144
    1da4:	91 05       	cpc	r25, r1
    1da6:	e9 f1       	breq	.+122    	; 0x1e22 <__vector_24+0xac>
    1da8:	81 39       	cpi	r24, 0x91	; 145
    1daa:	91 05       	cpc	r25, r1
    1dac:	d4 f4       	brge	.+52     	; 0x1de2 <__vector_24+0x6c>
    1dae:	80 37       	cpi	r24, 0x70	; 112
    1db0:	91 05       	cpc	r25, r1
    1db2:	a1 f1       	breq	.+104    	; 0x1e1c <__vector_24+0xa6>
    1db4:	81 37       	cpi	r24, 0x71	; 113
    1db6:	91 05       	cpc	r25, r1
    1db8:	44 f4       	brge	.+16     	; 0x1dca <__vector_24+0x54>
    1dba:	80 36       	cpi	r24, 0x60	; 96
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	71 f1       	breq	.+92     	; 0x1e1c <__vector_24+0xa6>
    1dc0:	88 36       	cpi	r24, 0x68	; 104
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <__vector_24+0x52>
    1dc6:	b6 c0       	rjmp	.+364    	; 0x1f34 <__vector_24+0x1be>
    1dc8:	29 c0       	rjmp	.+82     	; 0x1e1c <__vector_24+0xa6>
    1dca:	80 38       	cpi	r24, 0x80	; 128
    1dcc:	91 05       	cpc	r25, r1
    1dce:	49 f1       	breq	.+82     	; 0x1e22 <__vector_24+0xac>
    1dd0:	88 38       	cpi	r24, 0x88	; 136
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <__vector_24+0x62>
    1dd6:	ae c0       	rjmp	.+348    	; 0x1f34 <__vector_24+0x1be>
    1dd8:	88 37       	cpi	r24, 0x78	; 120
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <__vector_24+0x6a>
    1dde:	aa c0       	rjmp	.+340    	; 0x1f34 <__vector_24+0x1be>
    1de0:	1d c0       	rjmp	.+58     	; 0x1e1c <__vector_24+0xa6>
    1de2:	80 3b       	cpi	r24, 0xB0	; 176
    1de4:	91 05       	cpc	r25, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <__vector_24+0x74>
    1de8:	6a c0       	rjmp	.+212    	; 0x1ebe <__vector_24+0x148>
    1dea:	81 3b       	cpi	r24, 0xB1	; 177
    1dec:	91 05       	cpc	r25, r1
    1dee:	4c f4       	brge	.+18     	; 0x1e02 <__vector_24+0x8c>
    1df0:	80 3a       	cpi	r24, 0xA0	; 160
    1df2:	91 05       	cpc	r25, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <__vector_24+0x82>
    1df6:	57 c0       	rjmp	.+174    	; 0x1ea6 <__vector_24+0x130>
    1df8:	88 3a       	cpi	r24, 0xA8	; 168
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <__vector_24+0x8a>
    1dfe:	9a c0       	rjmp	.+308    	; 0x1f34 <__vector_24+0x1be>
    1e00:	5e c0       	rjmp	.+188    	; 0x1ebe <__vector_24+0x148>
    1e02:	80 3c       	cpi	r24, 0xC0	; 192
    1e04:	91 05       	cpc	r25, r1
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <__vector_24+0x94>
    1e08:	93 c0       	rjmp	.+294    	; 0x1f30 <__vector_24+0x1ba>
    1e0a:	88 3c       	cpi	r24, 0xC8	; 200
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <__vector_24+0x9c>
    1e10:	8f c0       	rjmp	.+286    	; 0x1f30 <__vector_24+0x1ba>
    1e12:	88 3b       	cpi	r24, 0xB8	; 184
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <__vector_24+0xa4>
    1e18:	8d c0       	rjmp	.+282    	; 0x1f34 <__vector_24+0x1be>
    1e1a:	53 c0       	rjmp	.+166    	; 0x1ec2 <__vector_24+0x14c>
                case TW_SR_SLA_ACK: // addressed, returned ack
                case TW_SR_GCALL_ACK: // addressed generally, returned ack
                case TW_SR_ARB_LOST_SLA_ACK: // lost arbitration, returned ack
                case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration generally, returned ack
                        // get ready to receive pointer
                        twi_first_addr_flag = 0;
    1e1c:	10 92 48 02 	sts	0x0248, r1
    1e20:	87 c0       	rjmp	.+270    	; 0x1f30 <__vector_24+0x1ba>
                        // ack
                        twi_clear_int(1);
                        break;
                case TW_SR_DATA_ACK: // data received, returned ack
                case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
                if(twi_first_addr_flag != 0)
    1e22:	80 91 48 02 	lds	r24, 0x0248
    1e26:	88 23       	and	r24, r24
    1e28:	89 f1       	breq	.+98     	; 0x1e8c <__vector_24+0x116>
                {
                        // put byte in register
                        unsigned char t = TWDR;
    1e2a:	20 91 bb 00 	lds	r18, 0x00BB
                        if(twi_reg[0xF0] == 0xAA && twi_reg_addr != 0xF0) // if encryption is on
    1e2e:	80 91 36 02 	lds	r24, 0x0236
    1e32:	8a 3a       	cpi	r24, 0xAA	; 170
    1e34:	19 f5       	brne	.+70     	; 0x1e7c <__vector_24+0x106>
    1e36:	80 91 46 02 	lds	r24, 0x0246
    1e3a:	90 91 47 02 	lds	r25, 0x0247
    1e3e:	80 3f       	cpi	r24, 0xF0	; 240
    1e40:	91 05       	cpc	r25, r1
    1e42:	e1 f0       	breq	.+56     	; 0x1e7c <__vector_24+0x106>
                        {
                                // decrypt
                                twi_reg[twi_reg_addr] = (t ^ wm_sb[twi_reg_addr % 8]) + wm_ft[twi_reg_addr % 8];
    1e44:	a0 91 46 02 	lds	r26, 0x0246
    1e48:	b0 91 47 02 	lds	r27, 0x0247
    1e4c:	e0 91 46 02 	lds	r30, 0x0246
    1e50:	f0 91 47 02 	lds	r31, 0x0247
    1e54:	e7 70       	andi	r30, 0x07	; 7
    1e56:	f0 70       	andi	r31, 0x00	; 0
    1e58:	e2 5c       	subi	r30, 0xC2	; 194
    1e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5c:	80 81       	ld	r24, Z
    1e5e:	e0 91 46 02 	lds	r30, 0x0246
    1e62:	f0 91 47 02 	lds	r31, 0x0247
    1e66:	e7 70       	andi	r30, 0x07	; 7
    1e68:	f0 70       	andi	r31, 0x00	; 0
    1e6a:	ea 5c       	subi	r30, 0xCA	; 202
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	90 81       	ld	r25, Z
    1e70:	82 27       	eor	r24, r18
    1e72:	89 0f       	add	r24, r25
    1e74:	aa 5b       	subi	r26, 0xBA	; 186
    1e76:	be 4f       	sbci	r27, 0xFE	; 254
    1e78:	8c 93       	st	X, r24
    1e7a:	4c c0       	rjmp	.+152    	; 0x1f14 <__vector_24+0x19e>
                        }
                        else
                        {
                                twi_reg[twi_reg_addr] = t;
    1e7c:	e0 91 46 02 	lds	r30, 0x0246
    1e80:	f0 91 47 02 	lds	r31, 0x0247
    1e84:	ea 5b       	subi	r30, 0xBA	; 186
    1e86:	fe 4f       	sbci	r31, 0xFE	; 254
    1e88:	20 83       	st	Z, r18
    1e8a:	44 c0       	rjmp	.+136    	; 0x1f14 <__vector_24+0x19e>
                        twi_rw_len++;
                }
                else
                {
                        // set address
                        twi_reg_addr = TWDR;
    1e8c:	80 91 bb 00 	lds	r24, 0x00BB
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	90 93 47 02 	sts	0x0247, r25
    1e96:	80 93 46 02 	sts	0x0246, r24
                        twi_first_addr_flag = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 48 02 	sts	0x0248, r24
                        twi_rw_len = 0;
    1ea0:	10 92 49 02 	sts	0x0249, r1
    1ea4:	45 c0       	rjmp	.+138    	; 0x1f30 <__vector_24+0x1ba>
                }
                twi_clear_int(1); // ack
                        break;
                case TW_SR_STOP: // stop or repeated start condition received
                        // run user defined function
                        wm_slaveRx(twi_reg_addr - twi_rw_len, twi_rw_len);
    1ea6:	80 91 46 02 	lds	r24, 0x0246
    1eaa:	90 91 47 02 	lds	r25, 0x0247
    1eae:	20 91 49 02 	lds	r18, 0x0249
    1eb2:	60 91 49 02 	lds	r22, 0x0249
    1eb6:	82 1b       	sub	r24, r18
    1eb8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <wm_slaveRx>
    1ebc:	39 c0       	rjmp	.+114    	; 0x1f30 <__vector_24+0x1ba>
                // Slave Tx
                case TW_ST_SLA_ACK:     // addressed, returned ack
                case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
                        // run user defined function (not anymore)
                        //wm_slaveTxStart(twi_reg_addr);
                        twi_rw_len = 0;
    1ebe:	10 92 49 02 	sts	0x0249, r1
                case TW_ST_DATA_ACK: // byte sent, ack returned
                        // ready output byte
                        if(twi_reg[0xF0] == 0xAA) // encryption is on
    1ec2:	80 91 36 02 	lds	r24, 0x0236
    1ec6:	8a 3a       	cpi	r24, 0xAA	; 170
    1ec8:	e1 f4       	brne	.+56     	; 0x1f02 <__vector_24+0x18c>
                        {
                                // encrypt
                                TWDR = (twi_reg[twi_reg_addr] - wm_ft[twi_reg_addr % 8]) ^ wm_sb[twi_reg_addr % 8];
    1eca:	e0 91 46 02 	lds	r30, 0x0246
    1ece:	f0 91 47 02 	lds	r31, 0x0247
    1ed2:	ea 5b       	subi	r30, 0xBA	; 186
    1ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed6:	80 81       	ld	r24, Z
    1ed8:	e0 91 46 02 	lds	r30, 0x0246
    1edc:	f0 91 47 02 	lds	r31, 0x0247
    1ee0:	e7 70       	andi	r30, 0x07	; 7
    1ee2:	f0 70       	andi	r31, 0x00	; 0
    1ee4:	ea 5c       	subi	r30, 0xCA	; 202
    1ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee8:	20 81       	ld	r18, Z
    1eea:	e0 91 46 02 	lds	r30, 0x0246
    1eee:	f0 91 47 02 	lds	r31, 0x0247
    1ef2:	e7 70       	andi	r30, 0x07	; 7
    1ef4:	f0 70       	andi	r31, 0x00	; 0
    1ef6:	e2 5c       	subi	r30, 0xC2	; 194
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	90 81       	ld	r25, Z
    1efc:	82 1b       	sub	r24, r18
    1efe:	89 27       	eor	r24, r25
    1f00:	07 c0       	rjmp	.+14     	; 0x1f10 <__vector_24+0x19a>
                        }
                        else
                        {
                                TWDR = twi_reg[twi_reg_addr];
    1f02:	e0 91 46 02 	lds	r30, 0x0246
    1f06:	f0 91 47 02 	lds	r31, 0x0247
    1f0a:	ea 5b       	subi	r30, 0xBA	; 186
    1f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 93 bb 00 	sts	0x00BB, r24
                        }
                        twi_reg_addr++;
    1f14:	80 91 46 02 	lds	r24, 0x0246
    1f18:	90 91 47 02 	lds	r25, 0x0247
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	90 93 47 02 	sts	0x0247, r25
    1f22:	80 93 46 02 	sts	0x0246, r24
                        twi_rw_len++;
    1f26:	80 91 49 02 	lds	r24, 0x0249
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 93 49 02 	sts	0x0249, r24
void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f30:	85 ec       	ldi	r24, 0xC5	; 197
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <__vector_24+0x1c0>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f34:	85 e8       	ldi	r24, 0x85	; 133
    1f36:	80 93 bc 00 	sts	0x00BC, r24
                        break;
                default:
                        twi_clear_int(0);
                        break;
        }
}
    1f3a:	ff 91       	pop	r31
    1f3c:	ef 91       	pop	r30
    1f3e:	bf 91       	pop	r27
    1f40:	af 91       	pop	r26
    1f42:	9f 91       	pop	r25
    1f44:	8f 91       	pop	r24
    1f46:	7f 91       	pop	r23
    1f48:	6f 91       	pop	r22
    1f4a:	5f 91       	pop	r21
    1f4c:	4f 91       	pop	r20
    1f4e:	3f 91       	pop	r19
    1f50:	2f 91       	pop	r18
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <memcmp>:
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	dc 01       	movw	r26, r24
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <memcmp+0xe>
    1f62:	8d 91       	ld	r24, X+
    1f64:	01 90       	ld	r0, Z+
    1f66:	80 19       	sub	r24, r0
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <memcmp+0x16>
    1f6a:	41 50       	subi	r20, 0x01	; 1
    1f6c:	50 40       	sbci	r21, 0x00	; 0
    1f6e:	c8 f7       	brcc	.-14     	; 0x1f62 <memcmp+0x6>
    1f70:	88 1b       	sub	r24, r24
    1f72:	99 0b       	sbc	r25, r25
    1f74:	08 95       	ret

00001f76 <_exit>:
    1f76:	f8 94       	cli

00001f78 <__stop_program>:
    1f78:	ff cf       	rjmp	.-2      	; 0x1f78 <__stop_program>
