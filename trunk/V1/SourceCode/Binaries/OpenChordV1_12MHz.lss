
OpenChordV1_12MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000031a4  00003258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000175  00800128  00800128  00003280  2**0
                  ALLOC
  3 .eeprom       00000168  00810000  00810000  00003280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000468  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026ed  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b69  00000000  00000000  0000601d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b92  00000000  00000000  00006b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00008718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a0  00000000  00000000  00008968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f21  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000a229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__ctors_end>
       4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
       8:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__vector_2>
       c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      10:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      14:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      18:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      1c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      20:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      24:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      28:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      2c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      30:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      34:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      38:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      3c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      40:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      44:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      48:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      4c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      50:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      54:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      58:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      5c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      60:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__vector_24>
      64:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
      68:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
      78:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
      88:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
      98:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
      a8:	32 09 35 75 08 95 04 81 02 c0                       2.5u......

000000b2 <usbDescriptorString0>:
      b2:	04 03 09 04                                         ....

000000b6 <usbDescriptorStringVendor>:
      b6:	1c 03 4f 00 70 00 65 00 6e 00 43 00 68 00 6f 00     ..O.p.e.n.C.h.o.
      c6:	72 00 64 00 2e 00 6f 00 72 00 67 00                 r.d...o.r.g.

000000d2 <usbDescriptorStringDevice>:
      d2:	14 03 56 00 31 00 20 00 47 00 75 00 69 00 74 00     ..V.1. .G.u.i.t.
      e2:	61 00 72 00                                         a.r.

000000e6 <usbDescriptorDevice>:
      e6:	12 01 10 01 00 00 00 08 ba 12 00 02 00 01 01 02     ................
      f6:	00 01                                               ..

000000f8 <usbDescriptorConfiguration>:
      f8:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
     108:	00 00 09 21 01 01 00 01 22 4a 00 07 05 81 03 08     ...!...."J......
     118:	00 0a 07 05 83 03 08 00 0a                          .........

00000121 <ans_tbl>:
     121:	a8 77 a6 e0 f7 43 5a 35 85 e2 72 97 8f b7 1a 62     .w...CZ5..r....b
     131:	87 38 0d 67 c7 be 4f 3e 20 76 37 8f 68 b7 a9 26     .8.g..O> v7.h..&
     141:	3f 2b 10 e3 30 7e 90 0e 85 0a                       ?+..0~....

0000014b <sboxes>:
     14b:	70 51 03 86 40 0d 4f eb 3e cc d1 87 35 bd f5 0b     pQ..@.O.>...5...
     15b:	5e d0 f8 f2 d5 e2 6c 31 0c ad fc 21 c3 78 c1 06     ^.....l1...!.x..
     16b:	c2 4c 55 e6 4a 34 48 11 1e da e7 1a 84 a0 96 a7     .LU.J4H.........
     17b:	e3 7f af 63 9c fa 23 5b 79 c8 9e ba b2 c9 22 12     ...c..#[y.....".
     18b:	4b b3 a1 b6 32 49 a2 e1 89 39 10 66 c5 07 8f 54     K...2I...9.f...T
     19b:	ea 91 ca 3f f9 19 f0 d7 46 bc 28 1b 61 e8 2f 6a     ...?....F.(.a./j
     1ab:	ae 9d f6 4e 09 14 77 4d db 1f 2e 7b 7c f1 43 a3     ...N..wM...{|.C.
     1bb:	00 b8 13 8c 85 b9 29 75 88 fd d2 56 1c 50 97 41     ......)u...V.P.A
     1cb:	e5 3b 60 b5 c0 64 ee 98 d6 2d 25 a4 aa cd 7d a8     .;`..d...-%...}.
     1db:	83 c6 ab be 44 99 26 3c ce 9f bf d3 cb 76 7a 7e     ....D.&<.....vz~
     1eb:	82 01 8a 9a 80 1d 0e b0 5c d4 38 62 f4 30 e0 8e     ........\.8b.0..
     1fb:	53 b7 02 57 ac a6 52 0a 6d 92 65 17 24 33 45 72     S..W..R.m.e.$3Er
     20b:	74 b1 b4 f7 5d ed 2c ff 47 37 5a 90 bb df 2a 16     t...].,.G7Z...*.
     21b:	59 95 d9 c4 27 67 73 c7 68 fe a5 dd 6b 5f 93 d8     Y...'gs.h...k_..
     22b:	ec 05 3a 8d 6e fb 3d a9 69 36 f3 94 de ef 15 6f     ..:.n.=.i6.....o
     23b:	8b 9b 08 0f dc 81 18 20 04 e4 71 cf e9 2b 42 58     ....... ..q..+BX
     24b:	01 a0 a9 62 d6 3f 85 a7 b6 d4 fa 15 66 17 09 bd     ...b.?......f...
     25b:	5d 14 34 26 59 72 91 54 06 4f f8 b0 5b 74 93 99     ].4&Yr.T.O..[t..
     26b:	8c f2 45 cd ea 4e ad 10 4a e5 ca ee df c6 6f 9f     ..E..N..J.....o.
     27b:	88 8e 02 cc 08 a8 77 94 6d 21 b1 28 e4 39 79 96     ......w.m!.(.9y.
     28b:	60 71 81 16 2e e6 78 b9 c4 46 9a 42 ae b7 7c 43     `q....x..F.B..|C
     29b:	b3 22 1a 86 c2 32 3d 2d 9c d2 29 e9 63 9b d1 31     ."...2=-..).c..1
     2ab:	38 5e 1e 36 41 bb 03 18 2b 3e bf 68 61 fc 52 c0     8^.6A...+>.ha.R.
     2bb:	de e0 0a 58 13 5a 00 be 1c 90 0e 53 12 fd e2 6e     ...X.Z.....S...n
     2cb:	ba ce 24 27 44 7f 87 a3 a1 d5 50 40 e3 f9 83 f7     ..$'D.....P@....
     2db:	c7 a2 35 c8 db 19 ab 2f 11 25 ed 33 9e 55 e1 48     ..5..../.%.3.U.H
     2eb:	af 73 84 da 2a aa 51 eb 9d 95 b2 cb e7 70 80 fe     .s..*.Q......p..
     2fb:	4c 65 04 ef c5 f1 c3 3a b4 f5 5f 23 89 dd 30 a5     Le.....:.._#..0.
     30b:	8b d3 f6 dc 4d 64 d7 f0 8f ec 56 37 5c a4 0d 07     ....Md....V7\...
     31b:	76 8a 2c 0b b5 d8 c1 1f e8 3b f4 4b 1b 47 6c 49     v.,......;.K.GlI
     32b:	67 7b 92 cf 75 7e 20 d9 7d 3c 97 7a d0 05 6b 0f     g{..u~ .}<.z..k.
     33b:	1d fb 82 98 57 8d f3 6a bc ac c9 a6 ff b8 69 0c     ....W..j......i.
     34b:	4c 4d 72 07 5a 49 33 8d a2 ab 46 3d 63 0d a0 97     LMr.ZI3...F=c...
     35b:	ff f0 f5 fa c0 e9 db 62 e4 e1 74 43 dc 86 18 29     .......b..tC...)
     36b:	37 f4 06 e2 ed 6f 90 48 1e 2d 1d ea 73 94 54 df     7....o.H.-..s.T.
     37b:	25 f6 47 27 d9 11 77 c9 84 1c 5b 5c 51 81 a6 22     %.G'..w...[\Q.."
     38b:	3e 24 96 c8 8a ec 82 7c 09 b8 45 4a 57 bb 2f 50     >$.....|..EJW./P
     39b:	75 8e 61 70 8c 6c af d0 fd b4 1b ae de fe 3b b5     u.ap.l........;.
     3ab:	36 bd 55 01 0e 9c 41 56 5f b3 26 03 83 ba 13 4b     6.U...AV_.&....K
     3bb:	ca c5 0a f8 60 a5 b9 c7 c3 98 32 fb 12 f9 a7 92     ....`.....2.....
     3cb:	aa 68 f3 78 7e 05 20 21 02 e8 bf f2 b0 59 8f d2     .h.x~. !.....Y..
     3db:	cb 87 65 15 f1 1a b2 30 ad ee 58 a3 8b 66 1f 2c     ..e....0..X..f.,
     3eb:	d7 5d 19 85 a8 e6 d3 6b a1 0c 91 93 6a 5e 0b 79     .].....k....j^.y
     3fb:	e3 dd 00 4f 3c 89 6e 71 69 a9 ac 40 e5 99 28 c6     ...O<.nqi..@..(.
     40b:	31 4e 7a cd 08 9e 7d ef 17 fc 88 d8 a4 6d 44 95     1Nz...}......mD.
     41b:	d1 b7 d4 9b be 2a 34 64 2b cf 2e eb 38 ce 23 e0     .....*4d+...8.#.
     42b:	3a 3f f7 7b 9f 10 53 bc 52 67 16 e7 80 76 04 c4     :?.{..S.Rg...v..
     43b:	b6 c1 c2 7f 9a da d5 39 42 14 9d b1 0f 35 d6 cc     .......9B....5..
     44b:	b9 da 38 0c a2 9c 09 1f 06 b1 b6 fd 1a 69 23 30     ..8..........i#0
     45b:	c4 de 01 d1 f4 58 29 37 1c 7d d5 bf ff bd c8 c9     .....X)7.}......
     46b:	cf 65 be 7b 78 97 98 67 08 b3 26 57 f7 fa 40 ad     .e.{x..g..&W..@.
     47b:	8e 75 a6 7c db 91 8b 51 99 d4 17 7a 90 8d ce 63     .u.|...Q...z...c
     48b:	cb 4e a0 ab 18 3a 5b 50 7f 21 74 c1 bb b8 b7 ba     .N...:[P.!t.....
     49b:	0b 35 95 31 59 9a 4d 04 07 1e 5a 76 13 f3 71 83     .5.1Y.M...Zv..q.
     4ab:	d0 86 03 a8 39 42 aa 28 e6 e4 d8 5d d3 d0 6e 6f     ....9B.(...]..no
     4bb:	96 fb 5e bc 56 c2 5f 85 9b e7 af d2 3b 84 6a a7     ..^.V._.....;.j.
     4cb:	53 c5 44 49 a5 f9 36 72 3d 2c d9 1b a1 f5 4f 93     S.DI..6r=,....O.
     4db:	9d 68 47 41 16 ca 2a 4c a3 87 d6 e5 19 2e 77 15     .hGA..*L......w.
     4eb:	6d 70 c0 df b2 00 46 ed c6 6c 43 60 92 2d a9 22     mp....F..lC`.-."
     4fb:	45 8f 34 55 ae a4 0a 66 32 e0 dc 02 ac e8 20 8c     E.4U...f2..... .
     50b:	89 62 4a fe ee c3 e3 3c f1 79 05 e9 f6 27 33 cc     .bJ....<.y...'3.
     51b:	f2 9e 11 81 7e 80 10 8a 82 9f 48 0d d7 b4 fc 2f     ....~.....H..../
     52b:	b5 c7 dd 88 14 6b 2b 54 ea 1d 94 5c b0 ef 12 24     .....k+T...\...$
     53b:	cd eb e1 e2 64 73 3f 0e 52 61 25 3e f8 0f 4b ec     ....ds?.Ra%>..K.
     54b:	c0 00 30 f6 02 49 3d 10 6e 20 c9 a6 2f fe 2c 2b     ..0..I=.n ../.,+
     55b:	75 2e 45 26 ab 48 a9 80 fc 04 cc d3 b5 ba a3 38     u.E&.H.........8
     56b:	31 7d 01 d9 a7 7b 96 b6 63 69 4e f7 de e0 78 ca     1}...{..ciN...x.
     57b:	50 aa 41 91 65 88 e4 21 85 da 3a 27 be 1c 3e 42     P.A.e..!..:'..>B
     58b:	5e 17 52 7f 1f 89 24 6f 8f 5c 67 74 0e 12 87 8d     ^.R...$o.\gt....
     59b:	e9 34 ed 73 c4 f8 61 5b 05 df 59 4c 97 79 83 18     .4.s..a[..YL.y..
     5ab:	a4 55 95 eb bd 53 f5 f1 57 66 46 9f b2 81 09 51     .U...S..WfF....Q
     5bb:	86 22 16 dd 23 93 76 29 c2 d7 1d d4 bf 36 3f ea     ."..#.v).....6?.
     5cb:	4b 11 32 b9 62 54 60 d6 6d 43 9a 0d 92 9c b0 ef     K.2.bT`.mC......
     5db:	58 6c 9d 77 2d 70 fa f3 b3 0b e2 40 7e f4 8a e5     Xl.w-p.....@~...
     5eb:	8c 3c 56 71 d1 64 e1 82 0a cb 13 15 90 ec 03 99     .<Vq.d..........
     5fb:	af 14 5d 0f 33 4a 94 a5 a8 35 1b e3 6a c6 28 ff     ..].3J...5..j.(.
     60b:	4d e7 25 84 ac 08 ae c5 a2 2a b8 37 0c 7a a0 c3     M.%......*.7.z..
     61b:	ce ad 06 1a 9e 8b fb d5 d0 c1 1e d0 b4 9b b1 44     ...............D
     62b:	f2 47 c7 68 cf 72 bb 4f 5a f9 dc 6b db d2 e8 7c     .G.h.r.OZ..k...|
     63b:	c8 ee 98 a1 e6 d8 39 07 5f fd 8e 19 b7 3b bc cd     ......9._....;..
     64b:	7c e3 81 73 b2 11 bf 6f 20 98 fe 75 96 ef 6c da     |..s...o ..u..l.
     65b:	50 e1 09 72 54 45 ba 34 80 5b ed 3e 53 2c 87 a4     P..rTE.4.[.>S,..
     66b:	57 f3 33 3f 3c b7 67 b4 a3 25 60 4f 07 6b 1b 47     W.3?<.g..%`O.k.G
     67b:	15 0f e4 0a ea d1 32 78 36 49 8d 4b d2 bc a5 dc     ......2x6I.K....
     68b:	1d 0d 4d cd 9a 82 5f fc 94 65 be e2 f4 c9 1e 44     ..M..._..e.....D
     69b:	cb 9e 0c 64 71 26 63 b3 14 e8 40 70 8a 0e 19 42     ...dq&c...@p...B
     6ab:	6d ac 88 10 5c df 41 a9 ad e5 fb 74 cc d5 06 8e     m...\.A....t....
     6bb:	59 86 ce 1f 3d 76 e0 8f b9 77 27 7b a6 d8 29 d3     Y...=v...w'{..).
     6cb:	ec b8 13 f7 fa c3 51 6a de 4a 5a eb c2 8b 23 48     ......Qj.JZ...#H
     6db:	92 cf 62 a8 99 f8 d0 2e 85 61 43 c8 bd f0 05 93     ..b......aC.....
     6eb:	ca 4e f1 7d 30 fd c4 69 66 2f 08 b1 52 f9 21 e6     .N.}0..if/..R.!.
     6fb:	7a 2b dd 39 84 ff c0 91 d6 37 d4 7f 2d 9b 5d a1     z+.9.....7..-.].
     70b:	3b 6e b5 c5 46 04 f5 90 ee 7e 83 1c 03 56 b6 aa     ;n..F....~...V..
     71b:	00 17 01 35 55 79 0b 12 bb 1a 31 e7 02 28 16 c1     ...5Uy....1..(..
     72b:	f6 a2 db 18 9c 89 68 38 97 ab c7 2a d7 3a f2 c6     ......h8...*.:..
     73b:	24 4c b0 58 a0 22 5e 9d d9 a7 e9 ae af 8c 95 9f     $L.X."^.........
     74b:	28 b7 20 d7 b0 30 c3 09 19 c0 67 d6 00 3c 7e e7     (. ..0....g..<~.
     75b:	e9 f4 08 5a f8 b8 2e 05 a6 25 9e 5c d8 15 0d e1     ...Z.....%.\....
     76b:	f6 11 54 6b cd 21 46 66 5e 84 ad 06 38 29 44 c5     ..Tk.!Ff^...8)D.
     77b:	a2 ce f1 aa c1 40 71 86 b5 ef fc 36 a8 cb 0a 48     .....@q....6...H
     78b:	27 45 64 a3 af 8c b2 c6 9f 07 89 dc 17 d3 49 79     'Ed...........Iy
     79b:	fb fe 1d d0 b9 88 43 52 bc 01 78 2b 7d 94 c7 0e     ......CR..x+}...
     7ab:	de a5 d5 9b cc f7 61 7a c2 74 81 39 03 ab 96 a0     ......az.t.9....
     7bb:	37 bd 2d 72 75 3f c9 d4 8e 6f f9 8d ed 62 db 1c     7.-ru?...o...b..
     7cb:	df 04 ac 1b 6c 14 4b 63 d0 bf b4 82 ec 7b 1a 59     ....l.Kc.....{.Y
     7db:	92 d2 10 60 b6 3d 5f e6 80 6e 70 c4 f2 35 d9 7c     ...`.=_..np..5.|
     7eb:	ee e5 41 a4 5b 50 dd bb 4c f3 1f 9d 5d 57 55 51     ..A.[P..L...]WUQ
     7fb:	97 e3 58 42 4d 9c 73 ba c8 77 31 69 26 ae ea 8a     ..XBM.s..w1i&...
     80b:	da 22 b3 87 56 fa 93 0b 34 16 33 e8 e4 53 be a9     ."..V...4.3..S..
     81b:	b1 3a 3e f5 90 6a cf 3b 12 fd 8f 9a a7 47 91 99     .:>..j.;.....G..
     82b:	eb 0f 24 ff 23 18 85 4e 7f 0c e0 a1 d2 d1 2c 2a     ..$.#..N......,*
     83b:	4a 02 4f 1e 95 68 8b 98 83 6d 76 ca 65 32 13 2f     J.O..h...mv.e2./
     84b:	c3 82 9a a4 ba 81 60 37 34 35 fc 80 a8 51 65 67     ......`745...Qeg
     85b:	ed 30 5f 10 d3 4a 27 2f 13 b9 2a d2 cc e1 ef ae     .0_..J'/..*.....
     86b:	eb be f4 bd cf 43 b3 c5 88 84 b7 dd 39 40 ce 48     .....C......9@.H
     87b:	6d 9b 72 61 7e e7 a1 4e 53 2e 77 3b e2 c9 36 22     m.ra~..NS.w;..6"
     88b:	1b 6e 73 b1 03 b2 4c 87 a9 d4 4d 0f d8 15 6c aa     .ns...L...M...l.
     89b:	18 f6 49 57 5d fb 7a 14 94 63 a0 11 b0 9e de 05     ..IW].z..c......
     8ab:	46 c8 ee 47 db dc 24 89 9c 91 97 29 e9 7b c1 07     F..G..$....).{..
     8bb:	1e b8 fd fe ac c6 62 98 4f f1 79 e0 e8 6b 78 56     ......b.O.y..kxV
     8cb:	b6 8d 04 50 86 ca 6f 20 e6 ea e5 76 17 1c 74 7f     ...P..o ...v..t.
     8db:	bc 0d 2c 85 f7 66 96 e4 8b 75 3f 4b d9 38 af 7c     ..,..f...u?K.8.|
     8eb:	da 0b 83 2d 31 32 a2 f5 1d 59 41 45 bf 3c 1f f8     ...-12...YAE.<..
     8fb:	f9 8a d0 16 25 69 12 99 9d 21 95 ab 01 a6 d7 b5     ....%i...!......
     90b:	c0 7d ff 58 0e 3a 92 d1 55 e3 08 9f d6 3e 52 8e     .}.X.:..U....>R.
     91b:	fa a3 c7 02 cd df 8f 64 19 8c f3 a7 0c 5e 0a 6a     .......d.....^.j
     92b:	09 f0 93 5b 42 c2 06 23 ec 71 ad b4 cb bb 70 28     ...[B..#.q....p(
     93b:	d5 1a 5c 33 68 5a 00 44 90 a5 c4 26 3d 2b f2 54     ..\3hZ.D...&=+.T
     94b:	96 ad da 1f ed 33 e1 81 69 08 0d 0a db 35 77 9a     .....3..i....5w.
     95b:	64 d1 fc 78 aa 1b d0 67 a0 dd fa 6c 63 71 05 84     d..x...g...lcq..
     96b:	17 6a 89 4f 66 7f c6 50 55 92 6f bd e7 d2 40 72     .j.Of..PU.o...@r
     97b:	8d bb ec 06 42 8a e4 88 9d 7e 7a 82 27 13 41 1a     ....B....~z.'.A.
     98b:	af c8 a4 76 b4 c2 fe 6d 1c d9 61 30 b3 7c ea f7     ...v...m..a0.|..
     99b:	29 0f f2 3b 51 c1 de 5f e5 2a 2f 99 0b 5d a3 2b     )..;Q.._.*/..].+
     9ab:	4a ab 95 a5 d3 58 56 ee 28 31 00 cc 15 46 ca e6     J....XV.(1...F..
     9bb:	86 38 3c 65 f5 e3 9f d6 5b 09 49 83 70 2d 53 a9     .8<e....[.I.p-S.
     9cb:	7d e2 c4 ac 8e 5e b8 25 f4 b9 57 f3 f1 68 47 b2     }....^.%..W..hG.
     9db:	a2 59 20 ce 34 79 5c 90 0e 1e be d5 22 23 b1 c9     .Y .4y\....."#..
     9eb:	18 62 16 2e 91 3e 07 8f d8 3f 93 3d d4 9b df 85     .b...>...?.=....
     9fb:	21 fb 11 74 97 c7 d7 dc 4c 19 45 98 e9 43 02 4b     !..t....L.E..C.K
     a0b:	bc c3 04 9c 6b f0 75 52 a7 26 f6 c5 ba cf b0 b7     ....k.uR.&......
     a1b:	ae 5a a1 bf 03 8b 80 12 6e 0c eb f9 c0 44 24 ef     .Z......n....D$.
     a2b:	10 f8 a8 8c e8 7b ff 9e 2c cd 60 36 87 b5 94 a6     .....{..,.`6....
     a3b:	54 73 3a 14 4e 01 1d b6 fd 37 48 4d 39 cb e0 32     Ts:.N....7HM9..2
	...

00000b4c <__ctors_end>:
     b4c:	11 24       	eor	r1, r1
     b4e:	1f be       	out	0x3f, r1	; 63
     b50:	cf ef       	ldi	r28, 0xFF	; 255
     b52:	d4 e0       	ldi	r29, 0x04	; 4
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	cd bf       	out	0x3d, r28	; 61

00000b58 <__do_copy_data>:
     b58:	11 e0       	ldi	r17, 0x01	; 1
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	e4 ea       	ldi	r30, 0xA4	; 164
     b60:	f1 e3       	ldi	r31, 0x31	; 49
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <.do_copy_data_start>

00000b64 <.do_copy_data_loop>:
     b64:	05 90       	lpm	r0, Z+
     b66:	0d 92       	st	X+, r0

00000b68 <.do_copy_data_start>:
     b68:	a8 32       	cpi	r26, 0x28	; 40
     b6a:	b1 07       	cpc	r27, r17
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <.do_copy_data_loop>

00000b6e <__do_clear_bss>:
     b6e:	12 e0       	ldi	r17, 0x02	; 2
     b70:	a8 e2       	ldi	r26, 0x28	; 40
     b72:	b1 e0       	ldi	r27, 0x01	; 1
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <.do_clear_bss_start>

00000b76 <.do_clear_bss_loop>:
     b76:	1d 92       	st	X+, r1

00000b78 <.do_clear_bss_start>:
     b78:	ad 39       	cpi	r26, 0x9D	; 157
     b7a:	b1 07       	cpc	r27, r17
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <.do_clear_bss_loop>
     b7e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <main>
     b82:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_exit>

00000b86 <__bad_interrupt>:
     b86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b8a <processChords>:
*/
#include "processStringState.h"

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	8c 01       	movw	r16, r24
     b94:	fb 01       	movw	r30, r22
     b96:	ea 01       	movw	r28, r20
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
				data->downOn = 1;
				data->upOn   = 0;
			}
			else
			{
				data->upOn   = 1;
     b9c:	91 e0       	ldi	r25, 0x01	; 1
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
	{
		if (stringState[guitarString] & 1)
     b9e:	db 01       	movw	r26, r22
     ba0:	8c 91       	ld	r24, X
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	10 c0       	rjmp	.+32     	; 0xbc6 <processChords+0x3c>
		{
			if (guitarString < (NUMBER_OF_STRINGS / 2))
     ba6:	23 30       	cpi	r18, 0x03	; 3
     ba8:	31 05       	cpc	r19, r1
     baa:	3c f4       	brge	.+14     	; 0xbba <processChords+0x30>
			{
				data->downOn = 1;
     bac:	d8 01       	movw	r26, r16
     bae:	16 96       	adiw	r26, 0x06	; 6
     bb0:	9c 93       	st	X, r25
     bb2:	16 97       	sbiw	r26, 0x06	; 6
				data->upOn   = 0;
     bb4:	15 96       	adiw	r26, 0x05	; 5
     bb6:	1c 92       	st	X, r1
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <processChords+0x3c>
			}
			else
			{
				data->upOn   = 1;
     bba:	d8 01       	movw	r26, r16
     bbc:	15 96       	adiw	r26, 0x05	; 5
     bbe:	9c 93       	st	X, r25
     bc0:	15 97       	sbiw	r26, 0x05	; 5
				data->downOn = 0;
     bc2:	16 96       	adiw	r26, 0x06	; 6
     bc4:	1c 92       	st	X, r1

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	6e 5f       	subi	r22, 0xFE	; 254
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	26 30       	cpi	r18, 0x06	; 6
     bd0:	31 05       	cpc	r19, r1
     bd2:	29 f7       	brne	.-54     	; 0xb9e <processChords+0x14>
	// the patterns in EEPROM. However, for debouncing, we don't want to
	// mess with the stringState[] array, so we'll mask stringState[i] every
	// time we compare it

	// First, save us some trouble and see if we're not pressing anything at all..
	if (( (stringState[0] & (~1)) == 0b00000000) &&
     bd4:	40 81       	ld	r20, Z
     bd6:	51 81       	ldd	r21, Z+1	; 0x01
     bd8:	4e 7f       	andi	r20, 0xFE	; 254
     bda:	41 15       	cp	r20, r1
     bdc:	51 05       	cpc	r21, r1
     bde:	d1 f4       	brne	.+52     	; 0xc14 <processChords+0x8a>
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	89 2b       	or	r24, r25
     be8:	a9 f4       	brne	.+42     	; 0xc14 <processChords+0x8a>
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	95 81       	ldd	r25, Z+5	; 0x05
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	89 2b       	or	r24, r25
     bf2:	81 f4       	brne	.+32     	; 0xc14 <processChords+0x8a>
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	97 81       	ldd	r25, Z+7	; 0x07
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	89 2b       	or	r24, r25
     bfc:	59 f4       	brne	.+22     	; 0xc14 <processChords+0x8a>
     bfe:	80 85       	ldd	r24, Z+8	; 0x08
     c00:	91 85       	ldd	r25, Z+9	; 0x09
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	89 2b       	or	r24, r25
     c06:	31 f4       	brne	.+12     	; 0xc14 <processChords+0x8a>
     c08:	82 85       	ldd	r24, Z+10	; 0x0a
     c0a:	93 85       	ldd	r25, Z+11	; 0x0b
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	89 2b       	or	r24, r25
     c10:	09 f4       	brne	.+2      	; 0xc14 <processChords+0x8a>
     c12:	63 c2       	rjmp	.+1222   	; 0x10da <processChords+0x550>
		return;

	// Now see if what's being played on the fretboard matches any of the button patterns in
	//  buttonStringPatterns
	// green
	if( (stringState[0] & (~1)) == buttonStringPatterns[0][0] &&
     c14:	88 81       	ld	r24, Y
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	48 17       	cp	r20, r24
     c1a:	59 07       	cpc	r21, r25
     c1c:	61 f5       	brne	.+88     	; 0xc76 <processChords+0xec>
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	2a 81       	ldd	r18, Y+2	; 0x02
     c26:	3b 81       	ldd	r19, Y+3	; 0x03
     c28:	82 17       	cp	r24, r18
     c2a:	93 07       	cpc	r25, r19
     c2c:	21 f5       	brne	.+72     	; 0xc76 <processChords+0xec>
     c2e:	84 81       	ldd	r24, Z+4	; 0x04
     c30:	95 81       	ldd	r25, Z+5	; 0x05
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	2c 81       	ldd	r18, Y+4	; 0x04
     c36:	3d 81       	ldd	r19, Y+5	; 0x05
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	e1 f4       	brne	.+56     	; 0xc76 <processChords+0xec>
     c3e:	86 81       	ldd	r24, Z+6	; 0x06
     c40:	97 81       	ldd	r25, Z+7	; 0x07
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	2e 81       	ldd	r18, Y+6	; 0x06
     c46:	3f 81       	ldd	r19, Y+7	; 0x07
     c48:	82 17       	cp	r24, r18
     c4a:	93 07       	cpc	r25, r19
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <processChords+0xec>
     c4e:	80 85       	ldd	r24, Z+8	; 0x08
     c50:	91 85       	ldd	r25, Z+9	; 0x09
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	28 85       	ldd	r18, Y+8	; 0x08
     c56:	39 85       	ldd	r19, Y+9	; 0x09
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	61 f4       	brne	.+24     	; 0xc76 <processChords+0xec>
     c5e:	82 85       	ldd	r24, Z+10	; 0x0a
     c60:	93 85       	ldd	r25, Z+11	; 0x0b
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	2a 85       	ldd	r18, Y+10	; 0x0a
     c66:	3b 85       	ldd	r19, Y+11	; 0x0b
     c68:	82 17       	cp	r24, r18
     c6a:	93 07       	cpc	r25, r19
     c6c:	21 f4       	brne	.+8      	; 0xc76 <processChords+0xec>
	    (stringState[2] & (~1)) == buttonStringPatterns[0][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[0][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[0][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[0][5]  ) 
		{
			data->greenOn = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	f8 01       	movw	r30, r16
     c72:	80 83       	st	Z, r24
     c74:	32 c2       	rjmp	.+1124   	; 0x10da <processChords+0x550>
  		}
	// red
	else if( (stringState[0] & (~1)) == buttonStringPatterns[1][0] &&
     c76:	de 01       	movw	r26, r28
     c78:	1c 96       	adiw	r26, 0x0c	; 12
     c7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c7c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c7e:	48 17       	cp	r20, r24
     c80:	59 07       	cpc	r21, r25
     c82:	a9 f5       	brne	.+106    	; 0xcee <processChords+0x164>
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	13 97       	sbiw	r26, 0x03	; 3
     c92:	82 17       	cp	r24, r18
     c94:	93 07       	cpc	r25, r19
     c96:	59 f5       	brne	.+86     	; 0xcee <processChords+0x164>
     c98:	84 81       	ldd	r24, Z+4	; 0x04
     c9a:	95 81       	ldd	r25, Z+5	; 0x05
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	14 96       	adiw	r26, 0x04	; 4
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	15 97       	sbiw	r26, 0x05	; 5
     ca6:	82 17       	cp	r24, r18
     ca8:	93 07       	cpc	r25, r19
     caa:	09 f5       	brne	.+66     	; 0xcee <processChords+0x164>
     cac:	86 81       	ldd	r24, Z+6	; 0x06
     cae:	97 81       	ldd	r25, Z+7	; 0x07
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	16 96       	adiw	r26, 0x06	; 6
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	b9 f4       	brne	.+46     	; 0xcee <processChords+0x164>
     cc0:	80 85       	ldd	r24, Z+8	; 0x08
     cc2:	91 85       	ldd	r25, Z+9	; 0x09
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	18 96       	adiw	r26, 0x08	; 8
     cc8:	2d 91       	ld	r18, X+
     cca:	3c 91       	ld	r19, X
     ccc:	19 97       	sbiw	r26, 0x09	; 9
     cce:	82 17       	cp	r24, r18
     cd0:	93 07       	cpc	r25, r19
     cd2:	69 f4       	brne	.+26     	; 0xcee <processChords+0x164>
     cd4:	82 85       	ldd	r24, Z+10	; 0x0a
     cd6:	93 85       	ldd	r25, Z+11	; 0x0b
     cd8:	8e 7f       	andi	r24, 0xFE	; 254
     cda:	1a 96       	adiw	r26, 0x0a	; 10
     cdc:	2d 91       	ld	r18, X+
     cde:	3c 91       	ld	r19, X
     ce0:	1b 97       	sbiw	r26, 0x0b	; 11
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	19 f4       	brne	.+6      	; 0xcee <processChords+0x164>
	    (stringState[2] & (~1)) == buttonStringPatterns[1][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[1][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[1][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[1][5]  ) 
		{
			data->redOn = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	d8 01       	movw	r26, r16
     cec:	f1 c0       	rjmp	.+482    	; 0xed0 <processChords+0x346>
  		}

	// yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[2][0] &&
     cee:	de 01       	movw	r26, r28
     cf0:	58 96       	adiw	r26, 0x18	; 24
     cf2:	88 8d       	ldd	r24, Y+24	; 0x18
     cf4:	99 8d       	ldd	r25, Y+25	; 0x19
     cf6:	48 17       	cp	r20, r24
     cf8:	59 07       	cpc	r21, r25
     cfa:	a9 f5       	brne	.+106    	; 0xd66 <processChords+0x1dc>
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	2d 91       	ld	r18, X+
     d06:	3c 91       	ld	r19, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	82 17       	cp	r24, r18
     d0c:	93 07       	cpc	r25, r19
     d0e:	59 f5       	brne	.+86     	; 0xd66 <processChords+0x1dc>
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	95 81       	ldd	r25, Z+5	; 0x05
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	14 96       	adiw	r26, 0x04	; 4
     d18:	2d 91       	ld	r18, X+
     d1a:	3c 91       	ld	r19, X
     d1c:	15 97       	sbiw	r26, 0x05	; 5
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	09 f5       	brne	.+66     	; 0xd66 <processChords+0x1dc>
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	97 81       	ldd	r25, Z+7	; 0x07
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	16 96       	adiw	r26, 0x06	; 6
     d2c:	2d 91       	ld	r18, X+
     d2e:	3c 91       	ld	r19, X
     d30:	17 97       	sbiw	r26, 0x07	; 7
     d32:	82 17       	cp	r24, r18
     d34:	93 07       	cpc	r25, r19
     d36:	b9 f4       	brne	.+46     	; 0xd66 <processChords+0x1dc>
     d38:	80 85       	ldd	r24, Z+8	; 0x08
     d3a:	91 85       	ldd	r25, Z+9	; 0x09
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	18 96       	adiw	r26, 0x08	; 8
     d40:	2d 91       	ld	r18, X+
     d42:	3c 91       	ld	r19, X
     d44:	19 97       	sbiw	r26, 0x09	; 9
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	69 f4       	brne	.+26     	; 0xd66 <processChords+0x1dc>
     d4c:	82 85       	ldd	r24, Z+10	; 0x0a
     d4e:	93 85       	ldd	r25, Z+11	; 0x0b
     d50:	8e 7f       	andi	r24, 0xFE	; 254
     d52:	1a 96       	adiw	r26, 0x0a	; 10
     d54:	2d 91       	ld	r18, X+
     d56:	3c 91       	ld	r19, X
     d58:	1b 97       	sbiw	r26, 0x0b	; 11
     d5a:	82 17       	cp	r24, r18
     d5c:	93 07       	cpc	r25, r19
     d5e:	19 f4       	brne	.+6      	; 0xd66 <processChords+0x1dc>
	    (stringState[2] & (~1)) == buttonStringPatterns[2][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[2][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[2][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[2][5]  ) 
		{
			 data->yellowOn = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	f8 01       	movw	r30, r16
     d64:	76 c1       	rjmp	.+748    	; 0x1052 <processChords+0x4c8>
  		}
	// blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[3][0] &&
     d66:	de 01       	movw	r26, r28
     d68:	94 96       	adiw	r26, 0x24	; 36
     d6a:	8c a1       	ldd	r24, Y+36	; 0x24
     d6c:	9d a1       	ldd	r25, Y+37	; 0x25
     d6e:	48 17       	cp	r20, r24
     d70:	59 07       	cpc	r21, r25
     d72:	a9 f5       	brne	.+106    	; 0xdde <processChords+0x254>
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	8e 7f       	andi	r24, 0xFE	; 254
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	2d 91       	ld	r18, X+
     d7e:	3c 91       	ld	r19, X
     d80:	13 97       	sbiw	r26, 0x03	; 3
     d82:	82 17       	cp	r24, r18
     d84:	93 07       	cpc	r25, r19
     d86:	59 f5       	brne	.+86     	; 0xdde <processChords+0x254>
     d88:	84 81       	ldd	r24, Z+4	; 0x04
     d8a:	95 81       	ldd	r25, Z+5	; 0x05
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	14 96       	adiw	r26, 0x04	; 4
     d90:	2d 91       	ld	r18, X+
     d92:	3c 91       	ld	r19, X
     d94:	15 97       	sbiw	r26, 0x05	; 5
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	09 f5       	brne	.+66     	; 0xdde <processChords+0x254>
     d9c:	86 81       	ldd	r24, Z+6	; 0x06
     d9e:	97 81       	ldd	r25, Z+7	; 0x07
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	16 96       	adiw	r26, 0x06	; 6
     da4:	2d 91       	ld	r18, X+
     da6:	3c 91       	ld	r19, X
     da8:	17 97       	sbiw	r26, 0x07	; 7
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	b9 f4       	brne	.+46     	; 0xdde <processChords+0x254>
     db0:	80 85       	ldd	r24, Z+8	; 0x08
     db2:	91 85       	ldd	r25, Z+9	; 0x09
     db4:	8e 7f       	andi	r24, 0xFE	; 254
     db6:	18 96       	adiw	r26, 0x08	; 8
     db8:	2d 91       	ld	r18, X+
     dba:	3c 91       	ld	r19, X
     dbc:	19 97       	sbiw	r26, 0x09	; 9
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	69 f4       	brne	.+26     	; 0xdde <processChords+0x254>
     dc4:	82 85       	ldd	r24, Z+10	; 0x0a
     dc6:	93 85       	ldd	r25, Z+11	; 0x0b
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	1a 96       	adiw	r26, 0x0a	; 10
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	1b 97       	sbiw	r26, 0x0b	; 11
     dd2:	82 17       	cp	r24, r18
     dd4:	93 07       	cpc	r25, r19
     dd6:	19 f4       	brne	.+6      	; 0xdde <processChords+0x254>
	    (stringState[2] & (~1)) == buttonStringPatterns[3][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[3][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[3][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[3][5]  ) 
		{
			 data->blueOn = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	d8 01       	movw	r26, r16
     ddc:	7c c1       	rjmp	.+760    	; 0x10d6 <processChords+0x54c>
  		}
	// orange
	else if( (stringState[0] & (~1)) == buttonStringPatterns[4][0] &&
     dde:	de 01       	movw	r26, r28
     de0:	d0 96       	adiw	r26, 0x30	; 48
     de2:	88 a9       	ldd	r24, Y+48	; 0x30
     de4:	99 a9       	ldd	r25, Y+49	; 0x31
     de6:	48 17       	cp	r20, r24
     de8:	59 07       	cpc	r21, r25
     dea:	b1 f5       	brne	.+108    	; 0xe58 <processChords+0x2ce>
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	12 96       	adiw	r26, 0x02	; 2
     df4:	2d 91       	ld	r18, X+
     df6:	3c 91       	ld	r19, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	61 f5       	brne	.+88     	; 0xe58 <processChords+0x2ce>
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	2d 91       	ld	r18, X+
     e0a:	3c 91       	ld	r19, X
     e0c:	15 97       	sbiw	r26, 0x05	; 5
     e0e:	82 17       	cp	r24, r18
     e10:	93 07       	cpc	r25, r19
     e12:	11 f5       	brne	.+68     	; 0xe58 <processChords+0x2ce>
     e14:	86 81       	ldd	r24, Z+6	; 0x06
     e16:	97 81       	ldd	r25, Z+7	; 0x07
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	16 96       	adiw	r26, 0x06	; 6
     e1c:	2d 91       	ld	r18, X+
     e1e:	3c 91       	ld	r19, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	82 17       	cp	r24, r18
     e24:	93 07       	cpc	r25, r19
     e26:	c1 f4       	brne	.+48     	; 0xe58 <processChords+0x2ce>
     e28:	80 85       	ldd	r24, Z+8	; 0x08
     e2a:	91 85       	ldd	r25, Z+9	; 0x09
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	71 f4       	brne	.+28     	; 0xe58 <processChords+0x2ce>
     e3c:	82 85       	ldd	r24, Z+10	; 0x0a
     e3e:	93 85       	ldd	r25, Z+11	; 0x0b
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	1a 96       	adiw	r26, 0x0a	; 10
     e44:	2d 91       	ld	r18, X+
     e46:	3c 91       	ld	r19, X
     e48:	1b 97       	sbiw	r26, 0x0b	; 11
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	21 f4       	brne	.+8      	; 0xe58 <processChords+0x2ce>
	    (stringState[2] & (~1)) == buttonStringPatterns[4][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[4][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[4][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[4][5]  ) 
		{
			 data->orangeOn = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	f8 01       	movw	r30, r16
     e54:	84 83       	std	Z+4, r24	; 0x04
     e56:	41 c1       	rjmp	.+642    	; 0x10da <processChords+0x550>
  		}
	//Green and Red
	else if( (stringState[0] & (~1)) == buttonStringPatterns[5][0] &&
     e58:	de 01       	movw	r26, r28
     e5a:	dc 96       	adiw	r26, 0x3c	; 60
     e5c:	8c ad       	ldd	r24, Y+60	; 0x3c
     e5e:	9d ad       	ldd	r25, Y+61	; 0x3d
     e60:	48 17       	cp	r20, r24
     e62:	59 07       	cpc	r21, r25
     e64:	c1 f5       	brne	.+112    	; 0xed6 <processChords+0x34c>
     e66:	82 81       	ldd	r24, Z+2	; 0x02
     e68:	93 81       	ldd	r25, Z+3	; 0x03
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	12 96       	adiw	r26, 0x02	; 2
     e6e:	2d 91       	ld	r18, X+
     e70:	3c 91       	ld	r19, X
     e72:	13 97       	sbiw	r26, 0x03	; 3
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	71 f5       	brne	.+92     	; 0xed6 <processChords+0x34c>
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	95 81       	ldd	r25, Z+5	; 0x05
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	14 96       	adiw	r26, 0x04	; 4
     e82:	2d 91       	ld	r18, X+
     e84:	3c 91       	ld	r19, X
     e86:	15 97       	sbiw	r26, 0x05	; 5
     e88:	82 17       	cp	r24, r18
     e8a:	93 07       	cpc	r25, r19
     e8c:	21 f5       	brne	.+72     	; 0xed6 <processChords+0x34c>
     e8e:	86 81       	ldd	r24, Z+6	; 0x06
     e90:	97 81       	ldd	r25, Z+7	; 0x07
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	16 96       	adiw	r26, 0x06	; 6
     e96:	2d 91       	ld	r18, X+
     e98:	3c 91       	ld	r19, X
     e9a:	17 97       	sbiw	r26, 0x07	; 7
     e9c:	82 17       	cp	r24, r18
     e9e:	93 07       	cpc	r25, r19
     ea0:	d1 f4       	brne	.+52     	; 0xed6 <processChords+0x34c>
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	91 85       	ldd	r25, Z+9	; 0x09
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	18 96       	adiw	r26, 0x08	; 8
     eaa:	2d 91       	ld	r18, X+
     eac:	3c 91       	ld	r19, X
     eae:	19 97       	sbiw	r26, 0x09	; 9
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	81 f4       	brne	.+32     	; 0xed6 <processChords+0x34c>
     eb6:	82 85       	ldd	r24, Z+10	; 0x0a
     eb8:	93 85       	ldd	r25, Z+11	; 0x0b
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	1a 96       	adiw	r26, 0x0a	; 10
     ebe:	2d 91       	ld	r18, X+
     ec0:	3c 91       	ld	r19, X
     ec2:	1b 97       	sbiw	r26, 0x0b	; 11
     ec4:	82 17       	cp	r24, r18
     ec6:	93 07       	cpc	r25, r19
     ec8:	31 f4       	brne	.+12     	; 0xed6 <processChords+0x34c>
	    (stringState[2] & (~1)) == buttonStringPatterns[5][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[5][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[5][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[5][5]  ) 
		{
			data->greenOn = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	d8 01       	movw	r26, r16
     ece:	8c 93       	st	X, r24
			data->redOn = 1;
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	8c 93       	st	X, r24
     ed4:	02 c1       	rjmp	.+516    	; 0x10da <processChords+0x550>
  		}
	//Red and Yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[6][0] &&
     ed6:	de 01       	movw	r26, r28
     ed8:	a8 5b       	subi	r26, 0xB8	; 184
     eda:	bf 4f       	sbci	r27, 0xFF	; 255
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	11 97       	sbiw	r26, 0x01	; 1
     ee2:	48 17       	cp	r20, r24
     ee4:	59 07       	cpc	r21, r25
     ee6:	b1 f5       	brne	.+108    	; 0xf54 <processChords+0x3ca>
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	8e 7f       	andi	r24, 0xFE	; 254
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	2d 91       	ld	r18, X+
     ef2:	3c 91       	ld	r19, X
     ef4:	13 97       	sbiw	r26, 0x03	; 3
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	61 f5       	brne	.+88     	; 0xf54 <processChords+0x3ca>
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	95 81       	ldd	r25, Z+5	; 0x05
     f00:	8e 7f       	andi	r24, 0xFE	; 254
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	2d 91       	ld	r18, X+
     f06:	3c 91       	ld	r19, X
     f08:	15 97       	sbiw	r26, 0x05	; 5
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	11 f5       	brne	.+68     	; 0xf54 <processChords+0x3ca>
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	97 81       	ldd	r25, Z+7	; 0x07
     f14:	8e 7f       	andi	r24, 0xFE	; 254
     f16:	16 96       	adiw	r26, 0x06	; 6
     f18:	2d 91       	ld	r18, X+
     f1a:	3c 91       	ld	r19, X
     f1c:	17 97       	sbiw	r26, 0x07	; 7
     f1e:	82 17       	cp	r24, r18
     f20:	93 07       	cpc	r25, r19
     f22:	c1 f4       	brne	.+48     	; 0xf54 <processChords+0x3ca>
     f24:	80 85       	ldd	r24, Z+8	; 0x08
     f26:	91 85       	ldd	r25, Z+9	; 0x09
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	18 96       	adiw	r26, 0x08	; 8
     f2c:	2d 91       	ld	r18, X+
     f2e:	3c 91       	ld	r19, X
     f30:	19 97       	sbiw	r26, 0x09	; 9
     f32:	82 17       	cp	r24, r18
     f34:	93 07       	cpc	r25, r19
     f36:	71 f4       	brne	.+28     	; 0xf54 <processChords+0x3ca>
     f38:	82 85       	ldd	r24, Z+10	; 0x0a
     f3a:	93 85       	ldd	r25, Z+11	; 0x0b
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	1a 96       	adiw	r26, 0x0a	; 10
     f40:	2d 91       	ld	r18, X+
     f42:	3c 91       	ld	r19, X
     f44:	1b 97       	sbiw	r26, 0x0b	; 11
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	21 f4       	brne	.+8      	; 0xf54 <processChords+0x3ca>
	    (stringState[2] & (~1)) == buttonStringPatterns[6][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[6][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[6][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[6][5]  ) 
		{
			data->redOn = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	f8 01       	movw	r30, r16
     f50:	81 83       	std	Z+1, r24	; 0x01
     f52:	7f c0       	rjmp	.+254    	; 0x1052 <processChords+0x4c8>
			data->yellowOn = 1;
  		}
	// Yellow and Blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[7][0] &&
     f54:	de 01       	movw	r26, r28
     f56:	ac 5a       	subi	r26, 0xAC	; 172
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	11 97       	sbiw	r26, 0x01	; 1
     f60:	48 17       	cp	r20, r24
     f62:	59 07       	cpc	r21, r25
     f64:	c1 f5       	brne	.+112    	; 0xfd6 <processChords+0x44c>
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	8e 7f       	andi	r24, 0xFE	; 254
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	2d 91       	ld	r18, X+
     f70:	3c 91       	ld	r19, X
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	71 f5       	brne	.+92     	; 0xfd6 <processChords+0x44c>
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	95 81       	ldd	r25, Z+5	; 0x05
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	14 96       	adiw	r26, 0x04	; 4
     f82:	2d 91       	ld	r18, X+
     f84:	3c 91       	ld	r19, X
     f86:	15 97       	sbiw	r26, 0x05	; 5
     f88:	82 17       	cp	r24, r18
     f8a:	93 07       	cpc	r25, r19
     f8c:	21 f5       	brne	.+72     	; 0xfd6 <processChords+0x44c>
     f8e:	86 81       	ldd	r24, Z+6	; 0x06
     f90:	97 81       	ldd	r25, Z+7	; 0x07
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	16 96       	adiw	r26, 0x06	; 6
     f96:	2d 91       	ld	r18, X+
     f98:	3c 91       	ld	r19, X
     f9a:	17 97       	sbiw	r26, 0x07	; 7
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	d1 f4       	brne	.+52     	; 0xfd6 <processChords+0x44c>
     fa2:	80 85       	ldd	r24, Z+8	; 0x08
     fa4:	91 85       	ldd	r25, Z+9	; 0x09
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	18 96       	adiw	r26, 0x08	; 8
     faa:	2d 91       	ld	r18, X+
     fac:	3c 91       	ld	r19, X
     fae:	19 97       	sbiw	r26, 0x09	; 9
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	81 f4       	brne	.+32     	; 0xfd6 <processChords+0x44c>
     fb6:	82 85       	ldd	r24, Z+10	; 0x0a
     fb8:	93 85       	ldd	r25, Z+11	; 0x0b
     fba:	8e 7f       	andi	r24, 0xFE	; 254
     fbc:	1a 96       	adiw	r26, 0x0a	; 10
     fbe:	2d 91       	ld	r18, X+
     fc0:	3c 91       	ld	r19, X
     fc2:	1b 97       	sbiw	r26, 0x0b	; 11
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <processChords+0x44c>
	    (stringState[2] & (~1)) == buttonStringPatterns[7][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[7][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[7][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[7][5]  ) 
		{
			 data->yellowOn = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	d8 01       	movw	r26, r16
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	8c 93       	st	X, r24
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	80 c0       	rjmp	.+256    	; 0x10d6 <processChords+0x54c>
			 data->blueOn = 1;
  		}
	// Green and Yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[8][0] &&
     fd6:	de 01       	movw	r26, r28
     fd8:	a0 5a       	subi	r26, 0xA0	; 160
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	11 97       	sbiw	r26, 0x01	; 1
     fe2:	48 17       	cp	r20, r24
     fe4:	59 07       	cpc	r21, r25
     fe6:	b9 f5       	brne	.+110    	; 0x1056 <processChords+0x4cc>
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	2d 91       	ld	r18, X+
     ff2:	3c 91       	ld	r19, X
     ff4:	13 97       	sbiw	r26, 0x03	; 3
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	69 f5       	brne	.+90     	; 0x1056 <processChords+0x4cc>
     ffc:	84 81       	ldd	r24, Z+4	; 0x04
     ffe:	95 81       	ldd	r25, Z+5	; 0x05
    1000:	8e 7f       	andi	r24, 0xFE	; 254
    1002:	14 96       	adiw	r26, 0x04	; 4
    1004:	2d 91       	ld	r18, X+
    1006:	3c 91       	ld	r19, X
    1008:	15 97       	sbiw	r26, 0x05	; 5
    100a:	82 17       	cp	r24, r18
    100c:	93 07       	cpc	r25, r19
    100e:	19 f5       	brne	.+70     	; 0x1056 <processChords+0x4cc>
    1010:	86 81       	ldd	r24, Z+6	; 0x06
    1012:	97 81       	ldd	r25, Z+7	; 0x07
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	2d 91       	ld	r18, X+
    101a:	3c 91       	ld	r19, X
    101c:	17 97       	sbiw	r26, 0x07	; 7
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	c9 f4       	brne	.+50     	; 0x1056 <processChords+0x4cc>
    1024:	80 85       	ldd	r24, Z+8	; 0x08
    1026:	91 85       	ldd	r25, Z+9	; 0x09
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	18 96       	adiw	r26, 0x08	; 8
    102c:	2d 91       	ld	r18, X+
    102e:	3c 91       	ld	r19, X
    1030:	19 97       	sbiw	r26, 0x09	; 9
    1032:	82 17       	cp	r24, r18
    1034:	93 07       	cpc	r25, r19
    1036:	79 f4       	brne	.+30     	; 0x1056 <processChords+0x4cc>
    1038:	82 85       	ldd	r24, Z+10	; 0x0a
    103a:	93 85       	ldd	r25, Z+11	; 0x0b
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	1a 96       	adiw	r26, 0x0a	; 10
    1040:	2d 91       	ld	r18, X+
    1042:	3c 91       	ld	r19, X
    1044:	1b 97       	sbiw	r26, 0x0b	; 11
    1046:	82 17       	cp	r24, r18
    1048:	93 07       	cpc	r25, r19
    104a:	29 f4       	brne	.+10     	; 0x1056 <processChords+0x4cc>
	    (stringState[2] & (~1)) == buttonStringPatterns[8][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[8][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[8][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[8][5]  ) 
		{
			 data->greenOn = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	f8 01       	movw	r30, r16
    1050:	80 83       	st	Z, r24
			 data->yellowOn = 1;
    1052:	82 83       	std	Z+2, r24	; 0x02
    1054:	42 c0       	rjmp	.+132    	; 0x10da <processChords+0x550>
  		}
	// Red and Blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[9][0] &&
    1056:	de 01       	movw	r26, r28
    1058:	a4 59       	subi	r26, 0x94	; 148
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	48 17       	cp	r20, r24
    1064:	59 07       	cpc	r21, r25
    1066:	c9 f5       	brne	.+114    	; 0x10da <processChords+0x550>
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	13 97       	sbiw	r26, 0x03	; 3
    1076:	82 17       	cp	r24, r18
    1078:	93 07       	cpc	r25, r19
    107a:	79 f5       	brne	.+94     	; 0x10da <processChords+0x550>
    107c:	84 81       	ldd	r24, Z+4	; 0x04
    107e:	95 81       	ldd	r25, Z+5	; 0x05
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	14 96       	adiw	r26, 0x04	; 4
    1084:	2d 91       	ld	r18, X+
    1086:	3c 91       	ld	r19, X
    1088:	15 97       	sbiw	r26, 0x05	; 5
    108a:	82 17       	cp	r24, r18
    108c:	93 07       	cpc	r25, r19
    108e:	29 f5       	brne	.+74     	; 0x10da <processChords+0x550>
    1090:	86 81       	ldd	r24, Z+6	; 0x06
    1092:	97 81       	ldd	r25, Z+7	; 0x07
    1094:	8e 7f       	andi	r24, 0xFE	; 254
    1096:	16 96       	adiw	r26, 0x06	; 6
    1098:	2d 91       	ld	r18, X+
    109a:	3c 91       	ld	r19, X
    109c:	17 97       	sbiw	r26, 0x07	; 7
    109e:	82 17       	cp	r24, r18
    10a0:	93 07       	cpc	r25, r19
    10a2:	d9 f4       	brne	.+54     	; 0x10da <processChords+0x550>
    10a4:	80 85       	ldd	r24, Z+8	; 0x08
    10a6:	91 85       	ldd	r25, Z+9	; 0x09
    10a8:	8e 7f       	andi	r24, 0xFE	; 254
    10aa:	18 96       	adiw	r26, 0x08	; 8
    10ac:	2d 91       	ld	r18, X+
    10ae:	3c 91       	ld	r19, X
    10b0:	19 97       	sbiw	r26, 0x09	; 9
    10b2:	82 17       	cp	r24, r18
    10b4:	93 07       	cpc	r25, r19
    10b6:	89 f4       	brne	.+34     	; 0x10da <processChords+0x550>
    10b8:	82 85       	ldd	r24, Z+10	; 0x0a
    10ba:	93 85       	ldd	r25, Z+11	; 0x0b
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	1a 96       	adiw	r26, 0x0a	; 10
    10c0:	2d 91       	ld	r18, X+
    10c2:	3c 91       	ld	r19, X
    10c4:	1b 97       	sbiw	r26, 0x0b	; 11
    10c6:	82 17       	cp	r24, r18
    10c8:	93 07       	cpc	r25, r19
    10ca:	39 f4       	brne	.+14     	; 0x10da <processChords+0x550>
	    (stringState[2] & (~1)) == buttonStringPatterns[9][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[9][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[9][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[9][5]  ) 
		{
			 data->redOn = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	d8 01       	movw	r26, r16
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	8c 93       	st	X, r24
    10d4:	11 97       	sbiw	r26, 0x01	; 1
			 data->blueOn = 1;
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	8c 93       	st	X, r24
  		}

	return;
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <processNotes>:

void processNotes(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	dc 01       	movw	r26, r24
    10f2:	fb 01       	movw	r30, r22
	/* If we're playing with notes on a scale, then we have to figure out if the proper note is being
	   played, and also if we strummed the correct string.
	 */
	// First thing, we need to reset the strumming code, since we need to check and see if we 
	//  strummed on the correct string or not
	data->upOn = 0;
    10f4:	15 96       	adiw	r26, 0x05	; 5
    10f6:	1c 92       	st	X, r1
    10f8:	15 97       	sbiw	r26, 0x05	; 5
	data->downOn = 0;
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	1c 92       	st	X, r1
    10fe:	16 97       	sbiw	r26, 0x06	; 6
						// are numbered 0-5
	char buttonPressed = 0;
	char strumPressed  = 0;

	//We also hardcode in a down strum on the empty 6th string, for navigation
	if (stringState[0] & 1)
    1100:	80 81       	ld	r24, Z
    1102:	80 ff       	sbrs	r24, 0
    1104:	04 c0       	rjmp	.+8      	; 0x110e <processNotes+0x2a>
	{
		data->downOn = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	8c 93       	st	X, r24
    110c:	16 97       	sbiw	r26, 0x06	; 6
    110e:	7f 01       	movw	r14, r30
    1110:	fa 01       	movw	r30, r20
    1112:	ba 01       	movw	r22, r20
    1114:	6c 5d       	subi	r22, 0xDC	; 220
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	4f ef       	ldi	r20, 0xFF	; 255
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
					buttonPressed = 1;
					}				
				if (maskedStringState == buttonStringPatterns[4][i] && 
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
    111e:	11 e0       	ldi	r17, 0x01	; 1
		data->downOn = 1;
	}

	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
	{
		if (stringState[i] != 0) // Only look at strings that are being touched or strummed
    1120:	e7 01       	movw	r28, r14
    1122:	88 81       	ld	r24, Y
    1124:	99 81       	ldd	r25, Y+1	; 0x01
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	09 f4       	brne	.+2      	; 0x112c <processNotes+0x48>
    112a:	7b c0       	rjmp	.+246    	; 0x1222 <processNotes+0x13e>
		{
			// Check for open strings being strummed first
			if (stringState[i] == 1) // This means we're strumming an open string
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	91 05       	cpc	r25, r1
    1130:	c9 f5       	brne	.+114    	; 0x11a4 <processNotes+0xc0>
			{
				if (stringState[i] == buttonStringPatterns[0][i])
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	11 f4       	brne	.+4      	; 0x113e <processNotes+0x5a>
				{
					strumOn = i;
					data->greenOn =  1;	
    113a:	1c 93       	st	X, r17
    113c:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[1][i])
    113e:	e7 01       	movw	r28, r14
    1140:	28 81       	ld	r18, Y
    1142:	39 81       	ldd	r19, Y+1	; 0x01
    1144:	84 85       	ldd	r24, Z+12	; 0x0c
    1146:	95 85       	ldd	r25, Z+13	; 0x0d
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	21 f4       	brne	.+8      	; 0x1156 <processNotes+0x72>
				{
					strumOn = i;
					data->redOn =  1;	
    114e:	11 96       	adiw	r26, 0x01	; 1
    1150:	1c 93       	st	X, r17
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[2][i])
    1156:	e7 01       	movw	r28, r14
    1158:	28 81       	ld	r18, Y
    115a:	39 81       	ldd	r19, Y+1	; 0x01
    115c:	80 8d       	ldd	r24, Z+24	; 0x18
    115e:	91 8d       	ldd	r25, Z+25	; 0x19
    1160:	28 17       	cp	r18, r24
    1162:	39 07       	cpc	r19, r25
    1164:	21 f4       	brne	.+8      	; 0x116e <processNotes+0x8a>
				{
					strumOn = i;
					data->yellowOn =  1;
    1166:	12 96       	adiw	r26, 0x02	; 2
    1168:	1c 93       	st	X, r17
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[3][i])
    116e:	e7 01       	movw	r28, r14
    1170:	28 81       	ld	r18, Y
    1172:	39 81       	ldd	r19, Y+1	; 0x01
    1174:	eb 01       	movw	r28, r22
    1176:	88 81       	ld	r24, Y
    1178:	99 81       	ldd	r25, Y+1	; 0x01
    117a:	28 17       	cp	r18, r24
    117c:	39 07       	cpc	r19, r25
    117e:	21 f4       	brne	.+8      	; 0x1188 <processNotes+0xa4>
				{
					strumOn = i;
					data->blueOn =  1;
    1180:	13 96       	adiw	r26, 0x03	; 3
    1182:	1c 93       	st	X, r17
    1184:	13 97       	sbiw	r26, 0x03	; 3
    1186:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[4][i])
    1188:	e7 01       	movw	r28, r14
    118a:	28 81       	ld	r18, Y
    118c:	39 81       	ldd	r19, Y+1	; 0x01
    118e:	eb 01       	movw	r28, r22
    1190:	8c 85       	ldd	r24, Y+12	; 0x0c
    1192:	9d 85       	ldd	r25, Y+13	; 0x0d
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	39 f4       	brne	.+14     	; 0x11a8 <processNotes+0xc4>
				{
					strumOn = i;
					data->orangeOn =  1;				
    119a:	14 96       	adiw	r26, 0x04	; 4
    119c:	1c 93       	st	X, r17
    119e:	14 97       	sbiw	r26, 0x04	; 4
    11a0:	45 2f       	mov	r20, r21
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <processNotes+0xc4>
			}
			 // Now we have checked for strummed notes, we need to check for pressed notes
			 //  so that we can display them for reference as well as use them when strummed
			else
				// First see if we're strumming or not
				strumPressed = stringState[i] & 1;
    11a4:	08 2f       	mov	r16, r24
    11a6:	01 70       	andi	r16, 0x01	; 1

				// 	maskedStringState[i] is a masked version of the 
				//  stringState that removes the strum data, so we can match
				//  the fret pressing against the prebuilt pattern without
				//  worrying about strumming or changing the stringState array
				int maskedStringState = stringState[i] & (~1);
    11a8:	e7 01       	movw	r28, r14
    11aa:	28 81       	ld	r18, Y
    11ac:	39 81       	ldd	r19, Y+1	; 0x01
    11ae:	2e 7f       	andi	r18, 0xFE	; 254

				// Take care of displaying closed notes
				if (maskedStringState == buttonStringPatterns[0][i]&& 
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	21 f4       	brne	.+8      	; 0x11c2 <processNotes+0xde>
    11ba:	21 15       	cp	r18, r1
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <processNotes+0xde>
										buttonStringPatterns[0][i] != 0)
				{
					data->greenOn =  1;	
    11c0:	1c 93       	st	X, r17
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[1][i] && 
    11c2:	84 85       	ldd	r24, Z+12	; 0x0c
    11c4:	95 85       	ldd	r25, Z+13	; 0x0d
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	31 f4       	brne	.+12     	; 0x11d8 <processNotes+0xf4>
    11cc:	21 15       	cp	r18, r1
    11ce:	31 05       	cpc	r19, r1
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <processNotes+0xf4>
										buttonStringPatterns[1][i] != 0)
				{
					data->redOn =  1;	
    11d2:	11 96       	adiw	r26, 0x01	; 1
    11d4:	1c 93       	st	X, r17
    11d6:	11 97       	sbiw	r26, 0x01	; 1
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[2][i] && 
    11d8:	80 8d       	ldd	r24, Z+24	; 0x18
    11da:	91 8d       	ldd	r25, Z+25	; 0x19
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	31 f4       	brne	.+12     	; 0x11ee <processNotes+0x10a>
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	19 f0       	breq	.+6      	; 0x11ee <processNotes+0x10a>
										buttonStringPatterns[2][i] != 0)
					{
					data->yellowOn =  1;
    11e8:	12 96       	adiw	r26, 0x02	; 2
    11ea:	1c 93       	st	X, r17
    11ec:	12 97       	sbiw	r26, 0x02	; 2
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[3][i] && 
    11ee:	eb 01       	movw	r28, r22
    11f0:	88 81       	ld	r24, Y
    11f2:	99 81       	ldd	r25, Y+1	; 0x01
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	31 f4       	brne	.+12     	; 0x1206 <processNotes+0x122>
    11fa:	21 15       	cp	r18, r1
    11fc:	31 05       	cpc	r19, r1
    11fe:	19 f0       	breq	.+6      	; 0x1206 <processNotes+0x122>
										buttonStringPatterns[3][i] != 0)
				{
					data->blueOn =  1;
    1200:	13 96       	adiw	r26, 0x03	; 3
    1202:	1c 93       	st	X, r17
    1204:	13 97       	sbiw	r26, 0x03	; 3
					buttonPressed = 1;
					}				
				if (maskedStringState == buttonStringPatterns[4][i] && 
    1206:	eb 01       	movw	r28, r22
    1208:	8c 85       	ldd	r24, Y+12	; 0x0c
    120a:	9d 85       	ldd	r25, Y+13	; 0x0d
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	29 f4       	brne	.+10     	; 0x121c <processNotes+0x138>
    1212:	23 2b       	or	r18, r19
    1214:	19 f0       	breq	.+6      	; 0x121c <processNotes+0x138>
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
    1216:	14 96       	adiw	r26, 0x04	; 4
    1218:	1c 93       	st	X, r17
    121a:	14 97       	sbiw	r26, 0x04	; 4
					buttonPressed = 1;									
				}
					// Now deal with strumming
				if ((buttonPressed = 1) && (strumPressed == 1))
    121c:	01 30       	cpi	r16, 0x01	; 1
    121e:	09 f4       	brne	.+2      	; 0x1222 <processNotes+0x13e>
    1220:	45 2f       	mov	r20, r21
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	e8 0e       	add	r14, r24
    1228:	f9 1e       	adc	r15, r25
    122a:	5f 5f       	subi	r21, 0xFF	; 255
    122c:	32 96       	adiw	r30, 0x02	; 2
    122e:	6e 5f       	subi	r22, 0xFE	; 254
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
	if (stringState[0] & 1)
	{
		data->downOn = 1;
	}

	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
    1232:	56 30       	cpi	r21, 0x06	; 6
    1234:	09 f0       	breq	.+2      	; 0x1238 <processNotes+0x154>
    1236:	74 cf       	rjmp	.-280    	; 0x1120 <processNotes+0x3c>
				}
			}
	}

	//Now set the strum buttons properly, so we can have both up and down if we're in this mode
	if ((strumOn >= 0) && (strumOn < (NUMBER_OF_STRINGS / 2)))
    1238:	43 30       	cpi	r20, 0x03	; 3
    123a:	20 f4       	brcc	.+8      	; 0x1244 <processNotes+0x160>
	{
		data->downOn = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	16 96       	adiw	r26, 0x06	; 6
    1240:	8c 93       	st	X, r24
    1242:	0b c0       	rjmp	.+22     	; 0x125a <processNotes+0x176>
	}
	else if ((strumOn >= (NUMBER_OF_STRINGS / 2)) && (strumOn < NUMBER_OF_STRINGS ) && (data->downOn != 1))
    1244:	43 50       	subi	r20, 0x03	; 3
    1246:	43 30       	cpi	r20, 0x03	; 3
    1248:	40 f4       	brcc	.+16     	; 0x125a <processNotes+0x176>
    124a:	16 96       	adiw	r26, 0x06	; 6
    124c:	8c 91       	ld	r24, X
    124e:	16 97       	sbiw	r26, 0x06	; 6
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	19 f0       	breq	.+6      	; 0x125a <processNotes+0x176>
	{
		data->upOn = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	15 96       	adiw	r26, 0x05	; 5
    1258:	8c 93       	st	X, r24
	}

	return;
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	08 95       	ret

00001268 <processFrets>:

void processFrets(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	fc 01       	movw	r30, r24
    127c:	5b 01       	movw	r10, r22
    127e:	d8 01       	movw	r26, r16
    1280:	89 01       	movw	r16, r18
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
		    	{
		        	data->greenOn = 1;
    1286:	ff 24       	eor	r15, r15
    1288:	f3 94       	inc	r15
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
		      triedGreen[guitarString] = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	c8 2e       	mov	r12, r24
    128e:	d1 2c       	mov	r13, r1
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
	{
		//First, we'll see if we're pressing anything at all (ignores strumming)
		if (stringState[guitarString] > 1)
    1290:	e5 01       	movw	r28, r10
    1292:	88 81       	ld	r24, Y
    1294:	99 81       	ldd	r25, Y+1	; 0x01
    1296:	02 97       	sbiw	r24, 0x02	; 2
    1298:	1c f0       	brlt	.+6      	; 0x12a0 <processFrets+0x38>
			data->numberOfStringsPressed++;
    129a:	81 85       	ldd	r24, Z+9	; 0x09
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	81 87       	std	Z+9, r24	; 0x09

		// find the proper value by masking the stringState variable for each fret
		char orange = (stringState[guitarString] & (1<<5));
    12a0:	e5 01       	movw	r28, r10
    12a2:	88 81       	ld	r24, Y
		char blue   = (stringState[guitarString] & (1<<4));
    12a4:	98 2f       	mov	r25, r24
    12a6:	90 71       	andi	r25, 0x10	; 16
		char yellow = (stringState[guitarString] & (1<<3));
    12a8:	28 2f       	mov	r18, r24
    12aa:	28 70       	andi	r18, 0x08	; 8
		char red    = (stringState[guitarString] & (1<<2));
    12ac:	38 2f       	mov	r19, r24
    12ae:	34 70       	andi	r19, 0x04	; 4
		char green  = (stringState[guitarString] & (1<<1));
    12b0:	48 2f       	mov	r20, r24
    12b2:	42 70       	andi	r20, 0x02	; 2
		if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    12b4:	85 ff       	sbrs	r24, 5
    12b6:	07 c0       	rjmp	.+14     	; 0x12c6 <processFrets+0x5e>
    12b8:	99 23       	and	r25, r25
    12ba:	71 f0       	breq	.+28     	; 0x12d8 <processFrets+0x70>
    12bc:	84 81       	ldd	r24, Z+4	; 0x04
    12be:	88 23       	and	r24, r24
    12c0:	21 f4       	brne	.+8      	; 0x12ca <processFrets+0x62>
		{    
		    data->orangeOn = 1;
    12c2:	f4 82       	std	Z+4, r15	; 0x04
    12c4:	40 c0       	rjmp	.+128    	; 0x1346 <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    12c6:	99 23       	and	r25, r25
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <processFrets+0x70>
    12ca:	22 23       	and	r18, r18
    12cc:	71 f0       	breq	.+28     	; 0x12ea <processFrets+0x82>
    12ce:	83 81       	ldd	r24, Z+3	; 0x03
    12d0:	88 23       	and	r24, r24
    12d2:	21 f4       	brne	.+8      	; 0x12dc <processFrets+0x74>
		{
		    data->blueOn = 1;
    12d4:	f3 82       	std	Z+3, r15	; 0x03
    12d6:	37 c0       	rjmp	.+110    	; 0x1346 <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    12d8:	22 23       	and	r18, r18
    12da:	39 f0       	breq	.+14     	; 0x12ea <processFrets+0x82>
    12dc:	33 23       	and	r19, r19
    12de:	71 f0       	breq	.+28     	; 0x12fc <processFrets+0x94>
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	88 23       	and	r24, r24
    12e4:	21 f4       	brne	.+8      	; 0x12ee <processFrets+0x86>
		{
		    data->yellowOn = 1;
    12e6:	f2 82       	std	Z+2, r15	; 0x02
    12e8:	2e c0       	rjmp	.+92     	; 0x1346 <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((red != 0) && (green != 0) && (data->redOn == 0))
    12ea:	33 23       	and	r19, r19
    12ec:	39 f0       	breq	.+14     	; 0x12fc <processFrets+0x94>
    12ee:	44 23       	and	r20, r20
    12f0:	51 f1       	breq	.+84     	; 0x1346 <processFrets+0xde>
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	88 23       	and	r24, r24
    12f6:	21 f4       	brne	.+8      	; 0x1300 <processFrets+0x98>
		{
		    data->redOn = 1;
    12f8:	f1 82       	std	Z+1, r15	; 0x01
    12fa:	25 c0       	rjmp	.+74     	; 0x1346 <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if (green != 0)
    12fc:	44 23       	and	r20, r20
    12fe:	19 f1       	breq	.+70     	; 0x1346 <processFrets+0xde>
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	11 97       	sbiw	r26, 0x01	; 1
    1306:	89 2b       	or	r24, r25
    1308:	59 f4       	brne	.+22     	; 0x1320 <processFrets+0xb8>
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
    130a:	80 91 84 00 	lds	r24, 0x0084
    130e:	90 91 85 00 	lds	r25, 0x0085
    1312:	e8 01       	movw	r28, r16
    1314:	99 83       	std	Y+1, r25	; 0x01
    1316:	88 83       	st	Y, r24
		      triedGreen[guitarString] = 1;
    1318:	11 96       	adiw	r26, 0x01	; 1
    131a:	dc 92       	st	X, r13
    131c:	ce 92       	st	-X, r12
    131e:	16 c0       	rjmp	.+44     	; 0x134c <processFrets+0xe4>
		    }
		    else //triedGreen == true
		    {
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
    1320:	20 91 84 00 	lds	r18, 0x0084
    1324:	30 91 85 00 	lds	r19, 0x0085
    1328:	e8 01       	movw	r28, r16
    132a:	48 81       	ld	r20, Y
    132c:	59 81       	ldd	r21, Y+1	; 0x01
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    132e:	80 81       	ld	r24, Z
    1330:	88 23       	and	r24, r24
    1332:	61 f4       	brne	.+24     	; 0x134c <processFrets+0xe4>
    1334:	21 50       	subi	r18, 0x01	; 1
    1336:	30 40       	sbci	r19, 0x00	; 0
    1338:	24 1b       	sub	r18, r20
    133a:	35 0b       	sbc	r19, r21
    133c:	24 36       	cpi	r18, 0x64	; 100
    133e:	31 05       	cpc	r19, r1
    1340:	28 f0       	brcs	.+10     	; 0x134c <processFrets+0xe4>
		    	{
		        	data->greenOn = 1;
    1342:	f0 82       	st	Z, r15
    1344:	03 c0       	rjmp	.+6      	; 0x134c <processFrets+0xe4>
		    	}
		    }
		}
	    else  //no buttons pressed
	    {
	        triedGreen[guitarString] = 0;
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	1c 92       	st	X, r1
    134a:	1e 92       	st	-X, r1
		the strum has a direction, so if you strum the
		top 3 strings, you strum down, and if you strum
		the bottom 3 strings, you're strumming up.
	*/
		// Check for strumming
		if (stringState[guitarString] & 1)
    134c:	e5 01       	movw	r28, r10
    134e:	88 81       	ld	r24, Y
    1350:	80 ff       	sbrs	r24, 0
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <processFrets+0xfc>
		{
			if (guitarString < (NUMBER_OF_STRINGS / 2))
    1354:	63 30       	cpi	r22, 0x03	; 3
    1356:	71 05       	cpc	r23, r1
    1358:	1c f4       	brge	.+6      	; 0x1360 <processFrets+0xf8>
			{
				data->downOn = 1;
    135a:	f6 82       	std	Z+6, r15	; 0x06
				data->upOn   = 0;
    135c:	15 82       	std	Z+5, r1	; 0x05
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <processFrets+0xfc>
			}
			else
			{
				data->upOn   = 1;
    1360:	f5 82       	std	Z+5, r15	; 0x05
				data->downOn = 0;
    1362:	16 82       	std	Z+6, r1	; 0x06
		you don't want that to register as a green button press.  So we do some
		timing on that one, so when you press just green, it starts counting
		instead of turing greenOn on, so if the red fret is turned on before it
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a8 0e       	add	r10, r24
    136e:	b9 1e       	adc	r11, r25
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	0e 5f       	subi	r16, 0xFE	; 254
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	66 30       	cpi	r22, 0x06	; 6
    1378:	71 05       	cpc	r23, r1
    137a:	09 f0       	breq	.+2      	; 0x137e <processFrets+0x116>
    137c:	89 cf       	rjmp	.-238    	; 0x1290 <processFrets+0x28>
	}	// end of for loop

	// Code for fixing some issues with gap chords (green/yellow, red/blue, etc.)
	// If we're not pressing all the strings, make sure that gap chords are only showing
	// when we press all strings
	if (data->numberOfStringsPressed < NUMBER_OF_STRINGS)
    137e:	81 85       	ldd	r24, Z+9	; 0x09
    1380:	86 30       	cpi	r24, 0x06	; 6
    1382:	48 f5       	brcc	.+82     	; 0x13d6 <processFrets+0x16e>
	{
		if(data->blueOn   &&
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	88 23       	and	r24, r24
    1388:	59 f0       	breq	.+22     	; 0x13a0 <processFrets+0x138>
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	88 23       	and	r24, r24
    138e:	41 f0       	breq	.+16     	; 0x13a0 <processFrets+0x138>
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	88 23       	and	r24, r24
    1394:	29 f0       	breq	.+10     	; 0x13a0 <processFrets+0x138>
    1396:	80 81       	ld	r24, Z
    1398:	88 23       	and	r24, r24
    139a:	11 f0       	breq	.+4      	; 0x13a0 <processFrets+0x138>
		   data->yellowOn &&
		   data->redOn    &&
		   data->greenOn)
		{
		   	data->yellowOn = 0;
    139c:	12 82       	std	Z+2, r1	; 0x02
			data->greenOn  = 0;
    139e:	10 82       	st	Z, r1
		}

		if(data->orangeOn  &&
    13a0:	84 81       	ldd	r24, Z+4	; 0x04
    13a2:	88 23       	and	r24, r24
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <processFrets+0x14a>
    13a6:	83 81       	ldd	r24, Z+3	; 0x03
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <processFrets+0x14a>
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	81 11       	cpse	r24, r1
		   data->blueOn   &&
		   data->yellowOn)
		   {data->blueOn = 0;}
    13b0:	13 82       	std	Z+3, r1	; 0x03
		if(data->blueOn  &&
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	88 23       	and	r24, r24
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <processFrets+0x15c>
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	88 23       	and	r24, r24
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <processFrets+0x15c>
    13be:	81 81       	ldd	r24, Z+1	; 0x01
    13c0:	81 11       	cpse	r24, r1
		   data->yellowOn   &&
		   data->redOn)
		   {data->yellowOn = 0;}
    13c2:	12 82       	std	Z+2, r1	; 0x02
		if(data->yellowOn  &&
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	88 23       	and	r24, r24
    13c8:	31 f0       	breq	.+12     	; 0x13d6 <processFrets+0x16e>
    13ca:	81 81       	ldd	r24, Z+1	; 0x01
    13cc:	88 23       	and	r24, r24
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <processFrets+0x16e>
    13d0:	80 81       	ld	r24, Z
    13d2:	81 11       	cpse	r24, r1
		   data->redOn   &&
		   data->greenOn)
		   {data->redOn = 0;}
    13d4:	11 82       	std	Z+1, r1	; 0x01

	}

	return;
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	08 95       	ret

000013ea <processStringState>:

void processStringState(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], char controllerMode, 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
	if (controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    13f2:	24 30       	cpi	r18, 0x04	; 4
    13f4:	19 f4       	brne	.+6      	; 0x13fc <processStringState+0x12>
		processChords(data, stringState, buttonStringPatterns);
    13f6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <processChords>
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <processStringState+0x24>

	else if (controllerMode == NOTES) // We're playing with notes
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	19 f4       	brne	.+6      	; 0x1406 <processStringState+0x1c>
		processNotes(data, stringState, buttonStringPatterns);
    1400:	0e 94 72 08 	call	0x10e4	; 0x10e4 <processNotes>
    1404:	04 c0       	rjmp	.+8      	; 0x140e <processStringState+0x24>
	
	else // We're playing with frets
		processFrets(data, stringState,	buttonStringPatterns, greenTimers, triedGreen);
    1406:	98 01       	movw	r18, r16
    1408:	87 01       	movw	r16, r14
    140a:	0e 94 34 09 	call	0x1268	; 0x1268 <processFrets>

	return;	
}
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <displayTransitionState>:

// This simple function takes in the controller mode and sets the
//  data struct to certain patterns to give the user feedback
//  as to what state is being pressed
void displayTransitionState(dataForController* data, int controllerMode)
{
    1418:	fc 01       	movw	r30, r24
	if (controllerMode == FRETS_TO_NOTES)
    141a:	61 30       	cpi	r22, 0x01	; 1
    141c:	71 05       	cpc	r23, r1
    141e:	21 f4       	brne	.+8      	; 0x1428 <displayTransitionState+0x10>
	{
		data->blueOn = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	83 83       	std	Z+3, r24	; 0x03
		data->yellowOn = 1;
    1424:	82 83       	std	Z+2, r24	; 0x02
    1426:	08 95       	ret
	}
	else if (controllerMode == NOTES_TO_CHORDS)
    1428:	63 30       	cpi	r22, 0x03	; 3
    142a:	71 05       	cpc	r23, r1
    142c:	21 f4       	brne	.+8      	; 0x1436 <displayTransitionState+0x1e>
	{
		data->blueOn = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	83 83       	std	Z+3, r24	; 0x03
		data->orangeOn = 1;
    1432:	84 83       	std	Z+4, r24	; 0x04
    1434:	08 95       	ret
	}
	else if (controllerMode == CHORDS_TO_FRETS)
    1436:	65 30       	cpi	r22, 0x05	; 5
    1438:	71 05       	cpc	r23, r1
    143a:	19 f4       	brne	.+6      	; 0x1442 <displayTransitionState+0x2a>
	{
		data->yellowOn = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	82 83       	std	Z+2, r24	; 0x02
		data->orangeOn = 1;
    1440:	84 83       	std	Z+4, r24	; 0x04
    1442:	08 95       	ret

00001444 <configSetButtonData>:
/* This function sets up the data struct when we're in config mode so that it shows
 *  the user which colors are currently being programmed.
 */
void configSetButtonData(dataForController* data, int* buttonToAssign, int buttonStringPatterns[][6], 
						int stringState[], char controllerMode, char* plusLock, char* previousPlusOn, int* debounceTimer)
{
    1444:	af 92       	push	r10
    1446:	bf 92       	push	r11
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	fc 01       	movw	r30, r24
    1458:	db 01       	movw	r26, r22
    145a:	b9 01       	movw	r22, r18
    145c:	95 01       	movw	r18, r10
	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	19 f4       	brne	.+6      	; 0x146e <configSetButtonData+0x2a>
		data->greenOn = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 83       	st	Z, r24
    146c:	34 c0       	rjmp	.+104    	; 0x14d6 <configSetButtonData+0x92>
	else if(*buttonToAssign == 1)
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	11 f4       	brne	.+4      	; 0x1478 <configSetButtonData+0x34>
		data->redOn = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	15 c0       	rjmp	.+42     	; 0x14a2 <configSetButtonData+0x5e>
	else if(*buttonToAssign == 2)
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	91 05       	cpc	r25, r1
    147c:	11 f4       	brne	.+4      	; 0x1482 <configSetButtonData+0x3e>
		data->yellowOn = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	23 c0       	rjmp	.+70     	; 0x14c8 <configSetButtonData+0x84>
	else if(*buttonToAssign == 3)
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	11 f4       	brne	.+4      	; 0x148c <configSetButtonData+0x48>
		data->blueOn = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	24 c0       	rjmp	.+72     	; 0x14d4 <configSetButtonData+0x90>
	else if(*buttonToAssign == 4)
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	91 05       	cpc	r25, r1
    1490:	19 f4       	brne	.+6      	; 0x1498 <configSetButtonData+0x54>
		data->orangeOn = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	84 83       	std	Z+4, r24	; 0x04
    1496:	1f c0       	rjmp	.+62     	; 0x14d6 <configSetButtonData+0x92>
	else if(*buttonToAssign == 5)
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	91 05       	cpc	r25, r1
    149c:	21 f4       	brne	.+8      	; 0x14a6 <configSetButtonData+0x62>
	{
		data->greenOn = 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 83       	st	Z, r24
		data->redOn = 1;
    14a2:	81 83       	std	Z+1, r24	; 0x01
    14a4:	18 c0       	rjmp	.+48     	; 0x14d6 <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 6)
    14a6:	86 30       	cpi	r24, 0x06	; 6
    14a8:	91 05       	cpc	r25, r1
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <configSetButtonData+0x6e>
	{
		data->redOn = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	81 83       	std	Z+1, r24	; 0x01
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <configSetButtonData+0x84>
		data->yellowOn = 1;
	}
	else if(*buttonToAssign == 7)
    14b2:	87 30       	cpi	r24, 0x07	; 7
    14b4:	91 05       	cpc	r25, r1
    14b6:	19 f4       	brne	.+6      	; 0x14be <configSetButtonData+0x7a>
	{
		data->yellowOn = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	82 83       	std	Z+2, r24	; 0x02
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <configSetButtonData+0x90>
		data->blueOn = 1;
	}
	else if(*buttonToAssign == 8)
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	91 05       	cpc	r25, r1
    14c2:	21 f4       	brne	.+8      	; 0x14cc <configSetButtonData+0x88>
	{
		data->greenOn = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 83       	st	Z, r24
		data->yellowOn = 1;
    14c8:	82 83       	std	Z+2, r24	; 0x02
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 9)
    14cc:	09 97       	sbiw	r24, 0x09	; 9
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <configSetButtonData+0x92>
	{
		data->redOn = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	81 83       	std	Z+1, r24	; 0x01
		data->blueOn = 1;
    14d4:	83 83       	std	Z+3, r24	; 0x03
	}



	// Code to debounce our plus button, the current state of plusOn to it's recent history
	if (data->plusOn != 0)  // So we're pressing plus
    14d6:	87 81       	ldd	r24, Z+7	; 0x07
    14d8:	88 23       	and	r24, r24
    14da:	09 f1       	breq	.+66     	; 0x151e <configSetButtonData+0xda>
	{ 
		if (*previousPlusOn == 0)  // If we weren't pressing plus last time through the main loop
    14dc:	e6 01       	movw	r28, r12
    14de:	88 81       	ld	r24, Y
    14e0:	88 23       	and	r24, r24
    14e2:	59 f4       	brne	.+22     	; 0x14fa <configSetButtonData+0xb6>
		{ 
			*debounceTimer = TCNT1;  // Set up a timer
    14e4:	80 91 84 00 	lds	r24, 0x0084
    14e8:	90 91 85 00 	lds	r25, 0x0085
    14ec:	e9 01       	movw	r28, r18
    14ee:	99 83       	std	Y+1, r25	; 0x01
    14f0:	88 83       	st	Y, r24
			*previousPlusOn = 1;     // remember plus was pressed for the next iteration
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	e6 01       	movw	r28, r12
    14f6:	88 83       	st	Y, r24
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <configSetButtonData+0xd6>
			data->plusOn = 0;        // but for now, consider plus not pressed.
		}
		else if ( (TCNT1 - *debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - *debounceTimer >= 0))
    14fa:	80 91 84 00 	lds	r24, 0x0084
    14fe:	90 91 85 00 	lds	r25, 0x0085
    1502:	e9 01       	movw	r28, r18
    1504:	28 81       	ld	r18, Y
    1506:	39 81       	ldd	r19, Y+1	; 0x01
    1508:	82 1b       	sub	r24, r18
    150a:	93 0b       	sbc	r25, r19
    150c:	88 5e       	subi	r24, 0xE8	; 232
    150e:	93 40       	sbci	r25, 0x03	; 3
    1510:	40 f4       	brcc	.+16     	; 0x1522 <configSetButtonData+0xde>
    1512:	80 91 84 00 	lds	r24, 0x0084
    1516:	90 91 85 00 	lds	r25, 0x0085
		{
			data->plusOn = 0;  // This keeps telling us plus wasn't pressed until it's been held long enough
    151a:	17 82       	std	Z+7, r1	; 0x07
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <configSetButtonData+0xde>
		}		
	}
	else
	{
		*previousPlusOn = 0; // and if plus wasn't pressed, remember that for next time
    151e:	e6 01       	movw	r28, r12
    1520:	18 82       	st	Y, r1
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((data->plusOn) && (*plusLock == 0))
    1522:	87 81       	ldd	r24, Z+7	; 0x07
    1524:	88 23       	and	r24, r24
    1526:	09 f4       	brne	.+2      	; 0x152a <configSetButtonData+0xe6>
    1528:	f7 c0       	rjmp	.+494    	; 0x1718 <configSetButtonData+0x2d4>
    152a:	f7 01       	movw	r30, r14
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	09 f0       	breq	.+2      	; 0x1534 <configSetButtonData+0xf0>
    1532:	f4 c0       	rjmp	.+488    	; 0x171c <configSetButtonData+0x2d8>
	{

		if (controllerMode == CHORDS) 
    1534:	04 30       	cpi	r16, 0x04	; 4
    1536:	09 f0       	breq	.+2      	; 0x153a <configSetButtonData+0xf6>
    1538:	60 c0       	rjmp	.+192    	; 0x15fa <configSetButtonData+0x1b6>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
    153a:	8d 91       	ld	r24, X+
    153c:	9c 91       	ld	r25, X
    153e:	11 97       	sbiw	r26, 0x01	; 1
    1540:	fc 01       	movw	r30, r24
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	e4 0f       	add	r30, r20
    1554:	f5 1f       	adc	r31, r21
    1556:	11 82       	std	Z+1, r1	; 0x01
    1558:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	11 97       	sbiw	r26, 0x01	; 1
    1560:	fc 01       	movw	r30, r24
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e8 0f       	add	r30, r24
    1568:	f9 1f       	adc	r31, r25
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	ee 0f       	add	r30, r30
    1570:	ff 1f       	adc	r31, r31
    1572:	e4 0f       	add	r30, r20
    1574:	f5 1f       	adc	r31, r21
    1576:	13 82       	std	Z+3, r1	; 0x03
    1578:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
    157a:	8d 91       	ld	r24, X+
    157c:	9c 91       	ld	r25, X
    157e:	11 97       	sbiw	r26, 0x01	; 1
    1580:	fc 01       	movw	r30, r24
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	e8 0f       	add	r30, r24
    1588:	f9 1f       	adc	r31, r25
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	e4 0f       	add	r30, r20
    1594:	f5 1f       	adc	r31, r21
    1596:	15 82       	std	Z+5, r1	; 0x05
    1598:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
    159a:	8d 91       	ld	r24, X+
    159c:	9c 91       	ld	r25, X
    159e:	11 97       	sbiw	r26, 0x01	; 1
    15a0:	fc 01       	movw	r30, r24
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	e8 0f       	add	r30, r24
    15a8:	f9 1f       	adc	r31, r25
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e4 0f       	add	r30, r20
    15b4:	f5 1f       	adc	r31, r21
    15b6:	17 82       	std	Z+7, r1	; 0x07
    15b8:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
    15ba:	8d 91       	ld	r24, X+
    15bc:	9c 91       	ld	r25, X
    15be:	11 97       	sbiw	r26, 0x01	; 1
    15c0:	fc 01       	movw	r30, r24
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	e4 0f       	add	r30, r20
    15d4:	f5 1f       	adc	r31, r21
    15d6:	11 86       	std	Z+9, r1	; 0x09
    15d8:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
    15da:	8d 91       	ld	r24, X+
    15dc:	9c 91       	ld	r25, X
    15de:	11 97       	sbiw	r26, 0x01	; 1
    15e0:	fc 01       	movw	r30, r24
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e8 0f       	add	r30, r24
    15e8:	f9 1f       	adc	r31, r25
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	e4 0f       	add	r30, r20
    15f4:	f5 1f       	adc	r31, r21
    15f6:	13 86       	std	Z+11, r1	; 0x0b
    15f8:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
    15fa:	8d 91       	ld	r24, X+
    15fc:	9c 91       	ld	r25, X
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	fc 01       	movw	r30, r24
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	e8 0f       	add	r30, r24
    1608:	f9 1f       	adc	r31, r25
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	e4 0f       	add	r30, r20
    1614:	f5 1f       	adc	r31, r21
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	eb 01       	movw	r28, r22
    161c:	28 81       	ld	r18, Y
    161e:	39 81       	ldd	r19, Y+1	; 0x01
    1620:	82 2b       	or	r24, r18
    1622:	93 2b       	or	r25, r19
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	fc 01       	movw	r30, r24
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	e8 0f       	add	r30, r24
    1636:	f9 1f       	adc	r31, r25
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e4 0f       	add	r30, r20
    1642:	f5 1f       	adc	r31, r21
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	2a 81       	ldd	r18, Y+2	; 0x02
    164a:	3b 81       	ldd	r19, Y+3	; 0x03
    164c:	82 2b       	or	r24, r18
    164e:	93 2b       	or	r25, r19
    1650:	93 83       	std	Z+3, r25	; 0x03
    1652:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	11 97       	sbiw	r26, 0x01	; 1
    165a:	fc 01       	movw	r30, r24
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	e8 0f       	add	r30, r24
    1662:	f9 1f       	adc	r31, r25
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e4 0f       	add	r30, r20
    166e:	f5 1f       	adc	r31, r21
    1670:	84 81       	ldd	r24, Z+4	; 0x04
    1672:	95 81       	ldd	r25, Z+5	; 0x05
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	82 2b       	or	r24, r18
    167a:	93 2b       	or	r25, r19
    167c:	95 83       	std	Z+5, r25	; 0x05
    167e:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
    1680:	8d 91       	ld	r24, X+
    1682:	9c 91       	ld	r25, X
    1684:	11 97       	sbiw	r26, 0x01	; 1
    1686:	fc 01       	movw	r30, r24
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	e8 0f       	add	r30, r24
    168e:	f9 1f       	adc	r31, r25
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e4 0f       	add	r30, r20
    169a:	f5 1f       	adc	r31, r21
    169c:	86 81       	ldd	r24, Z+6	; 0x06
    169e:	97 81       	ldd	r25, Z+7	; 0x07
    16a0:	2e 81       	ldd	r18, Y+6	; 0x06
    16a2:	3f 81       	ldd	r19, Y+7	; 0x07
    16a4:	82 2b       	or	r24, r18
    16a6:	93 2b       	or	r25, r19
    16a8:	97 83       	std	Z+7, r25	; 0x07
    16aa:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	fc 01       	movw	r30, r24
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e4 0f       	add	r30, r20
    16c6:	f5 1f       	adc	r31, r21
    16c8:	80 85       	ldd	r24, Z+8	; 0x08
    16ca:	91 85       	ldd	r25, Z+9	; 0x09
    16cc:	28 85       	ldd	r18, Y+8	; 0x08
    16ce:	39 85       	ldd	r19, Y+9	; 0x09
    16d0:	82 2b       	or	r24, r18
    16d2:	93 2b       	or	r25, r19
    16d4:	91 87       	std	Z+9, r25	; 0x09
    16d6:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
    16d8:	8d 91       	ld	r24, X+
    16da:	9c 91       	ld	r25, X
    16dc:	11 97       	sbiw	r26, 0x01	; 1
    16de:	fc 01       	movw	r30, r24
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	e8 0f       	add	r30, r24
    16e6:	f9 1f       	adc	r31, r25
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e4 0f       	add	r30, r20
    16f2:	f5 1f       	adc	r31, r21
    16f4:	82 85       	ldd	r24, Z+10	; 0x0a
    16f6:	93 85       	ldd	r25, Z+11	; 0x0b
    16f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    16fc:	82 2b       	or	r24, r18
    16fe:	93 2b       	or	r25, r19
    1700:	93 87       	std	Z+11, r25	; 0x0b
    1702:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;  // we set up a lock, so we don't assign all the buttons at once
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	f7 01       	movw	r30, r14
    1708:	80 83       	st	Z, r24
		*buttonToAssign += 1;
    170a:	8d 91       	ld	r24, X+
    170c:	9c 91       	ld	r25, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	8d 93       	st	X+, r24
    1714:	9c 93       	st	X, r25
    1716:	02 c0       	rjmp	.+4      	; 0x171c <configSetButtonData+0x2d8>
	}
	else if(data->plusOn == 0)
	{
		*plusLock = 0;
    1718:	e7 01       	movw	r28, r14
    171a:	18 82       	st	Y, r1
	}
	return;
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	bf 90       	pop	r11
    172c:	af 90       	pop	r10
    172e:	08 95       	ret

00001730 <setPins>:
#include "guitarInitFunctions.h"

void setPins(void)
{
	// Set the fret pins as input pins, with internal resistor
	fret_ddr &= ~(1<<green_pin);        // input
    1730:	21 98       	cbi	0x04, 1	; 4
	fret_port |= (1<<green_pin);		//pull-up enabled	
    1732:	29 9a       	sbi	0x05, 1	; 5
	fret_ddr &= ~(1<<red_pin);
    1734:	22 98       	cbi	0x04, 2	; 4
	fret_port |= (1<<red_pin);
    1736:	2a 9a       	sbi	0x05, 2	; 5
	fret_ddr &= ~(1<<yellow_pin);
    1738:	23 98       	cbi	0x04, 3	; 4
	fret_port |= (1<<yellow_pin);
    173a:	2b 9a       	sbi	0x05, 3	; 5
	fret_ddr &= ~(1<<blue_pin);
    173c:	24 98       	cbi	0x04, 4	; 4
	fret_port |= (1<<blue_pin);
    173e:	2c 9a       	sbi	0x05, 4	; 5
	fret_ddr &= ~(1<<orange_pin);
    1740:	25 98       	cbi	0x04, 5	; 4
	fret_port |= (1<<orange_pin);
    1742:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	misc_ddr &= ~(1<<plus_pin);
    1744:	38 98       	cbi	0x07, 0	; 7
	misc_port |= (1<<plus_pin);
    1746:	40 9a       	sbi	0x08, 0	; 8
	misc_ddr &= ~(1<<minus_pin);
    1748:	39 98       	cbi	0x07, 1	; 7
	misc_port |= (1<<minus_pin);
    174a:	41 9a       	sbi	0x08, 1	; 8

	pick_ddr &= ~(1<<strum_pin);
    174c:	3a 98       	cbi	0x07, 2	; 7
	pick_port |= (1<<strum_pin);
    174e:	42 9a       	sbi	0x08, 2	; 8

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	string_ddr |= (1<<first_string);  //output
    1750:	57 9a       	sbi	0x0a, 7	; 10
	string_port |= (1<<first_string); // set high
    1752:	5f 9a       	sbi	0x0b, 7	; 11
	string_ddr |= (1<<second_string);  
    1754:	56 9a       	sbi	0x0a, 6	; 10
	string_port |= (1<<second_string);
    1756:	5e 9a       	sbi	0x0b, 6	; 11
	string_ddr |= (1<<third_string);  
    1758:	55 9a       	sbi	0x0a, 5	; 10
	string_port |= (1<<third_string);
    175a:	5d 9a       	sbi	0x0b, 5	; 11
	string_ddr |= (1<<fourth_string);  
    175c:	52 9a       	sbi	0x0a, 2	; 10
	string_port |= (1<<fourth_string);
    175e:	5a 9a       	sbi	0x0b, 2	; 11
	string_ddr |= (1<<fifth_string);  
    1760:	51 9a       	sbi	0x0a, 1	; 10
	string_port |= (1<<fifth_string);
    1762:	59 9a       	sbi	0x0b, 1	; 11
	string_ddr |= (1<<sixth_string);  
    1764:	50 9a       	sbi	0x0a, 0	; 10
	string_port |= (1<<sixth_string);
    1766:	58 9a       	sbi	0x0b, 0	; 11
}
    1768:	08 95       	ret

0000176a <setTimer>:

void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
    176a:	e4 e6       	ldi	r30, 0x64	; 100
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	87 7f       	andi	r24, 0xF7	; 247
    1772:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
    1774:	e0 e8       	ldi	r30, 0x80	; 128
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8f 77       	andi	r24, 0x7F	; 127
    177c:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  //  to the pins on the chip. Otherwise, we might
    177e:	80 81       	ld	r24, Z
    1780:	8f 7b       	andi	r24, 0xBF	; 191
    1782:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  //  get signals coming out of some of the pins we might use
    1784:	80 81       	ld	r24, Z
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
    178a:	80 81       	ld	r24, Z
    178c:	8f 7e       	andi	r24, 0xEF	; 239
    178e:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
    1790:	80 81       	ld	r24, Z
    1792:	8d 7f       	andi	r24, 0xFD	; 253
    1794:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
    1796:	80 81       	ld	r24, Z
    1798:	8e 7f       	andi	r24, 0xFE	; 254
    179a:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
    179c:	e1 e8       	ldi	r30, 0x81	; 129
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	87 7f       	andi	r24, 0xF7	; 247
    17a4:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 7e       	andi	r24, 0xEF	; 239
    17aa:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
    17b2:	80 81       	ld	r24, Z
    17b4:	8d 7f       	andi	r24, 0xFD	; 253
    17b6:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
    17b8:	80 81       	ld	r24, Z
    17ba:	81 60       	ori	r24, 0x01	; 1
    17bc:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
    17be:	08 95       	ret

000017c0 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    17c0:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    17c2:	f9 99       	sbic	0x1f, 1	; 31
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    17c6:	32 bd       	out	0x22, r19	; 34
    17c8:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    17ca:	f8 9a       	sbi	0x1f, 0	; 31
    17cc:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    17ce:	08 95       	ret

000017d0 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    17d0:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    17d2:	f9 99       	sbic	0x1f, 1	; 31
    17d4:	fe cf       	rjmp	.-4      	; 0x17d2 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    17d6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    17d8:	32 bd       	out	0x22, r19	; 34
    17da:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    17dc:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	fa 9a       	sbi	0x1f, 2	; 31
    17e4:	f9 9a       	sbi	0x1f, 1	; 31
    17e6:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
    17e8:	08 95       	ret

000017ea <readFrets>:
};

//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
int readFrets(int guitarString)
{
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
  	string_port &= ~(1<<guitarString);  // Set the string LOW
    17f0:	9b b1       	in	r25, 0x0b	; 11
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <readFrets+0x12>
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	8a 95       	dec	r24
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <readFrets+0xe>
    1800:	12 2f       	mov	r17, r18
    1802:	82 2f       	mov	r24, r18
    1804:	80 95       	com	r24
    1806:	89 23       	and	r24, r25
    1808:	8b b9       	out	0x0b, r24	; 11
    180a:	84 e1       	ldi	r24, 0x14	; 20
    180c:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
    180e:	00 00       	nop
			x--;
    1810:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
    1812:	2f ef       	ldi	r18, 0xFF	; 255
    1814:	8f 3f       	cpi	r24, 0xFF	; 255
    1816:	92 07       	cpc	r25, r18
    1818:	d1 f7       	brne	.-12     	; 0x180e <readFrets+0x24>

	// Then we have to delay for a while, since right after the switch, the pin values
	// jump around a bit
	doXnops(20);	
	// Read the values on the frets
  	int i = fret_pin;               
    181a:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;
    181c:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// More delay funcitonality... without these delays, there is some bouncing
    181e:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// on the pins, so the read screws up.
    1820:	83 b1       	in	r24, 0x03	; 3
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
    1822:	81 fd       	sbrc	r24, 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <readFrets+0x42>
    1826:	c2 e0       	ldi	r28, 0x02	; 2
    1828:	d0 e0       	ldi	r29, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <readFrets+0x46>
    182c:	c0 e0       	ldi	r28, 0x00	; 0
    182e:	d0 e0       	ldi	r29, 0x00	; 0
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
    1830:	82 fd       	sbrc	r24, 2
    1832:	03 c0       	rjmp	.+6      	; 0x183a <readFrets+0x50>
    1834:	a4 e0       	ldi	r26, 0x04	; 4
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <readFrets+0x54>
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
    183e:	83 fd       	sbrc	r24, 3
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <readFrets+0x5e>
    1842:	e8 e0       	ldi	r30, 0x08	; 8
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <readFrets+0x62>
    1848:	e0 e0       	ldi	r30, 0x00	; 0
    184a:	f0 e0       	ldi	r31, 0x00	; 0
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
    184c:	84 fd       	sbrc	r24, 4
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <readFrets+0x6c>
    1850:	60 e1       	ldi	r22, 0x10	; 16
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <readFrets+0x70>
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
    185a:	85 fd       	sbrc	r24, 5
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <readFrets+0x7a>
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <readFrets+0x7e>
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	50 e0       	ldi	r21, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
    1868:	26 b1       	in	r18, 0x06	; 6
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	36 95       	lsr	r19
    186e:	27 95       	ror	r18
    1870:	36 95       	lsr	r19
    1872:	27 95       	ror	r18
    1874:	20 95       	com	r18
    1876:	30 95       	com	r19
    1878:	21 70       	andi	r18, 0x01	; 1
    187a:	30 70       	andi	r19, 0x00	; 0
    187c:	2c 2b       	or	r18, r28
    187e:	3d 2b       	or	r19, r29
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
    1880:	2a 2b       	or	r18, r26
    1882:	3b 2b       	or	r19, r27
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
    1884:	2e 2b       	or	r18, r30
    1886:	3f 2b       	or	r19, r31
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
    1888:	26 2b       	or	r18, r22
    188a:	37 2b       	or	r19, r23
	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
 	stringState |= ( (!(i & (1<<strum_pin))) << 0); //pick touching the string

	//Turn the string back HIGH and return
	string_port |= (1<<guitarString); 
    188c:	8b b1       	in	r24, 0x0b	; 11
    188e:	18 2b       	or	r17, r24
    1890:	1b b9       	out	0x0b, r17	; 11
    1892:	24 2b       	or	r18, r20
    1894:	35 2b       	or	r19, r21
	return stringState;
}
    1896:	c9 01       	movw	r24, r18
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	08 95       	ret

000018a0 <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{	
    18a0:	2f 92       	push	r2
    18a2:	3f 92       	push	r3
    18a4:	4f 92       	push	r4
    18a6:	5f 92       	push	r5
    18a8:	6f 92       	push	r6
    18aa:	7f 92       	push	r7
    18ac:	8f 92       	push	r8
    18ae:	9f 92       	push	r9
    18b0:	af 92       	push	r10
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	c7 54       	subi	r28, 0x47	; 71
    18ca:	d1 40       	sbci	r29, 0x01	; 1
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
	// First, set up the guitar stuff - These functions are stored in guitarInitFunctions.h/.c
	setPins();
    18d6:	0e 94 98 0b 	call	0x1730	; 0x1730 <setPins>
	setTimer();	
    18da:	0e 94 b5 0b 	call	0x176a	; 0x176a <setTimer>
 	
	// Now set up all the communication stuff - initialization routines
 	//  set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
 	startPS3Communication();
    18de:	0e 94 07 11 	call	0x220e	; 0x220e <startPS3Communication>
 	startWiiCommunication();
    18e2:	0e 94 3a 18 	call	0x3074	; 0x3074 <startWiiCommunication>
    
	// Declaration of variables used in Main()
	int greenTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0}; //These give timing to properly read green buttons on each string.
    18e6:	8c e0       	ldi	r24, 0x0C	; 12
    18e8:	9e 01       	movw	r18, r28
    18ea:	2e 5e       	subi	r18, 0xEE	; 238
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	d9 01       	movw	r26, r18
    18f0:	e8 2f       	mov	r30, r24
    18f2:	1d 92       	st	X+, r1
    18f4:	ea 95       	dec	r30
    18f6:	e9 f7       	brne	.-6      	; 0x18f2 <main+0x52>
	int triedGreen[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};  // Also used for the green button timing thing
    18f8:	ae 01       	movw	r20, r28
    18fa:	42 5e       	subi	r20, 0xE2	; 226
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	da 01       	movw	r26, r20
    1900:	e8 2f       	mov	r30, r24
    1902:	1d 92       	st	X+, r1
    1904:	ea 95       	dec	r30
    1906:	e9 f7       	brne	.-6      	; 0x1902 <main+0x62>
	int stringState[6] = {0,0,0,0,0,0}; // This stores an int for each string,
    1908:	fe 01       	movw	r30, r28
    190a:	ba 96       	adiw	r30, 0x2a	; 42
    190c:	df 01       	movw	r26, r30
    190e:	98 2f       	mov	r25, r24
    1910:	1d 92       	st	X+, r1
    1912:	9a 95       	dec	r25
    1914:	e9 f7       	brne	.-6      	; 0x1910 <main+0x70>
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS]; //This holds the button patterns the
																	 // controller compares the string presses
																	 // to in order to judge if a button is being
																	 // pressed. It's the size of all the chord combinations,
																	 // but in Note Mode, only the first 5 blocks get looked at. 
    int stringStateTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};
    1916:	be 01       	movw	r22, r28
    1918:	6e 5b       	subi	r22, 0xBE	; 190
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	db 01       	movw	r26, r22
    191e:	1d 92       	st	X+, r1
    1920:	8a 95       	dec	r24
    1922:	e9 f7       	brne	.-6      	; 0x191e <main+0x7e>

	char configMode = 0; // Start in normal mode
	int buttonToAssign = 0; // declare some variables
    1924:	1c 82       	std	Y+4, r1	; 0x04
    1926:	1b 82       	std	Y+3, r1	; 0x03
	char plusLock = 0;
    1928:	19 82       	std	Y+1, r1	; 0x01
	char previousPlusOn = 0; // This is used as a lock so we don't program all the buttons at once
    192a:	1a 82       	std	Y+2, r1	; 0x02
	int debounceTimer = 0; // This is used as a global timer for debouncing buttons
    192c:	1e 82       	std	Y+6, r1	; 0x06
    192e:	1d 82       	std	Y+5, r1	; 0x05
		char homeOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
    1930:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
    1932:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
    1934:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
    1936:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
    1938:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
    193a:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
    193c:	1d 86       	std	Y+13, r1	; 0x0d
		data->plusOn   = 0;
    193e:	1e 86       	std	Y+14, r1	; 0x0e
		data->minusOn  = 0;
    1940:	1f 86       	std	Y+15, r1	; 0x0f
		data->numberOfStringsPressed = 0;
    1942:	18 8a       	std	Y+16, r1	; 0x10
		data->homeOn   = 0;
    1944:	19 8a       	std	Y+17, r1	; 0x11
    1946:	44 24       	eor	r4, r4
    1948:	55 24       	eor	r5, r5
        tempStringState[0] = readFrets(first_string);
		tempStringState[1] = readFrets(second_string);
		tempStringState[2] = readFrets(third_string);
		tempStringState[3] = readFrets(fourth_string);
		tempStringState[4] = readFrets(fifth_string);
		tempStringState[5] = readFrets(sixth_string);
    194a:	c0 5c       	subi	r28, 0xC0	; 192
    194c:	de 4f       	sbci	r29, 0xFE	; 254
    194e:	e8 83       	st	Y, r30
    1950:	c0 54       	subi	r28, 0x40	; 64
    1952:	d1 40       	sbci	r29, 0x01	; 1
    1954:	cf 5b       	subi	r28, 0xBF	; 191
    1956:	de 4f       	sbci	r29, 0xFE	; 254
    1958:	f8 83       	st	Y, r31
    195a:	c1 54       	subi	r28, 0x41	; 65
    195c:	d1 40       	sbci	r29, 0x01	; 1
    195e:	db 01       	movw	r26, r22
    1960:	ce 5b       	subi	r28, 0xBE	; 190
    1962:	de 4f       	sbci	r29, 0xFE	; 254
    1964:	68 83       	st	Y, r22
    1966:	c2 54       	subi	r28, 0x42	; 66
    1968:	d1 40       	sbci	r29, 0x01	; 1
    196a:	cd 5b       	subi	r28, 0xBD	; 189
    196c:	de 4f       	sbci	r29, 0xFE	; 254
    196e:	b8 83       	st	Y, r27
    1970:	c3 54       	subi	r28, 0x43	; 67
    1972:	d1 40       	sbci	r29, 0x01	; 1

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
    1974:	e6 e3       	ldi	r30, 0x36	; 54
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	ec 0f       	add	r30, r28
    197a:	fd 1f       	adc	r31, r29
    197c:	3e 96       	adiw	r30, 0x0e	; 14
    197e:	c2 5c       	subi	r28, 0xC2	; 194
    1980:	de 4f       	sbci	r29, 0xFE	; 254
    1982:	f9 83       	std	Y+1, r31	; 0x01
    1984:	e8 83       	st	Y, r30
    1986:	ce 53       	subi	r28, 0x3E	; 62
    1988:	d1 40       	sbci	r29, 0x01	; 1
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    buttonStringPatterns[0][0] = 0x0000000; // [0][0] through [0][5] - green button
    198a:	96 ec       	ldi	r25, 0xC6	; 198
    198c:	89 2e       	mov	r8, r25
    198e:	91 2c       	mov	r9, r1
    1990:	8c 0e       	add	r8, r28
    1992:	9d 1e       	adc	r9, r29

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
    1994:	8e e0       	ldi	r24, 0x0E	; 14
    1996:	28 2e       	mov	r2, r24
    1998:	31 2c       	mov	r3, r1
			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
    199a:	0e e4       	ldi	r16, 0x4E	; 78
    199c:	60 2e       	mov	r6, r16
    199e:	71 2c       	mov	r7, r1
    19a0:	6c 0e       	add	r6, r28
    19a2:	7d 1e       	adc	r7, r29
    19a4:	cc 5b       	subi	r28, 0xBC	; 188
    19a6:	de 4f       	sbci	r29, 0xFE	; 254
    19a8:	28 83       	st	Y, r18
    19aa:	c4 54       	subi	r28, 0x44	; 68
    19ac:	d1 40       	sbci	r29, 0x01	; 1
    19ae:	cb 5b       	subi	r28, 0xBB	; 187
    19b0:	de 4f       	sbci	r29, 0xFE	; 254
    19b2:	38 83       	st	Y, r19
    19b4:	c5 54       	subi	r28, 0x45	; 69
    19b6:	d1 40       	sbci	r29, 0x01	; 1
    19b8:	ca 5b       	subi	r28, 0xBA	; 186
    19ba:	de 4f       	sbci	r29, 0xFE	; 254
    19bc:	48 83       	st	Y, r20
    19be:	c6 54       	subi	r28, 0x46	; 70
    19c0:	d1 40       	sbci	r29, 0x01	; 1
    19c2:	c9 5b       	subi	r28, 0xB9	; 185
    19c4:	de 4f       	sbci	r29, 0xFE	; 254
    19c6:	58 83       	st	Y, r21
    19c8:	c7 54       	subi	r28, 0x47	; 71
    19ca:	d1 40       	sbci	r29, 0x01	; 1
 					 /* main event loop */
    while(1)
	{   
		// We first read all the strings for button hits and store them into
		//  our stringState array.  Strum processing is also handled here for now.
        tempStringState[0] = readFrets(first_string);
    19cc:	87 e0       	ldi	r24, 0x07	; 7
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    19d4:	9f ab       	std	Y+55, r25	; 0x37
    19d6:	8e ab       	std	Y+54, r24	; 0x36
		tempStringState[1] = readFrets(second_string);
    19d8:	86 e0       	ldi	r24, 0x06	; 6
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    19e0:	99 af       	std	Y+57, r25	; 0x39
    19e2:	88 af       	std	Y+56, r24	; 0x38
		tempStringState[2] = readFrets(third_string);
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    19ec:	9b af       	std	Y+59, r25	; 0x3b
    19ee:	8a af       	std	Y+58, r24	; 0x3a
		tempStringState[3] = readFrets(fourth_string);
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    19f8:	9d af       	std	Y+61, r25	; 0x3d
    19fa:	8c af       	std	Y+60, r24	; 0x3c
		tempStringState[4] = readFrets(fifth_string);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    1a04:	9f af       	std	Y+63, r25	; 0x3f
    1a06:	8e af       	std	Y+62, r24	; 0x3e
		tempStringState[5] = readFrets(sixth_string);
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <readFrets>
    1a10:	22 96       	adiw	r28, 0x02	; 2
    1a12:	9f af       	std	Y+63, r25	; 0x3f
    1a14:	8e af       	std	Y+62, r24	; 0x3e
    1a16:	22 97       	sbiw	r28, 0x02	; 2
    1a18:	9e 01       	movw	r18, r28
    1a1a:	2a 5c       	subi	r18, 0xCA	; 202
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	c0 5c       	subi	r28, 0xC0	; 192
    1a20:	de 4f       	sbci	r29, 0xFE	; 254
    1a22:	88 81       	ld	r24, Y
    1a24:	c0 54       	subi	r28, 0x40	; 64
    1a26:	d1 40       	sbci	r29, 0x01	; 1
    1a28:	cf 5b       	subi	r28, 0xBF	; 191
    1a2a:	de 4f       	sbci	r29, 0xFE	; 254
    1a2c:	98 81       	ld	r25, Y
    1a2e:	c1 54       	subi	r28, 0x41	; 65
    1a30:	d1 40       	sbci	r29, 0x01	; 1
    1a32:	bc 01       	movw	r22, r24
    1a34:	ce 5b       	subi	r28, 0xBE	; 190
    1a36:	de 4f       	sbci	r29, 0xFE	; 254
    1a38:	88 81       	ld	r24, Y
    1a3a:	c2 54       	subi	r28, 0x42	; 66
    1a3c:	d1 40       	sbci	r29, 0x01	; 1
    1a3e:	cd 5b       	subi	r28, 0xBD	; 189
    1a40:	de 4f       	sbci	r29, 0xFE	; 254
    1a42:	98 81       	ld	r25, Y
    1a44:	c3 54       	subi	r28, 0x43	; 67
    1a46:	d1 40       	sbci	r29, 0x01	; 1
    1a48:	fc 01       	movw	r30, r24

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
        {
                if (tempStringState[i] == stringState[i])
    1a4a:	d9 01       	movw	r26, r18
    1a4c:	4d 91       	ld	r20, X+
    1a4e:	5c 91       	ld	r21, X
    1a50:	db 01       	movw	r26, r22
    1a52:	8d 91       	ld	r24, X+
    1a54:	9c 91       	ld	r25, X
    1a56:	48 17       	cp	r20, r24
    1a58:	59 07       	cpc	r21, r25
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <main+0x1c2>
                        stringStateTimers[i] = 0;
    1a5c:	11 82       	std	Z+1, r1	; 0x01
    1a5e:	10 82       	st	Z, r1
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <main+0x1cc>
                else
                        stringStateTimers[i] += 1;
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
                // If we've seen enough cycles of a new string state, update stringState 
                if (stringStateTimers[i] >= STRING_DEBOUNCE_DELAY)
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	0f 97       	sbiw	r24, 0x0f	; 15
    1a72:	2c f0       	brlt	.+10     	; 0x1a7e <main+0x1de>
                {
                        stringState[i] = tempStringState[i];
    1a74:	db 01       	movw	r26, r22
    1a76:	4d 93       	st	X+, r20
    1a78:	5c 93       	st	X, r21
                        stringStateTimers[i] = 0;
    1a7a:	11 82       	std	Z+1, r1	; 0x01
    1a7c:	10 82       	st	Z, r1
    1a7e:	2e 5f       	subi	r18, 0xFE	; 254
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	6e 5f       	subi	r22, 0xFE	; 254
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	32 96       	adiw	r30, 0x02	; 2
		tempStringState[4] = readFrets(fifth_string);
		tempStringState[5] = readFrets(sixth_string);

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
    1a88:	c2 5c       	subi	r28, 0xC2	; 194
    1a8a:	de 4f       	sbci	r29, 0xFE	; 254
    1a8c:	88 81       	ld	r24, Y
    1a8e:	99 81       	ldd	r25, Y+1	; 0x01
    1a90:	ce 53       	subi	r28, 0x3E	; 62
    1a92:	d1 40       	sbci	r29, 0x01	; 1
    1a94:	28 17       	cp	r18, r24
    1a96:	39 07       	cpc	r19, r25
    1a98:	c1 f6       	brne	.-80     	; 0x1a4a <main+0x1aa>
		char homeOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
    1a9a:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
    1a9c:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
    1a9e:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
    1aa0:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
    1aa2:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
    1aa4:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
    1aa6:	1d 86       	std	Y+13, r1	; 0x0d
		data->plusOn   = 0;
		data->minusOn  = 0;
		data->numberOfStringsPressed = 0;
    1aa8:	18 8a       	std	Y+16, r1	; 0x10
		data->homeOn   = 0;
    1aaa:	19 8a       	std	Y+17, r1	; 0x11

// This function just reads our plus and minus buttons and sets the data struct accordingly
inline void readOtherButtons(dataForController* data)
{
	// read our plus and minus buttons
	int i = misc_pin; // check for plus and minus
    1aac:	86 b1       	in	r24, 0x06	; 6
    1aae:	90 e0       	ldi	r25, 0x00	; 0
	data->plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing it drops it low
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	9c 01       	movw	r18, r24
    1ab6:	24 27       	eor	r18, r20
    1ab8:	35 27       	eor	r19, r21
    1aba:	21 70       	andi	r18, 0x01	; 1
    1abc:	2e 87       	std	Y+14, r18	; 0x0e
	data->minusOn = !(i & (1<<minus_pin));
    1abe:	96 95       	lsr	r25
    1ac0:	87 95       	ror	r24
    1ac2:	84 27       	eor	r24, r20
    1ac4:	95 27       	eor	r25, r21
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
		return 0;
}

inline int testForResetButtonPatterns(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1aca:	8a a5       	ldd	r24, Y+42	; 0x2a
    1acc:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ace:	80 97       	sbiw	r24, 0x20	; 32
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <main+0x234>
    1ad2:	22 c1       	rjmp	.+580    	; 0x1d18 <main+0x478>
    1ad4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ad6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ad8:	89 2b       	or	r24, r25
    1ada:	09 f0       	breq	.+2      	; 0x1ade <main+0x23e>
    1adc:	1d c1       	rjmp	.+570    	; 0x1d18 <main+0x478>
    1ade:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ae0:	9f a5       	ldd	r25, Y+47	; 0x2f
    1ae2:	80 97       	sbiw	r24, 0x20	; 32
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <main+0x248>
    1ae6:	18 c1       	rjmp	.+560    	; 0x1d18 <main+0x478>
    1ae8:	88 a9       	ldd	r24, Y+48	; 0x30
    1aea:	99 a9       	ldd	r25, Y+49	; 0x31
    1aec:	89 2b       	or	r24, r25
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <main+0x252>
    1af0:	13 c1       	rjmp	.+550    	; 0x1d18 <main+0x478>
    1af2:	8a a9       	ldd	r24, Y+50	; 0x32
    1af4:	9b a9       	ldd	r25, Y+51	; 0x33
    1af6:	80 97       	sbiw	r24, 0x20	; 32
    1af8:	09 f0       	breq	.+2      	; 0x1afc <main+0x25c>
    1afa:	0e c1       	rjmp	.+540    	; 0x1d18 <main+0x478>
    1afc:	8c a9       	ldd	r24, Y+52	; 0x34
    1afe:	9d a9       	ldd	r25, Y+53	; 0x35
    1b00:	89 2b       	or	r24, r25
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <main+0x266>
    1b04:	09 c1       	rjmp	.+530    	; 0x1d18 <main+0x478>
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    buttonStringPatterns[0][0] = 0x0000000; // [0][0] through [0][5] - green button
    1b06:	d4 01       	movw	r26, r8
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	1c 92       	st	X, r1
    1b0c:	1e 92       	st	-X, r1
	buttonStringPatterns[0][1] = 0b0001100; 
    1b0e:	ec e0       	ldi	r30, 0x0C	; 12
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	13 96       	adiw	r26, 0x03	; 3
    1b14:	fc 93       	st	X, r31
    1b16:	ee 93       	st	-X, r30
    1b18:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
    1b1a:	15 96       	adiw	r26, 0x05	; 5
    1b1c:	1c 92       	st	X, r1
    1b1e:	1e 92       	st	-X, r1
    1b20:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000110;
    1b22:	06 e0       	ldi	r16, 0x06	; 6
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	17 96       	adiw	r26, 0x07	; 7
    1b28:	1c 93       	st	X, r17
    1b2a:	0e 93       	st	-X, r16
    1b2c:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
    1b2e:	19 96       	adiw	r26, 0x09	; 9
    1b30:	1c 92       	st	X, r1
    1b32:	1e 92       	st	-X, r1
    1b34:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0000010;
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	1b 96       	adiw	r26, 0x0b	; 11
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
    1b40:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
    1b42:	1d 96       	adiw	r26, 0x0d	; 13
    1b44:	9c 93       	st	X, r25
    1b46:	8e 93       	st	-X, r24
    1b48:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0000000; 
    1b4a:	1f 96       	adiw	r26, 0x0f	; 15
    1b4c:	1c 92       	st	X, r1
    1b4e:	1e 92       	st	-X, r1
    1b50:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0000001;
    1b52:	51 96       	adiw	r26, 0x11	; 17
    1b54:	5c 93       	st	X, r21
    1b56:	4e 93       	st	-X, r20
    1b58:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
    1b5a:	53 96       	adiw	r26, 0x13	; 19
    1b5c:	1c 92       	st	X, r1
    1b5e:	1e 92       	st	-X, r1
    1b60:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0000001;
    1b62:	55 96       	adiw	r26, 0x15	; 21
    1b64:	5c 93       	st	X, r21
    1b66:	4e 93       	st	-X, r20
    1b68:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0001100;
    1b6a:	57 96       	adiw	r26, 0x17	; 23
    1b6c:	fc 93       	st	X, r31
    1b6e:	ee 93       	st	-X, r30
    1b70:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
    1b72:	59 96       	adiw	r26, 0x19	; 25
    1b74:	fc 93       	st	X, r31
    1b76:	ee 93       	st	-X, r30
    1b78:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
    1b7a:	5b 96       	adiw	r26, 0x1b	; 27
    1b7c:	1c 92       	st	X, r1
    1b7e:	1e 92       	st	-X, r1
    1b80:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
    1b82:	5d 96       	adiw	r26, 0x1d	; 29
    1b84:	1c 93       	st	X, r17
    1b86:	0e 93       	st	-X, r16
    1b88:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000000;
    1b8a:	5f 96       	adiw	r26, 0x1f	; 31
    1b8c:	1c 92       	st	X, r1
    1b8e:	1e 92       	st	-X, r1
    1b90:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000010;
    1b92:	91 96       	adiw	r26, 0x21	; 33
    1b94:	9c 93       	st	X, r25
    1b96:	8e 93       	st	-X, r24
    1b98:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
    1b9a:	93 96       	adiw	r26, 0x23	; 35
    1b9c:	1c 92       	st	X, r1
    1b9e:	1e 92       	st	-X, r1
    1ba0:	92 97       	sbiw	r26, 0x22	; 34
							  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    1ba2:	95 96       	adiw	r26, 0x25	; 37
    1ba4:	1c 92       	st	X, r1
    1ba6:	1e 92       	st	-X, r1
    1ba8:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000001; 
    1baa:	97 96       	adiw	r26, 0x27	; 39
    1bac:	5c 93       	st	X, r21
    1bae:	4e 93       	st	-X, r20
    1bb0:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0001100;
    1bb2:	99 96       	adiw	r26, 0x29	; 41
    1bb4:	fc 93       	st	X, r31
    1bb6:	ee 93       	st	-X, r30
    1bb8:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000000;
    1bba:	9b 96       	adiw	r26, 0x2b	; 43
    1bbc:	1c 92       	st	X, r1
    1bbe:	1e 92       	st	-X, r1
    1bc0:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0001100;
    1bc2:	9d 96       	adiw	r26, 0x2d	; 45
    1bc4:	fc 93       	st	X, r31
    1bc6:	ee 93       	st	-X, r30
    1bc8:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
    1bca:	9f 96       	adiw	r26, 0x2f	; 47
    1bcc:	1c 92       	st	X, r1
    1bce:	1e 92       	st	-X, r1
    1bd0:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - orange button
    1bd2:	d1 96       	adiw	r26, 0x31	; 49
    1bd4:	1c 92       	st	X, r1
    1bd6:	1e 92       	st	-X, r1
    1bd8:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000110; 
    1bda:	d3 96       	adiw	r26, 0x33	; 51
    1bdc:	1c 93       	st	X, r17
    1bde:	0e 93       	st	-X, r16
    1be0:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
    1be2:	d5 96       	adiw	r26, 0x35	; 53
    1be4:	1c 92       	st	X, r1
    1be6:	1e 92       	st	-X, r1
    1be8:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0000001;
    1bea:	d7 96       	adiw	r26, 0x37	; 55
    1bec:	5c 93       	st	X, r21
    1bee:	4e 93       	st	-X, r20
    1bf0:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0000000;
    1bf2:	d9 96       	adiw	r26, 0x39	; 57
    1bf4:	1c 92       	st	X, r1
    1bf6:	1e 92       	st	-X, r1
    1bf8:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0000001;
    1bfa:	db 96       	adiw	r26, 0x3b	; 59
    1bfc:	5c 93       	st	X, r21
    1bfe:	4e 93       	st	-X, r20
    1c00:	da 97       	sbiw	r26, 0x3a	; 58
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	b4 01       	movw	r22, r8
    1c08:	4c e3       	ldi	r20, 0x3C	; 60
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	28 ee       	ldi	r18, 0xE8	; 232
    1c0e:	3b e0       	ldi	r19, 0x0B	; 11
    1c10:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__eewr_block>

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
    1c14:	d4 01       	movw	r26, r8
    1c16:	11 96       	adiw	r26, 0x01	; 1
    1c18:	3c 92       	st	X, r3
    1c1a:	2e 92       	st	-X, r2
	buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
    1c1c:	13 96       	adiw	r26, 0x03	; 3
    1c1e:	3c 92       	st	X, r3
    1c20:	2e 92       	st	-X, r2
    1c22:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
    1c24:	15 96       	adiw	r26, 0x05	; 5
    1c26:	1c 92       	st	X, r1
    1c28:	1e 92       	st	-X, r1
    1c2a:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000000;
    1c2c:	17 96       	adiw	r26, 0x07	; 7
    1c2e:	1c 92       	st	X, r1
    1c30:	1e 92       	st	-X, r1
    1c32:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
    1c34:	19 96       	adiw	r26, 0x09	; 9
    1c36:	1c 92       	st	X, r1
    1c38:	1e 92       	st	-X, r1
    1c3a:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0001110;
    1c3c:	1b 96       	adiw	r26, 0x0b	; 11
    1c3e:	3c 92       	st	X, r3
    1c40:	2e 92       	st	-X, r2
    1c42:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
    1c44:	1d 96       	adiw	r26, 0x0d	; 13
    1c46:	1c 92       	st	X, r1
    1c48:	1e 92       	st	-X, r1
    1c4a:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
    1c4c:	1f 96       	adiw	r26, 0x0f	; 15
    1c4e:	3c 92       	st	X, r3
    1c50:	2e 92       	st	-X, r2
    1c52:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0001110;
    1c54:	51 96       	adiw	r26, 0x11	; 17
    1c56:	3c 92       	st	X, r3
    1c58:	2e 92       	st	-X, r2
    1c5a:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
    1c5c:	53 96       	adiw	r26, 0x13	; 19
    1c5e:	1c 92       	st	X, r1
    1c60:	1e 92       	st	-X, r1
    1c62:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0001110;
    1c64:	55 96       	adiw	r26, 0x15	; 21
    1c66:	3c 92       	st	X, r3
    1c68:	2e 92       	st	-X, r2
    1c6a:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0000000;
    1c6c:	57 96       	adiw	r26, 0x17	; 23
    1c6e:	1c 92       	st	X, r1
    1c70:	1e 92       	st	-X, r1
    1c72:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
    1c74:	59 96       	adiw	r26, 0x19	; 25
    1c76:	1c 92       	st	X, r1
    1c78:	1e 92       	st	-X, r1
    1c7a:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
    1c7c:	5b 96       	adiw	r26, 0x1b	; 27
    1c7e:	1c 93       	st	X, r17
    1c80:	0e 93       	st	-X, r16
    1c82:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
    1c84:	5d 96       	adiw	r26, 0x1d	; 29
    1c86:	1c 93       	st	X, r17
    1c88:	0e 93       	st	-X, r16
    1c8a:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000110;
    1c8c:	5f 96       	adiw	r26, 0x1f	; 31
    1c8e:	1c 93       	st	X, r17
    1c90:	0e 93       	st	-X, r16
    1c92:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000000;
    1c94:	91 96       	adiw	r26, 0x21	; 33
    1c96:	1c 92       	st	X, r1
    1c98:	1e 92       	st	-X, r1
    1c9a:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
    1c9c:	93 96       	adiw	r26, 0x23	; 35
    1c9e:	1c 92       	st	X, r1
    1ca0:	1e 92       	st	-X, r1
    1ca2:	92 97       	sbiw	r26, 0x22	; 34
									  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    1ca4:	95 96       	adiw	r26, 0x25	; 37
    1ca6:	1c 92       	st	X, r1
    1ca8:	1e 92       	st	-X, r1
    1caa:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000000; // This an A chord
    1cac:	97 96       	adiw	r26, 0x27	; 39
    1cae:	1c 92       	st	X, r1
    1cb0:	1e 92       	st	-X, r1
    1cb2:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0000110;
    1cb4:	99 96       	adiw	r26, 0x29	; 41
    1cb6:	1c 93       	st	X, r17
    1cb8:	0e 93       	st	-X, r16
    1cba:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000110;
    1cbc:	9b 96       	adiw	r26, 0x2b	; 43
    1cbe:	1c 93       	st	X, r17
    1cc0:	0e 93       	st	-X, r16
    1cc2:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0000110;
    1cc4:	9d 96       	adiw	r26, 0x2d	; 45
    1cc6:	1c 93       	st	X, r17
    1cc8:	0e 93       	st	-X, r16
    1cca:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
    1ccc:	9f 96       	adiw	r26, 0x2f	; 47
    1cce:	1c 92       	st	X, r1
    1cd0:	1e 92       	st	-X, r1
    1cd2:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
    1cd4:	d1 96       	adiw	r26, 0x31	; 49
    1cd6:	1c 92       	st	X, r1
    1cd8:	1e 92       	st	-X, r1
    1cda:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
    1cdc:	d3 96       	adiw	r26, 0x33	; 51
    1cde:	1c 92       	st	X, r1
    1ce0:	1e 92       	st	-X, r1
    1ce2:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
    1ce4:	d5 96       	adiw	r26, 0x35	; 53
    1ce6:	1c 92       	st	X, r1
    1ce8:	1e 92       	st	-X, r1
    1cea:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0001110;
    1cec:	d7 96       	adiw	r26, 0x37	; 55
    1cee:	3c 92       	st	X, r3
    1cf0:	2e 92       	st	-X, r2
    1cf2:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0001110;
    1cf4:	d9 96       	adiw	r26, 0x39	; 57
    1cf6:	3c 92       	st	X, r3
    1cf8:	2e 92       	st	-X, r2
    1cfa:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0001110;
    1cfc:	db 96       	adiw	r26, 0x3b	; 59
    1cfe:	3c 92       	st	X, r3
    1d00:	2e 92       	st	-X, r2
    1d02:	da 97       	sbiw	r26, 0x3a	; 58
    1d04:	88 e7       	ldi	r24, 0x78	; 120
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	b4 01       	movw	r22, r8
    1d0a:	48 e7       	ldi	r20, 0x78	; 120
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	28 ee       	ldi	r18, 0xE8	; 232
    1d10:	3b e0       	ldi	r19, 0x0B	; 11
    1d12:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__eewr_block>
    1d16:	55 24       	eor	r5, r5
		return 0;
}

inline int testForHomeChord(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1d18:	2a a5       	ldd	r18, Y+42	; 0x2a
    1d1a:	3b a5       	ldd	r19, Y+43	; 0x2b
    1d1c:	20 32       	cpi	r18, 0x20	; 32
    1d1e:	31 05       	cpc	r19, r1
    1d20:	b1 f4       	brne	.+44     	; 0x1d4e <main+0x4ae>
    1d22:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d24:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d26:	89 2b       	or	r24, r25
    1d28:	91 f4       	brne	.+36     	; 0x1d4e <main+0x4ae>
    1d2a:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d2c:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d2e:	89 2b       	or	r24, r25
    1d30:	71 f4       	brne	.+28     	; 0x1d4e <main+0x4ae>
    1d32:	88 a9       	ldd	r24, Y+48	; 0x30
    1d34:	99 a9       	ldd	r25, Y+49	; 0x31
    1d36:	89 2b       	or	r24, r25
    1d38:	51 f4       	brne	.+20     	; 0x1d4e <main+0x4ae>
    1d3a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d3c:	9b a9       	ldd	r25, Y+51	; 0x33
    1d3e:	89 2b       	or	r24, r25
    1d40:	31 f4       	brne	.+12     	; 0x1d4e <main+0x4ae>
    1d42:	8c a9       	ldd	r24, Y+52	; 0x34
    1d44:	9d a9       	ldd	r25, Y+53	; 0x35
    1d46:	80 97       	sbiw	r24, 0x20	; 32
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <main+0x4ae>
		}
		
		// Test if we're trying to hit the Home button
		if(testForHomeChord(stringState))
		{
			data.homeOn = 1;
    1d4a:	b1 e0       	ldi	r27, 0x01	; 1
    1d4c:	b9 8b       	std	Y+17, r27	; 0x11
		}

		// Check to see if we're trying to enter Config Mode;
		// disabled if we're playing with frets
		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
    1d4e:	e2 e0       	ldi	r30, 0x02	; 2
    1d50:	5e 16       	cp	r5, r30
    1d52:	21 f0       	breq	.+8      	; 0x1d5c <main+0x4bc>
    1d54:	f4 e0       	ldi	r31, 0x04	; 4
    1d56:	5f 16       	cp	r5, r31
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <main+0x4bc>
    1d5a:	f1 c0       	rjmp	.+482    	; 0x1f3e <main+0x69e>
		{
			if (configMode == 0)
    1d5c:	44 20       	and	r4, r4
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <main+0x4c2>
    1d60:	9e c0       	rjmp	.+316    	; 0x1e9e <main+0x5fe>

// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.
inline char testForConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1d62:	20 32       	cpi	r18, 0x20	; 32
    1d64:	31 05       	cpc	r19, r1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <main+0x4ca>
    1d68:	97 c0       	rjmp	.+302    	; 0x1e98 <main+0x5f8>
    1d6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d6c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d6e:	80 97       	sbiw	r24, 0x20	; 32
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <main+0x4d4>
    1d72:	92 c0       	rjmp	.+292    	; 0x1e98 <main+0x5f8>
    1d74:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d76:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d78:	80 97       	sbiw	r24, 0x20	; 32
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <main+0x4de>
    1d7c:	8d c0       	rjmp	.+282    	; 0x1e98 <main+0x5f8>
    1d7e:	88 a9       	ldd	r24, Y+48	; 0x30
    1d80:	99 a9       	ldd	r25, Y+49	; 0x31
    1d82:	89 2b       	or	r24, r25
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <main+0x4e8>
    1d86:	88 c0       	rjmp	.+272    	; 0x1e98 <main+0x5f8>
    1d88:	8a a9       	ldd	r24, Y+50	; 0x32
    1d8a:	9b a9       	ldd	r25, Y+51	; 0x33
    1d8c:	89 2b       	or	r24, r25
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <main+0x4f2>
    1d90:	83 c0       	rjmp	.+262    	; 0x1e98 <main+0x5f8>
    1d92:	8c a9       	ldd	r24, Y+52	; 0x34
    1d94:	9d a9       	ldd	r25, Y+53	; 0x35
    1d96:	89 2b       	or	r24, r25
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <main+0x4fc>
    1d9a:	7e c0       	rjmp	.+252    	; 0x1e98 <main+0x5f8>
			{
				configMode = testForConfigMode(stringState);
				
				// If we're playing with notes, when we enter config mode, we need to clear the 
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	58 16       	cp	r5, r24
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <main+0x504>
    1da2:	78 c0       	rjmp	.+240    	; 0x1e94 <main+0x5f4>
	return stringState;
}

inline void clearButtonStringPatterns(int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
    1da4:	d3 01       	movw	r26, r6
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	1c 92       	st	X, r1
    1daa:	1e 92       	st	-X, r1
    1dac:	13 96       	adiw	r26, 0x03	; 3
    1dae:	1c 92       	st	X, r1
    1db0:	1e 92       	st	-X, r1
    1db2:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
    1db4:	15 96       	adiw	r26, 0x05	; 5
    1db6:	1c 92       	st	X, r1
    1db8:	1e 92       	st	-X, r1
    1dba:	14 97       	sbiw	r26, 0x04	; 4
    1dbc:	17 96       	adiw	r26, 0x07	; 7
    1dbe:	1c 92       	st	X, r1
    1dc0:	1e 92       	st	-X, r1
    1dc2:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
    1dc4:	19 96       	adiw	r26, 0x09	; 9
    1dc6:	1c 92       	st	X, r1
    1dc8:	1e 92       	st	-X, r1
    1dca:	18 97       	sbiw	r26, 0x08	; 8
    1dcc:	1b 96       	adiw	r26, 0x0b	; 11
    1dce:	1c 92       	st	X, r1
    1dd0:	1e 92       	st	-X, r1
    1dd2:	1a 97       	sbiw	r26, 0x0a	; 10
	buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
    1dd4:	1d 96       	adiw	r26, 0x0d	; 13
    1dd6:	1c 92       	st	X, r1
    1dd8:	1e 92       	st	-X, r1
    1dda:	1c 97       	sbiw	r26, 0x0c	; 12
    1ddc:	1f 96       	adiw	r26, 0x0f	; 15
    1dde:	1c 92       	st	X, r1
    1de0:	1e 92       	st	-X, r1
    1de2:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
    1de4:	51 96       	adiw	r26, 0x11	; 17
    1de6:	1c 92       	st	X, r1
    1de8:	1e 92       	st	-X, r1
    1dea:	50 97       	sbiw	r26, 0x10	; 16
    1dec:	53 96       	adiw	r26, 0x13	; 19
    1dee:	1c 92       	st	X, r1
    1df0:	1e 92       	st	-X, r1
    1df2:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
    1df4:	55 96       	adiw	r26, 0x15	; 21
    1df6:	1c 92       	st	X, r1
    1df8:	1e 92       	st	-X, r1
    1dfa:	54 97       	sbiw	r26, 0x14	; 20
    1dfc:	57 96       	adiw	r26, 0x17	; 23
    1dfe:	1c 92       	st	X, r1
    1e00:	1e 92       	st	-X, r1
    1e02:	56 97       	sbiw	r26, 0x16	; 22
	buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
    1e04:	59 96       	adiw	r26, 0x19	; 25
    1e06:	1c 92       	st	X, r1
    1e08:	1e 92       	st	-X, r1
    1e0a:	58 97       	sbiw	r26, 0x18	; 24
    1e0c:	5b 96       	adiw	r26, 0x1b	; 27
    1e0e:	1c 92       	st	X, r1
    1e10:	1e 92       	st	-X, r1
    1e12:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
    1e14:	5d 96       	adiw	r26, 0x1d	; 29
    1e16:	1c 92       	st	X, r1
    1e18:	1e 92       	st	-X, r1
    1e1a:	5c 97       	sbiw	r26, 0x1c	; 28
    1e1c:	5f 96       	adiw	r26, 0x1f	; 31
    1e1e:	1c 92       	st	X, r1
    1e20:	1e 92       	st	-X, r1
    1e22:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
    1e24:	91 96       	adiw	r26, 0x21	; 33
    1e26:	1c 92       	st	X, r1
    1e28:	1e 92       	st	-X, r1
    1e2a:	90 97       	sbiw	r26, 0x20	; 32
    1e2c:	93 96       	adiw	r26, 0x23	; 35
    1e2e:	1c 92       	st	X, r1
    1e30:	1e 92       	st	-X, r1
    1e32:	92 97       	sbiw	r26, 0x22	; 34
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
    1e34:	95 96       	adiw	r26, 0x25	; 37
    1e36:	1c 92       	st	X, r1
    1e38:	1e 92       	st	-X, r1
    1e3a:	94 97       	sbiw	r26, 0x24	; 36
    1e3c:	97 96       	adiw	r26, 0x27	; 39
    1e3e:	1c 92       	st	X, r1
    1e40:	1e 92       	st	-X, r1
    1e42:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
    1e44:	99 96       	adiw	r26, 0x29	; 41
    1e46:	1c 92       	st	X, r1
    1e48:	1e 92       	st	-X, r1
    1e4a:	98 97       	sbiw	r26, 0x28	; 40
    1e4c:	9b 96       	adiw	r26, 0x2b	; 43
    1e4e:	1c 92       	st	X, r1
    1e50:	1e 92       	st	-X, r1
    1e52:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
    1e54:	9d 96       	adiw	r26, 0x2d	; 45
    1e56:	1c 92       	st	X, r1
    1e58:	1e 92       	st	-X, r1
    1e5a:	9c 97       	sbiw	r26, 0x2c	; 44
    1e5c:	9f 96       	adiw	r26, 0x2f	; 47
    1e5e:	1c 92       	st	X, r1
    1e60:	1e 92       	st	-X, r1
    1e62:	9e 97       	sbiw	r26, 0x2e	; 46
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
    1e64:	d1 96       	adiw	r26, 0x31	; 49
    1e66:	1c 92       	st	X, r1
    1e68:	1e 92       	st	-X, r1
    1e6a:	d0 97       	sbiw	r26, 0x30	; 48
    1e6c:	d3 96       	adiw	r26, 0x33	; 51
    1e6e:	1c 92       	st	X, r1
    1e70:	1e 92       	st	-X, r1
    1e72:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
    1e74:	d5 96       	adiw	r26, 0x35	; 53
    1e76:	1c 92       	st	X, r1
    1e78:	1e 92       	st	-X, r1
    1e7a:	d4 97       	sbiw	r26, 0x34	; 52
    1e7c:	d7 96       	adiw	r26, 0x37	; 55
    1e7e:	1c 92       	st	X, r1
    1e80:	1e 92       	st	-X, r1
    1e82:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
    1e84:	d9 96       	adiw	r26, 0x39	; 57
    1e86:	1c 92       	st	X, r1
    1e88:	1e 92       	st	-X, r1
    1e8a:	d8 97       	sbiw	r26, 0x38	; 56
    1e8c:	db 96       	adiw	r26, 0x3b	; 59
    1e8e:	1c 92       	st	X, r1
    1e90:	1e 92       	st	-X, r1
    1e92:	da 97       	sbiw	r26, 0x3a	; 58
    1e94:	44 24       	eor	r4, r4
    1e96:	43 94       	inc	r4
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
				{
					clearButtonStringPatterns(buttonStringPatterns);
				}
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
    1e98:	1c 82       	std	Y+4, r1	; 0x04
    1e9a:	1b 82       	std	Y+3, r1	; 0x03
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
    1e9c:	19 82       	std	Y+1, r1	; 0x01
			}

			// Config Mode operation
			if (configMode == 1) 
    1e9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ea0:	4b 16       	cp	r4, r27
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <main+0x606>
    1ea4:	4c c0       	rjmp	.+152    	; 0x1f3e <main+0x69e>
}

//This function tests to see if we're pressing the correct string combination to end config mode
inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1ea6:	23 2b       	or	r18, r19
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <main+0x60c>
    1eaa:	f5 c0       	rjmp	.+490    	; 0x2096 <main+0x7f6>
    1eac:	8c a5       	ldd	r24, Y+44	; 0x2c
    1eae:	9d a5       	ldd	r25, Y+45	; 0x2d
    1eb0:	80 97       	sbiw	r24, 0x20	; 32
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <main+0x616>
    1eb4:	f0 c0       	rjmp	.+480    	; 0x2096 <main+0x7f6>
    1eb6:	8e a5       	ldd	r24, Y+46	; 0x2e
    1eb8:	9f a5       	ldd	r25, Y+47	; 0x2f
    1eba:	80 97       	sbiw	r24, 0x20	; 32
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <main+0x620>
    1ebe:	eb c0       	rjmp	.+470    	; 0x2096 <main+0x7f6>
    1ec0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ec2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ec4:	80 97       	sbiw	r24, 0x20	; 32
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <main+0x62a>
    1ec8:	e6 c0       	rjmp	.+460    	; 0x2096 <main+0x7f6>
    1eca:	8a a9       	ldd	r24, Y+50	; 0x32
    1ecc:	9b a9       	ldd	r25, Y+51	; 0x33
    1ece:	89 2b       	or	r24, r25
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <main+0x634>
    1ed2:	e1 c0       	rjmp	.+450    	; 0x2096 <main+0x7f6>
    1ed4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ed6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ed8:	89 2b       	or	r24, r25
    1eda:	09 f0       	breq	.+2      	; 0x1ede <main+0x63e>
    1edc:	dc c0       	rjmp	.+440    	; 0x2096 <main+0x7f6>
				if (testForEndConfigMode(stringState))
					{
						// Now save this new button mapping to the EEPROM 
						// Since we're already passing in buttonsStringPatterns
						// as a pointer, we don't use the '&' operator
						if (controllerMode == NOTES)
    1ede:	e2 e0       	ldi	r30, 0x02	; 2
    1ee0:	5e 16       	cp	r5, r30
    1ee2:	31 f4       	brne	.+12     	; 0x1ef0 <main+0x650>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	b3 01       	movw	r22, r6
    1eea:	4c e3       	ldi	r20, 0x3C	; 60
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	22 c0       	rjmp	.+68     	; 0x1f34 <main+0x694>
							eeprom_write_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
						else if (controllerMode == CHORDS)
    1ef0:	f4 e0       	ldi	r31, 0x04	; 4
    1ef2:	5f 16       	cp	r5, r31
    1ef4:	39 f5       	brne	.+78     	; 0x1f44 <main+0x6a4>
    1ef6:	19 c0       	rjmp	.+50     	; 0x1f2a <main+0x68a>
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	05 97       	sbiw	r24, 0x05	; 5
    1efe:	0c f4       	brge	.+2      	; 0x1f02 <main+0x662>
    1f00:	af c0       	rjmp	.+350    	; 0x2060 <main+0x7c0>
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	88 23       	and	r24, r24
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <main+0x66a>
    1f08:	ab c0       	rjmp	.+342    	; 0x2060 <main+0x7c0>
					{
						buttonToAssign = 0;
    1f0a:	1c 82       	std	Y+4, r1	; 0x04
    1f0c:	1b 82       	std	Y+3, r1	; 0x03
    1f0e:	a8 c0       	rjmp	.+336    	; 0x2060 <main+0x7c0>
					}
					
					// Or if we've programmed all 10 notes in Chord mode, exit programming mode
					if (controllerMode == CHORDS && buttonToAssign >= NUM_CHORDS_BUTTONS && plusLock == 0 )
    1f10:	24 e0       	ldi	r18, 0x04	; 4
    1f12:	52 16       	cp	r5, r18
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <main+0x678>
    1f16:	a4 c0       	rjmp	.+328    	; 0x2060 <main+0x7c0>
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	0a 97       	sbiw	r24, 0x0a	; 10
    1f1e:	0c f4       	brge	.+2      	; 0x1f22 <main+0x682>
    1f20:	9f c0       	rjmp	.+318    	; 0x2060 <main+0x7c0>
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <main+0x68a>
    1f28:	9b c0       	rjmp	.+310    	; 0x2060 <main+0x7c0>
    1f2a:	88 e7       	ldi	r24, 0x78	; 120
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	b3 01       	movw	r22, r6
    1f30:	48 e7       	ldi	r20, 0x78	; 120
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	28 ee       	ldi	r18, 0xE8	; 232
    1f36:	3b e0       	ldi	r19, 0x0B	; 11
    1f38:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__eewr_block>
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <main+0x6a4>
					}
		}	}	}	 // End of Config Mode code

		
		// Normal operation
		if (configMode == 0)
    1f3e:	44 20       	and	r4, r4
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <main+0x6a4>
    1f42:	8e c0       	rjmp	.+284    	; 0x2060 <main+0x7c0>
		return 0;
}

inline int testForMinusChord(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1f44:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f46:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f48:	89 2b       	or	r24, r25
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <main+0x6ae>
    1f4c:	5b c0       	rjmp	.+182    	; 0x2004 <main+0x764>
    1f4e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f50:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f52:	89 2b       	or	r24, r25
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <main+0x6b8>
    1f56:	56 c0       	rjmp	.+172    	; 0x2004 <main+0x764>
    1f58:	2e a5       	ldd	r18, Y+46	; 0x2e
    1f5a:	3f a5       	ldd	r19, Y+47	; 0x2f
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	71 f4       	brne	.+28     	; 0x1f7e <main+0x6de>
    1f62:	88 a9       	ldd	r24, Y+48	; 0x30
    1f64:	99 a9       	ldd	r25, Y+49	; 0x31
    1f66:	89 2b       	or	r24, r25
    1f68:	51 f4       	brne	.+20     	; 0x1f7e <main+0x6de>
    1f6a:	8a a9       	ldd	r24, Y+50	; 0x32
    1f6c:	9b a9       	ldd	r25, Y+51	; 0x33
    1f6e:	89 2b       	or	r24, r25
    1f70:	31 f4       	brne	.+12     	; 0x1f7e <main+0x6de>
    1f72:	8c a9       	ldd	r24, Y+52	; 0x34
    1f74:	9d a9       	ldd	r25, Y+53	; 0x35
    1f76:	80 97       	sbiw	r24, 0x20	; 32
    1f78:	11 f4       	brne	.+4      	; 0x1f7e <main+0x6de>
		{
			//Test if Minus is being played by the chord instead of the button
			// This means it won't get read in config mode, which is good.
			if(testForMinusChord(stringState))
				data.minusOn = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
}

inline int testForSwitchModes(int stringState[])
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00000000) &&
    1f7e:	20 32       	cpi	r18, 0x20	; 32
    1f80:	31 05       	cpc	r19, r1
    1f82:	81 f4       	brne	.+32     	; 0x1fa4 <main+0x704>
    1f84:	88 a9       	ldd	r24, Y+48	; 0x30
    1f86:	99 a9       	ldd	r25, Y+49	; 0x31
    1f88:	80 97       	sbiw	r24, 0x20	; 32
    1f8a:	e1 f5       	brne	.+120    	; 0x2004 <main+0x764>
    1f8c:	8a a9       	ldd	r24, Y+50	; 0x32
    1f8e:	9b a9       	ldd	r25, Y+51	; 0x33
    1f90:	80 97       	sbiw	r24, 0x20	; 32
    1f92:	c1 f5       	brne	.+112    	; 0x2004 <main+0x764>
    1f94:	8c a9       	ldd	r24, Y+52	; 0x34
    1f96:	9d a9       	ldd	r25, Y+53	; 0x35
    1f98:	89 2b       	or	r24, r25
    1f9a:	a1 f5       	brne	.+104    	; 0x2004 <main+0x764>
static inline void switchPlayModes(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if (testForSwitchModes(stringState))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
    1f9c:	50 fc       	sbrc	r5, 0
    1f9e:	32 c0       	rjmp	.+100    	; 0x2004 <main+0x764>
			{++*controllerMode;}  //This puts it into a transitional mode
    1fa0:	53 94       	inc	r5
    1fa2:	30 c0       	rjmp	.+96     	; 0x2004 <main+0x764>
		return 0;
}

inline int testForNoStringsPressed(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1fa4:	23 2b       	or	r18, r19
    1fa6:	71 f5       	brne	.+92     	; 0x2004 <main+0x764>
    1fa8:	88 a9       	ldd	r24, Y+48	; 0x30
    1faa:	99 a9       	ldd	r25, Y+49	; 0x31
    1fac:	89 2b       	or	r24, r25
    1fae:	51 f5       	brne	.+84     	; 0x2004 <main+0x764>
    1fb0:	8a a9       	ldd	r24, Y+50	; 0x32
    1fb2:	9b a9       	ldd	r25, Y+51	; 0x33
    1fb4:	89 2b       	or	r24, r25
    1fb6:	31 f5       	brne	.+76     	; 0x2004 <main+0x764>
    1fb8:	8c a9       	ldd	r24, Y+52	; 0x34
    1fba:	9d a9       	ldd	r25, Y+53	; 0x35
    1fbc:	89 2b       	or	r24, r25
    1fbe:	11 f5       	brne	.+68     	; 0x2004 <main+0x764>
	}
	// And if we're not pressing that anymore, switch from the transitional mode to the regular mode,
	//  resetting the button patterns as necessary
	else if(testForNoStringsPressed(stringState)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
    1fc0:	95 e0       	ldi	r25, 0x05	; 5
    1fc2:	59 16       	cp	r5, r25
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <main+0x72a>
    1fc6:	55 24       	eor	r5, r5
    1fc8:	1d c0       	rjmp	.+58     	; 0x2004 <main+0x764>
			{*controllerMode = FRETS;}

		// Now, reset the buttonStringPattern array to be appropriate for the mode
		// For this, we'll read it from the EEPROM memory.
		else if (*controllerMode  == FRETS_TO_NOTES)
    1fca:	a1 e0       	ldi	r26, 0x01	; 1
    1fcc:	5a 16       	cp	r5, r26
    1fce:	61 f4       	brne	.+24     	; 0x1fe8 <main+0x748>
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
    1fd0:	c3 01       	movw	r24, r6
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	4c e3       	ldi	r20, 0x3C	; 60
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	20 ee       	ldi	r18, 0xE0	; 224
    1fdc:	3b e0       	ldi	r19, 0x0B	; 11
    1fde:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__eerd_block>
    1fe2:	b2 e0       	ldi	r27, 0x02	; 2
    1fe4:	5b 2e       	mov	r5, r27
    1fe6:	0e c0       	rjmp	.+28     	; 0x2004 <main+0x764>
		{
			// Notice, we're already passing in buttonStringPatterns as an address, so the EEPROM read looks a bit strange
			eeprom_read_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
    1fe8:	b3 e0       	ldi	r27, 0x03	; 3
    1fea:	5b 16       	cp	r5, r27
    1fec:	59 f4       	brne	.+22     	; 0x2004 <main+0x764>
    1fee:	c3 01       	movw	r24, r6
    1ff0:	68 e7       	ldi	r22, 0x78	; 120
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	48 e7       	ldi	r20, 0x78	; 120
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	20 ee       	ldi	r18, 0xE0	; 224
    1ffa:	3b e0       	ldi	r19, 0x0B	; 11
    1ffc:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__eerd_block>
    2000:	a4 e0       	ldi	r26, 0x04	; 4
    2002:	5a 2e       	mov	r5, r26
			switchPlayModes(stringState, buttonStringPatterns, &controllerMode);

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
    2004:	65 2d       	mov	r22, r5
    2006:	50 fc       	sbrc	r5, 0
    2008:	25 c0       	rjmp	.+74     	; 0x2054 <main+0x7b4>
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
    200a:	ce 01       	movw	r24, r28
    200c:	07 96       	adiw	r24, 0x07	; 7
    200e:	c0 5c       	subi	r28, 0xC0	; 192
    2010:	de 4f       	sbci	r29, 0xFE	; 254
    2012:	68 81       	ld	r22, Y
    2014:	c0 54       	subi	r28, 0x40	; 64
    2016:	d1 40       	sbci	r29, 0x01	; 1
    2018:	cf 5b       	subi	r28, 0xBF	; 191
    201a:	de 4f       	sbci	r29, 0xFE	; 254
    201c:	78 81       	ld	r23, Y
    201e:	c1 54       	subi	r28, 0x41	; 65
    2020:	d1 40       	sbci	r29, 0x01	; 1
    2022:	a3 01       	movw	r20, r6
    2024:	25 2d       	mov	r18, r5
    2026:	cc 5b       	subi	r28, 0xBC	; 188
    2028:	de 4f       	sbci	r29, 0xFE	; 254
    202a:	08 81       	ld	r16, Y
    202c:	c4 54       	subi	r28, 0x44	; 68
    202e:	d1 40       	sbci	r29, 0x01	; 1
    2030:	cb 5b       	subi	r28, 0xBB	; 187
    2032:	de 4f       	sbci	r29, 0xFE	; 254
    2034:	18 81       	ld	r17, Y
    2036:	c5 54       	subi	r28, 0x45	; 69
    2038:	d1 40       	sbci	r29, 0x01	; 1
    203a:	ca 5b       	subi	r28, 0xBA	; 186
    203c:	de 4f       	sbci	r29, 0xFE	; 254
    203e:	e8 80       	ld	r14, Y
    2040:	c6 54       	subi	r28, 0x46	; 70
    2042:	d1 40       	sbci	r29, 0x01	; 1
    2044:	c9 5b       	subi	r28, 0xB9	; 185
    2046:	de 4f       	sbci	r29, 0xFE	; 254
    2048:	f8 80       	ld	r15, Y
    204a:	c7 54       	subi	r28, 0x47	; 71
    204c:	d1 40       	sbci	r29, 0x01	; 1
    204e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <processStringState>
    2052:	05 c0       	rjmp	.+10     	; 0x205e <main+0x7be>
			}
			else
			{   // Now, if we're in a transitional controller mode, we'll forget that data and substitue 
				// visual cue data to show that we're changing to a specific mode
				//  The function itself can be found in processStringState.h/.c
				displayTransitionState(&data, controllerMode);
    2054:	ce 01       	movw	r24, r28
    2056:	07 96       	adiw	r24, 0x07	; 7
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <displayTransitionState>
    205e:	44 24       	eor	r4, r4
		}
			    
		// Now our processing is complete, so using those button presses, we set up the 
		// button data packet. This function depends on the console and is 
		// set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
		sendPS3Data(data);
    2060:	ef 80       	ldd	r14, Y+7	; 0x07
    2062:	f8 84       	ldd	r15, Y+8	; 0x08
    2064:	09 85       	ldd	r16, Y+9	; 0x09
    2066:	1a 85       	ldd	r17, Y+10	; 0x0a
    2068:	2b 85       	ldd	r18, Y+11	; 0x0b
    206a:	3c 85       	ldd	r19, Y+12	; 0x0c
    206c:	4d 85       	ldd	r20, Y+13	; 0x0d
    206e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2070:	6f 85       	ldd	r22, Y+15	; 0x0f
    2072:	78 89       	ldd	r23, Y+16	; 0x10
    2074:	89 89       	ldd	r24, Y+17	; 0x11
    2076:	0e 94 95 10 	call	0x212a	; 0x212a <sendPS3Data>
		sendWiiData(data);
    207a:	ef 80       	ldd	r14, Y+7	; 0x07
    207c:	f8 84       	ldd	r15, Y+8	; 0x08
    207e:	09 85       	ldd	r16, Y+9	; 0x09
    2080:	1a 85       	ldd	r17, Y+10	; 0x0a
    2082:	2b 85       	ldd	r18, Y+11	; 0x0b
    2084:	3c 85       	ldd	r19, Y+12	; 0x0c
    2086:	4d 85       	ldd	r20, Y+13	; 0x0d
    2088:	5e 85       	ldd	r21, Y+14	; 0x0e
    208a:	6f 85       	ldd	r22, Y+15	; 0x0f
    208c:	78 89       	ldd	r23, Y+16	; 0x10
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <sendWiiData>
    2094:	9b cc       	rjmp	.-1738   	; 0x19cc <main+0x12c>
				else
				{
					// Now set up the data packet to the interface layer to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					//  The function itself can be found in processStringState.h/.c
					configSetButtonData(&data, &buttonToAssign, buttonStringPatterns, stringState, controllerMode,
    2096:	ce 01       	movw	r24, r28
    2098:	07 96       	adiw	r24, 0x07	; 7
    209a:	be 01       	movw	r22, r28
    209c:	6d 5f       	subi	r22, 0xFD	; 253
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	a3 01       	movw	r20, r6
    20a2:	c0 5c       	subi	r28, 0xC0	; 192
    20a4:	de 4f       	sbci	r29, 0xFE	; 254
    20a6:	28 81       	ld	r18, Y
    20a8:	c0 54       	subi	r28, 0x40	; 64
    20aa:	d1 40       	sbci	r29, 0x01	; 1
    20ac:	cf 5b       	subi	r28, 0xBF	; 191
    20ae:	de 4f       	sbci	r29, 0xFE	; 254
    20b0:	38 81       	ld	r19, Y
    20b2:	c1 54       	subi	r28, 0x41	; 65
    20b4:	d1 40       	sbci	r29, 0x01	; 1
    20b6:	05 2d       	mov	r16, r5
    20b8:	7e 01       	movw	r14, r28
    20ba:	08 94       	sec
    20bc:	e1 1c       	adc	r14, r1
    20be:	f1 1c       	adc	r15, r1
    20c0:	f2 e0       	ldi	r31, 0x02	; 2
    20c2:	cf 2e       	mov	r12, r31
    20c4:	d1 2c       	mov	r13, r1
    20c6:	cc 0e       	add	r12, r28
    20c8:	dd 1e       	adc	r13, r29
    20ca:	e5 e0       	ldi	r30, 0x05	; 5
    20cc:	ae 2e       	mov	r10, r30
    20ce:	b1 2c       	mov	r11, r1
    20d0:	ac 0e       	add	r10, r28
    20d2:	bd 1e       	adc	r11, r29
    20d4:	0e 94 22 0a 	call	0x1444	; 0x1444 <configSetButtonData>
											&plusLock, &previousPlusOn, &debounceTimer);
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
    20d8:	1e 86       	std	Y+14, r1	; 0x0e
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
    20da:	e2 e0       	ldi	r30, 0x02	; 2
    20dc:	5e 16       	cp	r5, r30
    20de:	09 f0       	breq	.+2      	; 0x20e2 <main+0x842>
    20e0:	17 cf       	rjmp	.-466    	; 0x1f10 <main+0x670>
    20e2:	0a cf       	rjmp	.-492    	; 0x1ef8 <main+0x658>

000020e4 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
    20e4:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
    20e6:	80 81       	ld	r24, Z
    20e8:	80 76       	andi	r24, 0x60	; 96
    20ea:	80 32       	cpi	r24, 0x20	; 32
    20ec:	e1 f4       	brne	.+56     	; 0x2126 <usbFunctionSetup+0x42>
        //DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
    20ee:	81 81       	ldd	r24, Z+1	; 0x01
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	41 f4       	brne	.+16     	; 0x2104 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
    20f4:	8e e4       	ldi	r24, 0x4E	; 78
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	90 93 70 02 	sts	0x0270, r25
    20fc:	80 93 6f 02 	sts	0x026F, r24
    2100:	87 e0       	ldi	r24, 0x07	; 7
    2102:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	41 f4       	brne	.+16     	; 0x2118 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
    2108:	88 e2       	ldi	r24, 0x28	; 40
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	90 93 70 02 	sts	0x0270, r25
    2110:	80 93 6f 02 	sts	0x026F, r24
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
    2118:	8a 30       	cpi	r24, 0x0A	; 10
    211a:	29 f4       	brne	.+10     	; 0x2126 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
    211c:	83 81       	ldd	r24, Z+3	; 0x03
    211e:	80 93 28 01 	sts	0x0128, r24
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	08 95       	ret
    2126:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
    2128:	08 95       	ret

0000212a <sendPS3Data>:
	usbPoll();
}


void sendPS3Data(dataForController data)
{
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	2b 97       	sbiw	r28, 0x0b	; 11
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	9e 2d       	mov	r25, r14
    2148:	e9 82       	std	Y+1, r14	; 0x01
    214a:	bf 2d       	mov	r27, r15
    214c:	fa 82       	std	Y+2, r15	; 0x02
    214e:	f0 2f       	mov	r31, r16
    2150:	0b 83       	std	Y+3, r16	; 0x03
    2152:	01 2f       	mov	r16, r17
    2154:	1c 83       	std	Y+4, r17	; 0x04
    2156:	e2 2f       	mov	r30, r18
    2158:	2d 83       	std	Y+5, r18	; 0x05
    215a:	13 2f       	mov	r17, r19
    215c:	3e 83       	std	Y+6, r19	; 0x06
    215e:	a4 2f       	mov	r26, r20
    2160:	4f 83       	std	Y+7, r20	; 0x07
    2162:	35 2f       	mov	r19, r21
    2164:	58 87       	std	Y+8, r21	; 0x08
    2166:	26 2f       	mov	r18, r22
    2168:	69 87       	std	Y+9, r22	; 0x09
    216a:	7a 87       	std	Y+10, r23	; 0x0a
    216c:	8b 87       	std	Y+11, r24	; 0x0b
    216e:	48 2f       	mov	r20, r24
	byte5 - z axis (Whammy Bar)
	byte6 - rzaxis (Choose solo style)
*/
       //set the buttons to all at default positions
        reportBuffer[0] = 0b00000000;
        reportBuffer[1] = 0b00000000;
    2170:	10 92 4f 02 	sts	0x024F, r1
        reportBuffer[2] = 0b00001000;
    2174:	88 e0       	ldi	r24, 0x08	; 8
    2176:	80 93 50 02 	sts	0x0250, r24
        reportBuffer[3] = 0b10000000;
    217a:	80 e8       	ldi	r24, 0x80	; 128
    217c:	80 93 51 02 	sts	0x0251, r24
        reportBuffer[4] = 0b10000000;
    2180:	80 93 52 02 	sts	0x0252, r24
        reportBuffer[5] = 0b10000000;
    2184:	80 93 53 02 	sts	0x0253, r24
        reportBuffer[6] = 0b00000000;
    2188:	10 92 54 02 	sts	0x0254, r1


        // Since 'colorOn' is 1 when a fret is pressed, we shift it to the proper place and | it to set the
        // corresponding button bit to one, which corresponds to a button press.
        reportBuffer[0] |= (data.orangeOn << ORANGE_BIT);
        reportBuffer[0] |= (data.blueOn << BLUE_BIT);
    218c:	e2 95       	swap	r30
    218e:	e0 7f       	andi	r30, 0xF0	; 240
    2190:	e0 2b       	or	r30, r16
        reportBuffer[0] |= (data.yellowOn << YELLOW_BIT);
        reportBuffer[0] |= (data.redOn << RED_BIT);
        reportBuffer[0] |= (data.greenOn << GREEN_BIT);
    2192:	bb 0f       	add	r27, r27
    2194:	bb 0f       	add	r27, r27
    2196:	ff 0f       	add	r31, r31
    2198:	ff 0f       	add	r31, r31
    219a:	ff 0f       	add	r31, r31
    219c:	fb 2b       	or	r31, r27
    219e:	99 0f       	add	r25, r25
    21a0:	9f 2b       	or	r25, r31
    21a2:	9e 2b       	or	r25, r30
    21a4:	90 93 4e 02 	sts	0x024E, r25

        // On the PS3, the strumming shows up as a hat switch, so we have to use conditionals for this..
        if (data.upOn)
    21a8:	11 23       	and	r17, r17
    21aa:	11 f0       	breq	.+4      	; 0x21b0 <sendPS3Data+0x86>
                reportBuffer[2] = 0b00000000;
    21ac:	10 92 50 02 	sts	0x0250, r1
        if (data.downOn)
    21b0:	aa 23       	and	r26, r26
    21b2:	19 f0       	breq	.+6      	; 0x21ba <sendPS3Data+0x90>
                reportBuffer[2] = 0b00000100;
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	80 93 50 02 	sts	0x0250, r24

		//Finally, Start, Star Power, and the Home button (not working yet)
		reportBuffer[1] |= (data.plusOn << PLUS_BIT);
    21ba:	33 0f       	add	r19, r19
    21bc:	80 91 4f 02 	lds	r24, 0x024F
    21c0:	38 2b       	or	r19, r24
        reportBuffer[0] |= (data.minusOn << MINUS_BIT);
    21c2:	22 95       	swap	r18
    21c4:	22 0f       	add	r18, r18
    21c6:	20 7e       	andi	r18, 0xE0	; 224
    21c8:	80 91 4e 02 	lds	r24, 0x024E
    21cc:	82 2b       	or	r24, r18
    21ce:	80 93 4e 02 	sts	0x024E, r24
		reportBuffer[1] |= (data.homeOn << HOME_BIT);
    21d2:	42 95       	swap	r20
    21d4:	40 7f       	andi	r20, 0xF0	; 240
    21d6:	34 2b       	or	r19, r20
    21d8:	30 93 4f 02 	sts	0x024F, r19

        //Then we finish off some USB stuff.
        wdt_reset();  //Reset the watchdog timer
    21dc:	a8 95       	wdr
        usbPoll();    //USB poll - must be called at least once per 10ms
    21de:	0e 94 93 12 	call	0x2526	; 0x2526 <usbPoll>

        // Now, regardless of mode, we have to send the data to the 
        // USB controlling library from the buffer we've been building
        if(usbInterruptIsReady())
    21e2:	80 91 60 02 	lds	r24, 0x0260
    21e6:	84 ff       	sbrs	r24, 4
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <sendPS3Data+0xca>
        {
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
    21ea:	8e e4       	ldi	r24, 0x4E	; 78
    21ec:	92 e0       	ldi	r25, 0x02	; 2
    21ee:	67 e0       	ldi	r22, 0x07	; 7
    21f0:	0e 94 c1 13 	call	0x2782	; 0x2782 <usbSetInterrupt>
        }
                

}
    21f4:	2b 96       	adiw	r28, 0x0b	; 11
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	08 95       	ret

0000220e <startPS3Communication>:
/* ------------------------------------------------------------------------- */

void startPS3Communication(void)
{
    // First, set up all the USB communication stuff
    wdt_enable(WDTO_1S);
    220e:	2e e0       	ldi	r18, 0x0E	; 14
    2210:	88 e1       	ldi	r24, 0x18	; 24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	a8 95       	wdr
    221a:	80 93 60 00 	sts	0x0060, r24
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	20 93 60 00 	sts	0x0060, r18
     * RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

    usbInit();
    2224:	0e 94 82 12 	call	0x2504	; 0x2504 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    2228:	54 9a       	sbi	0x0a, 4	; 10
    222a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    222c:	48 eb       	ldi	r20, 0xB8	; 184
    222e:	5b e0       	ldi	r21, 0x0B	; 11
    2230:	04 c0       	rjmp	.+8      	; 0x223a <startPS3Communication+0x2c>
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
    2232:	a8 95       	wdr
    2234:	ca 01       	movw	r24, r20
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <startPS3Communication+0x28>
     */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
    223a:	21 50       	subi	r18, 0x01	; 1
    223c:	d1 f7       	brne	.-12     	; 0x2232 <startPS3Communication+0x24>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
    223e:	54 98       	cbi	0x0a, 4	; 10
    sei();
    2240:	78 94       	sei
	usbPoll();
    2242:	0e 94 93 12 	call	0x2526	; 0x2526 <usbPoll>
}
    2246:	08 95       	ret

00002248 <usbCrc16>:
    2248:	a8 2f       	mov	r26, r24
    224a:	b9 2f       	mov	r27, r25
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	50 ea       	ldi	r21, 0xA0	; 160
    2254:	60 95       	com	r22
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	09 c0       	rjmp	.+18     	; 0x226c <usbCrcLoopEntry>

0000225a <usbCrcByteLoop>:
    225a:	2d 91       	ld	r18, X+
    225c:	82 27       	eor	r24, r18

0000225e <usbCrcBitLoop>:
    225e:	97 95       	ror	r25
    2260:	87 95       	ror	r24
    2262:	10 f0       	brcs	.+4      	; 0x2268 <usbCrcNoXor>
    2264:	84 27       	eor	r24, r20
    2266:	95 27       	eor	r25, r21

00002268 <usbCrcNoXor>:
    2268:	30 5e       	subi	r19, 0xE0	; 224
    226a:	c8 f3       	brcs	.-14     	; 0x225e <usbCrcBitLoop>

0000226c <usbCrcLoopEntry>:
    226c:	6f 5f       	subi	r22, 0xFF	; 255
    226e:	a8 f3       	brcs	.-22     	; 0x225a <usbCrcByteLoop>

00002270 <usbCrcReady>:
    2270:	08 95       	ret

00002272 <usbCrc16Append>:
    2272:	ea df       	rcall	.-44     	; 0x2248 <usbCrc16>
    2274:	8d 93       	st	X+, r24
    2276:	9d 93       	st	X+, r25
    2278:	08 95       	ret

0000227a <__vector_2>:
    227a:	cf 93       	push	r28
    227c:	cf b7       	in	r28, 0x3f	; 63
    227e:	cf 93       	push	r28

00002280 <waitForJ>:
    2280:	c3 95       	inc	r28
    2282:	4c 9b       	sbis	0x09, 4	; 9
    2284:	e9 f7       	brne	.-6      	; 0x2280 <waitForJ>

00002286 <waitForK>:
    2286:	4c 9b       	sbis	0x09, 4	; 9
    2288:	09 c0       	rjmp	.+18     	; 0x229c <foundK>
    228a:	4c 9b       	sbis	0x09, 4	; 9
    228c:	07 c0       	rjmp	.+14     	; 0x229c <foundK>
    228e:	4c 9b       	sbis	0x09, 4	; 9
    2290:	05 c0       	rjmp	.+10     	; 0x229c <foundK>
    2292:	4c 9b       	sbis	0x09, 4	; 9
    2294:	03 c0       	rjmp	.+6      	; 0x229c <foundK>
    2296:	4c 9b       	sbis	0x09, 4	; 9
    2298:	01 c0       	rjmp	.+2      	; 0x229c <foundK>
    229a:	a3 c0       	rjmp	.+326    	; 0x23e2 <sofError>

0000229c <foundK>:
    229c:	df 93       	push	r29
    229e:	c0 91 6e 02 	lds	r28, 0x026E
    22a2:	dd 27       	eor	r29, r29
    22a4:	cb 58       	subi	r28, 0x8B	; 139
    22a6:	dd 4f       	sbci	r29, 0xFD	; 253
    22a8:	4c 9b       	sbis	0x09, 4	; 9
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <haveTwoBitsK>
    22ac:	df 91       	pop	r29
    22ae:	eb cf       	rjmp	.-42     	; 0x2286 <waitForK>

000022b0 <haveTwoBitsK>:
    22b0:	2f 93       	push	r18
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	09 b1       	in	r16, 0x09	; 9
    22b8:	2f ef       	ldi	r18, 0xFF	; 255
    22ba:	04 fb       	bst	r16, 4
    22bc:	20 f9       	bld	r18, 0
    22be:	4f 93       	push	r20
    22c0:	3f 93       	push	r19
    22c2:	19 b1       	in	r17, 0x09	; 9
    22c4:	4f ef       	ldi	r20, 0xFF	; 255
    22c6:	01 27       	eor	r16, r17
    22c8:	04 fb       	bst	r16, 4
    22ca:	21 f9       	bld	r18, 1
    22cc:	3b e0       	ldi	r19, 0x0B	; 11
    22ce:	31 c0       	rjmp	.+98     	; 0x2332 <rxbit2>

000022d0 <unstuff0>:
    22d0:	4e 7f       	andi	r20, 0xFE	; 254
    22d2:	01 2f       	mov	r16, r17
    22d4:	19 b1       	in	r17, 0x09	; 9
    22d6:	21 60       	ori	r18, 0x01	; 1
    22d8:	28 c0       	rjmp	.+80     	; 0x232a <didUnstuff0>

000022da <unstuff1>:
    22da:	10 2f       	mov	r17, r16
    22dc:	4d 7f       	andi	r20, 0xFD	; 253
    22de:	22 60       	ori	r18, 0x02	; 2
    22e0:	00 00       	nop
    22e2:	09 b1       	in	r16, 0x09	; 9
    22e4:	29 c0       	rjmp	.+82     	; 0x2338 <didUnstuff1>

000022e6 <unstuff2>:
    22e6:	4b 7f       	andi	r20, 0xFB	; 251
    22e8:	24 60       	ori	r18, 0x04	; 4
    22ea:	01 2f       	mov	r16, r17
    22ec:	00 00       	nop
    22ee:	19 b1       	in	r17, 0x09	; 9
    22f0:	2b c0       	rjmp	.+86     	; 0x2348 <didUnstuff2>

000022f2 <unstuff3>:
    22f2:	19 b1       	in	r17, 0x09	; 9
    22f4:	47 7f       	andi	r20, 0xF7	; 247
    22f6:	28 60       	ori	r18, 0x08	; 8
    22f8:	2a c0       	rjmp	.+84     	; 0x234e <didUnstuff3>

000022fa <unstuff4>:
    22fa:	4f 7e       	andi	r20, 0xEF	; 239
    22fc:	09 b1       	in	r16, 0x09	; 9
    22fe:	20 61       	ori	r18, 0x10	; 16
    2300:	2c c0       	rjmp	.+88     	; 0x235a <didUnstuff4>

00002302 <unstuff5>:
    2302:	4f 7d       	andi	r20, 0xDF	; 223
    2304:	19 b1       	in	r17, 0x09	; 9
    2306:	20 62       	ori	r18, 0x20	; 32
    2308:	2f c0       	rjmp	.+94     	; 0x2368 <didUnstuff5>

0000230a <unstuff6>:
    230a:	4f 7b       	andi	r20, 0xBF	; 191
    230c:	09 b1       	in	r16, 0x09	; 9
    230e:	20 64       	ori	r18, 0x40	; 64
    2310:	32 c0       	rjmp	.+100    	; 0x2376 <didUnstuff6>

00002312 <rxLoop>:
    2312:	42 27       	eor	r20, r18
    2314:	09 b1       	in	r16, 0x09	; 9
    2316:	49 93       	st	Y+, r20
    2318:	4f ef       	ldi	r20, 0xFF	; 255
    231a:	00 00       	nop
    231c:	10 27       	eor	r17, r16
    231e:	14 fb       	bst	r17, 4
    2320:	20 f9       	bld	r18, 0
    2322:	19 b1       	in	r17, 0x09	; 9
    2324:	18 71       	andi	r17, 0x18	; 24
    2326:	c9 f1       	breq	.+114    	; 0x239a <se0>
    2328:	29 7f       	andi	r18, 0xF9	; 249

0000232a <didUnstuff0>:
    232a:	91 f2       	breq	.-92     	; 0x22d0 <unstuff0>
    232c:	01 27       	eor	r16, r17
    232e:	04 fb       	bst	r16, 4
    2330:	21 f9       	bld	r18, 1

00002332 <rxbit2>:
    2332:	09 b1       	in	r16, 0x09	; 9
    2334:	23 7f       	andi	r18, 0xF3	; 243
    2336:	89 f2       	breq	.-94     	; 0x22da <unstuff1>

00002338 <didUnstuff1>:
    2338:	31 50       	subi	r19, 0x01	; 1
    233a:	58 f1       	brcs	.+86     	; 0x2392 <overflow>
    233c:	10 27       	eor	r17, r16
    233e:	14 fb       	bst	r17, 4
    2340:	22 f9       	bld	r18, 2
    2342:	19 b1       	in	r17, 0x09	; 9
    2344:	27 7e       	andi	r18, 0xE7	; 231
    2346:	79 f2       	breq	.-98     	; 0x22e6 <unstuff2>

00002348 <didUnstuff2>:
    2348:	01 27       	eor	r16, r17
    234a:	04 fb       	bst	r16, 4
    234c:	23 f9       	bld	r18, 3

0000234e <didUnstuff3>:
    234e:	2f 7c       	andi	r18, 0xCF	; 207
    2350:	81 f2       	breq	.-96     	; 0x22f2 <unstuff3>
    2352:	09 b1       	in	r16, 0x09	; 9
    2354:	10 27       	eor	r17, r16
    2356:	14 fb       	bst	r17, 4
    2358:	24 f9       	bld	r18, 4

0000235a <didUnstuff4>:
    235a:	2f 79       	andi	r18, 0x9F	; 159
    235c:	71 f2       	breq	.-100    	; 0x22fa <unstuff4>
    235e:	00 c0       	rjmp	.+0      	; 0x2360 <didUnstuff4+0x6>
    2360:	19 b1       	in	r17, 0x09	; 9
    2362:	01 27       	eor	r16, r17
    2364:	04 fb       	bst	r16, 4
    2366:	25 f9       	bld	r18, 5

00002368 <didUnstuff5>:
    2368:	2f 73       	andi	r18, 0x3F	; 63
    236a:	59 f2       	breq	.-106    	; 0x2302 <unstuff5>
    236c:	00 c0       	rjmp	.+0      	; 0x236e <didUnstuff5+0x6>
    236e:	09 b1       	in	r16, 0x09	; 9
    2370:	10 27       	eor	r17, r16
    2372:	14 fb       	bst	r17, 4
    2374:	26 f9       	bld	r18, 6

00002376 <didUnstuff6>:
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	40 f2       	brcs	.-112    	; 0x230a <unstuff6>
    237a:	00 c0       	rjmp	.+0      	; 0x237c <didUnstuff6+0x6>
    237c:	19 b1       	in	r17, 0x09	; 9
    237e:	01 27       	eor	r16, r17
    2380:	04 fb       	bst	r16, 4
    2382:	27 f9       	bld	r18, 7

00002384 <didUnstuff7>:
    2384:	24 30       	cpi	r18, 0x04	; 4
    2386:	28 f6       	brcc	.-118    	; 0x2312 <rxLoop>

00002388 <unstuff7>:
    2388:	4f 77       	andi	r20, 0x7F	; 127
    238a:	20 68       	ori	r18, 0x80	; 128
    238c:	19 b1       	in	r17, 0x09	; 9
    238e:	00 00       	nop
    2390:	f9 cf       	rjmp	.-14     	; 0x2384 <didUnstuff7>

00002392 <overflow>:
    2392:	12 e0       	ldi	r17, 0x02	; 2
    2394:	1c bb       	out	0x1c, r17	; 28

00002396 <ignorePacket>:
    2396:	00 27       	eor	r16, r16
    2398:	19 c0       	rjmp	.+50     	; 0x23cc <handleSetupOrOut>

0000239a <se0>:
    239a:	3b 50       	subi	r19, 0x0B	; 11
    239c:	31 95       	neg	r19
    239e:	c3 1b       	sub	r28, r19
    23a0:	d0 40       	sbci	r29, 0x00	; 0
    23a2:	12 e0       	ldi	r17, 0x02	; 2
    23a4:	1c bb       	out	0x1c, r17	; 28
    23a6:	08 81       	ld	r16, Y
    23a8:	03 3c       	cpi	r16, 0xC3	; 195
    23aa:	f9 f0       	breq	.+62     	; 0x23ea <handleData>
    23ac:	0b 34       	cpi	r16, 0x4B	; 75
    23ae:	e9 f0       	breq	.+58     	; 0x23ea <handleData>
    23b0:	20 91 6c 02 	lds	r18, 0x026C
    23b4:	19 81       	ldd	r17, Y+1	; 0x01
    23b6:	11 0f       	add	r17, r17
    23b8:	12 13       	cpse	r17, r18
    23ba:	ed cf       	rjmp	.-38     	; 0x2396 <ignorePacket>
    23bc:	4a 81       	ldd	r20, Y+2	; 0x02
    23be:	44 1f       	adc	r20, r20
    23c0:	09 36       	cpi	r16, 0x69	; 105
    23c2:	41 f1       	breq	.+80     	; 0x2414 <handleIn>
    23c4:	0d 32       	cpi	r16, 0x2D	; 45
    23c6:	11 f0       	breq	.+4      	; 0x23cc <handleSetupOrOut>
    23c8:	01 3e       	cpi	r16, 0xE1	; 225
    23ca:	29 f7       	brne	.-54     	; 0x2396 <ignorePacket>

000023cc <handleSetupOrOut>:
    23cc:	00 93 73 02 	sts	0x0273, r16

000023d0 <doReturn>:
    23d0:	3f 91       	pop	r19
    23d2:	4f 91       	pop	r20
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	2f 91       	pop	r18
    23da:	df 91       	pop	r29
    23dc:	cc b3       	in	r28, 0x1c	; 28
    23de:	c1 fd       	sbrc	r28, 1
    23e0:	4f cf       	rjmp	.-354    	; 0x2280 <waitForJ>

000023e2 <sofError>:
    23e2:	cf 91       	pop	r28
    23e4:	cf bf       	out	0x3f, r28	; 63
    23e6:	cf 91       	pop	r28
    23e8:	18 95       	reti

000023ea <handleData>:
    23ea:	20 91 73 02 	lds	r18, 0x0273
    23ee:	22 23       	and	r18, r18
    23f0:	79 f3       	breq	.-34     	; 0x23d0 <doReturn>
    23f2:	10 91 71 02 	lds	r17, 0x0271
    23f6:	11 23       	and	r17, r17
    23f8:	c1 f5       	brne	.+112    	; 0x246a <sendNakAndReti>
    23fa:	34 30       	cpi	r19, 0x04	; 4
    23fc:	c2 f1       	brmi	.+112    	; 0x246e <sendAckAndReti>
    23fe:	30 93 71 02 	sts	0x0271, r19
    2402:	20 93 6d 02 	sts	0x026D, r18
    2406:	10 91 6e 02 	lds	r17, 0x026E
    240a:	3b e0       	ldi	r19, 0x0B	; 11
    240c:	31 1b       	sub	r19, r17
    240e:	30 93 6e 02 	sts	0x026E, r19
    2412:	2d c0       	rjmp	.+90     	; 0x246e <sendAckAndReti>

00002414 <handleIn>:
    2414:	00 91 71 02 	lds	r16, 0x0271
    2418:	01 30       	cpi	r16, 0x01	; 1
    241a:	3c f5       	brge	.+78     	; 0x246a <sendNakAndReti>
    241c:	0a e5       	ldi	r16, 0x5A	; 90
    241e:	4f 70       	andi	r20, 0x0F	; 15
    2420:	49 f4       	brne	.+18     	; 0x2434 <handleIn1>
    2422:	30 91 00 01 	lds	r19, 0x0100
    2426:	34 fd       	sbrc	r19, 4
    2428:	24 c0       	rjmp	.+72     	; 0x2472 <sendCntAndReti>
    242a:	00 93 00 01 	sts	0x0100, r16
    242e:	c5 e5       	ldi	r28, 0x55	; 85
    2430:	d2 e0       	ldi	r29, 0x02	; 2
    2432:	23 c0       	rjmp	.+70     	; 0x247a <usbSendAndReti>

00002434 <handleIn1>:
    2434:	41 35       	cpi	r20, 0x51	; 81
    2436:	49 f0       	breq	.+18     	; 0x244a <handleIn3>
    2438:	30 91 60 02 	lds	r19, 0x0260
    243c:	34 fd       	sbrc	r19, 4
    243e:	19 c0       	rjmp	.+50     	; 0x2472 <sendCntAndReti>
    2440:	00 93 60 02 	sts	0x0260, r16
    2444:	c1 e6       	ldi	r28, 0x61	; 97
    2446:	d2 e0       	ldi	r29, 0x02	; 2
    2448:	18 c0       	rjmp	.+48     	; 0x247a <usbSendAndReti>

0000244a <handleIn3>:
    244a:	30 91 8b 02 	lds	r19, 0x028B
    244e:	34 fd       	sbrc	r19, 4
    2450:	10 c0       	rjmp	.+32     	; 0x2472 <sendCntAndReti>
    2452:	00 93 8b 02 	sts	0x028B, r16
    2456:	cc e8       	ldi	r28, 0x8C	; 140
    2458:	d2 e0       	ldi	r29, 0x02	; 2
    245a:	0f c0       	rjmp	.+30     	; 0x247a <usbSendAndReti>

0000245c <stuffN1Delay>:
    245c:	27 95       	ror	r18
    245e:	a8 f4       	brcc	.+42     	; 0x248a <doExorN1>
    2460:	51 50       	subi	r21, 0x01	; 1
    2462:	a9 f4       	brne	.+42     	; 0x248e <commonN1>
    2464:	22 0f       	add	r18, r18
    2466:	00 00       	nop
    2468:	f9 cf       	rjmp	.-14     	; 0x245c <stuffN1Delay>

0000246a <sendNakAndReti>:
    246a:	4a e5       	ldi	r20, 0x5A	; 90
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <usbSendX3>

0000246e <sendAckAndReti>:
    246e:	42 ed       	ldi	r20, 0xD2	; 210
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <usbSendX3>

00002472 <sendCntAndReti>:
    2472:	43 2f       	mov	r20, r19

00002474 <usbSendX3>:
    2474:	c4 e1       	ldi	r28, 0x14	; 20
    2476:	d0 e0       	ldi	r29, 0x00	; 0
    2478:	32 e0       	ldi	r19, 0x02	; 2

0000247a <usbSendAndReti>:
    247a:	1a b1       	in	r17, 0x0a	; 10
    247c:	18 61       	ori	r17, 0x18	; 24
    247e:	5c 9a       	sbi	0x0b, 4	; 11
    2480:	1a b9       	out	0x0a, r17	; 10
    2482:	0b b1       	in	r16, 0x0b	; 11
    2484:	20 e4       	ldi	r18, 0x40	; 64
    2486:	18 e1       	ldi	r17, 0x18	; 24
    2488:	5f 93       	push	r21

0000248a <doExorN1>:
    248a:	01 27       	eor	r16, r17
    248c:	56 e0       	ldi	r21, 0x06	; 6

0000248e <commonN1>:
    248e:	0b b9       	out	0x0b, r16	; 11
    2490:	27 95       	ror	r18
    2492:	20 f4       	brcc	.+8      	; 0x249c <doExorN2>
    2494:	51 50       	subi	r21, 0x01	; 1
    2496:	21 f4       	brne	.+8      	; 0x24a0 <commonN2>
    2498:	22 0f       	add	r18, r18
    249a:	f9 cf       	rjmp	.-14     	; 0x248e <commonN1>

0000249c <doExorN2>:
    249c:	01 27       	eor	r16, r17
    249e:	56 e0       	ldi	r21, 0x06	; 6

000024a0 <commonN2>:
    24a0:	00 00       	nop
    24a2:	3b 5a       	subi	r19, 0xAB	; 171
    24a4:	0b b9       	out	0x0b, r16	; 11
    24a6:	d0 f2       	brcs	.-76     	; 0x245c <stuffN1Delay>

000024a8 <stuff6Delay>:
    24a8:	27 95       	ror	r18
    24aa:	28 f4       	brcc	.+10     	; 0x24b6 <doExor6>
    24ac:	51 50       	subi	r21, 0x01	; 1
    24ae:	29 f4       	brne	.+10     	; 0x24ba <common6>
    24b0:	22 0f       	add	r18, r18
    24b2:	00 00       	nop
    24b4:	f9 cf       	rjmp	.-14     	; 0x24a8 <stuff6Delay>

000024b6 <doExor6>:
    24b6:	01 27       	eor	r16, r17
    24b8:	56 e0       	ldi	r21, 0x06	; 6

000024ba <common6>:
    24ba:	27 95       	ror	r18
    24bc:	0b b9       	out	0x0b, r16	; 11
    24be:	20 f4       	brcc	.+8      	; 0x24c8 <doExor7>
    24c0:	51 50       	subi	r21, 0x01	; 1
    24c2:	21 f4       	brne	.+8      	; 0x24cc <common7>
    24c4:	22 0f       	add	r18, r18
    24c6:	f9 cf       	rjmp	.-14     	; 0x24ba <common6>

000024c8 <doExor7>:
    24c8:	01 27       	eor	r16, r17
    24ca:	56 e0       	ldi	r21, 0x06	; 6

000024cc <common7>:
    24cc:	29 91       	ld	r18, Y+
    24ce:	33 23       	and	r19, r19
    24d0:	0b b9       	out	0x0b, r16	; 11
    24d2:	21 f6       	brne	.-120    	; 0x245c <stuffN1Delay>
    24d4:	07 7e       	andi	r16, 0xE7	; 231
    24d6:	10 91 72 02 	lds	r17, 0x0272
    24da:	11 0f       	add	r17, r17
    24dc:	c6 51       	subi	r28, 0x16	; 22
    24de:	d0 40       	sbci	r29, 0x00	; 0
    24e0:	0b b9       	out	0x0b, r16	; 11
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <skipAddrAssign>
    24e4:	10 93 6c 02 	sts	0x026C, r17

000024e8 <skipAddrAssign>:
    24e8:	12 e0       	ldi	r17, 0x02	; 2
    24ea:	1c bb       	out	0x1c, r17	; 28
    24ec:	00 61       	ori	r16, 0x10	; 16
    24ee:	1a b1       	in	r17, 0x0a	; 10
    24f0:	17 7e       	andi	r17, 0xE7	; 231
    24f2:	40 2f       	mov	r20, r16
    24f4:	47 7e       	andi	r20, 0xE7	; 231
    24f6:	5f 91       	pop	r21
    24f8:	00 c0       	rjmp	.+0      	; 0x24fa <skipAddrAssign+0x12>
    24fa:	00 c0       	rjmp	.+0      	; 0x24fc <skipAddrAssign+0x14>
    24fc:	0b b9       	out	0x0b, r16	; 11
    24fe:	1a b9       	out	0x0a, r17	; 10
    2500:	4b b9       	out	0x0b, r20	; 11
    2502:	66 cf       	rjmp	.-308    	; 0x23d0 <doReturn>

00002504 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    2504:	e9 e6       	ldi	r30, 0x69	; 105
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	8c 60       	ori	r24, 0x0C	; 12
    250c:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    250e:	e9 9a       	sbi	0x1d, 1	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    2510:	8b e4       	ldi	r24, 0x4B	; 75
    2512:	80 93 61 02 	sts	0x0261, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    2516:	80 93 8c 02 	sts	0x028C, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    251a:	8a e5       	ldi	r24, 0x5A	; 90
    251c:	80 93 60 02 	sts	0x0260, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
    2520:	80 93 8b 02 	sts	0x028B, r24
#endif
#endif
}
    2524:	08 95       	ret

00002526 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    252c:	90 91 71 02 	lds	r25, 0x0271
    2530:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
    2532:	97 fd       	sbrc	r25, 7
    2534:	a8 c0       	rjmp	.+336    	; 0x2686 <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    2536:	20 91 6e 02 	lds	r18, 0x026E
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    253a:	80 91 6d 02 	lds	r24, 0x026D
    253e:	8d 32       	cpi	r24, 0x2D	; 45
    2540:	09 f0       	breq	.+2      	; 0x2544 <usbPoll+0x1e>
    2542:	9f c0       	rjmp	.+318    	; 0x2682 <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    2544:	98 30       	cpi	r25, 0x08	; 8
    2546:	09 f0       	breq	.+2      	; 0x254a <usbPoll+0x24>
    2548:	9c c0       	rjmp	.+312    	; 0x2682 <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    254a:	cc e0       	ldi	r28, 0x0C	; 12
    254c:	d0 e0       	ldi	r29, 0x00	; 0
    254e:	c2 1b       	sub	r28, r18
    2550:	d1 09       	sbc	r29, r1
    2552:	cb 58       	subi	r28, 0x8B	; 139
    2554:	dd 4f       	sbci	r29, 0xFD	; 253
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    2556:	83 ec       	ldi	r24, 0xC3	; 195
    2558:	80 93 55 02 	sts	0x0255, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    255c:	8a e5       	ldi	r24, 0x5A	; 90
    255e:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
    2562:	10 92 29 01 	sts	0x0129, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    2566:	88 81       	ld	r24, Y
    2568:	80 76       	andi	r24, 0x60	; 96
    256a:	29 f0       	breq	.+10     	; 0x2576 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    256c:	ce 01       	movw	r24, r28
    256e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <usbFunctionSetup>
    2572:	28 2f       	mov	r18, r24
    2574:	7d c0       	rjmp	.+250    	; 0x2670 <usbPoll+0x14a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    2578:	10 92 5e 02 	sts	0x025E, r1
    SWITCH_START(rq->bRequest)
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    257e:	88 23       	and	r24, r24
    2580:	21 f4       	brne	.+8      	; 0x258a <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    2582:	10 92 5f 02 	sts	0x025F, r1
    2586:	22 e0       	ldi	r18, 0x02	; 2
    2588:	6d c0       	rjmp	.+218    	; 0x2664 <usbPoll+0x13e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    258a:	85 30       	cpi	r24, 0x05	; 5
    258c:	19 f4       	brne	.+6      	; 0x2594 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
    258e:	90 93 72 02 	sts	0x0272, r25
    2592:	67 c0       	rjmp	.+206    	; 0x2662 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    2594:	86 30       	cpi	r24, 0x06	; 6
    2596:	09 f0       	breq	.+2      	; 0x259a <usbPoll+0x74>
    2598:	4e c0       	rjmp	.+156    	; 0x2636 <usbPoll+0x110>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	41 f4       	brne	.+16     	; 0x25b0 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    25a0:	86 ee       	ldi	r24, 0xE6	; 230
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	90 93 70 02 	sts	0x0270, r25
    25a8:	80 93 6f 02 	sts	0x026F, r24
    25ac:	22 e1       	ldi	r18, 0x12	; 18
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    25b0:	82 30       	cpi	r24, 0x02	; 2
    25b2:	41 f4       	brne	.+16     	; 0x25c4 <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    25b4:	88 ef       	ldi	r24, 0xF8	; 248
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	90 93 70 02 	sts	0x0270, r25
    25bc:	80 93 6f 02 	sts	0x026F, r24
    25c0:	29 e2       	ldi	r18, 0x29	; 41
    25c2:	35 c0       	rjmp	.+106    	; 0x262e <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    25c4:	83 30       	cpi	r24, 0x03	; 3
    25c6:	f1 f4       	brne	.+60     	; 0x2604 <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    25c8:	99 23       	and	r25, r25
    25ca:	41 f4       	brne	.+16     	; 0x25dc <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    25cc:	82 eb       	ldi	r24, 0xB2	; 178
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	90 93 70 02 	sts	0x0270, r25
    25d4:	80 93 6f 02 	sts	0x026F, r24
    25d8:	24 e0       	ldi	r18, 0x04	; 4
    25da:	29 c0       	rjmp	.+82     	; 0x262e <usbPoll+0x108>
        SWITCH_CASE(1)
    25dc:	91 30       	cpi	r25, 0x01	; 1
    25de:	41 f4       	brne	.+16     	; 0x25f0 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    25e0:	86 eb       	ldi	r24, 0xB6	; 182
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	90 93 70 02 	sts	0x0270, r25
    25e8:	80 93 6f 02 	sts	0x026F, r24
    25ec:	2c e1       	ldi	r18, 0x1C	; 28
    25ee:	1f c0       	rjmp	.+62     	; 0x262e <usbPoll+0x108>
        SWITCH_CASE(2)
    25f0:	92 30       	cpi	r25, 0x02	; 2
    25f2:	e1 f4       	brne	.+56     	; 0x262c <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    25f4:	82 ed       	ldi	r24, 0xD2	; 210
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	90 93 70 02 	sts	0x0270, r25
    25fc:	80 93 6f 02 	sts	0x026F, r24
    2600:	24 e1       	ldi	r18, 0x14	; 20
    2602:	15 c0       	rjmp	.+42     	; 0x262e <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    2604:	81 32       	cpi	r24, 0x21	; 33
    2606:	41 f4       	brne	.+16     	; 0x2618 <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    2608:	8a e0       	ldi	r24, 0x0A	; 10
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	90 93 70 02 	sts	0x0270, r25
    2610:	80 93 6f 02 	sts	0x026F, r24
    2614:	29 e0       	ldi	r18, 0x09	; 9
    2616:	0b c0       	rjmp	.+22     	; 0x262e <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    2618:	82 32       	cpi	r24, 0x22	; 34
    261a:	41 f4       	brne	.+16     	; 0x262c <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    261c:	88 e6       	ldi	r24, 0x68	; 104
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	90 93 70 02 	sts	0x0270, r25
    2624:	80 93 6f 02 	sts	0x026F, r24
    2628:	2a e4       	ldi	r18, 0x4A	; 74
    262a:	01 c0       	rjmp	.+2      	; 0x262e <usbPoll+0x108>
    262c:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    262e:	80 e4       	ldi	r24, 0x40	; 64
    2630:	80 93 29 01 	sts	0x0129, r24
    2634:	1d c0       	rjmp	.+58     	; 0x2670 <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    2636:	88 30       	cpi	r24, 0x08	; 8
    2638:	21 f4       	brne	.+8      	; 0x2642 <usbPoll+0x11c>
    263a:	21 e0       	ldi	r18, 0x01	; 1
    263c:	84 e7       	ldi	r24, 0x74	; 116
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	13 c0       	rjmp	.+38     	; 0x2668 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    2642:	89 30       	cpi	r24, 0x09	; 9
    2644:	19 f4       	brne	.+6      	; 0x264c <usbPoll+0x126>
        usbConfiguration = value;
    2646:	90 93 74 02 	sts	0x0274, r25
    264a:	0b c0       	rjmp	.+22     	; 0x2662 <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    264c:	8a 30       	cpi	r24, 0x0A	; 10
    264e:	11 f4       	brne	.+4      	; 0x2654 <usbPoll+0x12e>
    2650:	21 e0       	ldi	r18, 0x01	; 1
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <usbPoll+0x13e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    2654:	8b 30       	cpi	r24, 0x0B	; 11
    2656:	29 f4       	brne	.+10     	; 0x2662 <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    2658:	8b e4       	ldi	r24, 0x4B	; 75
    265a:	80 93 61 02 	sts	0x0261, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    265e:	80 93 8c 02 	sts	0x028C, r24
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	8e e5       	ldi	r24, 0x5E	; 94
    2666:	92 e0       	ldi	r25, 0x02	; 2
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    2668:	90 93 70 02 	sts	0x0270, r25
    266c:	80 93 6f 02 	sts	0x026F, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    2670:	8f 81       	ldd	r24, Y+7	; 0x07
    2672:	88 23       	and	r24, r24
    2674:	21 f4       	brne	.+8      	; 0x267e <usbPoll+0x158>
    2676:	8e 81       	ldd	r24, Y+6	; 0x06
    2678:	82 17       	cp	r24, r18
    267a:	08 f4       	brcc	.+2      	; 0x267e <usbPoll+0x158>
    267c:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    267e:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    2682:	10 92 71 02 	sts	0x0271, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    2686:	80 91 00 01 	lds	r24, 0x0100
    268a:	84 ff       	sbrs	r24, 4
    268c:	4a c0       	rjmp	.+148    	; 0x2722 <usbPoll+0x1fc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    268e:	80 91 01 01 	lds	r24, 0x0101
    2692:	8f 3f       	cpi	r24, 0xFF	; 255
    2694:	09 f4       	brne	.+2      	; 0x2698 <usbPoll+0x172>
    2696:	45 c0       	rjmp	.+138    	; 0x2722 <usbPoll+0x1fc>
    2698:	18 2f       	mov	r17, r24
    269a:	89 30       	cpi	r24, 0x09	; 9
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <usbPoll+0x17a>
    269e:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    26a0:	81 1b       	sub	r24, r17
    26a2:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    26a6:	80 91 55 02 	lds	r24, 0x0255
    26aa:	98 e8       	ldi	r25, 0x88	; 136
    26ac:	89 27       	eor	r24, r25
    26ae:	80 93 55 02 	sts	0x0255, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    26b2:	11 23       	and	r17, r17
    26b4:	41 f1       	breq	.+80     	; 0x2706 <usbPoll+0x1e0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    26b6:	20 91 6f 02 	lds	r18, 0x026F
    26ba:	30 91 70 02 	lds	r19, 0x0270
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    26be:	80 91 29 01 	lds	r24, 0x0129
    26c2:	86 ff       	sbrs	r24, 6
    26c4:	0d c0       	rjmp	.+26     	; 0x26e0 <usbPoll+0x1ba>
    26c6:	a6 e5       	ldi	r26, 0x56	; 86
    26c8:	b2 e0       	ldi	r27, 0x02	; 2
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    26ce:	f9 01       	movw	r30, r18
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    26d6:	ed 93       	st	X+, r30
    26d8:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    26da:	18 17       	cp	r17, r24
    26dc:	c1 f7       	brne	.-16     	; 0x26ce <usbPoll+0x1a8>
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <usbPoll+0x1ca>
    26e0:	91 2f       	mov	r25, r17
    26e2:	d9 01       	movw	r26, r18
    26e4:	e6 e5       	ldi	r30, 0x56	; 86
    26e6:	f2 e0       	ldi	r31, 0x02	; 2
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    26e8:	8d 91       	ld	r24, X+
    26ea:	81 93       	st	Z+, r24
                }while(--i);
    26ec:	91 50       	subi	r25, 0x01	; 1
    26ee:	e1 f7       	brne	.-8      	; 0x26e8 <usbPoll+0x1c2>
    26f0:	11 50       	subi	r17, 0x01	; 1
    26f2:	81 2f       	mov	r24, r17
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	1f 5f       	subi	r17, 0xFF	; 255
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	82 0f       	add	r24, r18
    26fc:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    26fe:	90 93 70 02 	sts	0x0270, r25
    2702:	80 93 6f 02 	sts	0x026F, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    2706:	86 e5       	ldi	r24, 0x56	; 86
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	61 2f       	mov	r22, r17
    270c:	0e 94 39 11 	call	0x2272	; 0x2272 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    2710:	61 2f       	mov	r22, r17
    2712:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    2714:	6c 30       	cpi	r22, 0x0C	; 12
    2716:	19 f0       	breq	.+6      	; 0x271e <usbPoll+0x1f8>
            usbMsgLen = USB_NO_MSG;
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    271e:	60 93 00 01 	sts	0x0100, r22
    2722:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    2724:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    2726:	88 71       	andi	r24, 0x18	; 24
    2728:	31 f4       	brne	.+12     	; 0x2736 <usbPoll+0x210>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    272a:	91 50       	subi	r25, 0x01	; 1
    272c:	d9 f7       	brne	.-10     	; 0x2724 <usbPoll+0x1fe>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    272e:	10 92 72 02 	sts	0x0272, r1
    usbDeviceAddr = 0;
    2732:	10 92 6c 02 	sts	0x026C, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	08 95       	ret

0000273e <usbSetInterrupt3>:
}
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    273e:	1f 93       	push	r17
    2740:	dc 01       	movw	r26, r24
    2742:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    2744:	80 91 8b 02 	lds	r24, 0x028B
    2748:	84 ff       	sbrs	r24, 4
    274a:	07 c0       	rjmp	.+14     	; 0x275a <usbSetInterrupt3+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    274c:	80 91 8c 02 	lds	r24, 0x028C
    2750:	98 e8       	ldi	r25, 0x88	; 136
    2752:	89 27       	eor	r24, r25
    2754:	80 93 8c 02 	sts	0x028C, r24
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <usbSetInterrupt3+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    275a:	8a e5       	ldi	r24, 0x5A	; 90
    275c:	80 93 8b 02 	sts	0x028B, r24
    2760:	91 2f       	mov	r25, r17
    2762:	ed e8       	ldi	r30, 0x8D	; 141
    2764:	f2 e0       	ldi	r31, 0x02	; 2
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    2766:	8d 91       	ld	r24, X+
    2768:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    276a:	91 50       	subi	r25, 0x01	; 1
    276c:	e1 f7       	brne	.-8      	; 0x2766 <usbSetInterrupt3+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    276e:	8d e8       	ldi	r24, 0x8D	; 141
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	61 2f       	mov	r22, r17
    2774:	0e 94 39 11 	call	0x2272	; 0x2272 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    2778:	1c 5f       	subi	r17, 0xFC	; 252
    277a:	10 93 8b 02 	sts	0x028B, r17

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
}
    277e:	1f 91       	pop	r17
    2780:	08 95       	ret

00002782 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    2782:	1f 93       	push	r17
    2784:	dc 01       	movw	r26, r24
    2786:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    2788:	80 91 60 02 	lds	r24, 0x0260
    278c:	84 ff       	sbrs	r24, 4
    278e:	07 c0       	rjmp	.+14     	; 0x279e <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    2790:	80 91 61 02 	lds	r24, 0x0261
    2794:	98 e8       	ldi	r25, 0x88	; 136
    2796:	89 27       	eor	r24, r25
    2798:	80 93 61 02 	sts	0x0261, r24
    279c:	03 c0       	rjmp	.+6      	; 0x27a4 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    279e:	8a e5       	ldi	r24, 0x5A	; 90
    27a0:	80 93 60 02 	sts	0x0260, r24
    27a4:	91 2f       	mov	r25, r17
    27a6:	e2 e6       	ldi	r30, 0x62	; 98
    27a8:	f2 e0       	ldi	r31, 0x02	; 2
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    27aa:	8d 91       	ld	r24, X+
    27ac:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    27ae:	91 50       	subi	r25, 0x01	; 1
    27b0:	e1 f7       	brne	.-8      	; 0x27aa <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    27b2:	82 e6       	ldi	r24, 0x62	; 98
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	61 2f       	mov	r22, r17
    27b8:	0e 94 39 11 	call	0x2272	; 0x2272 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    27bc:	1c 5f       	subi	r17, 0xFC	; 252
    27be:	10 93 60 02 	sts	0x0260, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    27c2:	1f 91       	pop	r17
    27c4:	08 95       	ret

000027c6 <twi_slave_init>:
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    27c6:	10 92 4b 02 	sts	0x024B, r1
    27ca:	10 92 4a 02 	sts	0x024A, r1

        // set slave address
        TWAR = addr << 1;
    27ce:	88 0f       	add	r24, r24
    27d0:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    27d4:	85 e4       	ldi	r24, 0x45	; 69
    27d6:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    27da:	78 94       	sei
}
    27dc:	08 95       	ret

000027de <twi_clear_int>:

void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
    27de:	88 23       	and	r24, r24
    27e0:	11 f0       	breq	.+4      	; 0x27e6 <twi_clear_int+0x8>
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    27e2:	85 ec       	ldi	r24, 0xC5	; 197
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <twi_clear_int+0xa>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27e6:	85 e8       	ldi	r24, 0x85	; 133
    27e8:	80 93 bc 00 	sts	0x00BC, r24
    27ec:	08 95       	ret

000027ee <wm_ror8>:
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	88 e0       	ldi	r24, 0x08	; 8
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	86 1b       	sub	r24, r22
    27fa:	97 0b       	sbc	r25, r23
    27fc:	a9 01       	movw	r20, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <wm_ror8+0x16>
    2800:	44 0f       	add	r20, r20
    2802:	55 1f       	adc	r21, r21
    2804:	8a 95       	dec	r24
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <wm_ror8+0x12>
    2808:	ca 01       	movw	r24, r20
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <wm_ror8+0x22>
    280c:	35 95       	asr	r19
    280e:	27 95       	ror	r18
    2810:	6a 95       	dec	r22
    2812:	e2 f7       	brpl	.-8      	; 0x280c <wm_ror8+0x1e>
}
    2814:	82 2b       	or	r24, r18
    2816:	08 95       	ret

00002818 <wm_newaction>:
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy((void*)twi_reg, d, 6);
    2818:	aa e4       	ldi	r26, 0x4A	; 74
    281a:	b1 e0       	ldi	r27, 0x01	; 1
    281c:	fc 01       	movw	r30, r24
    281e:	86 e0       	ldi	r24, 0x06	; 6
    2820:	01 90       	ld	r0, Z+
    2822:	0d 92       	st	X+, r0
    2824:	81 50       	subi	r24, 0x01	; 1
    2826:	e1 f7       	brne	.-8      	; 0x2820 <wm_newaction+0x8>
}
    2828:	08 95       	ret

0000282a <wm_init>:

void wm_init(const unsigned char * id, unsigned char * t, const unsigned char * cal_data, void (*function)(void))
{
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	18 2f       	mov	r17, r24
    2830:	09 2f       	mov	r16, r25
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy((void*)twi_reg, d, 6);
    2832:	aa e4       	ldi	r26, 0x4A	; 74
    2834:	b1 e0       	ldi	r27, 0x01	; 1
    2836:	fb 01       	movw	r30, r22
    2838:	86 e0       	ldi	r24, 0x06	; 6
    283a:	01 90       	ld	r0, Z+
    283c:	0d 92       	st	X+, r0
    283e:	81 50       	subi	r24, 0x01	; 1
    2840:	e1 f7       	brne	.-8      	; 0x283a <wm_init+0x10>
        // link user function
        // wm_sample_event = function;

        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption
    2842:	10 92 3a 02 	sts	0x023A, r1
    2846:	81 2f       	mov	r24, r17
    2848:	90 2f       	mov	r25, r16
    284a:	9c 01       	movw	r18, r24
    284c:	d9 01       	movw	r26, r18
    284e:	2a ef       	ldi	r18, 0xFA	; 250
    2850:	30 e0       	ldi	r19, 0x00	; 0

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
        {
                twi_reg[j] = id[i];
    2852:	8d 91       	ld	r24, X+
    2854:	f9 01       	movw	r30, r18
    2856:	e6 5b       	subi	r30, 0xB6	; 182
    2858:	fe 4f       	sbci	r31, 0xFE	; 254
    285a:	80 83       	st	Z, r24
        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
    285c:	2f 5f       	subi	r18, 0xFF	; 255
    285e:	3f 4f       	sbci	r19, 0xFF	; 255
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	20 30       	cpi	r18, 0x00	; 0
    2864:	38 07       	cpc	r19, r24
    2866:	a9 f7       	brne	.-22     	; 0x2852 <wm_init+0x28>
    2868:	da 01       	movw	r26, r20
    286a:	20 e2       	ldi	r18, 0x20	; 32
    286c:	30 e0       	ldi	r19, 0x00	; 0
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
        {
                twi_reg[j] = cal_data[i];
    286e:	8d 91       	ld	r24, X+
    2870:	f9 01       	movw	r30, r18
    2872:	e6 5b       	subi	r30, 0xB6	; 182
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	80 83       	st	Z, r24
        {
                twi_reg[j] = id[i];
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
    2878:	2f 5f       	subi	r18, 0xFF	; 255
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	26 32       	cpi	r18, 0x26	; 38
    287e:	31 05       	cpc	r19, r1
    2880:	b1 f7       	brne	.-20     	; 0x286e <wm_init+0x44>
        /*dev_detect_port &= 0xFF ^ _BV(dev_detect_pin);
        dev_detect_ddr |= _BV(dev_detect_pin);
        _delay_ms(50); // delay to simulate disconnect
		*/
        // ready twi bus, no pull-ups
        twi_port &= 0xFF ^ _BV(twi_scl_pin);
    2882:	45 98       	cbi	0x08, 5	; 8
        twi_port &= 0xFF ^ _BV(twi_sda_pin);
    2884:	44 98       	cbi	0x08, 4	; 8
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    2886:	10 92 4b 02 	sts	0x024B, r1
    288a:	10 92 4a 02 	sts	0x024A, r1

        // set slave address
        TWAR = addr << 1;
    288e:	84 ea       	ldi	r24, 0xA4	; 164
    2890:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2894:	85 e4       	ldi	r24, 0x45	; 69
    2896:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    289a:	78 94       	sei
        // start twi slave, link events
        twi_slave_init(0x52);

        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <wm_gentabs>:
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
}

void wm_gentabs()
{
    28a2:	2f 92       	push	r2
    28a4:	3f 92       	push	r3
    28a6:	4f 92       	push	r4
    28a8:	5f 92       	push	r5
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	8f 92       	push	r8
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	68 97       	sbiw	r28, 0x18	; 24
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	41 e2       	ldi	r20, 0x21	; 33
    28d8:	64 2e       	mov	r6, r20
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	74 2e       	mov	r7, r20
    28de:	88 24       	eor	r8, r8
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    28e0:	37 e0       	ldi	r19, 0x07	; 7
    28e2:	23 2e       	mov	r2, r19
    28e4:	31 2c       	mov	r3, r1
    28e6:	2c 0e       	add	r2, r28
    28e8:	3d 1e       	adc	r3, r29
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    28ea:	28 e0       	ldi	r18, 0x08	; 8
    28ec:	42 2e       	mov	r4, r18
    28ee:	51 2c       	mov	r5, r1
    28f0:	cb c0       	rjmp	.+406    	; 0x2a88 <wm_gentabs+0x1e6>
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
    28f2:	84 91       	lpm	r24, Z+
    28f4:	8d 93       	st	X+, r24
    28f6:	31 96       	adiw	r30, 0x01	; 1
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    28f8:	a2 15       	cp	r26, r2
    28fa:	b3 05       	cpc	r27, r3
    28fc:	d1 f7       	brne	.-12     	; 0x28f2 <wm_gentabs+0x50>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
    2902:	fc 01       	movw	r30, r24
    2904:	e6 5d       	subi	r30, 0xD6	; 214
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	e0 81       	ld	r30, Z
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	e5 5b       	subi	r30, 0xB5	; 181
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	e4 91       	lpm	r30, Z+
    2912:	ad e0       	ldi	r26, 0x0D	; 13
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ac 0f       	add	r26, r28
    2918:	bd 1f       	adc	r27, r29
    291a:	a8 0f       	add	r26, r24
    291c:	b9 1f       	adc	r27, r25
    291e:	ec 93       	st	X, r30
    2920:	01 96       	adiw	r24, 0x01	; 1
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
    2922:	8a 30       	cpi	r24, 0x0A	; 10
    2924:	91 05       	cpc	r25, r1
    2926:	69 f7       	brne	.-38     	; 0x2902 <wm_gentabs+0x60>
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    2928:	aa 88       	ldd	r10, Y+18	; 0x12
    292a:	cf 84       	ldd	r12, Y+15	; 0x0f
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    292c:	29 81       	ldd	r18, Y+1	; 0x01
    292e:	2a 25       	eor	r18, r10
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4c 2d       	mov	r20, r12
    2934:	47 70       	andi	r20, 0x07	; 7
    2936:	50 e0       	ldi	r21, 0x00	; 0
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    2938:	9e 88       	ldd	r9, Y+22	; 0x16
    293a:	b9 88       	ldd	r11, Y+17	; 0x11
    293c:	c2 01       	movw	r24, r4
    293e:	84 1b       	sub	r24, r20
    2940:	95 0b       	sbc	r25, r21
    2942:	b9 01       	movw	r22, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <wm_gentabs+0xa8>
    2946:	66 0f       	add	r22, r22
    2948:	77 1f       	adc	r23, r23
    294a:	8a 95       	dec	r24
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <wm_gentabs+0xa4>
    294e:	cb 01       	movw	r24, r22
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <wm_gentabs+0xb4>
    2952:	35 95       	asr	r19
    2954:	27 95       	ror	r18
    2956:	4a 95       	dec	r20
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <wm_gentabs+0xb0>
    295a:	82 2b       	or	r24, r18
    295c:	89 19       	sub	r24, r9
    295e:	8b 25       	eor	r24, r11
    2960:	8f 83       	std	Y+7, r24	; 0x07
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    2962:	ee 84       	ldd	r14, Y+14	; 0x0e
    2964:	dd 84       	ldd	r13, Y+13	; 0x0d
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2966:	2a 81       	ldd	r18, Y+2	; 0x02
    2968:	2e 25       	eor	r18, r14
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4d 2d       	mov	r20, r13
    296e:	47 70       	andi	r20, 0x07	; 7
    2970:	50 e0       	ldi	r21, 0x00	; 0
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    2972:	ac 89       	ldd	r26, Y+20	; 0x14
    2974:	c2 01       	movw	r24, r4
    2976:	84 1b       	sub	r24, r20
    2978:	95 0b       	sbc	r25, r21
    297a:	f9 01       	movw	r30, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <wm_gentabs+0xe0>
    297e:	ee 0f       	add	r30, r30
    2980:	ff 1f       	adc	r31, r31
    2982:	8a 95       	dec	r24
    2984:	e2 f7       	brpl	.-8      	; 0x297e <wm_gentabs+0xdc>
    2986:	cf 01       	movw	r24, r30
    2988:	02 c0       	rjmp	.+4      	; 0x298e <wm_gentabs+0xec>
    298a:	35 95       	asr	r19
    298c:	27 95       	ror	r18
    298e:	4a 95       	dec	r20
    2990:	e2 f7       	brpl	.-8      	; 0x298a <wm_gentabs+0xe8>
    2992:	82 2b       	or	r24, r18
    2994:	8a 19       	sub	r24, r10
    2996:	8a 27       	eor	r24, r26
    2998:	88 87       	std	Y+8, r24	; 0x08
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    299a:	eb 89       	ldd	r30, Y+19	; 0x13
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    299c:	2b 81       	ldd	r18, Y+3	; 0x03
    299e:	2e 27       	eor	r18, r30
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	0d 89       	ldd	r16, Y+21	; 0x15
    29a4:	07 70       	andi	r16, 0x07	; 7
    29a6:	10 e0       	ldi	r17, 0x00	; 0
    29a8:	b2 01       	movw	r22, r4
    29aa:	60 1b       	sub	r22, r16
    29ac:	71 0b       	sbc	r23, r17
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    29ae:	c9 01       	movw	r24, r18
    29b0:	06 2e       	mov	r0, r22
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <wm_gentabs+0x116>
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	0a 94       	dec	r0
    29ba:	e2 f7       	brpl	.-8      	; 0x29b4 <wm_gentabs+0x112>
    29bc:	00 2e       	mov	r0, r16
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <wm_gentabs+0x122>
    29c0:	35 95       	asr	r19
    29c2:	27 95       	ror	r18
    29c4:	0a 94       	dec	r0
    29c6:	e2 f7       	brpl	.-8      	; 0x29c0 <wm_gentabs+0x11e>
    29c8:	82 2b       	or	r24, r18
    29ca:	8c 19       	sub	r24, r12
    29cc:	8d 25       	eor	r24, r13
    29ce:	89 87       	std	Y+9, r24	; 0x09
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    29d0:	2c 81       	ldd	r18, Y+4	; 0x04
    29d2:	2b 25       	eor	r18, r11
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a 2f       	mov	r20, r26
    29d8:	47 70       	andi	r20, 0x07	; 7
    29da:	84 2f       	mov	r24, r20
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	98 8f       	std	Y+24, r25	; 0x18
    29e0:	8f 8b       	std	Y+23, r24	; 0x17
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
    29e2:	d8 88       	ldd	r13, Y+16	; 0x10
    29e4:	c2 01       	movw	r24, r4
    29e6:	4f 89       	ldd	r20, Y+23	; 0x17
    29e8:	58 8d       	ldd	r21, Y+24	; 0x18
    29ea:	84 1b       	sub	r24, r20
    29ec:	95 0b       	sbc	r25, r21
    29ee:	a9 01       	movw	r20, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <wm_gentabs+0x154>
    29f2:	44 0f       	add	r20, r20
    29f4:	55 1f       	adc	r21, r21
    29f6:	8a 95       	dec	r24
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <wm_gentabs+0x150>
    29fa:	ca 01       	movw	r24, r20
    29fc:	0f 88       	ldd	r0, Y+23	; 0x17
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <wm_gentabs+0x162>
    2a00:	35 95       	asr	r19
    2a02:	27 95       	ror	r18
    2a04:	0a 94       	dec	r0
    2a06:	e2 f7       	brpl	.-8      	; 0x2a00 <wm_gentabs+0x15e>
    2a08:	82 2b       	or	r24, r18
    2a0a:	8d 19       	sub	r24, r13
    2a0c:	8c 25       	eor	r24, r12
    2a0e:	8a 87       	std	Y+10, r24	; 0x0a
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2a10:	8d 81       	ldd	r24, Y+5	; 0x05
    2a12:	e8 26       	eor	r14, r24
    2a14:	ff 24       	eor	r15, r15
    2a16:	e7 70       	andi	r30, 0x07	; 7
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
    2a1a:	c2 01       	movw	r24, r4
    2a1c:	8e 1b       	sub	r24, r30
    2a1e:	9f 0b       	sbc	r25, r31
    2a20:	97 01       	movw	r18, r14
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <wm_gentabs+0x186>
    2a24:	22 0f       	add	r18, r18
    2a26:	33 1f       	adc	r19, r19
    2a28:	8a 95       	dec	r24
    2a2a:	e2 f7       	brpl	.-8      	; 0x2a24 <wm_gentabs+0x182>
    2a2c:	c9 01       	movw	r24, r18
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <wm_gentabs+0x192>
    2a30:	f5 94       	asr	r15
    2a32:	e7 94       	ror	r14
    2a34:	ea 95       	dec	r30
    2a36:	e2 f7       	brpl	.-8      	; 0x2a30 <wm_gentabs+0x18e>
    2a38:	8e 29       	or	r24, r14
    2a3a:	8d 19       	sub	r24, r13
    2a3c:	8b 25       	eor	r24, r11
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	a8 27       	eor	r26, r24
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
                tkey[5] = ((wm_ror8((ans[5] ^ t0[7]), (t0[8] % 8)) - t0[5]) ^ t0[9]);
    2a46:	ad 01       	movw	r20, r26
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <wm_gentabs+0x1ac>
    2a4a:	44 0f       	add	r20, r20
    2a4c:	55 1f       	adc	r21, r21
    2a4e:	6a 95       	dec	r22
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <wm_gentabs+0x1a8>
    2a52:	ba 01       	movw	r22, r20
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <wm_gentabs+0x1b8>
    2a56:	b5 95       	asr	r27
    2a58:	a7 95       	ror	r26
    2a5a:	0a 95       	dec	r16
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <wm_gentabs+0x1b4>
    2a5e:	6a 2b       	or	r22, r26
    2a60:	6a 19       	sub	r22, r10
    2a62:	69 25       	eor	r22, r9
    2a64:	6c 87       	std	Y+12, r22	; 0x0c

                // compare with actual key
                if(memcmp((void*)tkey, (void*)wm_key, 6) == 0) break; // if match, then use this idx
    2a66:	c1 01       	movw	r24, r2
    2a68:	64 e3       	ldi	r22, 0x34	; 52
    2a6a:	71 e0       	ldi	r23, 0x01	; 1
    2a6c:	46 e0       	ldi	r20, 0x06	; 6
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	0e 94 54 18 	call	0x30a8	; 0x30a8 <memcmp>
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	61 f0       	breq	.+24     	; 0x2a90 <wm_gentabs+0x1ee>
void wm_gentabs()
{
        unsigned char idx;

        // check all idx
        for(idx = 0; idx < 7; idx++)
    2a78:	83 94       	inc	r8
    2a7a:	66 e0       	ldi	r22, 0x06	; 6
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	66 0e       	add	r6, r22
    2a80:	77 1e       	adc	r7, r23
    2a82:	77 e0       	ldi	r23, 0x07	; 7
    2a84:	87 16       	cp	r8, r23
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <wm_gentabs+0x1ee>
    2a88:	de 01       	movw	r26, r28
    2a8a:	11 96       	adiw	r26, 0x01	; 1
    2a8c:	f3 01       	movw	r30, r6
    2a8e:	31 cf       	rjmp	.-414    	; 0x28f2 <wm_gentabs+0x50>
                // compare with actual key
                if(memcmp((void*)tkey, (void*)wm_key, 6) == 0) break; // if match, then use this idx
        }

        // generate encryption from idx key and rand
        wm_ft[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[3]]));
    2a90:	28 2d       	mov	r18, r8
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	2f 5f       	subi	r18, 0xFF	; 255
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	52 2f       	mov	r21, r18
    2a9a:	44 27       	eor	r20, r20
    2a9c:	80 91 38 01 	lds	r24, 0x0138
    2aa0:	fa 01       	movw	r30, r20
    2aa2:	e8 0f       	add	r30, r24
    2aa4:	f1 1d       	adc	r31, r1
    2aa6:	e5 5b       	subi	r30, 0xB5	; 181
    2aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aaa:	94 91       	lpm	r25, Z+
    2aac:	2f 5f       	subi	r18, 0xFF	; 255
    2aae:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab0:	32 2f       	mov	r19, r18
    2ab2:	22 27       	eor	r18, r18
    2ab4:	80 91 2d 01 	lds	r24, 0x012D
    2ab8:	f9 01       	movw	r30, r18
    2aba:	e8 0f       	add	r30, r24
    2abc:	f1 1d       	adc	r31, r1
    2abe:	e5 5b       	subi	r30, 0xB5	; 181
    2ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac2:	e4 91       	lpm	r30, Z+
    2ac4:	e9 27       	eor	r30, r25
    2ac6:	e0 93 3a 01 	sts	0x013A, r30
        wm_ft[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    2aca:	80 91 36 01 	lds	r24, 0x0136
    2ace:	fa 01       	movw	r30, r20
    2ad0:	e8 0f       	add	r30, r24
    2ad2:	f1 1d       	adc	r31, r1
    2ad4:	e5 5b       	subi	r30, 0xB5	; 181
    2ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad8:	94 91       	lpm	r25, Z+
    2ada:	80 91 2f 01 	lds	r24, 0x012F
    2ade:	f9 01       	movw	r30, r18
    2ae0:	e8 0f       	add	r30, r24
    2ae2:	f1 1d       	adc	r31, r1
    2ae4:	e5 5b       	subi	r30, 0xB5	; 181
    2ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae8:	e4 91       	lpm	r30, Z+
    2aea:	e9 27       	eor	r30, r25
    2aec:	e0 93 3b 01 	sts	0x013B, r30
        wm_ft[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    2af0:	80 91 39 01 	lds	r24, 0x0139
    2af4:	fa 01       	movw	r30, r20
    2af6:	e8 0f       	add	r30, r24
    2af8:	f1 1d       	adc	r31, r1
    2afa:	e5 5b       	subi	r30, 0xB5	; 181
    2afc:	fe 4f       	sbci	r31, 0xFE	; 254
    2afe:	94 91       	lpm	r25, Z+
    2b00:	80 91 31 01 	lds	r24, 0x0131
    2b04:	f9 01       	movw	r30, r18
    2b06:	e8 0f       	add	r30, r24
    2b08:	f1 1d       	adc	r31, r1
    2b0a:	e5 5b       	subi	r30, 0xB5	; 181
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	e4 91       	lpm	r30, Z+
    2b10:	e9 27       	eor	r30, r25
    2b12:	e0 93 3c 01 	sts	0x013C, r30
        wm_ft[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[2]]));
    2b16:	80 91 34 01 	lds	r24, 0x0134
    2b1a:	fa 01       	movw	r30, r20
    2b1c:	e8 0f       	add	r30, r24
    2b1e:	f1 1d       	adc	r31, r1
    2b20:	e5 5b       	subi	r30, 0xB5	; 181
    2b22:	fe 4f       	sbci	r31, 0xFE	; 254
    2b24:	94 91       	lpm	r25, Z+
    2b26:	80 91 2c 01 	lds	r24, 0x012C
    2b2a:	f9 01       	movw	r30, r18
    2b2c:	e8 0f       	add	r30, r24
    2b2e:	f1 1d       	adc	r31, r1
    2b30:	e5 5b       	subi	r30, 0xB5	; 181
    2b32:	fe 4f       	sbci	r31, 0xFE	; 254
    2b34:	e4 91       	lpm	r30, Z+
    2b36:	e9 27       	eor	r30, r25
    2b38:	e0 93 3d 01 	sts	0x013D, r30
        wm_ft[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    2b3c:	80 91 35 01 	lds	r24, 0x0135
    2b40:	fa 01       	movw	r30, r20
    2b42:	e8 0f       	add	r30, r24
    2b44:	f1 1d       	adc	r31, r1
    2b46:	e5 5b       	subi	r30, 0xB5	; 181
    2b48:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4a:	94 91       	lpm	r25, Z+
    2b4c:	80 91 2e 01 	lds	r24, 0x012E
    2b50:	f9 01       	movw	r30, r18
    2b52:	e8 0f       	add	r30, r24
    2b54:	f1 1d       	adc	r31, r1
    2b56:	e5 5b       	subi	r30, 0xB5	; 181
    2b58:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5a:	e4 91       	lpm	r30, Z+
    2b5c:	e9 27       	eor	r30, r25
    2b5e:	e0 93 3e 01 	sts	0x013E, r30
        wm_ft[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    2b62:	80 91 37 01 	lds	r24, 0x0137
    2b66:	fa 01       	movw	r30, r20
    2b68:	e8 0f       	add	r30, r24
    2b6a:	f1 1d       	adc	r31, r1
    2b6c:	e5 5b       	subi	r30, 0xB5	; 181
    2b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b70:	94 91       	lpm	r25, Z+
    2b72:	80 91 33 01 	lds	r24, 0x0133
    2b76:	f9 01       	movw	r30, r18
    2b78:	e8 0f       	add	r30, r24
    2b7a:	f1 1d       	adc	r31, r1
    2b7c:	e5 5b       	subi	r30, 0xB5	; 181
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	e4 91       	lpm	r30, Z+
    2b82:	e9 27       	eor	r30, r25
    2b84:	e0 93 3f 01 	sts	0x013F, r30
        wm_ft[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    2b88:	80 91 2a 01 	lds	r24, 0x012A
    2b8c:	fa 01       	movw	r30, r20
    2b8e:	e8 0f       	add	r30, r24
    2b90:	f1 1d       	adc	r31, r1
    2b92:	e5 5b       	subi	r30, 0xB5	; 181
    2b94:	fe 4f       	sbci	r31, 0xFE	; 254
    2b96:	94 91       	lpm	r25, Z+
    2b98:	80 91 30 01 	lds	r24, 0x0130
    2b9c:	f9 01       	movw	r30, r18
    2b9e:	e8 0f       	add	r30, r24
    2ba0:	f1 1d       	adc	r31, r1
    2ba2:	e5 5b       	subi	r30, 0xB5	; 181
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	e4 91       	lpm	r30, Z+
    2ba8:	e9 27       	eor	r30, r25
    2baa:	e0 93 40 01 	sts	0x0140, r30
        wm_ft[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    2bae:	80 91 2b 01 	lds	r24, 0x012B
    2bb2:	fa 01       	movw	r30, r20
    2bb4:	e8 0f       	add	r30, r24
    2bb6:	f1 1d       	adc	r31, r1
    2bb8:	e5 5b       	subi	r30, 0xB5	; 181
    2bba:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbc:	94 91       	lpm	r25, Z+
    2bbe:	80 91 32 01 	lds	r24, 0x0132
    2bc2:	f9 01       	movw	r30, r18
    2bc4:	e8 0f       	add	r30, r24
    2bc6:	f1 1d       	adc	r31, r1
    2bc8:	e5 5b       	subi	r30, 0xB5	; 181
    2bca:	fe 4f       	sbci	r31, 0xFE	; 254
    2bcc:	e4 91       	lpm	r30, Z+
    2bce:	e9 27       	eor	r30, r25
    2bd0:	e0 93 41 01 	sts	0x0141, r30
        
        wm_sb[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[1]]));
    2bd4:	80 91 34 01 	lds	r24, 0x0134
    2bd8:	fa 01       	movw	r30, r20
    2bda:	e8 0f       	add	r30, r24
    2bdc:	f1 1d       	adc	r31, r1
    2bde:	e5 5b       	subi	r30, 0xB5	; 181
    2be0:	fe 4f       	sbci	r31, 0xFE	; 254
    2be2:	94 91       	lpm	r25, Z+
    2be4:	80 91 2b 01 	lds	r24, 0x012B
    2be8:	f9 01       	movw	r30, r18
    2bea:	e8 0f       	add	r30, r24
    2bec:	f1 1d       	adc	r31, r1
    2bee:	e5 5b       	subi	r30, 0xB5	; 181
    2bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf2:	e4 91       	lpm	r30, Z+
    2bf4:	e9 27       	eor	r30, r25
    2bf6:	e0 93 42 01 	sts	0x0142, r30
        wm_sb[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    2bfa:	80 91 39 01 	lds	r24, 0x0139
    2bfe:	fa 01       	movw	r30, r20
    2c00:	e8 0f       	add	r30, r24
    2c02:	f1 1d       	adc	r31, r1
    2c04:	e5 5b       	subi	r30, 0xB5	; 181
    2c06:	fe 4f       	sbci	r31, 0xFE	; 254
    2c08:	94 91       	lpm	r25, Z+
    2c0a:	80 91 2e 01 	lds	r24, 0x012E
    2c0e:	f9 01       	movw	r30, r18
    2c10:	e8 0f       	add	r30, r24
    2c12:	f1 1d       	adc	r31, r1
    2c14:	e5 5b       	subi	r30, 0xB5	; 181
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	e4 91       	lpm	r30, Z+
    2c1a:	e9 27       	eor	r30, r25
    2c1c:	e0 93 43 01 	sts	0x0143, r30
        wm_sb[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[0]]));
    2c20:	80 91 37 01 	lds	r24, 0x0137
    2c24:	fa 01       	movw	r30, r20
    2c26:	e8 0f       	add	r30, r24
    2c28:	f1 1d       	adc	r31, r1
    2c2a:	e5 5b       	subi	r30, 0xB5	; 181
    2c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2e:	94 91       	lpm	r25, Z+
    2c30:	80 91 2a 01 	lds	r24, 0x012A
    2c34:	f9 01       	movw	r30, r18
    2c36:	e8 0f       	add	r30, r24
    2c38:	f1 1d       	adc	r31, r1
    2c3a:	e5 5b       	subi	r30, 0xB5	; 181
    2c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3e:	e4 91       	lpm	r30, Z+
    2c40:	e9 27       	eor	r30, r25
    2c42:	e0 93 44 01 	sts	0x0144, r30
        wm_sb[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    2c46:	80 91 36 01 	lds	r24, 0x0136
    2c4a:	fa 01       	movw	r30, r20
    2c4c:	e8 0f       	add	r30, r24
    2c4e:	f1 1d       	adc	r31, r1
    2c50:	e5 5b       	subi	r30, 0xB5	; 181
    2c52:	fe 4f       	sbci	r31, 0xFE	; 254
    2c54:	94 91       	lpm	r25, Z+
    2c56:	80 91 33 01 	lds	r24, 0x0133
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	e8 0f       	add	r30, r24
    2c5e:	f1 1d       	adc	r31, r1
    2c60:	e5 5b       	subi	r30, 0xB5	; 181
    2c62:	fe 4f       	sbci	r31, 0xFE	; 254
    2c64:	e4 91       	lpm	r30, Z+
    2c66:	e9 27       	eor	r30, r25
    2c68:	e0 93 45 01 	sts	0x0145, r30
        wm_sb[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    2c6c:	80 91 38 01 	lds	r24, 0x0138
    2c70:	fa 01       	movw	r30, r20
    2c72:	e8 0f       	add	r30, r24
    2c74:	f1 1d       	adc	r31, r1
    2c76:	e5 5b       	subi	r30, 0xB5	; 181
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	94 91       	lpm	r25, Z+
    2c7c:	80 91 31 01 	lds	r24, 0x0131
    2c80:	f9 01       	movw	r30, r18
    2c82:	e8 0f       	add	r30, r24
    2c84:	f1 1d       	adc	r31, r1
    2c86:	e5 5b       	subi	r30, 0xB5	; 181
    2c88:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8a:	e4 91       	lpm	r30, Z+
    2c8c:	e9 27       	eor	r30, r25
    2c8e:	e0 93 46 01 	sts	0x0146, r30
        wm_sb[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    2c92:	80 91 35 01 	lds	r24, 0x0135
    2c96:	fa 01       	movw	r30, r20
    2c98:	e8 0f       	add	r30, r24
    2c9a:	f1 1d       	adc	r31, r1
    2c9c:	e5 5b       	subi	r30, 0xB5	; 181
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	94 91       	lpm	r25, Z+
    2ca2:	80 91 32 01 	lds	r24, 0x0132
    2ca6:	f9 01       	movw	r30, r18
    2ca8:	e8 0f       	add	r30, r24
    2caa:	f1 1d       	adc	r31, r1
    2cac:	e5 5b       	subi	r30, 0xB5	; 181
    2cae:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb0:	e4 91       	lpm	r30, Z+
    2cb2:	e9 27       	eor	r30, r25
    2cb4:	e0 93 47 01 	sts	0x0147, r30
        wm_sb[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    2cb8:	80 91 2d 01 	lds	r24, 0x012D
    2cbc:	fa 01       	movw	r30, r20
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f1 1d       	adc	r31, r1
    2cc2:	e5 5b       	subi	r30, 0xB5	; 181
    2cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc6:	94 91       	lpm	r25, Z+
    2cc8:	80 91 2f 01 	lds	r24, 0x012F
    2ccc:	f9 01       	movw	r30, r18
    2cce:	e8 0f       	add	r30, r24
    2cd0:	f1 1d       	adc	r31, r1
    2cd2:	e5 5b       	subi	r30, 0xB5	; 181
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	e4 91       	lpm	r30, Z+
    2cd8:	e9 27       	eor	r30, r25
    2cda:	e0 93 48 01 	sts	0x0148, r30
        wm_sb[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    2cde:	80 91 2c 01 	lds	r24, 0x012C
    2ce2:	48 0f       	add	r20, r24
    2ce4:	51 1d       	adc	r21, r1
    2ce6:	45 5b       	subi	r20, 0xB5	; 181
    2ce8:	5e 4f       	sbci	r21, 0xFE	; 254
    2cea:	fa 01       	movw	r30, r20
    2cec:	94 91       	lpm	r25, Z+
    2cee:	80 91 30 01 	lds	r24, 0x0130
    2cf2:	28 0f       	add	r18, r24
    2cf4:	31 1d       	adc	r19, r1
    2cf6:	25 5b       	subi	r18, 0xB5	; 181
    2cf8:	3e 4f       	sbci	r19, 0xFE	; 254
    2cfa:	f9 01       	movw	r30, r18
    2cfc:	84 91       	lpm	r24, Z+
    2cfe:	89 27       	eor	r24, r25
    2d00:	80 93 49 01 	sts	0x0149, r24
}
    2d04:	68 96       	adiw	r28, 0x18	; 24
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	9f 90       	pop	r9
    2d26:	8f 90       	pop	r8
    2d28:	7f 90       	pop	r7
    2d2a:	6f 90       	pop	r6
    2d2c:	5f 90       	pop	r5
    2d2e:	4f 90       	pop	r4
    2d30:	3f 90       	pop	r3
    2d32:	2f 90       	pop	r2
    2d34:	08 95       	ret

00002d36 <wm_slaveRx>:
                wm_sample_event();
        }
}*/

void wm_slaveRx(unsigned char addr, unsigned char l)
{
    2d36:	98 2f       	mov	r25, r24
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
    2d38:	80 54       	subi	r24, 0x40	; 64
    2d3a:	86 30       	cpi	r24, 0x06	; 6
    2d3c:	a0 f4       	brcc	.+40     	; 0x2d66 <wm_slaveRx+0x30>
    2d3e:	20 e4       	ldi	r18, 0x40	; 64
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	49 e4       	ldi	r20, 0x49	; 73
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	fa 01       	movw	r30, r20
    2d48:	e2 1b       	sub	r30, r18
    2d4a:	f3 0b       	sbc	r31, r19
        {
                for(unsigned int i = 0; i < 6; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    2d4c:	d9 01       	movw	r26, r18
    2d4e:	a6 5b       	subi	r26, 0xB6	; 182
    2d50:	be 4f       	sbci	r27, 0xFE	; 254
    2d52:	8c 91       	ld	r24, X
    2d54:	e6 5d       	subi	r30, 0xD6	; 214
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	80 83       	st	Z, r24
    2d5a:	2f 5f       	subi	r18, 0xFF	; 255
    2d5c:	3f 4f       	sbci	r19, 0xFF	; 255
void wm_slaveRx(unsigned char addr, unsigned char l)
{
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
        {
                for(unsigned int i = 0; i < 6; i++)
    2d5e:	26 34       	cpi	r18, 0x46	; 70
    2d60:	31 05       	cpc	r19, r1
    2d62:	89 f7       	brne	.-30     	; 0x2d46 <wm_slaveRx+0x10>
    2d64:	08 95       	ret
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
                }
        }
        else if(addr >= 0x46 && addr < 0x4C)
    2d66:	89 2f       	mov	r24, r25
    2d68:	86 54       	subi	r24, 0x46	; 70
    2d6a:	86 30       	cpi	r24, 0x06	; 6
    2d6c:	c8 f4       	brcc	.+50     	; 0x2da0 <wm_slaveRx+0x6a>
        {
                for(unsigned int i = 6; i < 10; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    2d6e:	80 91 90 01 	lds	r24, 0x0190
    2d72:	80 93 2d 01 	sts	0x012D, r24
    2d76:	80 91 91 01 	lds	r24, 0x0191
    2d7a:	80 93 2c 01 	sts	0x012C, r24
    2d7e:	80 91 92 01 	lds	r24, 0x0192
    2d82:	80 93 2b 01 	sts	0x012B, r24
    2d86:	80 91 93 01 	lds	r24, 0x0193
    2d8a:	80 93 2a 01 	sts	0x012A, r24
                }
                for(unsigned int i = 0; i < 2; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    2d8e:	80 91 94 01 	lds	r24, 0x0194
    2d92:	80 93 39 01 	sts	0x0139, r24
    2d96:	80 91 95 01 	lds	r24, 0x0195
    2d9a:	80 93 38 01 	sts	0x0138, r24
    2d9e:	08 95       	ret
                }
        }
        else if(addr >= 0x4C && addr < 0x50)
    2da0:	89 2f       	mov	r24, r25
    2da2:	8c 54       	subi	r24, 0x4C	; 76
    2da4:	84 30       	cpi	r24, 0x04	; 4
    2da6:	c8 f4       	brcc	.+50     	; 0x2dda <wm_slaveRx+0xa4>
        {
                for(unsigned int i = 2; i < 6; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    2da8:	80 91 96 01 	lds	r24, 0x0196
    2dac:	80 93 37 01 	sts	0x0137, r24
    2db0:	80 91 97 01 	lds	r24, 0x0197
    2db4:	80 93 36 01 	sts	0x0136, r24
    2db8:	80 91 98 01 	lds	r24, 0x0198
    2dbc:	80 93 35 01 	sts	0x0135, r24
    2dc0:	80 91 99 01 	lds	r24, 0x0199
    2dc4:	80 93 34 01 	sts	0x0134, r24
                }
                if(addr + l == 0x50)
    2dc8:	89 2f       	mov	r24, r25
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	86 0f       	add	r24, r22
    2dce:	91 1d       	adc	r25, r1
    2dd0:	80 35       	cpi	r24, 0x50	; 80
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	11 f4       	brne	.+4      	; 0x2dda <wm_slaveRx+0xa4>
                {
                        // generate decryption once all data is loaded
                        wm_gentabs();
    2dd6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <wm_gentabs>
    2dda:	08 95       	ret

00002ddc <__vector_24>:
        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}

ISR(TWI_vect)
{
    2ddc:	1f 92       	push	r1
    2dde:	0f 92       	push	r0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	0f 92       	push	r0
    2de4:	11 24       	eor	r1, r1
    2de6:	2f 93       	push	r18
    2de8:	3f 93       	push	r19
    2dea:	4f 93       	push	r20
    2dec:	5f 93       	push	r21
    2dee:	6f 93       	push	r22
    2df0:	7f 93       	push	r23
    2df2:	8f 93       	push	r24
    2df4:	9f 93       	push	r25
    2df6:	af 93       	push	r26
    2df8:	bf 93       	push	r27
    2dfa:	ef 93       	push	r30
    2dfc:	ff 93       	push	r31
        switch(TW_STATUS)
    2dfe:	80 91 b9 00 	lds	r24, 0x00B9
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	88 7f       	andi	r24, 0xF8	; 248
    2e06:	90 70       	andi	r25, 0x00	; 0
    2e08:	80 39       	cpi	r24, 0x90	; 144
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	e9 f1       	breq	.+122    	; 0x2e88 <__vector_24+0xac>
    2e0e:	81 39       	cpi	r24, 0x91	; 145
    2e10:	91 05       	cpc	r25, r1
    2e12:	d4 f4       	brge	.+52     	; 0x2e48 <__vector_24+0x6c>
    2e14:	80 37       	cpi	r24, 0x70	; 112
    2e16:	91 05       	cpc	r25, r1
    2e18:	a1 f1       	breq	.+104    	; 0x2e82 <__vector_24+0xa6>
    2e1a:	81 37       	cpi	r24, 0x71	; 113
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	44 f4       	brge	.+16     	; 0x2e30 <__vector_24+0x54>
    2e20:	80 36       	cpi	r24, 0x60	; 96
    2e22:	91 05       	cpc	r25, r1
    2e24:	71 f1       	breq	.+92     	; 0x2e82 <__vector_24+0xa6>
    2e26:	88 36       	cpi	r24, 0x68	; 104
    2e28:	91 05       	cpc	r25, r1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <__vector_24+0x52>
    2e2c:	b6 c0       	rjmp	.+364    	; 0x2f9a <__vector_24+0x1be>
    2e2e:	29 c0       	rjmp	.+82     	; 0x2e82 <__vector_24+0xa6>
    2e30:	80 38       	cpi	r24, 0x80	; 128
    2e32:	91 05       	cpc	r25, r1
    2e34:	49 f1       	breq	.+82     	; 0x2e88 <__vector_24+0xac>
    2e36:	88 38       	cpi	r24, 0x88	; 136
    2e38:	91 05       	cpc	r25, r1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <__vector_24+0x62>
    2e3c:	ae c0       	rjmp	.+348    	; 0x2f9a <__vector_24+0x1be>
    2e3e:	88 37       	cpi	r24, 0x78	; 120
    2e40:	91 05       	cpc	r25, r1
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <__vector_24+0x6a>
    2e44:	aa c0       	rjmp	.+340    	; 0x2f9a <__vector_24+0x1be>
    2e46:	1d c0       	rjmp	.+58     	; 0x2e82 <__vector_24+0xa6>
    2e48:	80 3b       	cpi	r24, 0xB0	; 176
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_24+0x74>
    2e4e:	6a c0       	rjmp	.+212    	; 0x2f24 <__vector_24+0x148>
    2e50:	81 3b       	cpi	r24, 0xB1	; 177
    2e52:	91 05       	cpc	r25, r1
    2e54:	4c f4       	brge	.+18     	; 0x2e68 <__vector_24+0x8c>
    2e56:	80 3a       	cpi	r24, 0xA0	; 160
    2e58:	91 05       	cpc	r25, r1
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <__vector_24+0x82>
    2e5c:	57 c0       	rjmp	.+174    	; 0x2f0c <__vector_24+0x130>
    2e5e:	88 3a       	cpi	r24, 0xA8	; 168
    2e60:	91 05       	cpc	r25, r1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <__vector_24+0x8a>
    2e64:	9a c0       	rjmp	.+308    	; 0x2f9a <__vector_24+0x1be>
    2e66:	5e c0       	rjmp	.+188    	; 0x2f24 <__vector_24+0x148>
    2e68:	80 3c       	cpi	r24, 0xC0	; 192
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <__vector_24+0x94>
    2e6e:	93 c0       	rjmp	.+294    	; 0x2f96 <__vector_24+0x1ba>
    2e70:	88 3c       	cpi	r24, 0xC8	; 200
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <__vector_24+0x9c>
    2e76:	8f c0       	rjmp	.+286    	; 0x2f96 <__vector_24+0x1ba>
    2e78:	88 3b       	cpi	r24, 0xB8	; 184
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <__vector_24+0xa4>
    2e7e:	8d c0       	rjmp	.+282    	; 0x2f9a <__vector_24+0x1be>
    2e80:	53 c0       	rjmp	.+166    	; 0x2f28 <__vector_24+0x14c>
                case TW_SR_SLA_ACK: // addressed, returned ack
                case TW_SR_GCALL_ACK: // addressed generally, returned ack
                case TW_SR_ARB_LOST_SLA_ACK: // lost arbitration, returned ack
                case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration generally, returned ack
                        // get ready to receive pointer
                        twi_first_addr_flag = 0;
    2e82:	10 92 4c 02 	sts	0x024C, r1
    2e86:	87 c0       	rjmp	.+270    	; 0x2f96 <__vector_24+0x1ba>
                        // ack
                        twi_clear_int(1);
                        break;
                case TW_SR_DATA_ACK: // data received, returned ack
                case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
                if(twi_first_addr_flag != 0)
    2e88:	80 91 4c 02 	lds	r24, 0x024C
    2e8c:	88 23       	and	r24, r24
    2e8e:	89 f1       	breq	.+98     	; 0x2ef2 <__vector_24+0x116>
                {
                        // put byte in register
                        unsigned char t = TWDR;
    2e90:	20 91 bb 00 	lds	r18, 0x00BB
                        if(twi_reg[0xF0] == 0xAA && twi_reg_addr != 0xF0) // if encryption is on
    2e94:	80 91 3a 02 	lds	r24, 0x023A
    2e98:	8a 3a       	cpi	r24, 0xAA	; 170
    2e9a:	19 f5       	brne	.+70     	; 0x2ee2 <__vector_24+0x106>
    2e9c:	80 91 4a 02 	lds	r24, 0x024A
    2ea0:	90 91 4b 02 	lds	r25, 0x024B
    2ea4:	80 3f       	cpi	r24, 0xF0	; 240
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	e1 f0       	breq	.+56     	; 0x2ee2 <__vector_24+0x106>
                        {
                                // decrypt
                                twi_reg[twi_reg_addr] = (t ^ wm_sb[twi_reg_addr % 8]) + wm_ft[twi_reg_addr % 8];
    2eaa:	a0 91 4a 02 	lds	r26, 0x024A
    2eae:	b0 91 4b 02 	lds	r27, 0x024B
    2eb2:	e0 91 4a 02 	lds	r30, 0x024A
    2eb6:	f0 91 4b 02 	lds	r31, 0x024B
    2eba:	e7 70       	andi	r30, 0x07	; 7
    2ebc:	f0 70       	andi	r31, 0x00	; 0
    2ebe:	ee 5b       	subi	r30, 0xBE	; 190
    2ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec2:	80 81       	ld	r24, Z
    2ec4:	e0 91 4a 02 	lds	r30, 0x024A
    2ec8:	f0 91 4b 02 	lds	r31, 0x024B
    2ecc:	e7 70       	andi	r30, 0x07	; 7
    2ece:	f0 70       	andi	r31, 0x00	; 0
    2ed0:	e6 5c       	subi	r30, 0xC6	; 198
    2ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed4:	90 81       	ld	r25, Z
    2ed6:	82 27       	eor	r24, r18
    2ed8:	89 0f       	add	r24, r25
    2eda:	a6 5b       	subi	r26, 0xB6	; 182
    2edc:	be 4f       	sbci	r27, 0xFE	; 254
    2ede:	8c 93       	st	X, r24
    2ee0:	4c c0       	rjmp	.+152    	; 0x2f7a <__vector_24+0x19e>
                        }
                        else
                        {
                                twi_reg[twi_reg_addr] = t;
    2ee2:	e0 91 4a 02 	lds	r30, 0x024A
    2ee6:	f0 91 4b 02 	lds	r31, 0x024B
    2eea:	e6 5b       	subi	r30, 0xB6	; 182
    2eec:	fe 4f       	sbci	r31, 0xFE	; 254
    2eee:	20 83       	st	Z, r18
    2ef0:	44 c0       	rjmp	.+136    	; 0x2f7a <__vector_24+0x19e>
                        twi_rw_len++;
                }
                else
                {
                        // set address
                        twi_reg_addr = TWDR;
    2ef2:	80 91 bb 00 	lds	r24, 0x00BB
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	90 93 4b 02 	sts	0x024B, r25
    2efc:	80 93 4a 02 	sts	0x024A, r24
                        twi_first_addr_flag = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	80 93 4c 02 	sts	0x024C, r24
                        twi_rw_len = 0;
    2f06:	10 92 4d 02 	sts	0x024D, r1
    2f0a:	45 c0       	rjmp	.+138    	; 0x2f96 <__vector_24+0x1ba>
                }
                twi_clear_int(1); // ack
                        break;
                case TW_SR_STOP: // stop or repeated start condition received
                        // run user defined function
                        wm_slaveRx(twi_reg_addr - twi_rw_len, twi_rw_len);
    2f0c:	80 91 4a 02 	lds	r24, 0x024A
    2f10:	90 91 4b 02 	lds	r25, 0x024B
    2f14:	20 91 4d 02 	lds	r18, 0x024D
    2f18:	60 91 4d 02 	lds	r22, 0x024D
    2f1c:	82 1b       	sub	r24, r18
    2f1e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <wm_slaveRx>
    2f22:	39 c0       	rjmp	.+114    	; 0x2f96 <__vector_24+0x1ba>
                // Slave Tx
                case TW_ST_SLA_ACK:     // addressed, returned ack
                case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
                        // run user defined function (not anymore)
                        //wm_slaveTxStart(twi_reg_addr);
                        twi_rw_len = 0;
    2f24:	10 92 4d 02 	sts	0x024D, r1
                case TW_ST_DATA_ACK: // byte sent, ack returned
                        // ready output byte
                        if(twi_reg[0xF0] == 0xAA) // encryption is on
    2f28:	80 91 3a 02 	lds	r24, 0x023A
    2f2c:	8a 3a       	cpi	r24, 0xAA	; 170
    2f2e:	e1 f4       	brne	.+56     	; 0x2f68 <__vector_24+0x18c>
                        {
                                // encrypt
                                TWDR = (twi_reg[twi_reg_addr] - wm_ft[twi_reg_addr % 8]) ^ wm_sb[twi_reg_addr % 8];
    2f30:	e0 91 4a 02 	lds	r30, 0x024A
    2f34:	f0 91 4b 02 	lds	r31, 0x024B
    2f38:	e6 5b       	subi	r30, 0xB6	; 182
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	80 81       	ld	r24, Z
    2f3e:	e0 91 4a 02 	lds	r30, 0x024A
    2f42:	f0 91 4b 02 	lds	r31, 0x024B
    2f46:	e7 70       	andi	r30, 0x07	; 7
    2f48:	f0 70       	andi	r31, 0x00	; 0
    2f4a:	e6 5c       	subi	r30, 0xC6	; 198
    2f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4e:	20 81       	ld	r18, Z
    2f50:	e0 91 4a 02 	lds	r30, 0x024A
    2f54:	f0 91 4b 02 	lds	r31, 0x024B
    2f58:	e7 70       	andi	r30, 0x07	; 7
    2f5a:	f0 70       	andi	r31, 0x00	; 0
    2f5c:	ee 5b       	subi	r30, 0xBE	; 190
    2f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f60:	90 81       	ld	r25, Z
    2f62:	82 1b       	sub	r24, r18
    2f64:	89 27       	eor	r24, r25
    2f66:	07 c0       	rjmp	.+14     	; 0x2f76 <__vector_24+0x19a>
                        }
                        else
                        {
                                TWDR = twi_reg[twi_reg_addr];
    2f68:	e0 91 4a 02 	lds	r30, 0x024A
    2f6c:	f0 91 4b 02 	lds	r31, 0x024B
    2f70:	e6 5b       	subi	r30, 0xB6	; 182
    2f72:	fe 4f       	sbci	r31, 0xFE	; 254
    2f74:	80 81       	ld	r24, Z
    2f76:	80 93 bb 00 	sts	0x00BB, r24
                        }
                        twi_reg_addr++;
    2f7a:	80 91 4a 02 	lds	r24, 0x024A
    2f7e:	90 91 4b 02 	lds	r25, 0x024B
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	90 93 4b 02 	sts	0x024B, r25
    2f88:	80 93 4a 02 	sts	0x024A, r24
                        twi_rw_len++;
    2f8c:	80 91 4d 02 	lds	r24, 0x024D
    2f90:	8f 5f       	subi	r24, 0xFF	; 255
    2f92:	80 93 4d 02 	sts	0x024D, r24
void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f96:	85 ec       	ldi	r24, 0xC5	; 197
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <__vector_24+0x1c0>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f9a:	85 e8       	ldi	r24, 0x85	; 133
    2f9c:	80 93 bc 00 	sts	0x00BC, r24
                        break;
                default:
                        twi_clear_int(0);
                        break;
        }
}
    2fa0:	ff 91       	pop	r31
    2fa2:	ef 91       	pop	r30
    2fa4:	bf 91       	pop	r27
    2fa6:	af 91       	pop	r26
    2fa8:	9f 91       	pop	r25
    2faa:	8f 91       	pop	r24
    2fac:	7f 91       	pop	r23
    2fae:	6f 91       	pop	r22
    2fb0:	5f 91       	pop	r21
    2fb2:	4f 91       	pop	r20
    2fb4:	3f 91       	pop	r19
    2fb6:	2f 91       	pop	r18
    2fb8:	0f 90       	pop	r0
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	0f 90       	pop	r0
    2fbe:	1f 90       	pop	r1
    2fc0:	18 95       	reti

00002fc2 <wm_timer_inc>:
        0x00, 0x00, 0x00, 0x00
};
void wm_timer_inc()  // This function is unused by me.
{
        return;
}
    2fc2:	08 95       	ret

00002fc4 <sendWiiData>:
} // end of startCommunciation


// This function takes the 'color'On values set by readF and sets up the but_dat array accordingly
void sendWiiData(dataForController data)
{
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	2b 97       	sbiw	r28, 0x0b	; 11
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	ee 2d       	mov	r30, r14
    2fe2:	e9 82       	std	Y+1, r14	; 0x01
    2fe4:	ef 2c       	mov	r14, r15
    2fe6:	fa 82       	std	Y+2, r15	; 0x02
    2fe8:	f0 2e       	mov	r15, r16
    2fea:	0b 83       	std	Y+3, r16	; 0x03
    2fec:	f1 2f       	mov	r31, r17
    2fee:	1c 83       	std	Y+4, r17	; 0x04
    2ff0:	a2 2f       	mov	r26, r18
    2ff2:	2d 83       	std	Y+5, r18	; 0x05
    2ff4:	b3 2f       	mov	r27, r19
    2ff6:	3e 83       	std	Y+6, r19	; 0x06
    2ff8:	34 2f       	mov	r19, r20
    2ffa:	4f 83       	std	Y+7, r20	; 0x07
    2ffc:	25 2f       	mov	r18, r21
    2ffe:	58 87       	std	Y+8, r21	; 0x08
    3000:	96 2f       	mov	r25, r22
    3002:	69 87       	std	Y+9, r22	; 0x09
    3004:	7a 87       	std	Y+10, r23	; 0x0a
    3006:	8b 87       	std	Y+11, r24	; 0x0b
	but_dat[5] &= ~(data.blueOn << BLUE_BIT);
	but_dat[5] &= ~(data.yellowOn << YELLOW_BIT);
	but_dat[5] &= ~(data.redOn << RED_BIT);
	but_dat[5] &= ~(data.greenOn << GREEN_BIT);

	but_dat[5] &= ~(data.upOn << UP_BIT);
    3008:	a7 95       	ror	r26
    300a:	aa 27       	eor	r26, r26
    300c:	a7 95       	ror	r26
    300e:	f2 95       	swap	r31
    3010:	ff 0f       	add	r31, r31
    3012:	f0 7e       	andi	r31, 0xE0	; 224
    3014:	fa 2b       	or	r31, r26
    3016:	bf 2b       	or	r27, r31
    3018:	ff 0c       	add	r15, r15
    301a:	ff 0c       	add	r15, r15
    301c:	ff 0c       	add	r15, r15
    301e:	fb 2a       	or	r15, r27
    3020:	e2 94       	swap	r14
    3022:	ee 0c       	add	r14, r14
    3024:	ee 0c       	add	r14, r14
    3026:	80 ec       	ldi	r24, 0xC0	; 192
    3028:	e8 22       	and	r14, r24
    302a:	ef 28       	or	r14, r15
    302c:	e2 95       	swap	r30
    302e:	e0 7f       	andi	r30, 0xF0	; 240
    3030:	ee 29       	or	r30, r14
    3032:	e0 95       	com	r30
    3034:	e0 93 9c 02 	sts	0x029C, r30
	but_dat[4] &= ~(data.downOn << DOWN_BIT);

	but_dat[4] &= ~(data.plusOn << PLUS_BIT);
	but_dat[4] &= ~(data.minusOn << MINUS_BIT);
    3038:	32 95       	swap	r19
    303a:	33 0f       	add	r19, r19
    303c:	33 0f       	add	r19, r19
    303e:	30 7c       	andi	r19, 0xC0	; 192
    3040:	22 0f       	add	r18, r18
    3042:	22 0f       	add	r18, r18
    3044:	23 2b       	or	r18, r19
    3046:	92 95       	swap	r25
    3048:	90 7f       	andi	r25, 0xF0	; 240
    304a:	92 2b       	or	r25, r18
    304c:	90 95       	com	r25
    304e:	90 93 9b 02 	sts	0x029B, r25

	// Finally, we send that packet to the 
	// TWI transfer register, handled by the wiimote.c library
	wm_newaction(but_dat);
    3052:	87 e9       	ldi	r24, 0x97	; 151
    3054:	92 e0       	ldi	r25, 0x02	; 2
    3056:	0e 94 0c 14 	call	0x2818	; 0x2818 <wm_newaction>

}
    305a:	2b 96       	adiw	r28, 0x0b	; 11
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	ff 90       	pop	r15
    3070:	ef 90       	pop	r14
    3072:	08 95       	ret

00003074 <startWiiCommunication>:
}

void startWiiCommunication(void)
{
  	// Start the wiimote communication and make wiimote think this is a guitar
    wm_init(guitar_id, but_dat, cal_data, wm_timer_inc);
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	91 e0       	ldi	r25, 0x01	; 1
    3078:	67 e9       	ldi	r22, 0x97	; 151
    307a:	72 e0       	ldi	r23, 0x02	; 2
    307c:	48 e0       	ldi	r20, 0x08	; 8
    307e:	51 e0       	ldi	r21, 0x01	; 1
    3080:	21 ee       	ldi	r18, 0xE1	; 225
    3082:	37 e1       	ldi	r19, 0x17	; 23
    3084:	0e 94 15 14 	call	0x282a	; 0x282a <wm_init>

	// initialize button data array
    but_dat[0] = 0b00011111;
    3088:	8f e1       	ldi	r24, 0x1F	; 31
    308a:	80 93 97 02 	sts	0x0297, r24
    but_dat[1] = 0b00011111;
    308e:	80 93 98 02 	sts	0x0298, r24
    but_dat[2] = 0b00001111; // last 5 bits are touchbar data, should be 0F for no touching
    3092:	8f e0       	ldi	r24, 0x0F	; 15
    3094:	80 93 99 02 	sts	0x0299, r24
    but_dat[3] = 0b00001111; // last 5 bits are whammy bar data, should be 0F probably
    3098:	80 93 9a 02 	sts	0x029A, r24
    but_dat[4] = 0b11111111; // no buttons pressed (with the Wiimote, 0 is pressed)
    309c:	8f ef       	ldi	r24, 0xFF	; 255
    309e:	80 93 9b 02 	sts	0x029B, r24
    but_dat[5] = 0b11111111; // no buttons pressed
    30a2:	80 93 9c 02 	sts	0x029C, r24
} // end of startCommunciation
    30a6:	08 95       	ret

000030a8 <memcmp>:
    30a8:	fb 01       	movw	r30, r22
    30aa:	dc 01       	movw	r26, r24
    30ac:	04 c0       	rjmp	.+8      	; 0x30b6 <memcmp+0xe>
    30ae:	8d 91       	ld	r24, X+
    30b0:	01 90       	ld	r0, Z+
    30b2:	80 19       	sub	r24, r0
    30b4:	21 f4       	brne	.+8      	; 0x30be <memcmp+0x16>
    30b6:	41 50       	subi	r20, 0x01	; 1
    30b8:	50 40       	sbci	r21, 0x00	; 0
    30ba:	c8 f7       	brcc	.-14     	; 0x30ae <memcmp+0x6>
    30bc:	88 1b       	sub	r24, r24
    30be:	99 0b       	sbc	r25, r25
    30c0:	08 95       	ret

000030c2 <__eerd_block>:
    30c2:	a0 e0       	ldi	r26, 0x00	; 0
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e7 e6       	ldi	r30, 0x67	; 103
    30c8:	f8 e1       	ldi	r31, 0x18	; 24
    30ca:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x14>
    30ce:	7c 01       	movw	r14, r24
    30d0:	eb 01       	movw	r28, r22
    30d2:	8a 01       	movw	r16, r20
    30d4:	69 01       	movw	r12, r18
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <__eerd_block+0x28>
    30d8:	ce 01       	movw	r24, r28
    30da:	21 96       	adiw	r28, 0x01	; 1
    30dc:	f6 01       	movw	r30, r12
    30de:	09 95       	icall
    30e0:	f7 01       	movw	r30, r14
    30e2:	81 93       	st	Z+, r24
    30e4:	7f 01       	movw	r14, r30
    30e6:	01 50       	subi	r16, 0x01	; 1
    30e8:	10 40       	sbci	r17, 0x00	; 0
    30ea:	01 15       	cp	r16, r1
    30ec:	11 05       	cpc	r17, r1
    30ee:	a1 f7       	brne	.-24     	; 0x30d8 <__eerd_block+0x16>
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	e8 e0       	ldi	r30, 0x08	; 8
    30f6:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x14>

000030fa <__eewr_block>:
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e3 e8       	ldi	r30, 0x83	; 131
    3100:	f8 e1       	ldi	r31, 0x18	; 24
    3102:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x14>
    3106:	ec 01       	movw	r28, r24
    3108:	7b 01       	movw	r14, r22
    310a:	8a 01       	movw	r16, r20
    310c:	69 01       	movw	r12, r18
    310e:	09 c0       	rjmp	.+18     	; 0x3122 <__eewr_block+0x28>
    3110:	ce 01       	movw	r24, r28
    3112:	21 96       	adiw	r28, 0x01	; 1
    3114:	f7 01       	movw	r30, r14
    3116:	61 91       	ld	r22, Z+
    3118:	7f 01       	movw	r14, r30
    311a:	f6 01       	movw	r30, r12
    311c:	09 95       	icall
    311e:	01 50       	subi	r16, 0x01	; 1
    3120:	10 40       	sbci	r17, 0x00	; 0
    3122:	01 15       	cp	r16, r1
    3124:	11 05       	cpc	r17, r1
    3126:	a1 f7       	brne	.-24     	; 0x3110 <__eewr_block+0x16>
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	e8 e0       	ldi	r30, 0x08	; 8
    312e:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x14>

00003132 <__prologue_saves__>:
    3132:	2f 92       	push	r2
    3134:	3f 92       	push	r3
    3136:	4f 92       	push	r4
    3138:	5f 92       	push	r5
    313a:	6f 92       	push	r6
    313c:	7f 92       	push	r7
    313e:	8f 92       	push	r8
    3140:	9f 92       	push	r9
    3142:	af 92       	push	r10
    3144:	bf 92       	push	r11
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	ca 1b       	sub	r28, r26
    315c:	db 0b       	sbc	r29, r27
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	09 94       	ijmp

0000316a <__epilogue_restores__>:
    316a:	2a 88       	ldd	r2, Y+18	; 0x12
    316c:	39 88       	ldd	r3, Y+17	; 0x11
    316e:	48 88       	ldd	r4, Y+16	; 0x10
    3170:	5f 84       	ldd	r5, Y+15	; 0x0f
    3172:	6e 84       	ldd	r6, Y+14	; 0x0e
    3174:	7d 84       	ldd	r7, Y+13	; 0x0d
    3176:	8c 84       	ldd	r8, Y+12	; 0x0c
    3178:	9b 84       	ldd	r9, Y+11	; 0x0b
    317a:	aa 84       	ldd	r10, Y+10	; 0x0a
    317c:	b9 84       	ldd	r11, Y+9	; 0x09
    317e:	c8 84       	ldd	r12, Y+8	; 0x08
    3180:	df 80       	ldd	r13, Y+7	; 0x07
    3182:	ee 80       	ldd	r14, Y+6	; 0x06
    3184:	fd 80       	ldd	r15, Y+5	; 0x05
    3186:	0c 81       	ldd	r16, Y+4	; 0x04
    3188:	1b 81       	ldd	r17, Y+3	; 0x03
    318a:	aa 81       	ldd	r26, Y+2	; 0x02
    318c:	b9 81       	ldd	r27, Y+1	; 0x01
    318e:	ce 0f       	add	r28, r30
    3190:	d1 1d       	adc	r29, r1
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	ed 01       	movw	r28, r26
    319e:	08 95       	ret

000031a0 <_exit>:
    31a0:	f8 94       	cli

000031a2 <__stop_program>:
    31a2:	ff cf       	rjmp	.-2      	; 0x31a2 <__stop_program>
