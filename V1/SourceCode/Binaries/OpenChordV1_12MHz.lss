
OpenChordV1_12MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00003146  000031fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003146  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000175  00800128  00800128  00003222  2**0
                  ALLOC
  3 .eeprom       00000168  00810000  00810000  00003222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000468  00000000  00000000  0000346a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000271f  00000000  00000000  000038d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7f  00000000  00000000  00005ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b80  00000000  00000000  00006b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  000086f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ac  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f29  00000000  00000000  000092ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000a215  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__ctors_end>
       4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
       8:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__vector_2>
       c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      10:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      14:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      18:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      1c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      20:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      24:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      28:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      2c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      30:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      34:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      38:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      3c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      40:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      44:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      48:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      4c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      50:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      54:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      58:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      5c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>
      60:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__vector_24>
      64:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
      68:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
      78:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
      88:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
      98:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
      a8:	32 09 35 75 08 95 04 81 02 c0                       2.5u......

000000b2 <usbDescriptorString0>:
      b2:	04 03 09 04                                         ....

000000b6 <usbDescriptorStringVendor>:
      b6:	1c 03 4f 00 70 00 65 00 6e 00 43 00 68 00 6f 00     ..O.p.e.n.C.h.o.
      c6:	72 00 64 00 2e 00 6f 00 72 00 67 00                 r.d...o.r.g.

000000d2 <usbDescriptorStringDevice>:
      d2:	14 03 56 00 31 00 20 00 47 00 75 00 69 00 74 00     ..V.1. .G.u.i.t.
      e2:	61 00 72 00                                         a.r.

000000e6 <usbDescriptorDevice>:
      e6:	12 01 10 01 00 00 00 08 ba 12 00 02 00 01 01 02     ................
      f6:	00 01                                               ..

000000f8 <usbDescriptorConfiguration>:
      f8:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
     108:	00 00 09 21 01 01 00 01 22 4a 00 07 05 81 03 40     ...!...."J.....@
     118:	00 0a 07 05 83 03 40 00 0a                          ......@..

00000121 <ans_tbl>:
     121:	a8 77 a6 e0 f7 43 5a 35 85 e2 72 97 8f b7 1a 62     .w...CZ5..r....b
     131:	87 38 0d 67 c7 be 4f 3e 20 76 37 8f 68 b7 a9 26     .8.g..O> v7.h..&
     141:	3f 2b 10 e3 30 7e 90 0e 85 0a                       ?+..0~....

0000014b <sboxes>:
     14b:	70 51 03 86 40 0d 4f eb 3e cc d1 87 35 bd f5 0b     pQ..@.O.>...5...
     15b:	5e d0 f8 f2 d5 e2 6c 31 0c ad fc 21 c3 78 c1 06     ^.....l1...!.x..
     16b:	c2 4c 55 e6 4a 34 48 11 1e da e7 1a 84 a0 96 a7     .LU.J4H.........
     17b:	e3 7f af 63 9c fa 23 5b 79 c8 9e ba b2 c9 22 12     ...c..#[y.....".
     18b:	4b b3 a1 b6 32 49 a2 e1 89 39 10 66 c5 07 8f 54     K...2I...9.f...T
     19b:	ea 91 ca 3f f9 19 f0 d7 46 bc 28 1b 61 e8 2f 6a     ...?....F.(.a./j
     1ab:	ae 9d f6 4e 09 14 77 4d db 1f 2e 7b 7c f1 43 a3     ...N..wM...{|.C.
     1bb:	00 b8 13 8c 85 b9 29 75 88 fd d2 56 1c 50 97 41     ......)u...V.P.A
     1cb:	e5 3b 60 b5 c0 64 ee 98 d6 2d 25 a4 aa cd 7d a8     .;`..d...-%...}.
     1db:	83 c6 ab be 44 99 26 3c ce 9f bf d3 cb 76 7a 7e     ....D.&<.....vz~
     1eb:	82 01 8a 9a 80 1d 0e b0 5c d4 38 62 f4 30 e0 8e     ........\.8b.0..
     1fb:	53 b7 02 57 ac a6 52 0a 6d 92 65 17 24 33 45 72     S..W..R.m.e.$3Er
     20b:	74 b1 b4 f7 5d ed 2c ff 47 37 5a 90 bb df 2a 16     t...].,.G7Z...*.
     21b:	59 95 d9 c4 27 67 73 c7 68 fe a5 dd 6b 5f 93 d8     Y...'gs.h...k_..
     22b:	ec 05 3a 8d 6e fb 3d a9 69 36 f3 94 de ef 15 6f     ..:.n.=.i6.....o
     23b:	8b 9b 08 0f dc 81 18 20 04 e4 71 cf e9 2b 42 58     ....... ..q..+BX
     24b:	01 a0 a9 62 d6 3f 85 a7 b6 d4 fa 15 66 17 09 bd     ...b.?......f...
     25b:	5d 14 34 26 59 72 91 54 06 4f f8 b0 5b 74 93 99     ].4&Yr.T.O..[t..
     26b:	8c f2 45 cd ea 4e ad 10 4a e5 ca ee df c6 6f 9f     ..E..N..J.....o.
     27b:	88 8e 02 cc 08 a8 77 94 6d 21 b1 28 e4 39 79 96     ......w.m!.(.9y.
     28b:	60 71 81 16 2e e6 78 b9 c4 46 9a 42 ae b7 7c 43     `q....x..F.B..|C
     29b:	b3 22 1a 86 c2 32 3d 2d 9c d2 29 e9 63 9b d1 31     ."...2=-..).c..1
     2ab:	38 5e 1e 36 41 bb 03 18 2b 3e bf 68 61 fc 52 c0     8^.6A...+>.ha.R.
     2bb:	de e0 0a 58 13 5a 00 be 1c 90 0e 53 12 fd e2 6e     ...X.Z.....S...n
     2cb:	ba ce 24 27 44 7f 87 a3 a1 d5 50 40 e3 f9 83 f7     ..$'D.....P@....
     2db:	c7 a2 35 c8 db 19 ab 2f 11 25 ed 33 9e 55 e1 48     ..5..../.%.3.U.H
     2eb:	af 73 84 da 2a aa 51 eb 9d 95 b2 cb e7 70 80 fe     .s..*.Q......p..
     2fb:	4c 65 04 ef c5 f1 c3 3a b4 f5 5f 23 89 dd 30 a5     Le.....:.._#..0.
     30b:	8b d3 f6 dc 4d 64 d7 f0 8f ec 56 37 5c a4 0d 07     ....Md....V7\...
     31b:	76 8a 2c 0b b5 d8 c1 1f e8 3b f4 4b 1b 47 6c 49     v.,......;.K.GlI
     32b:	67 7b 92 cf 75 7e 20 d9 7d 3c 97 7a d0 05 6b 0f     g{..u~ .}<.z..k.
     33b:	1d fb 82 98 57 8d f3 6a bc ac c9 a6 ff b8 69 0c     ....W..j......i.
     34b:	4c 4d 72 07 5a 49 33 8d a2 ab 46 3d 63 0d a0 97     LMr.ZI3...F=c...
     35b:	ff f0 f5 fa c0 e9 db 62 e4 e1 74 43 dc 86 18 29     .......b..tC...)
     36b:	37 f4 06 e2 ed 6f 90 48 1e 2d 1d ea 73 94 54 df     7....o.H.-..s.T.
     37b:	25 f6 47 27 d9 11 77 c9 84 1c 5b 5c 51 81 a6 22     %.G'..w...[\Q.."
     38b:	3e 24 96 c8 8a ec 82 7c 09 b8 45 4a 57 bb 2f 50     >$.....|..EJW./P
     39b:	75 8e 61 70 8c 6c af d0 fd b4 1b ae de fe 3b b5     u.ap.l........;.
     3ab:	36 bd 55 01 0e 9c 41 56 5f b3 26 03 83 ba 13 4b     6.U...AV_.&....K
     3bb:	ca c5 0a f8 60 a5 b9 c7 c3 98 32 fb 12 f9 a7 92     ....`.....2.....
     3cb:	aa 68 f3 78 7e 05 20 21 02 e8 bf f2 b0 59 8f d2     .h.x~. !.....Y..
     3db:	cb 87 65 15 f1 1a b2 30 ad ee 58 a3 8b 66 1f 2c     ..e....0..X..f.,
     3eb:	d7 5d 19 85 a8 e6 d3 6b a1 0c 91 93 6a 5e 0b 79     .].....k....j^.y
     3fb:	e3 dd 00 4f 3c 89 6e 71 69 a9 ac 40 e5 99 28 c6     ...O<.nqi..@..(.
     40b:	31 4e 7a cd 08 9e 7d ef 17 fc 88 d8 a4 6d 44 95     1Nz...}......mD.
     41b:	d1 b7 d4 9b be 2a 34 64 2b cf 2e eb 38 ce 23 e0     .....*4d+...8.#.
     42b:	3a 3f f7 7b 9f 10 53 bc 52 67 16 e7 80 76 04 c4     :?.{..S.Rg...v..
     43b:	b6 c1 c2 7f 9a da d5 39 42 14 9d b1 0f 35 d6 cc     .......9B....5..
     44b:	b9 da 38 0c a2 9c 09 1f 06 b1 b6 fd 1a 69 23 30     ..8..........i#0
     45b:	c4 de 01 d1 f4 58 29 37 1c 7d d5 bf ff bd c8 c9     .....X)7.}......
     46b:	cf 65 be 7b 78 97 98 67 08 b3 26 57 f7 fa 40 ad     .e.{x..g..&W..@.
     47b:	8e 75 a6 7c db 91 8b 51 99 d4 17 7a 90 8d ce 63     .u.|...Q...z...c
     48b:	cb 4e a0 ab 18 3a 5b 50 7f 21 74 c1 bb b8 b7 ba     .N...:[P.!t.....
     49b:	0b 35 95 31 59 9a 4d 04 07 1e 5a 76 13 f3 71 83     .5.1Y.M...Zv..q.
     4ab:	d0 86 03 a8 39 42 aa 28 e6 e4 d8 5d d3 d0 6e 6f     ....9B.(...]..no
     4bb:	96 fb 5e bc 56 c2 5f 85 9b e7 af d2 3b 84 6a a7     ..^.V._.....;.j.
     4cb:	53 c5 44 49 a5 f9 36 72 3d 2c d9 1b a1 f5 4f 93     S.DI..6r=,....O.
     4db:	9d 68 47 41 16 ca 2a 4c a3 87 d6 e5 19 2e 77 15     .hGA..*L......w.
     4eb:	6d 70 c0 df b2 00 46 ed c6 6c 43 60 92 2d a9 22     mp....F..lC`.-."
     4fb:	45 8f 34 55 ae a4 0a 66 32 e0 dc 02 ac e8 20 8c     E.4U...f2..... .
     50b:	89 62 4a fe ee c3 e3 3c f1 79 05 e9 f6 27 33 cc     .bJ....<.y...'3.
     51b:	f2 9e 11 81 7e 80 10 8a 82 9f 48 0d d7 b4 fc 2f     ....~.....H..../
     52b:	b5 c7 dd 88 14 6b 2b 54 ea 1d 94 5c b0 ef 12 24     .....k+T...\...$
     53b:	cd eb e1 e2 64 73 3f 0e 52 61 25 3e f8 0f 4b ec     ....ds?.Ra%>..K.
     54b:	c0 00 30 f6 02 49 3d 10 6e 20 c9 a6 2f fe 2c 2b     ..0..I=.n ../.,+
     55b:	75 2e 45 26 ab 48 a9 80 fc 04 cc d3 b5 ba a3 38     u.E&.H.........8
     56b:	31 7d 01 d9 a7 7b 96 b6 63 69 4e f7 de e0 78 ca     1}...{..ciN...x.
     57b:	50 aa 41 91 65 88 e4 21 85 da 3a 27 be 1c 3e 42     P.A.e..!..:'..>B
     58b:	5e 17 52 7f 1f 89 24 6f 8f 5c 67 74 0e 12 87 8d     ^.R...$o.\gt....
     59b:	e9 34 ed 73 c4 f8 61 5b 05 df 59 4c 97 79 83 18     .4.s..a[..YL.y..
     5ab:	a4 55 95 eb bd 53 f5 f1 57 66 46 9f b2 81 09 51     .U...S..WfF....Q
     5bb:	86 22 16 dd 23 93 76 29 c2 d7 1d d4 bf 36 3f ea     ."..#.v).....6?.
     5cb:	4b 11 32 b9 62 54 60 d6 6d 43 9a 0d 92 9c b0 ef     K.2.bT`.mC......
     5db:	58 6c 9d 77 2d 70 fa f3 b3 0b e2 40 7e f4 8a e5     Xl.w-p.....@~...
     5eb:	8c 3c 56 71 d1 64 e1 82 0a cb 13 15 90 ec 03 99     .<Vq.d..........
     5fb:	af 14 5d 0f 33 4a 94 a5 a8 35 1b e3 6a c6 28 ff     ..].3J...5..j.(.
     60b:	4d e7 25 84 ac 08 ae c5 a2 2a b8 37 0c 7a a0 c3     M.%......*.7.z..
     61b:	ce ad 06 1a 9e 8b fb d5 d0 c1 1e d0 b4 9b b1 44     ...............D
     62b:	f2 47 c7 68 cf 72 bb 4f 5a f9 dc 6b db d2 e8 7c     .G.h.r.OZ..k...|
     63b:	c8 ee 98 a1 e6 d8 39 07 5f fd 8e 19 b7 3b bc cd     ......9._....;..
     64b:	7c e3 81 73 b2 11 bf 6f 20 98 fe 75 96 ef 6c da     |..s...o ..u..l.
     65b:	50 e1 09 72 54 45 ba 34 80 5b ed 3e 53 2c 87 a4     P..rTE.4.[.>S,..
     66b:	57 f3 33 3f 3c b7 67 b4 a3 25 60 4f 07 6b 1b 47     W.3?<.g..%`O.k.G
     67b:	15 0f e4 0a ea d1 32 78 36 49 8d 4b d2 bc a5 dc     ......2x6I.K....
     68b:	1d 0d 4d cd 9a 82 5f fc 94 65 be e2 f4 c9 1e 44     ..M..._..e.....D
     69b:	cb 9e 0c 64 71 26 63 b3 14 e8 40 70 8a 0e 19 42     ...dq&c...@p...B
     6ab:	6d ac 88 10 5c df 41 a9 ad e5 fb 74 cc d5 06 8e     m...\.A....t....
     6bb:	59 86 ce 1f 3d 76 e0 8f b9 77 27 7b a6 d8 29 d3     Y...=v...w'{..).
     6cb:	ec b8 13 f7 fa c3 51 6a de 4a 5a eb c2 8b 23 48     ......Qj.JZ...#H
     6db:	92 cf 62 a8 99 f8 d0 2e 85 61 43 c8 bd f0 05 93     ..b......aC.....
     6eb:	ca 4e f1 7d 30 fd c4 69 66 2f 08 b1 52 f9 21 e6     .N.}0..if/..R.!.
     6fb:	7a 2b dd 39 84 ff c0 91 d6 37 d4 7f 2d 9b 5d a1     z+.9.....7..-.].
     70b:	3b 6e b5 c5 46 04 f5 90 ee 7e 83 1c 03 56 b6 aa     ;n..F....~...V..
     71b:	00 17 01 35 55 79 0b 12 bb 1a 31 e7 02 28 16 c1     ...5Uy....1..(..
     72b:	f6 a2 db 18 9c 89 68 38 97 ab c7 2a d7 3a f2 c6     ......h8...*.:..
     73b:	24 4c b0 58 a0 22 5e 9d d9 a7 e9 ae af 8c 95 9f     $L.X."^.........
     74b:	28 b7 20 d7 b0 30 c3 09 19 c0 67 d6 00 3c 7e e7     (. ..0....g..<~.
     75b:	e9 f4 08 5a f8 b8 2e 05 a6 25 9e 5c d8 15 0d e1     ...Z.....%.\....
     76b:	f6 11 54 6b cd 21 46 66 5e 84 ad 06 38 29 44 c5     ..Tk.!Ff^...8)D.
     77b:	a2 ce f1 aa c1 40 71 86 b5 ef fc 36 a8 cb 0a 48     .....@q....6...H
     78b:	27 45 64 a3 af 8c b2 c6 9f 07 89 dc 17 d3 49 79     'Ed...........Iy
     79b:	fb fe 1d d0 b9 88 43 52 bc 01 78 2b 7d 94 c7 0e     ......CR..x+}...
     7ab:	de a5 d5 9b cc f7 61 7a c2 74 81 39 03 ab 96 a0     ......az.t.9....
     7bb:	37 bd 2d 72 75 3f c9 d4 8e 6f f9 8d ed 62 db 1c     7.-ru?...o...b..
     7cb:	df 04 ac 1b 6c 14 4b 63 d0 bf b4 82 ec 7b 1a 59     ....l.Kc.....{.Y
     7db:	92 d2 10 60 b6 3d 5f e6 80 6e 70 c4 f2 35 d9 7c     ...`.=_..np..5.|
     7eb:	ee e5 41 a4 5b 50 dd bb 4c f3 1f 9d 5d 57 55 51     ..A.[P..L...]WUQ
     7fb:	97 e3 58 42 4d 9c 73 ba c8 77 31 69 26 ae ea 8a     ..XBM.s..w1i&...
     80b:	da 22 b3 87 56 fa 93 0b 34 16 33 e8 e4 53 be a9     ."..V...4.3..S..
     81b:	b1 3a 3e f5 90 6a cf 3b 12 fd 8f 9a a7 47 91 99     .:>..j.;.....G..
     82b:	eb 0f 24 ff 23 18 85 4e 7f 0c e0 a1 d2 d1 2c 2a     ..$.#..N......,*
     83b:	4a 02 4f 1e 95 68 8b 98 83 6d 76 ca 65 32 13 2f     J.O..h...mv.e2./
     84b:	c3 82 9a a4 ba 81 60 37 34 35 fc 80 a8 51 65 67     ......`745...Qeg
     85b:	ed 30 5f 10 d3 4a 27 2f 13 b9 2a d2 cc e1 ef ae     .0_..J'/..*.....
     86b:	eb be f4 bd cf 43 b3 c5 88 84 b7 dd 39 40 ce 48     .....C......9@.H
     87b:	6d 9b 72 61 7e e7 a1 4e 53 2e 77 3b e2 c9 36 22     m.ra~..NS.w;..6"
     88b:	1b 6e 73 b1 03 b2 4c 87 a9 d4 4d 0f d8 15 6c aa     .ns...L...M...l.
     89b:	18 f6 49 57 5d fb 7a 14 94 63 a0 11 b0 9e de 05     ..IW].z..c......
     8ab:	46 c8 ee 47 db dc 24 89 9c 91 97 29 e9 7b c1 07     F..G..$....).{..
     8bb:	1e b8 fd fe ac c6 62 98 4f f1 79 e0 e8 6b 78 56     ......b.O.y..kxV
     8cb:	b6 8d 04 50 86 ca 6f 20 e6 ea e5 76 17 1c 74 7f     ...P..o ...v..t.
     8db:	bc 0d 2c 85 f7 66 96 e4 8b 75 3f 4b d9 38 af 7c     ..,..f...u?K.8.|
     8eb:	da 0b 83 2d 31 32 a2 f5 1d 59 41 45 bf 3c 1f f8     ...-12...YAE.<..
     8fb:	f9 8a d0 16 25 69 12 99 9d 21 95 ab 01 a6 d7 b5     ....%i...!......
     90b:	c0 7d ff 58 0e 3a 92 d1 55 e3 08 9f d6 3e 52 8e     .}.X.:..U....>R.
     91b:	fa a3 c7 02 cd df 8f 64 19 8c f3 a7 0c 5e 0a 6a     .......d.....^.j
     92b:	09 f0 93 5b 42 c2 06 23 ec 71 ad b4 cb bb 70 28     ...[B..#.q....p(
     93b:	d5 1a 5c 33 68 5a 00 44 90 a5 c4 26 3d 2b f2 54     ..\3hZ.D...&=+.T
     94b:	96 ad da 1f ed 33 e1 81 69 08 0d 0a db 35 77 9a     .....3..i....5w.
     95b:	64 d1 fc 78 aa 1b d0 67 a0 dd fa 6c 63 71 05 84     d..x...g...lcq..
     96b:	17 6a 89 4f 66 7f c6 50 55 92 6f bd e7 d2 40 72     .j.Of..PU.o...@r
     97b:	8d bb ec 06 42 8a e4 88 9d 7e 7a 82 27 13 41 1a     ....B....~z.'.A.
     98b:	af c8 a4 76 b4 c2 fe 6d 1c d9 61 30 b3 7c ea f7     ...v...m..a0.|..
     99b:	29 0f f2 3b 51 c1 de 5f e5 2a 2f 99 0b 5d a3 2b     )..;Q.._.*/..].+
     9ab:	4a ab 95 a5 d3 58 56 ee 28 31 00 cc 15 46 ca e6     J....XV.(1...F..
     9bb:	86 38 3c 65 f5 e3 9f d6 5b 09 49 83 70 2d 53 a9     .8<e....[.I.p-S.
     9cb:	7d e2 c4 ac 8e 5e b8 25 f4 b9 57 f3 f1 68 47 b2     }....^.%..W..hG.
     9db:	a2 59 20 ce 34 79 5c 90 0e 1e be d5 22 23 b1 c9     .Y .4y\....."#..
     9eb:	18 62 16 2e 91 3e 07 8f d8 3f 93 3d d4 9b df 85     .b...>...?.=....
     9fb:	21 fb 11 74 97 c7 d7 dc 4c 19 45 98 e9 43 02 4b     !..t....L.E..C.K
     a0b:	bc c3 04 9c 6b f0 75 52 a7 26 f6 c5 ba cf b0 b7     ....k.uR.&......
     a1b:	ae 5a a1 bf 03 8b 80 12 6e 0c eb f9 c0 44 24 ef     .Z......n....D$.
     a2b:	10 f8 a8 8c e8 7b ff 9e 2c cd 60 36 87 b5 94 a6     .....{..,.`6....
     a3b:	54 73 3a 14 4e 01 1d b6 fd 37 48 4d 39 cb e0 32     Ts:.N....7HM9..2
	...

00000b4c <__ctors_end>:
     b4c:	11 24       	eor	r1, r1
     b4e:	1f be       	out	0x3f, r1	; 63
     b50:	cf ef       	ldi	r28, 0xFF	; 255
     b52:	d4 e0       	ldi	r29, 0x04	; 4
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	cd bf       	out	0x3d, r28	; 61

00000b58 <__do_copy_data>:
     b58:	11 e0       	ldi	r17, 0x01	; 1
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	e6 e4       	ldi	r30, 0x46	; 70
     b60:	f1 e3       	ldi	r31, 0x31	; 49
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <.do_copy_data_start>

00000b64 <.do_copy_data_loop>:
     b64:	05 90       	lpm	r0, Z+
     b66:	0d 92       	st	X+, r0

00000b68 <.do_copy_data_start>:
     b68:	a8 32       	cpi	r26, 0x28	; 40
     b6a:	b1 07       	cpc	r27, r17
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <.do_copy_data_loop>

00000b6e <__do_clear_bss>:
     b6e:	12 e0       	ldi	r17, 0x02	; 2
     b70:	a8 e2       	ldi	r26, 0x28	; 40
     b72:	b1 e0       	ldi	r27, 0x01	; 1
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <.do_clear_bss_start>

00000b76 <.do_clear_bss_loop>:
     b76:	1d 92       	st	X+, r1

00000b78 <.do_clear_bss_start>:
     b78:	ad 39       	cpi	r26, 0x9D	; 157
     b7a:	b1 07       	cpc	r27, r17
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <.do_clear_bss_loop>
     b7e:	0e 94 3f 0c 	call	0x187e	; 0x187e <main>
     b82:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <_exit>

00000b86 <__bad_interrupt>:
     b86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b8a <processChords>:
*/
#include "processStringState.h"

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	8c 01       	movw	r16, r24
     b94:	fb 01       	movw	r30, r22
     b96:	ea 01       	movw	r28, r20
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
				data->downOn = 1;
				data->upOn   = 0;
			}
			else
			{
				data->upOn   = 1;
     b9c:	91 e0       	ldi	r25, 0x01	; 1
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
	{
		if (stringState[guitarString] & 1)
     b9e:	db 01       	movw	r26, r22
     ba0:	8c 91       	ld	r24, X
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	10 c0       	rjmp	.+32     	; 0xbc6 <processChords+0x3c>
		{
			if (guitarString < (NUMBER_OF_STRINGS / 2))
     ba6:	23 30       	cpi	r18, 0x03	; 3
     ba8:	31 05       	cpc	r19, r1
     baa:	3c f4       	brge	.+14     	; 0xbba <processChords+0x30>
			{
				data->downOn = 1;
     bac:	d8 01       	movw	r26, r16
     bae:	16 96       	adiw	r26, 0x06	; 6
     bb0:	9c 93       	st	X, r25
     bb2:	16 97       	sbiw	r26, 0x06	; 6
				data->upOn   = 0;
     bb4:	15 96       	adiw	r26, 0x05	; 5
     bb6:	1c 92       	st	X, r1
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <processChords+0x3c>
			}
			else
			{
				data->upOn   = 1;
     bba:	d8 01       	movw	r26, r16
     bbc:	15 96       	adiw	r26, 0x05	; 5
     bbe:	9c 93       	st	X, r25
     bc0:	15 97       	sbiw	r26, 0x05	; 5
				data->downOn = 0;
     bc2:	16 96       	adiw	r26, 0x06	; 6
     bc4:	1c 92       	st	X, r1

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	6e 5f       	subi	r22, 0xFE	; 254
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	26 30       	cpi	r18, 0x06	; 6
     bd0:	31 05       	cpc	r19, r1
     bd2:	29 f7       	brne	.-54     	; 0xb9e <processChords+0x14>
	// the patterns in EEPROM. However, for debouncing, we don't want to
	// mess with the stringState[] array, so we'll mask stringState[i] every
	// time we compare it

	// First, save us some trouble and see if we're not pressing anything at all..
	if (( (stringState[0] & (~1)) == 0b00000000) &&
     bd4:	40 81       	ld	r20, Z
     bd6:	51 81       	ldd	r21, Z+1	; 0x01
     bd8:	4e 7f       	andi	r20, 0xFE	; 254
     bda:	41 15       	cp	r20, r1
     bdc:	51 05       	cpc	r21, r1
     bde:	d1 f4       	brne	.+52     	; 0xc14 <processChords+0x8a>
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	89 2b       	or	r24, r25
     be8:	a9 f4       	brne	.+42     	; 0xc14 <processChords+0x8a>
     bea:	84 81       	ldd	r24, Z+4	; 0x04
     bec:	95 81       	ldd	r25, Z+5	; 0x05
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	89 2b       	or	r24, r25
     bf2:	81 f4       	brne	.+32     	; 0xc14 <processChords+0x8a>
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	97 81       	ldd	r25, Z+7	; 0x07
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	89 2b       	or	r24, r25
     bfc:	59 f4       	brne	.+22     	; 0xc14 <processChords+0x8a>
     bfe:	80 85       	ldd	r24, Z+8	; 0x08
     c00:	91 85       	ldd	r25, Z+9	; 0x09
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	89 2b       	or	r24, r25
     c06:	31 f4       	brne	.+12     	; 0xc14 <processChords+0x8a>
     c08:	82 85       	ldd	r24, Z+10	; 0x0a
     c0a:	93 85       	ldd	r25, Z+11	; 0x0b
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	89 2b       	or	r24, r25
     c10:	09 f4       	brne	.+2      	; 0xc14 <processChords+0x8a>
     c12:	63 c2       	rjmp	.+1222   	; 0x10da <processChords+0x550>
		return;

	// Now see if what's being played on the fretboard matches any of the button patterns in
	//  buttonStringPatterns
	// green
	if( (stringState[0] & (~1)) == buttonStringPatterns[0][0] &&
     c14:	88 81       	ld	r24, Y
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	48 17       	cp	r20, r24
     c1a:	59 07       	cpc	r21, r25
     c1c:	61 f5       	brne	.+88     	; 0xc76 <processChords+0xec>
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	2a 81       	ldd	r18, Y+2	; 0x02
     c26:	3b 81       	ldd	r19, Y+3	; 0x03
     c28:	82 17       	cp	r24, r18
     c2a:	93 07       	cpc	r25, r19
     c2c:	21 f5       	brne	.+72     	; 0xc76 <processChords+0xec>
     c2e:	84 81       	ldd	r24, Z+4	; 0x04
     c30:	95 81       	ldd	r25, Z+5	; 0x05
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	2c 81       	ldd	r18, Y+4	; 0x04
     c36:	3d 81       	ldd	r19, Y+5	; 0x05
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	e1 f4       	brne	.+56     	; 0xc76 <processChords+0xec>
     c3e:	86 81       	ldd	r24, Z+6	; 0x06
     c40:	97 81       	ldd	r25, Z+7	; 0x07
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	2e 81       	ldd	r18, Y+6	; 0x06
     c46:	3f 81       	ldd	r19, Y+7	; 0x07
     c48:	82 17       	cp	r24, r18
     c4a:	93 07       	cpc	r25, r19
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <processChords+0xec>
     c4e:	80 85       	ldd	r24, Z+8	; 0x08
     c50:	91 85       	ldd	r25, Z+9	; 0x09
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	28 85       	ldd	r18, Y+8	; 0x08
     c56:	39 85       	ldd	r19, Y+9	; 0x09
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	61 f4       	brne	.+24     	; 0xc76 <processChords+0xec>
     c5e:	82 85       	ldd	r24, Z+10	; 0x0a
     c60:	93 85       	ldd	r25, Z+11	; 0x0b
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	2a 85       	ldd	r18, Y+10	; 0x0a
     c66:	3b 85       	ldd	r19, Y+11	; 0x0b
     c68:	82 17       	cp	r24, r18
     c6a:	93 07       	cpc	r25, r19
     c6c:	21 f4       	brne	.+8      	; 0xc76 <processChords+0xec>
	    (stringState[2] & (~1)) == buttonStringPatterns[0][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[0][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[0][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[0][5]  ) 
		{
			data->greenOn = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	f8 01       	movw	r30, r16
     c72:	80 83       	st	Z, r24
     c74:	32 c2       	rjmp	.+1124   	; 0x10da <processChords+0x550>
  		}
	// red
	else if( (stringState[0] & (~1)) == buttonStringPatterns[1][0] &&
     c76:	de 01       	movw	r26, r28
     c78:	1c 96       	adiw	r26, 0x0c	; 12
     c7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c7c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c7e:	48 17       	cp	r20, r24
     c80:	59 07       	cpc	r21, r25
     c82:	a9 f5       	brne	.+106    	; 0xcee <processChords+0x164>
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	13 97       	sbiw	r26, 0x03	; 3
     c92:	82 17       	cp	r24, r18
     c94:	93 07       	cpc	r25, r19
     c96:	59 f5       	brne	.+86     	; 0xcee <processChords+0x164>
     c98:	84 81       	ldd	r24, Z+4	; 0x04
     c9a:	95 81       	ldd	r25, Z+5	; 0x05
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	14 96       	adiw	r26, 0x04	; 4
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	15 97       	sbiw	r26, 0x05	; 5
     ca6:	82 17       	cp	r24, r18
     ca8:	93 07       	cpc	r25, r19
     caa:	09 f5       	brne	.+66     	; 0xcee <processChords+0x164>
     cac:	86 81       	ldd	r24, Z+6	; 0x06
     cae:	97 81       	ldd	r25, Z+7	; 0x07
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	16 96       	adiw	r26, 0x06	; 6
     cb4:	2d 91       	ld	r18, X+
     cb6:	3c 91       	ld	r19, X
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	b9 f4       	brne	.+46     	; 0xcee <processChords+0x164>
     cc0:	80 85       	ldd	r24, Z+8	; 0x08
     cc2:	91 85       	ldd	r25, Z+9	; 0x09
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	18 96       	adiw	r26, 0x08	; 8
     cc8:	2d 91       	ld	r18, X+
     cca:	3c 91       	ld	r19, X
     ccc:	19 97       	sbiw	r26, 0x09	; 9
     cce:	82 17       	cp	r24, r18
     cd0:	93 07       	cpc	r25, r19
     cd2:	69 f4       	brne	.+26     	; 0xcee <processChords+0x164>
     cd4:	82 85       	ldd	r24, Z+10	; 0x0a
     cd6:	93 85       	ldd	r25, Z+11	; 0x0b
     cd8:	8e 7f       	andi	r24, 0xFE	; 254
     cda:	1a 96       	adiw	r26, 0x0a	; 10
     cdc:	2d 91       	ld	r18, X+
     cde:	3c 91       	ld	r19, X
     ce0:	1b 97       	sbiw	r26, 0x0b	; 11
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	19 f4       	brne	.+6      	; 0xcee <processChords+0x164>
	    (stringState[2] & (~1)) == buttonStringPatterns[1][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[1][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[1][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[1][5]  ) 
		{
			data->redOn = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	d8 01       	movw	r26, r16
     cec:	f1 c0       	rjmp	.+482    	; 0xed0 <processChords+0x346>
  		}

	// yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[2][0] &&
     cee:	de 01       	movw	r26, r28
     cf0:	58 96       	adiw	r26, 0x18	; 24
     cf2:	88 8d       	ldd	r24, Y+24	; 0x18
     cf4:	99 8d       	ldd	r25, Y+25	; 0x19
     cf6:	48 17       	cp	r20, r24
     cf8:	59 07       	cpc	r21, r25
     cfa:	a9 f5       	brne	.+106    	; 0xd66 <processChords+0x1dc>
     cfc:	82 81       	ldd	r24, Z+2	; 0x02
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	2d 91       	ld	r18, X+
     d06:	3c 91       	ld	r19, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	82 17       	cp	r24, r18
     d0c:	93 07       	cpc	r25, r19
     d0e:	59 f5       	brne	.+86     	; 0xd66 <processChords+0x1dc>
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	95 81       	ldd	r25, Z+5	; 0x05
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	14 96       	adiw	r26, 0x04	; 4
     d18:	2d 91       	ld	r18, X+
     d1a:	3c 91       	ld	r19, X
     d1c:	15 97       	sbiw	r26, 0x05	; 5
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	09 f5       	brne	.+66     	; 0xd66 <processChords+0x1dc>
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	97 81       	ldd	r25, Z+7	; 0x07
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	16 96       	adiw	r26, 0x06	; 6
     d2c:	2d 91       	ld	r18, X+
     d2e:	3c 91       	ld	r19, X
     d30:	17 97       	sbiw	r26, 0x07	; 7
     d32:	82 17       	cp	r24, r18
     d34:	93 07       	cpc	r25, r19
     d36:	b9 f4       	brne	.+46     	; 0xd66 <processChords+0x1dc>
     d38:	80 85       	ldd	r24, Z+8	; 0x08
     d3a:	91 85       	ldd	r25, Z+9	; 0x09
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	18 96       	adiw	r26, 0x08	; 8
     d40:	2d 91       	ld	r18, X+
     d42:	3c 91       	ld	r19, X
     d44:	19 97       	sbiw	r26, 0x09	; 9
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	69 f4       	brne	.+26     	; 0xd66 <processChords+0x1dc>
     d4c:	82 85       	ldd	r24, Z+10	; 0x0a
     d4e:	93 85       	ldd	r25, Z+11	; 0x0b
     d50:	8e 7f       	andi	r24, 0xFE	; 254
     d52:	1a 96       	adiw	r26, 0x0a	; 10
     d54:	2d 91       	ld	r18, X+
     d56:	3c 91       	ld	r19, X
     d58:	1b 97       	sbiw	r26, 0x0b	; 11
     d5a:	82 17       	cp	r24, r18
     d5c:	93 07       	cpc	r25, r19
     d5e:	19 f4       	brne	.+6      	; 0xd66 <processChords+0x1dc>
	    (stringState[2] & (~1)) == buttonStringPatterns[2][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[2][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[2][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[2][5]  ) 
		{
			 data->yellowOn = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	f8 01       	movw	r30, r16
     d64:	76 c1       	rjmp	.+748    	; 0x1052 <processChords+0x4c8>
  		}
	// blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[3][0] &&
     d66:	de 01       	movw	r26, r28
     d68:	94 96       	adiw	r26, 0x24	; 36
     d6a:	8c a1       	ldd	r24, Y+36	; 0x24
     d6c:	9d a1       	ldd	r25, Y+37	; 0x25
     d6e:	48 17       	cp	r20, r24
     d70:	59 07       	cpc	r21, r25
     d72:	a9 f5       	brne	.+106    	; 0xdde <processChords+0x254>
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	8e 7f       	andi	r24, 0xFE	; 254
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	2d 91       	ld	r18, X+
     d7e:	3c 91       	ld	r19, X
     d80:	13 97       	sbiw	r26, 0x03	; 3
     d82:	82 17       	cp	r24, r18
     d84:	93 07       	cpc	r25, r19
     d86:	59 f5       	brne	.+86     	; 0xdde <processChords+0x254>
     d88:	84 81       	ldd	r24, Z+4	; 0x04
     d8a:	95 81       	ldd	r25, Z+5	; 0x05
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	14 96       	adiw	r26, 0x04	; 4
     d90:	2d 91       	ld	r18, X+
     d92:	3c 91       	ld	r19, X
     d94:	15 97       	sbiw	r26, 0x05	; 5
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	09 f5       	brne	.+66     	; 0xdde <processChords+0x254>
     d9c:	86 81       	ldd	r24, Z+6	; 0x06
     d9e:	97 81       	ldd	r25, Z+7	; 0x07
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	16 96       	adiw	r26, 0x06	; 6
     da4:	2d 91       	ld	r18, X+
     da6:	3c 91       	ld	r19, X
     da8:	17 97       	sbiw	r26, 0x07	; 7
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	b9 f4       	brne	.+46     	; 0xdde <processChords+0x254>
     db0:	80 85       	ldd	r24, Z+8	; 0x08
     db2:	91 85       	ldd	r25, Z+9	; 0x09
     db4:	8e 7f       	andi	r24, 0xFE	; 254
     db6:	18 96       	adiw	r26, 0x08	; 8
     db8:	2d 91       	ld	r18, X+
     dba:	3c 91       	ld	r19, X
     dbc:	19 97       	sbiw	r26, 0x09	; 9
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	69 f4       	brne	.+26     	; 0xdde <processChords+0x254>
     dc4:	82 85       	ldd	r24, Z+10	; 0x0a
     dc6:	93 85       	ldd	r25, Z+11	; 0x0b
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	1a 96       	adiw	r26, 0x0a	; 10
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	1b 97       	sbiw	r26, 0x0b	; 11
     dd2:	82 17       	cp	r24, r18
     dd4:	93 07       	cpc	r25, r19
     dd6:	19 f4       	brne	.+6      	; 0xdde <processChords+0x254>
	    (stringState[2] & (~1)) == buttonStringPatterns[3][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[3][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[3][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[3][5]  ) 
		{
			 data->blueOn = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	d8 01       	movw	r26, r16
     ddc:	7c c1       	rjmp	.+760    	; 0x10d6 <processChords+0x54c>
  		}
	// orange
	else if( (stringState[0] & (~1)) == buttonStringPatterns[4][0] &&
     dde:	de 01       	movw	r26, r28
     de0:	d0 96       	adiw	r26, 0x30	; 48
     de2:	88 a9       	ldd	r24, Y+48	; 0x30
     de4:	99 a9       	ldd	r25, Y+49	; 0x31
     de6:	48 17       	cp	r20, r24
     de8:	59 07       	cpc	r21, r25
     dea:	b1 f5       	brne	.+108    	; 0xe58 <processChords+0x2ce>
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	12 96       	adiw	r26, 0x02	; 2
     df4:	2d 91       	ld	r18, X+
     df6:	3c 91       	ld	r19, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	61 f5       	brne	.+88     	; 0xe58 <processChords+0x2ce>
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	14 96       	adiw	r26, 0x04	; 4
     e08:	2d 91       	ld	r18, X+
     e0a:	3c 91       	ld	r19, X
     e0c:	15 97       	sbiw	r26, 0x05	; 5
     e0e:	82 17       	cp	r24, r18
     e10:	93 07       	cpc	r25, r19
     e12:	11 f5       	brne	.+68     	; 0xe58 <processChords+0x2ce>
     e14:	86 81       	ldd	r24, Z+6	; 0x06
     e16:	97 81       	ldd	r25, Z+7	; 0x07
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	16 96       	adiw	r26, 0x06	; 6
     e1c:	2d 91       	ld	r18, X+
     e1e:	3c 91       	ld	r19, X
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	82 17       	cp	r24, r18
     e24:	93 07       	cpc	r25, r19
     e26:	c1 f4       	brne	.+48     	; 0xe58 <processChords+0x2ce>
     e28:	80 85       	ldd	r24, Z+8	; 0x08
     e2a:	91 85       	ldd	r25, Z+9	; 0x09
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	71 f4       	brne	.+28     	; 0xe58 <processChords+0x2ce>
     e3c:	82 85       	ldd	r24, Z+10	; 0x0a
     e3e:	93 85       	ldd	r25, Z+11	; 0x0b
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	1a 96       	adiw	r26, 0x0a	; 10
     e44:	2d 91       	ld	r18, X+
     e46:	3c 91       	ld	r19, X
     e48:	1b 97       	sbiw	r26, 0x0b	; 11
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	21 f4       	brne	.+8      	; 0xe58 <processChords+0x2ce>
	    (stringState[2] & (~1)) == buttonStringPatterns[4][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[4][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[4][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[4][5]  ) 
		{
			 data->orangeOn = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	f8 01       	movw	r30, r16
     e54:	84 83       	std	Z+4, r24	; 0x04
     e56:	41 c1       	rjmp	.+642    	; 0x10da <processChords+0x550>
  		}
	//Green and Red
	else if( (stringState[0] & (~1)) == buttonStringPatterns[5][0] &&
     e58:	de 01       	movw	r26, r28
     e5a:	dc 96       	adiw	r26, 0x3c	; 60
     e5c:	8c ad       	ldd	r24, Y+60	; 0x3c
     e5e:	9d ad       	ldd	r25, Y+61	; 0x3d
     e60:	48 17       	cp	r20, r24
     e62:	59 07       	cpc	r21, r25
     e64:	c1 f5       	brne	.+112    	; 0xed6 <processChords+0x34c>
     e66:	82 81       	ldd	r24, Z+2	; 0x02
     e68:	93 81       	ldd	r25, Z+3	; 0x03
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	12 96       	adiw	r26, 0x02	; 2
     e6e:	2d 91       	ld	r18, X+
     e70:	3c 91       	ld	r19, X
     e72:	13 97       	sbiw	r26, 0x03	; 3
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	71 f5       	brne	.+92     	; 0xed6 <processChords+0x34c>
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	95 81       	ldd	r25, Z+5	; 0x05
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	14 96       	adiw	r26, 0x04	; 4
     e82:	2d 91       	ld	r18, X+
     e84:	3c 91       	ld	r19, X
     e86:	15 97       	sbiw	r26, 0x05	; 5
     e88:	82 17       	cp	r24, r18
     e8a:	93 07       	cpc	r25, r19
     e8c:	21 f5       	brne	.+72     	; 0xed6 <processChords+0x34c>
     e8e:	86 81       	ldd	r24, Z+6	; 0x06
     e90:	97 81       	ldd	r25, Z+7	; 0x07
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	16 96       	adiw	r26, 0x06	; 6
     e96:	2d 91       	ld	r18, X+
     e98:	3c 91       	ld	r19, X
     e9a:	17 97       	sbiw	r26, 0x07	; 7
     e9c:	82 17       	cp	r24, r18
     e9e:	93 07       	cpc	r25, r19
     ea0:	d1 f4       	brne	.+52     	; 0xed6 <processChords+0x34c>
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	91 85       	ldd	r25, Z+9	; 0x09
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	18 96       	adiw	r26, 0x08	; 8
     eaa:	2d 91       	ld	r18, X+
     eac:	3c 91       	ld	r19, X
     eae:	19 97       	sbiw	r26, 0x09	; 9
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	81 f4       	brne	.+32     	; 0xed6 <processChords+0x34c>
     eb6:	82 85       	ldd	r24, Z+10	; 0x0a
     eb8:	93 85       	ldd	r25, Z+11	; 0x0b
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	1a 96       	adiw	r26, 0x0a	; 10
     ebe:	2d 91       	ld	r18, X+
     ec0:	3c 91       	ld	r19, X
     ec2:	1b 97       	sbiw	r26, 0x0b	; 11
     ec4:	82 17       	cp	r24, r18
     ec6:	93 07       	cpc	r25, r19
     ec8:	31 f4       	brne	.+12     	; 0xed6 <processChords+0x34c>
	    (stringState[2] & (~1)) == buttonStringPatterns[5][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[5][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[5][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[5][5]  ) 
		{
			data->greenOn = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	d8 01       	movw	r26, r16
     ece:	8c 93       	st	X, r24
			data->redOn = 1;
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	8c 93       	st	X, r24
     ed4:	02 c1       	rjmp	.+516    	; 0x10da <processChords+0x550>
  		}
	//Red and Yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[6][0] &&
     ed6:	de 01       	movw	r26, r28
     ed8:	a8 5b       	subi	r26, 0xB8	; 184
     eda:	bf 4f       	sbci	r27, 0xFF	; 255
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	11 97       	sbiw	r26, 0x01	; 1
     ee2:	48 17       	cp	r20, r24
     ee4:	59 07       	cpc	r21, r25
     ee6:	b1 f5       	brne	.+108    	; 0xf54 <processChords+0x3ca>
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	8e 7f       	andi	r24, 0xFE	; 254
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	2d 91       	ld	r18, X+
     ef2:	3c 91       	ld	r19, X
     ef4:	13 97       	sbiw	r26, 0x03	; 3
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	61 f5       	brne	.+88     	; 0xf54 <processChords+0x3ca>
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	95 81       	ldd	r25, Z+5	; 0x05
     f00:	8e 7f       	andi	r24, 0xFE	; 254
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	2d 91       	ld	r18, X+
     f06:	3c 91       	ld	r19, X
     f08:	15 97       	sbiw	r26, 0x05	; 5
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	11 f5       	brne	.+68     	; 0xf54 <processChords+0x3ca>
     f10:	86 81       	ldd	r24, Z+6	; 0x06
     f12:	97 81       	ldd	r25, Z+7	; 0x07
     f14:	8e 7f       	andi	r24, 0xFE	; 254
     f16:	16 96       	adiw	r26, 0x06	; 6
     f18:	2d 91       	ld	r18, X+
     f1a:	3c 91       	ld	r19, X
     f1c:	17 97       	sbiw	r26, 0x07	; 7
     f1e:	82 17       	cp	r24, r18
     f20:	93 07       	cpc	r25, r19
     f22:	c1 f4       	brne	.+48     	; 0xf54 <processChords+0x3ca>
     f24:	80 85       	ldd	r24, Z+8	; 0x08
     f26:	91 85       	ldd	r25, Z+9	; 0x09
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	18 96       	adiw	r26, 0x08	; 8
     f2c:	2d 91       	ld	r18, X+
     f2e:	3c 91       	ld	r19, X
     f30:	19 97       	sbiw	r26, 0x09	; 9
     f32:	82 17       	cp	r24, r18
     f34:	93 07       	cpc	r25, r19
     f36:	71 f4       	brne	.+28     	; 0xf54 <processChords+0x3ca>
     f38:	82 85       	ldd	r24, Z+10	; 0x0a
     f3a:	93 85       	ldd	r25, Z+11	; 0x0b
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	1a 96       	adiw	r26, 0x0a	; 10
     f40:	2d 91       	ld	r18, X+
     f42:	3c 91       	ld	r19, X
     f44:	1b 97       	sbiw	r26, 0x0b	; 11
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	21 f4       	brne	.+8      	; 0xf54 <processChords+0x3ca>
	    (stringState[2] & (~1)) == buttonStringPatterns[6][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[6][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[6][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[6][5]  ) 
		{
			data->redOn = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	f8 01       	movw	r30, r16
     f50:	81 83       	std	Z+1, r24	; 0x01
     f52:	7f c0       	rjmp	.+254    	; 0x1052 <processChords+0x4c8>
			data->yellowOn = 1;
  		}
	// Yellow and Blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[7][0] &&
     f54:	de 01       	movw	r26, r28
     f56:	ac 5a       	subi	r26, 0xAC	; 172
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	11 97       	sbiw	r26, 0x01	; 1
     f60:	48 17       	cp	r20, r24
     f62:	59 07       	cpc	r21, r25
     f64:	c1 f5       	brne	.+112    	; 0xfd6 <processChords+0x44c>
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	8e 7f       	andi	r24, 0xFE	; 254
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	2d 91       	ld	r18, X+
     f70:	3c 91       	ld	r19, X
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	82 17       	cp	r24, r18
     f76:	93 07       	cpc	r25, r19
     f78:	71 f5       	brne	.+92     	; 0xfd6 <processChords+0x44c>
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	95 81       	ldd	r25, Z+5	; 0x05
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	14 96       	adiw	r26, 0x04	; 4
     f82:	2d 91       	ld	r18, X+
     f84:	3c 91       	ld	r19, X
     f86:	15 97       	sbiw	r26, 0x05	; 5
     f88:	82 17       	cp	r24, r18
     f8a:	93 07       	cpc	r25, r19
     f8c:	21 f5       	brne	.+72     	; 0xfd6 <processChords+0x44c>
     f8e:	86 81       	ldd	r24, Z+6	; 0x06
     f90:	97 81       	ldd	r25, Z+7	; 0x07
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	16 96       	adiw	r26, 0x06	; 6
     f96:	2d 91       	ld	r18, X+
     f98:	3c 91       	ld	r19, X
     f9a:	17 97       	sbiw	r26, 0x07	; 7
     f9c:	82 17       	cp	r24, r18
     f9e:	93 07       	cpc	r25, r19
     fa0:	d1 f4       	brne	.+52     	; 0xfd6 <processChords+0x44c>
     fa2:	80 85       	ldd	r24, Z+8	; 0x08
     fa4:	91 85       	ldd	r25, Z+9	; 0x09
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	18 96       	adiw	r26, 0x08	; 8
     faa:	2d 91       	ld	r18, X+
     fac:	3c 91       	ld	r19, X
     fae:	19 97       	sbiw	r26, 0x09	; 9
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	81 f4       	brne	.+32     	; 0xfd6 <processChords+0x44c>
     fb6:	82 85       	ldd	r24, Z+10	; 0x0a
     fb8:	93 85       	ldd	r25, Z+11	; 0x0b
     fba:	8e 7f       	andi	r24, 0xFE	; 254
     fbc:	1a 96       	adiw	r26, 0x0a	; 10
     fbe:	2d 91       	ld	r18, X+
     fc0:	3c 91       	ld	r19, X
     fc2:	1b 97       	sbiw	r26, 0x0b	; 11
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <processChords+0x44c>
	    (stringState[2] & (~1)) == buttonStringPatterns[7][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[7][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[7][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[7][5]  ) 
		{
			 data->yellowOn = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	d8 01       	movw	r26, r16
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	8c 93       	st	X, r24
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	80 c0       	rjmp	.+256    	; 0x10d6 <processChords+0x54c>
			 data->blueOn = 1;
  		}
	// Green and Yellow
	else if( (stringState[0] & (~1)) == buttonStringPatterns[8][0] &&
     fd6:	de 01       	movw	r26, r28
     fd8:	a0 5a       	subi	r26, 0xA0	; 160
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	11 97       	sbiw	r26, 0x01	; 1
     fe2:	48 17       	cp	r20, r24
     fe4:	59 07       	cpc	r21, r25
     fe6:	b9 f5       	brne	.+110    	; 0x1056 <processChords+0x4cc>
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	2d 91       	ld	r18, X+
     ff2:	3c 91       	ld	r19, X
     ff4:	13 97       	sbiw	r26, 0x03	; 3
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	69 f5       	brne	.+90     	; 0x1056 <processChords+0x4cc>
     ffc:	84 81       	ldd	r24, Z+4	; 0x04
     ffe:	95 81       	ldd	r25, Z+5	; 0x05
    1000:	8e 7f       	andi	r24, 0xFE	; 254
    1002:	14 96       	adiw	r26, 0x04	; 4
    1004:	2d 91       	ld	r18, X+
    1006:	3c 91       	ld	r19, X
    1008:	15 97       	sbiw	r26, 0x05	; 5
    100a:	82 17       	cp	r24, r18
    100c:	93 07       	cpc	r25, r19
    100e:	19 f5       	brne	.+70     	; 0x1056 <processChords+0x4cc>
    1010:	86 81       	ldd	r24, Z+6	; 0x06
    1012:	97 81       	ldd	r25, Z+7	; 0x07
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	2d 91       	ld	r18, X+
    101a:	3c 91       	ld	r19, X
    101c:	17 97       	sbiw	r26, 0x07	; 7
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	c9 f4       	brne	.+50     	; 0x1056 <processChords+0x4cc>
    1024:	80 85       	ldd	r24, Z+8	; 0x08
    1026:	91 85       	ldd	r25, Z+9	; 0x09
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	18 96       	adiw	r26, 0x08	; 8
    102c:	2d 91       	ld	r18, X+
    102e:	3c 91       	ld	r19, X
    1030:	19 97       	sbiw	r26, 0x09	; 9
    1032:	82 17       	cp	r24, r18
    1034:	93 07       	cpc	r25, r19
    1036:	79 f4       	brne	.+30     	; 0x1056 <processChords+0x4cc>
    1038:	82 85       	ldd	r24, Z+10	; 0x0a
    103a:	93 85       	ldd	r25, Z+11	; 0x0b
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	1a 96       	adiw	r26, 0x0a	; 10
    1040:	2d 91       	ld	r18, X+
    1042:	3c 91       	ld	r19, X
    1044:	1b 97       	sbiw	r26, 0x0b	; 11
    1046:	82 17       	cp	r24, r18
    1048:	93 07       	cpc	r25, r19
    104a:	29 f4       	brne	.+10     	; 0x1056 <processChords+0x4cc>
	    (stringState[2] & (~1)) == buttonStringPatterns[8][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[8][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[8][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[8][5]  ) 
		{
			 data->greenOn = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	f8 01       	movw	r30, r16
    1050:	80 83       	st	Z, r24
			 data->yellowOn = 1;
    1052:	82 83       	std	Z+2, r24	; 0x02
    1054:	42 c0       	rjmp	.+132    	; 0x10da <processChords+0x550>
  		}
	// Red and Blue
	else if( (stringState[0] & (~1)) == buttonStringPatterns[9][0] &&
    1056:	de 01       	movw	r26, r28
    1058:	a4 59       	subi	r26, 0x94	; 148
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	8d 91       	ld	r24, X+
    105e:	9c 91       	ld	r25, X
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	48 17       	cp	r20, r24
    1064:	59 07       	cpc	r21, r25
    1066:	c9 f5       	brne	.+114    	; 0x10da <processChords+0x550>
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	13 97       	sbiw	r26, 0x03	; 3
    1076:	82 17       	cp	r24, r18
    1078:	93 07       	cpc	r25, r19
    107a:	79 f5       	brne	.+94     	; 0x10da <processChords+0x550>
    107c:	84 81       	ldd	r24, Z+4	; 0x04
    107e:	95 81       	ldd	r25, Z+5	; 0x05
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	14 96       	adiw	r26, 0x04	; 4
    1084:	2d 91       	ld	r18, X+
    1086:	3c 91       	ld	r19, X
    1088:	15 97       	sbiw	r26, 0x05	; 5
    108a:	82 17       	cp	r24, r18
    108c:	93 07       	cpc	r25, r19
    108e:	29 f5       	brne	.+74     	; 0x10da <processChords+0x550>
    1090:	86 81       	ldd	r24, Z+6	; 0x06
    1092:	97 81       	ldd	r25, Z+7	; 0x07
    1094:	8e 7f       	andi	r24, 0xFE	; 254
    1096:	16 96       	adiw	r26, 0x06	; 6
    1098:	2d 91       	ld	r18, X+
    109a:	3c 91       	ld	r19, X
    109c:	17 97       	sbiw	r26, 0x07	; 7
    109e:	82 17       	cp	r24, r18
    10a0:	93 07       	cpc	r25, r19
    10a2:	d9 f4       	brne	.+54     	; 0x10da <processChords+0x550>
    10a4:	80 85       	ldd	r24, Z+8	; 0x08
    10a6:	91 85       	ldd	r25, Z+9	; 0x09
    10a8:	8e 7f       	andi	r24, 0xFE	; 254
    10aa:	18 96       	adiw	r26, 0x08	; 8
    10ac:	2d 91       	ld	r18, X+
    10ae:	3c 91       	ld	r19, X
    10b0:	19 97       	sbiw	r26, 0x09	; 9
    10b2:	82 17       	cp	r24, r18
    10b4:	93 07       	cpc	r25, r19
    10b6:	89 f4       	brne	.+34     	; 0x10da <processChords+0x550>
    10b8:	82 85       	ldd	r24, Z+10	; 0x0a
    10ba:	93 85       	ldd	r25, Z+11	; 0x0b
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	1a 96       	adiw	r26, 0x0a	; 10
    10c0:	2d 91       	ld	r18, X+
    10c2:	3c 91       	ld	r19, X
    10c4:	1b 97       	sbiw	r26, 0x0b	; 11
    10c6:	82 17       	cp	r24, r18
    10c8:	93 07       	cpc	r25, r19
    10ca:	39 f4       	brne	.+14     	; 0x10da <processChords+0x550>
	    (stringState[2] & (~1)) == buttonStringPatterns[9][2] &&
	    (stringState[3] & (~1)) == buttonStringPatterns[9][3] &&
	    (stringState[4] & (~1)) == buttonStringPatterns[9][4] &&
	    (stringState[5] & (~1)) == buttonStringPatterns[9][5]  ) 
		{
			 data->redOn = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	d8 01       	movw	r26, r16
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	8c 93       	st	X, r24
    10d4:	11 97       	sbiw	r26, 0x01	; 1
			 data->blueOn = 1;
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	8c 93       	st	X, r24
  		}

	return;
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <processNotes>:

void processNotes(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	fc 01       	movw	r30, r24
	/* If we're playing with notes on a scale, then we have to figure out if the proper note is being
	   played, and also if we strummed the correct string.
	 */
	// First thing, we need to reset the strumming code, since we need to check and see if we 
	//  strummed on the correct string or not
	data->upOn = 0;
    10f2:	15 82       	std	Z+5, r1	; 0x05
	data->downOn = 0;
    10f4:	16 82       	std	Z+6, r1	; 0x06
    10f6:	7b 01       	movw	r14, r22
    10f8:	da 01       	movw	r26, r20
    10fa:	ba 01       	movw	r22, r20
    10fc:	6c 5d       	subi	r22, 0xDC	; 220
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	4f ef       	ldi	r20, 0xFF	; 255
    1102:	00 e0       	ldi	r16, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
					buttonPressed = 1;
					}				
				if (maskedStringState == buttonStringPatterns[4][i] && 
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
    1106:	11 e0       	ldi	r17, 0x01	; 1
		data->downOn = 1;
	}
*/
	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
	{
		if (stringState[i] != 0) // Only look at strings that are being touched or strummed
    1108:	e7 01       	movw	r28, r14
    110a:	88 81       	ld	r24, Y
    110c:	99 81       	ldd	r25, Y+1	; 0x01
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	09 f4       	brne	.+2      	; 0x1114 <processNotes+0x30>
    1112:	75 c0       	rjmp	.+234    	; 0x11fe <processNotes+0x11a>
		{
			// Check for open strings being strummed first
			if (stringState[i] == 1) // This means we're strumming an open string
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	b1 f5       	brne	.+108    	; 0x1186 <processNotes+0xa2>
			{
				if (stringState[i] == buttonStringPatterns[0][i])
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	11 97       	sbiw	r26, 0x01	; 1
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	11 f4       	brne	.+4      	; 0x1128 <processNotes+0x44>
				{
					strumOn = i;
					data->greenOn =  1;	
    1124:	10 83       	st	Z, r17
    1126:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[1][i])
    1128:	e7 01       	movw	r28, r14
    112a:	28 81       	ld	r18, Y
    112c:	39 81       	ldd	r19, Y+1	; 0x01
    112e:	1c 96       	adiw	r26, 0x0c	; 12
    1130:	8d 91       	ld	r24, X+
    1132:	9c 91       	ld	r25, X
    1134:	1d 97       	sbiw	r26, 0x0d	; 13
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	11 f4       	brne	.+4      	; 0x1140 <processNotes+0x5c>
				{
					strumOn = i;
					data->redOn =  1;	
    113c:	11 83       	std	Z+1, r17	; 0x01
    113e:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[2][i])
    1140:	e7 01       	movw	r28, r14
    1142:	28 81       	ld	r18, Y
    1144:	39 81       	ldd	r19, Y+1	; 0x01
    1146:	58 96       	adiw	r26, 0x18	; 24
    1148:	8d 91       	ld	r24, X+
    114a:	9c 91       	ld	r25, X
    114c:	59 97       	sbiw	r26, 0x19	; 25
    114e:	28 17       	cp	r18, r24
    1150:	39 07       	cpc	r19, r25
    1152:	11 f4       	brne	.+4      	; 0x1158 <processNotes+0x74>
				{
					strumOn = i;
					data->yellowOn =  1;
    1154:	12 83       	std	Z+2, r17	; 0x02
    1156:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[3][i])
    1158:	e7 01       	movw	r28, r14
    115a:	28 81       	ld	r18, Y
    115c:	39 81       	ldd	r19, Y+1	; 0x01
    115e:	eb 01       	movw	r28, r22
    1160:	88 81       	ld	r24, Y
    1162:	99 81       	ldd	r25, Y+1	; 0x01
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	11 f4       	brne	.+4      	; 0x116e <processNotes+0x8a>
				{
					strumOn = i;
					data->blueOn =  1;
    116a:	13 83       	std	Z+3, r17	; 0x03
    116c:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[4][i])
    116e:	e7 01       	movw	r28, r14
    1170:	28 81       	ld	r18, Y
    1172:	39 81       	ldd	r19, Y+1	; 0x01
    1174:	eb 01       	movw	r28, r22
    1176:	8c 85       	ldd	r24, Y+12	; 0x0c
    1178:	9d 85       	ldd	r25, Y+13	; 0x0d
    117a:	28 17       	cp	r18, r24
    117c:	39 07       	cpc	r19, r25
    117e:	29 f4       	brne	.+10     	; 0x118a <processNotes+0xa6>
				{
					strumOn = i;
					data->orangeOn =  1;				
    1180:	14 83       	std	Z+4, r17	; 0x04
    1182:	45 2f       	mov	r20, r21
    1184:	02 c0       	rjmp	.+4      	; 0x118a <processNotes+0xa6>
			}
			 // Now we have checked for strummed notes, we need to check for pressed notes
			 //  so that we can display them for reference as well as use them when strummed
			else
				// First see if we're strumming or not
				strumPressed = stringState[i] & 1;
    1186:	08 2f       	mov	r16, r24
    1188:	01 70       	andi	r16, 0x01	; 1

				// 	maskedStringState[i] is a masked version of the 
				//  stringState that removes the strum data, so we can match
				//  the fret pressing against the prebuilt pattern without
				//  worrying about strumming or changing the stringState array
				int maskedStringState = stringState[i] & (~1);
    118a:	e7 01       	movw	r28, r14
    118c:	28 81       	ld	r18, Y
    118e:	39 81       	ldd	r19, Y+1	; 0x01
    1190:	2e 7f       	andi	r18, 0xFE	; 254

				// Take care of displaying closed notes
				if (maskedStringState == buttonStringPatterns[0][i]&& 
    1192:	8d 91       	ld	r24, X+
    1194:	9c 91       	ld	r25, X
    1196:	11 97       	sbiw	r26, 0x01	; 1
    1198:	28 17       	cp	r18, r24
    119a:	39 07       	cpc	r19, r25
    119c:	21 f4       	brne	.+8      	; 0x11a6 <processNotes+0xc2>
    119e:	21 15       	cp	r18, r1
    11a0:	31 05       	cpc	r19, r1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <processNotes+0xc2>
										buttonStringPatterns[0][i] != 0)
				{
					data->greenOn =  1;	
    11a4:	10 83       	st	Z, r17
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[1][i] && 
    11a6:	1c 96       	adiw	r26, 0x0c	; 12
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	1d 97       	sbiw	r26, 0x0d	; 13
    11ae:	28 17       	cp	r18, r24
    11b0:	39 07       	cpc	r19, r25
    11b2:	21 f4       	brne	.+8      	; 0x11bc <processNotes+0xd8>
    11b4:	21 15       	cp	r18, r1
    11b6:	31 05       	cpc	r19, r1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <processNotes+0xd8>
										buttonStringPatterns[1][i] != 0)
				{
					data->redOn =  1;	
    11ba:	11 83       	std	Z+1, r17	; 0x01
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[2][i] && 
    11bc:	58 96       	adiw	r26, 0x18	; 24
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	59 97       	sbiw	r26, 0x19	; 25
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <processNotes+0xee>
    11ca:	21 15       	cp	r18, r1
    11cc:	31 05       	cpc	r19, r1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <processNotes+0xee>
										buttonStringPatterns[2][i] != 0)
					{
					data->yellowOn =  1;
    11d0:	12 83       	std	Z+2, r17	; 0x02
					buttonPressed = 1;
				}
				if (maskedStringState == buttonStringPatterns[3][i] && 
    11d2:	eb 01       	movw	r28, r22
    11d4:	88 81       	ld	r24, Y
    11d6:	99 81       	ldd	r25, Y+1	; 0x01
    11d8:	28 17       	cp	r18, r24
    11da:	39 07       	cpc	r19, r25
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <processNotes+0x102>
    11de:	21 15       	cp	r18, r1
    11e0:	31 05       	cpc	r19, r1
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <processNotes+0x102>
										buttonStringPatterns[3][i] != 0)
				{
					data->blueOn =  1;
    11e4:	13 83       	std	Z+3, r17	; 0x03
					buttonPressed = 1;
					}				
				if (maskedStringState == buttonStringPatterns[4][i] && 
    11e6:	eb 01       	movw	r28, r22
    11e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	19 f4       	brne	.+6      	; 0x11f8 <processNotes+0x114>
    11f2:	23 2b       	or	r18, r19
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <processNotes+0x114>
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
    11f6:	14 83       	std	Z+4, r17	; 0x04
					buttonPressed = 1;									
				}
					// Now deal with strumming
				if ((buttonPressed = 1) && (strumPressed == 1))
    11f8:	01 30       	cpi	r16, 0x01	; 1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <processNotes+0x11a>
    11fc:	45 2f       	mov	r20, r21
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	e8 0e       	add	r14, r24
    1204:	f9 1e       	adc	r15, r25
    1206:	5f 5f       	subi	r21, 0xFF	; 255
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	6e 5f       	subi	r22, 0xFE	; 254
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
/*	if (stringState[0] & 1)
	{
		data->downOn = 1;
	}
*/
	for (int i = 0; i < NUMBER_OF_STRINGS; i++)
    120e:	56 30       	cpi	r21, 0x06	; 6
    1210:	09 f0       	breq	.+2      	; 0x1214 <processNotes+0x130>
    1212:	7a cf       	rjmp	.-268    	; 0x1108 <processNotes+0x24>
				}
			}
	}

	//Now set the strum buttons properly, so we can have both up and down if we're in this mode
	if ((strumOn >= 0) && (strumOn < (NUMBER_OF_STRINGS / 2)))
    1214:	43 30       	cpi	r20, 0x03	; 3
    1216:	18 f4       	brcc	.+6      	; 0x121e <processNotes+0x13a>
	{
		data->downOn = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	86 83       	std	Z+6, r24	; 0x06
    121c:	08 c0       	rjmp	.+16     	; 0x122e <processNotes+0x14a>
	}
	else if ((strumOn >= (NUMBER_OF_STRINGS / 2)) && (strumOn < NUMBER_OF_STRINGS ) && (data->downOn != 1))
    121e:	43 50       	subi	r20, 0x03	; 3
    1220:	43 30       	cpi	r20, 0x03	; 3
    1222:	28 f4       	brcc	.+10     	; 0x122e <processNotes+0x14a>
    1224:	86 81       	ldd	r24, Z+6	; 0x06
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	11 f0       	breq	.+4      	; 0x122e <processNotes+0x14a>
	{
		data->upOn = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	85 83       	std	Z+5, r24	; 0x05
	}

	return;
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	08 95       	ret

0000123c <processFrets>:

void processFrets(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	fc 01       	movw	r30, r24
    1250:	5b 01       	movw	r10, r22
    1252:	d8 01       	movw	r26, r16
    1254:	89 01       	movw	r16, r18
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
		    	{
		        	data->greenOn = 1;
    125a:	ff 24       	eor	r15, r15
    125c:	f3 94       	inc	r15
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
		      triedGreen[guitarString] = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	c8 2e       	mov	r12, r24
    1262:	d1 2c       	mov	r13, r1
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
	{
		//First, we'll see if we're pressing anything at all (ignores strumming)
		if (stringState[guitarString] > 1)
    1264:	e5 01       	movw	r28, r10
    1266:	88 81       	ld	r24, Y
    1268:	99 81       	ldd	r25, Y+1	; 0x01
    126a:	02 97       	sbiw	r24, 0x02	; 2
    126c:	1c f0       	brlt	.+6      	; 0x1274 <processFrets+0x38>
			data->numberOfStringsPressed++;
    126e:	81 85       	ldd	r24, Z+9	; 0x09
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	81 87       	std	Z+9, r24	; 0x09

		// find the proper value by masking the stringState variable for each fret
		char orange = (stringState[guitarString] & (1<<5));
    1274:	e5 01       	movw	r28, r10
    1276:	88 81       	ld	r24, Y
		char blue   = (stringState[guitarString] & (1<<4));
    1278:	98 2f       	mov	r25, r24
    127a:	90 71       	andi	r25, 0x10	; 16
		char yellow = (stringState[guitarString] & (1<<3));
    127c:	28 2f       	mov	r18, r24
    127e:	28 70       	andi	r18, 0x08	; 8
		char red    = (stringState[guitarString] & (1<<2));
    1280:	38 2f       	mov	r19, r24
    1282:	34 70       	andi	r19, 0x04	; 4
		char green  = (stringState[guitarString] & (1<<1));
    1284:	48 2f       	mov	r20, r24
    1286:	42 70       	andi	r20, 0x02	; 2
		if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    1288:	85 ff       	sbrs	r24, 5
    128a:	07 c0       	rjmp	.+14     	; 0x129a <processFrets+0x5e>
    128c:	99 23       	and	r25, r25
    128e:	71 f0       	breq	.+28     	; 0x12ac <processFrets+0x70>
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	88 23       	and	r24, r24
    1294:	21 f4       	brne	.+8      	; 0x129e <processFrets+0x62>
		{    
		    data->orangeOn = 1;
    1296:	f4 82       	std	Z+4, r15	; 0x04
    1298:	40 c0       	rjmp	.+128    	; 0x131a <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    129a:	99 23       	and	r25, r25
    129c:	39 f0       	breq	.+14     	; 0x12ac <processFrets+0x70>
    129e:	22 23       	and	r18, r18
    12a0:	71 f0       	breq	.+28     	; 0x12be <processFrets+0x82>
    12a2:	83 81       	ldd	r24, Z+3	; 0x03
    12a4:	88 23       	and	r24, r24
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <processFrets+0x74>
		{
		    data->blueOn = 1;
    12a8:	f3 82       	std	Z+3, r15	; 0x03
    12aa:	37 c0       	rjmp	.+110    	; 0x131a <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    12ac:	22 23       	and	r18, r18
    12ae:	39 f0       	breq	.+14     	; 0x12be <processFrets+0x82>
    12b0:	33 23       	and	r19, r19
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <processFrets+0x94>
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	88 23       	and	r24, r24
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <processFrets+0x86>
		{
		    data->yellowOn = 1;
    12ba:	f2 82       	std	Z+2, r15	; 0x02
    12bc:	2e c0       	rjmp	.+92     	; 0x131a <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if ((red != 0) && (green != 0) && (data->redOn == 0))
    12be:	33 23       	and	r19, r19
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <processFrets+0x94>
    12c2:	44 23       	and	r20, r20
    12c4:	51 f1       	breq	.+84     	; 0x131a <processFrets+0xde>
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	88 23       	and	r24, r24
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <processFrets+0x98>
		{
		    data->redOn = 1;
    12cc:	f1 82       	std	Z+1, r15	; 0x01
    12ce:	25 c0       	rjmp	.+74     	; 0x131a <processFrets+0xde>
		    triedGreen[guitarString] = 0;
		}
		else if (green != 0)
    12d0:	44 23       	and	r20, r20
    12d2:	19 f1       	breq	.+70     	; 0x131a <processFrets+0xde>
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    12d4:	8d 91       	ld	r24, X+
    12d6:	9c 91       	ld	r25, X
    12d8:	11 97       	sbiw	r26, 0x01	; 1
    12da:	89 2b       	or	r24, r25
    12dc:	59 f4       	brne	.+22     	; 0x12f4 <processFrets+0xb8>
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
    12de:	80 91 84 00 	lds	r24, 0x0084
    12e2:	90 91 85 00 	lds	r25, 0x0085
    12e6:	e8 01       	movw	r28, r16
    12e8:	99 83       	std	Y+1, r25	; 0x01
    12ea:	88 83       	st	Y, r24
		      triedGreen[guitarString] = 1;
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	dc 92       	st	X, r13
    12f0:	ce 92       	st	-X, r12
    12f2:	16 c0       	rjmp	.+44     	; 0x1320 <processFrets+0xe4>
		    }
		    else //triedGreen == true
		    {
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
    12f4:	20 91 84 00 	lds	r18, 0x0084
    12f8:	30 91 85 00 	lds	r19, 0x0085
    12fc:	e8 01       	movw	r28, r16
    12fe:	48 81       	ld	r20, Y
    1300:	59 81       	ldd	r21, Y+1	; 0x01
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	61 f4       	brne	.+24     	; 0x1320 <processFrets+0xe4>
    1308:	21 50       	subi	r18, 0x01	; 1
    130a:	30 40       	sbci	r19, 0x00	; 0
    130c:	24 1b       	sub	r18, r20
    130e:	35 0b       	sbc	r19, r21
    1310:	24 36       	cpi	r18, 0x64	; 100
    1312:	31 05       	cpc	r19, r1
    1314:	28 f0       	brcs	.+10     	; 0x1320 <processFrets+0xe4>
		    	{
		        	data->greenOn = 1;
    1316:	f0 82       	st	Z, r15
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <processFrets+0xe4>
		    	}
		    }
		}
	    else  //no buttons pressed
	    {
	        triedGreen[guitarString] = 0;
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	1c 92       	st	X, r1
    131e:	1e 92       	st	-X, r1
		the strum has a direction, so if you strum the
		top 3 strings, you strum down, and if you strum
		the bottom 3 strings, you're strumming up.
	*/
		// Check for strumming
		if (stringState[guitarString] & 1)
    1320:	e5 01       	movw	r28, r10
    1322:	88 81       	ld	r24, Y
    1324:	80 ff       	sbrs	r24, 0
    1326:	08 c0       	rjmp	.+16     	; 0x1338 <processFrets+0xfc>
		{
			if (guitarString < (NUMBER_OF_STRINGS / 2))
    1328:	63 30       	cpi	r22, 0x03	; 3
    132a:	71 05       	cpc	r23, r1
    132c:	1c f4       	brge	.+6      	; 0x1334 <processFrets+0xf8>
			{
				data->downOn = 1;
    132e:	f6 82       	std	Z+6, r15	; 0x06
				data->upOn   = 0;
    1330:	15 82       	std	Z+5, r1	; 0x05
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <processFrets+0xfc>
			}
			else
			{
				data->upOn   = 1;
    1334:	f5 82       	std	Z+5, r15	; 0x05
				data->downOn = 0;
    1336:	16 82       	std	Z+6, r1	; 0x06
		you don't want that to register as a green button press.  So we do some
		timing on that one, so when you press just green, it starts counting
		instead of turing greenOn on, so if the red fret is turned on before it
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < NUMBER_OF_STRINGS; guitarString++)
    1338:	6f 5f       	subi	r22, 0xFF	; 255
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a8 0e       	add	r10, r24
    1342:	b9 1e       	adc	r11, r25
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	0e 5f       	subi	r16, 0xFE	; 254
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	66 30       	cpi	r22, 0x06	; 6
    134c:	71 05       	cpc	r23, r1
    134e:	09 f0       	breq	.+2      	; 0x1352 <processFrets+0x116>
    1350:	89 cf       	rjmp	.-238    	; 0x1264 <processFrets+0x28>
	}	// end of for loop

	// Code for fixing some issues with gap chords (green/yellow, red/blue, etc.)
	// If we're not pressing all the strings, make sure that gap chords are only showing
	// when we press all strings
	if (data->numberOfStringsPressed < NUMBER_OF_STRINGS)
    1352:	81 85       	ldd	r24, Z+9	; 0x09
    1354:	86 30       	cpi	r24, 0x06	; 6
    1356:	48 f5       	brcc	.+82     	; 0x13aa <processFrets+0x16e>
	{
		if(data->blueOn   &&
    1358:	83 81       	ldd	r24, Z+3	; 0x03
    135a:	88 23       	and	r24, r24
    135c:	59 f0       	breq	.+22     	; 0x1374 <processFrets+0x138>
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	88 23       	and	r24, r24
    1362:	41 f0       	breq	.+16     	; 0x1374 <processFrets+0x138>
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	88 23       	and	r24, r24
    1368:	29 f0       	breq	.+10     	; 0x1374 <processFrets+0x138>
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	11 f0       	breq	.+4      	; 0x1374 <processFrets+0x138>
		   data->yellowOn &&
		   data->redOn    &&
		   data->greenOn)
		{
		   	data->yellowOn = 0;
    1370:	12 82       	std	Z+2, r1	; 0x02
			data->greenOn  = 0;
    1372:	10 82       	st	Z, r1
		}

		if(data->orangeOn  &&
    1374:	84 81       	ldd	r24, Z+4	; 0x04
    1376:	88 23       	and	r24, r24
    1378:	31 f0       	breq	.+12     	; 0x1386 <processFrets+0x14a>
    137a:	83 81       	ldd	r24, Z+3	; 0x03
    137c:	88 23       	and	r24, r24
    137e:	19 f0       	breq	.+6      	; 0x1386 <processFrets+0x14a>
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	81 11       	cpse	r24, r1
		   data->blueOn   &&
		   data->yellowOn)
		   {data->blueOn = 0;}
    1384:	13 82       	std	Z+3, r1	; 0x03
		if(data->blueOn  &&
    1386:	83 81       	ldd	r24, Z+3	; 0x03
    1388:	88 23       	and	r24, r24
    138a:	31 f0       	breq	.+12     	; 0x1398 <processFrets+0x15c>
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	88 23       	and	r24, r24
    1390:	19 f0       	breq	.+6      	; 0x1398 <processFrets+0x15c>
    1392:	81 81       	ldd	r24, Z+1	; 0x01
    1394:	81 11       	cpse	r24, r1
		   data->yellowOn   &&
		   data->redOn)
		   {data->yellowOn = 0;}
    1396:	12 82       	std	Z+2, r1	; 0x02
		if(data->yellowOn  &&
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	88 23       	and	r24, r24
    139c:	31 f0       	breq	.+12     	; 0x13aa <processFrets+0x16e>
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <processFrets+0x16e>
    13a4:	80 81       	ld	r24, Z
    13a6:	81 11       	cpse	r24, r1
		   data->redOn   &&
		   data->greenOn)
		   {data->redOn = 0;}
    13a8:	11 82       	std	Z+1, r1	; 0x01

	}

	return;
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	08 95       	ret

000013be <processStringState>:

void processStringState(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], char controllerMode, 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
	if (controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    13c6:	24 30       	cpi	r18, 0x04	; 4
    13c8:	19 f4       	brne	.+6      	; 0x13d0 <processStringState+0x12>
		processChords(data, stringState, buttonStringPatterns);
    13ca:	0e 94 c5 05 	call	0xb8a	; 0xb8a <processChords>
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <processStringState+0x24>

	else if (controllerMode == NOTES) // We're playing with notes
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	19 f4       	brne	.+6      	; 0x13da <processStringState+0x1c>
		processNotes(data, stringState, buttonStringPatterns);
    13d4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <processNotes>
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <processStringState+0x24>
	
	else // We're playing with frets
		processFrets(data, stringState,	buttonStringPatterns, greenTimers, triedGreen);
    13da:	98 01       	movw	r18, r16
    13dc:	87 01       	movw	r16, r14
    13de:	0e 94 1e 09 	call	0x123c	; 0x123c <processFrets>

	return;	
}
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <displayTransitionState>:

// This simple function takes in the controller mode and sets the
//  data struct to certain patterns to give the user feedback
//  as to what state is being pressed
void displayTransitionState(dataForController* data, int controllerMode)
{
    13ec:	fc 01       	movw	r30, r24
	if (controllerMode == FRETS_TO_NOTES)
    13ee:	61 30       	cpi	r22, 0x01	; 1
    13f0:	71 05       	cpc	r23, r1
    13f2:	21 f4       	brne	.+8      	; 0x13fc <displayTransitionState+0x10>
	{
		data->blueOn = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	83 83       	std	Z+3, r24	; 0x03
		data->yellowOn = 1;
    13f8:	82 83       	std	Z+2, r24	; 0x02
    13fa:	08 95       	ret
	}
	else if (controllerMode == NOTES_TO_CHORDS)
    13fc:	63 30       	cpi	r22, 0x03	; 3
    13fe:	71 05       	cpc	r23, r1
    1400:	21 f4       	brne	.+8      	; 0x140a <displayTransitionState+0x1e>
	{
		data->blueOn = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	83 83       	std	Z+3, r24	; 0x03
		data->orangeOn = 1;
    1406:	84 83       	std	Z+4, r24	; 0x04
    1408:	08 95       	ret
	}
	else if (controllerMode == CHORDS_TO_FRETS)
    140a:	65 30       	cpi	r22, 0x05	; 5
    140c:	71 05       	cpc	r23, r1
    140e:	19 f4       	brne	.+6      	; 0x1416 <displayTransitionState+0x2a>
	{
		data->yellowOn = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	82 83       	std	Z+2, r24	; 0x02
		data->orangeOn = 1;
    1414:	84 83       	std	Z+4, r24	; 0x04
    1416:	08 95       	ret

00001418 <configSetButtonData>:
/* This function sets up the data struct when we're in config mode so that it shows
 *  the user which colors are currently being programmed.
 */
void configSetButtonData(dataForController* data, int* buttonToAssign, int buttonStringPatterns[][6], 
						int stringState[], char controllerMode, char* plusLock, char* previousPlusOn, int* debounceTimer)
{
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	fc 01       	movw	r30, r24
    142c:	db 01       	movw	r26, r22
    142e:	b9 01       	movw	r22, r18
    1430:	95 01       	movw	r18, r10
	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	19 f4       	brne	.+6      	; 0x1442 <configSetButtonData+0x2a>
		data->greenOn = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 83       	st	Z, r24
    1440:	34 c0       	rjmp	.+104    	; 0x14aa <configSetButtonData+0x92>
	else if(*buttonToAssign == 1)
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	11 f4       	brne	.+4      	; 0x144c <configSetButtonData+0x34>
		data->redOn = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	15 c0       	rjmp	.+42     	; 0x1476 <configSetButtonData+0x5e>
	else if(*buttonToAssign == 2)
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	11 f4       	brne	.+4      	; 0x1456 <configSetButtonData+0x3e>
		data->yellowOn = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	23 c0       	rjmp	.+70     	; 0x149c <configSetButtonData+0x84>
	else if(*buttonToAssign == 3)
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	11 f4       	brne	.+4      	; 0x1460 <configSetButtonData+0x48>
		data->blueOn = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	24 c0       	rjmp	.+72     	; 0x14a8 <configSetButtonData+0x90>
	else if(*buttonToAssign == 4)
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	91 05       	cpc	r25, r1
    1464:	19 f4       	brne	.+6      	; 0x146c <configSetButtonData+0x54>
		data->orangeOn = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	84 83       	std	Z+4, r24	; 0x04
    146a:	1f c0       	rjmp	.+62     	; 0x14aa <configSetButtonData+0x92>
	else if(*buttonToAssign == 5)
    146c:	85 30       	cpi	r24, 0x05	; 5
    146e:	91 05       	cpc	r25, r1
    1470:	21 f4       	brne	.+8      	; 0x147a <configSetButtonData+0x62>
	{
		data->greenOn = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 83       	st	Z, r24
		data->redOn = 1;
    1476:	81 83       	std	Z+1, r24	; 0x01
    1478:	18 c0       	rjmp	.+48     	; 0x14aa <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 6)
    147a:	86 30       	cpi	r24, 0x06	; 6
    147c:	91 05       	cpc	r25, r1
    147e:	19 f4       	brne	.+6      	; 0x1486 <configSetButtonData+0x6e>
	{
		data->redOn = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	81 83       	std	Z+1, r24	; 0x01
    1484:	0b c0       	rjmp	.+22     	; 0x149c <configSetButtonData+0x84>
		data->yellowOn = 1;
	}
	else if(*buttonToAssign == 7)
    1486:	87 30       	cpi	r24, 0x07	; 7
    1488:	91 05       	cpc	r25, r1
    148a:	19 f4       	brne	.+6      	; 0x1492 <configSetButtonData+0x7a>
	{
		data->yellowOn = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	82 83       	std	Z+2, r24	; 0x02
    1490:	0b c0       	rjmp	.+22     	; 0x14a8 <configSetButtonData+0x90>
		data->blueOn = 1;
	}
	else if(*buttonToAssign == 8)
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	91 05       	cpc	r25, r1
    1496:	21 f4       	brne	.+8      	; 0x14a0 <configSetButtonData+0x88>
	{
		data->greenOn = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 83       	st	Z, r24
		data->yellowOn = 1;
    149c:	82 83       	std	Z+2, r24	; 0x02
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 9)
    14a0:	09 97       	sbiw	r24, 0x09	; 9
    14a2:	19 f4       	brne	.+6      	; 0x14aa <configSetButtonData+0x92>
	{
		data->redOn = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	81 83       	std	Z+1, r24	; 0x01
		data->blueOn = 1;
    14a8:	83 83       	std	Z+3, r24	; 0x03
	}



	// Code to debounce our plus button, the current state of plusOn to it's recent history
	if (data->plusOn != 0)  // So we're pressing plus
    14aa:	87 81       	ldd	r24, Z+7	; 0x07
    14ac:	88 23       	and	r24, r24
    14ae:	09 f1       	breq	.+66     	; 0x14f2 <configSetButtonData+0xda>
	{ 
		if (*previousPlusOn == 0)  // If we weren't pressing plus last time through the main loop
    14b0:	e6 01       	movw	r28, r12
    14b2:	88 81       	ld	r24, Y
    14b4:	88 23       	and	r24, r24
    14b6:	59 f4       	brne	.+22     	; 0x14ce <configSetButtonData+0xb6>
		{ 
			*debounceTimer = TCNT1;  // Set up a timer
    14b8:	80 91 84 00 	lds	r24, 0x0084
    14bc:	90 91 85 00 	lds	r25, 0x0085
    14c0:	e9 01       	movw	r28, r18
    14c2:	99 83       	std	Y+1, r25	; 0x01
    14c4:	88 83       	st	Y, r24
			*previousPlusOn = 1;     // remember plus was pressed for the next iteration
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	e6 01       	movw	r28, r12
    14ca:	88 83       	st	Y, r24
    14cc:	10 c0       	rjmp	.+32     	; 0x14ee <configSetButtonData+0xd6>
			data->plusOn = 0;        // but for now, consider plus not pressed.
		}
		else if ( (TCNT1 - *debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - *debounceTimer >= 0))
    14ce:	80 91 84 00 	lds	r24, 0x0084
    14d2:	90 91 85 00 	lds	r25, 0x0085
    14d6:	e9 01       	movw	r28, r18
    14d8:	28 81       	ld	r18, Y
    14da:	39 81       	ldd	r19, Y+1	; 0x01
    14dc:	82 1b       	sub	r24, r18
    14de:	93 0b       	sbc	r25, r19
    14e0:	88 5e       	subi	r24, 0xE8	; 232
    14e2:	93 40       	sbci	r25, 0x03	; 3
    14e4:	40 f4       	brcc	.+16     	; 0x14f6 <configSetButtonData+0xde>
    14e6:	80 91 84 00 	lds	r24, 0x0084
    14ea:	90 91 85 00 	lds	r25, 0x0085
		{
			data->plusOn = 0;  // This keeps telling us plus wasn't pressed until it's been held long enough
    14ee:	17 82       	std	Z+7, r1	; 0x07
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <configSetButtonData+0xde>
		}		
	}
	else
	{
		*previousPlusOn = 0; // and if plus wasn't pressed, remember that for next time
    14f2:	e6 01       	movw	r28, r12
    14f4:	18 82       	st	Y, r1
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((data->plusOn) && (*plusLock == 0))
    14f6:	87 81       	ldd	r24, Z+7	; 0x07
    14f8:	88 23       	and	r24, r24
    14fa:	09 f4       	brne	.+2      	; 0x14fe <configSetButtonData+0xe6>
    14fc:	f7 c0       	rjmp	.+494    	; 0x16ec <configSetButtonData+0x2d4>
    14fe:	f7 01       	movw	r30, r14
    1500:	80 81       	ld	r24, Z
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <configSetButtonData+0xf0>
    1506:	f4 c0       	rjmp	.+488    	; 0x16f0 <configSetButtonData+0x2d8>
	{

		if (controllerMode == CHORDS) 
    1508:	04 30       	cpi	r16, 0x04	; 4
    150a:	09 f0       	breq	.+2      	; 0x150e <configSetButtonData+0xf6>
    150c:	60 c0       	rjmp	.+192    	; 0x15ce <configSetButtonData+0x1b6>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
    150e:	8d 91       	ld	r24, X+
    1510:	9c 91       	ld	r25, X
    1512:	11 97       	sbiw	r26, 0x01	; 1
    1514:	fc 01       	movw	r30, r24
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	e8 0f       	add	r30, r24
    151c:	f9 1f       	adc	r31, r25
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	e4 0f       	add	r30, r20
    1528:	f5 1f       	adc	r31, r21
    152a:	11 82       	std	Z+1, r1	; 0x01
    152c:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
    152e:	8d 91       	ld	r24, X+
    1530:	9c 91       	ld	r25, X
    1532:	11 97       	sbiw	r26, 0x01	; 1
    1534:	fc 01       	movw	r30, r24
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e4 0f       	add	r30, r20
    1548:	f5 1f       	adc	r31, r21
    154a:	13 82       	std	Z+3, r1	; 0x03
    154c:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	fc 01       	movw	r30, r24
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e8 0f       	add	r30, r24
    155c:	f9 1f       	adc	r31, r25
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e4 0f       	add	r30, r20
    1568:	f5 1f       	adc	r31, r21
    156a:	15 82       	std	Z+5, r1	; 0x05
    156c:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	fc 01       	movw	r30, r24
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	e8 0f       	add	r30, r24
    157c:	f9 1f       	adc	r31, r25
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	e4 0f       	add	r30, r20
    1588:	f5 1f       	adc	r31, r21
    158a:	17 82       	std	Z+7, r1	; 0x07
    158c:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
    158e:	8d 91       	ld	r24, X+
    1590:	9c 91       	ld	r25, X
    1592:	11 97       	sbiw	r26, 0x01	; 1
    1594:	fc 01       	movw	r30, r24
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e8 0f       	add	r30, r24
    159c:	f9 1f       	adc	r31, r25
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	e4 0f       	add	r30, r20
    15a8:	f5 1f       	adc	r31, r21
    15aa:	11 86       	std	Z+9, r1	; 0x09
    15ac:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	fc 01       	movw	r30, r24
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	e8 0f       	add	r30, r24
    15bc:	f9 1f       	adc	r31, r25
    15be:	ee 0f       	add	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	e4 0f       	add	r30, r20
    15c8:	f5 1f       	adc	r31, r21
    15ca:	13 86       	std	Z+11, r1	; 0x0b
    15cc:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
    15ce:	8d 91       	ld	r24, X+
    15d0:	9c 91       	ld	r25, X
    15d2:	11 97       	sbiw	r26, 0x01	; 1
    15d4:	fc 01       	movw	r30, r24
    15d6:	ee 0f       	add	r30, r30
    15d8:	ff 1f       	adc	r31, r31
    15da:	e8 0f       	add	r30, r24
    15dc:	f9 1f       	adc	r31, r25
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	e4 0f       	add	r30, r20
    15e8:	f5 1f       	adc	r31, r21
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	eb 01       	movw	r28, r22
    15f0:	28 81       	ld	r18, Y
    15f2:	39 81       	ldd	r19, Y+1	; 0x01
    15f4:	82 2b       	or	r24, r18
    15f6:	93 2b       	or	r25, r19
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
    15fc:	8d 91       	ld	r24, X+
    15fe:	9c 91       	ld	r25, X
    1600:	11 97       	sbiw	r26, 0x01	; 1
    1602:	fc 01       	movw	r30, r24
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	e4 0f       	add	r30, r20
    1616:	f5 1f       	adc	r31, r21
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	82 2b       	or	r24, r18
    1622:	93 2b       	or	r25, r19
    1624:	93 83       	std	Z+3, r25	; 0x03
    1626:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	fc 01       	movw	r30, r24
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	e8 0f       	add	r30, r24
    1636:	f9 1f       	adc	r31, r25
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	e4 0f       	add	r30, r20
    1642:	f5 1f       	adc	r31, r21
    1644:	84 81       	ldd	r24, Z+4	; 0x04
    1646:	95 81       	ldd	r25, Z+5	; 0x05
    1648:	2c 81       	ldd	r18, Y+4	; 0x04
    164a:	3d 81       	ldd	r19, Y+5	; 0x05
    164c:	82 2b       	or	r24, r18
    164e:	93 2b       	or	r25, r19
    1650:	95 83       	std	Z+5, r25	; 0x05
    1652:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	11 97       	sbiw	r26, 0x01	; 1
    165a:	fc 01       	movw	r30, r24
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	e8 0f       	add	r30, r24
    1662:	f9 1f       	adc	r31, r25
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e4 0f       	add	r30, r20
    166e:	f5 1f       	adc	r31, r21
    1670:	86 81       	ldd	r24, Z+6	; 0x06
    1672:	97 81       	ldd	r25, Z+7	; 0x07
    1674:	2e 81       	ldd	r18, Y+6	; 0x06
    1676:	3f 81       	ldd	r19, Y+7	; 0x07
    1678:	82 2b       	or	r24, r18
    167a:	93 2b       	or	r25, r19
    167c:	97 83       	std	Z+7, r25	; 0x07
    167e:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
    1680:	8d 91       	ld	r24, X+
    1682:	9c 91       	ld	r25, X
    1684:	11 97       	sbiw	r26, 0x01	; 1
    1686:	fc 01       	movw	r30, r24
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	e8 0f       	add	r30, r24
    168e:	f9 1f       	adc	r31, r25
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e4 0f       	add	r30, r20
    169a:	f5 1f       	adc	r31, r21
    169c:	80 85       	ldd	r24, Z+8	; 0x08
    169e:	91 85       	ldd	r25, Z+9	; 0x09
    16a0:	28 85       	ldd	r18, Y+8	; 0x08
    16a2:	39 85       	ldd	r19, Y+9	; 0x09
    16a4:	82 2b       	or	r24, r18
    16a6:	93 2b       	or	r25, r19
    16a8:	91 87       	std	Z+9, r25	; 0x09
    16aa:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	fc 01       	movw	r30, r24
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	e4 0f       	add	r30, r20
    16c6:	f5 1f       	adc	r31, r21
    16c8:	82 85       	ldd	r24, Z+10	; 0x0a
    16ca:	93 85       	ldd	r25, Z+11	; 0x0b
    16cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    16d0:	82 2b       	or	r24, r18
    16d2:	93 2b       	or	r25, r19
    16d4:	93 87       	std	Z+11, r25	; 0x0b
    16d6:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;  // we set up a lock, so we don't assign all the buttons at once
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	f7 01       	movw	r30, r14
    16dc:	80 83       	st	Z, r24
		*buttonToAssign += 1;
    16de:	8d 91       	ld	r24, X+
    16e0:	9c 91       	ld	r25, X
    16e2:	11 97       	sbiw	r26, 0x01	; 1
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	8d 93       	st	X+, r24
    16e8:	9c 93       	st	X, r25
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <configSetButtonData+0x2d8>
	}
	else if(data->plusOn == 0)
	{
		*plusLock = 0;
    16ec:	e7 01       	movw	r28, r14
    16ee:	18 82       	st	Y, r1
	}
	return;
}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	08 95       	ret

00001704 <setPins>:
#include "guitarInitFunctions.h"

void setPins(void)
{
	// Set the fret pins as input pins, with internal resistor
	fret_ddr &= ~(1<<green_pin);        // input
    1704:	21 98       	cbi	0x04, 1	; 4
	fret_port |= (1<<green_pin);		//pull-up enabled	
    1706:	29 9a       	sbi	0x05, 1	; 5
	fret_ddr &= ~(1<<red_pin);
    1708:	22 98       	cbi	0x04, 2	; 4
	fret_port |= (1<<red_pin);
    170a:	2a 9a       	sbi	0x05, 2	; 5
	fret_ddr &= ~(1<<yellow_pin);
    170c:	23 98       	cbi	0x04, 3	; 4
	fret_port |= (1<<yellow_pin);
    170e:	2b 9a       	sbi	0x05, 3	; 5
	fret_ddr &= ~(1<<blue_pin);
    1710:	24 98       	cbi	0x04, 4	; 4
	fret_port |= (1<<blue_pin);
    1712:	2c 9a       	sbi	0x05, 4	; 5
	fret_ddr &= ~(1<<orange_pin);
    1714:	25 98       	cbi	0x04, 5	; 4
	fret_port |= (1<<orange_pin);
    1716:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	misc_ddr &= ~(1<<plus_pin);
    1718:	38 98       	cbi	0x07, 0	; 7
	misc_port |= (1<<plus_pin);
    171a:	40 9a       	sbi	0x08, 0	; 8
	misc_ddr &= ~(1<<minus_pin);
    171c:	39 98       	cbi	0x07, 1	; 7
	misc_port |= (1<<minus_pin);
    171e:	41 9a       	sbi	0x08, 1	; 8

	pick_ddr &= ~(1<<strum_pin);
    1720:	3a 98       	cbi	0x07, 2	; 7
	pick_port |= (1<<strum_pin);
    1722:	42 9a       	sbi	0x08, 2	; 8

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	string_1_ddr |= (1<<first_string);  //output
    1724:	57 9a       	sbi	0x0a, 7	; 10
	string_1_port |= (1<<first_string); // set high
    1726:	5f 9a       	sbi	0x0b, 7	; 11
	string_2_ddr |= (1<<second_string);  
    1728:	56 9a       	sbi	0x0a, 6	; 10
	string_2_port |= (1<<second_string);
    172a:	5e 9a       	sbi	0x0b, 6	; 11
	string_3_ddr |= (1<<third_string);  
    172c:	55 9a       	sbi	0x0a, 5	; 10
	string_3_port |= (1<<third_string);
    172e:	5d 9a       	sbi	0x0b, 5	; 11
	string_4_ddr |= (1<<fourth_string);  
    1730:	52 9a       	sbi	0x0a, 2	; 10
	string_4_port |= (1<<fourth_string);
    1732:	5a 9a       	sbi	0x0b, 2	; 11
	string_5_ddr |= (1<<fifth_string);  
    1734:	20 9a       	sbi	0x04, 0	; 4
	string_5_port |= (1<<fifth_string);
    1736:	28 9a       	sbi	0x05, 0	; 5
	string_6_ddr |= (1<<sixth_string);  
    1738:	3b 9a       	sbi	0x07, 3	; 7
	string_6_port |= (1<<sixth_string);
    173a:	43 9a       	sbi	0x08, 3	; 8
}
    173c:	08 95       	ret

0000173e <setTimer>:

void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
    173e:	e4 e6       	ldi	r30, 0x64	; 100
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
    1748:	e0 e8       	ldi	r30, 0x80	; 128
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 77       	andi	r24, 0x7F	; 127
    1750:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  //  to the pins on the chip. Otherwise, we might
    1752:	80 81       	ld	r24, Z
    1754:	8f 7b       	andi	r24, 0xBF	; 191
    1756:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  //  get signals coming out of some of the pins we might use
    1758:	80 81       	ld	r24, Z
    175a:	8f 7d       	andi	r24, 0xDF	; 223
    175c:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
    175e:	80 81       	ld	r24, Z
    1760:	8f 7e       	andi	r24, 0xEF	; 239
    1762:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
    1764:	80 81       	ld	r24, Z
    1766:	8d 7f       	andi	r24, 0xFD	; 253
    1768:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
    176a:	80 81       	ld	r24, Z
    176c:	8e 7f       	andi	r24, 0xFE	; 254
    176e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
    1770:	e1 e8       	ldi	r30, 0x81	; 129
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	87 7f       	andi	r24, 0xF7	; 247
    1778:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
    177a:	80 81       	ld	r24, Z
    177c:	8f 7e       	andi	r24, 0xEF	; 239
    177e:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
    1780:	80 81       	ld	r24, Z
    1782:	84 60       	ori	r24, 0x04	; 4
    1784:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
    1786:	80 81       	ld	r24, Z
    1788:	8d 7f       	andi	r24, 0xFD	; 253
    178a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
    178c:	80 81       	ld	r24, Z
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
    1792:	08 95       	ret

00001794 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    1794:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    1796:	f9 99       	sbic	0x1f, 1	; 31
    1798:	fe cf       	rjmp	.-4      	; 0x1796 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    179a:	32 bd       	out	0x22, r19	; 34
    179c:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    179e:	f8 9a       	sbi	0x1f, 0	; 31
    17a0:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    17a2:	08 95       	ret

000017a4 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    17a4:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    17a6:	f9 99       	sbic	0x1f, 1	; 31
    17a8:	fe cf       	rjmp	.-4      	; 0x17a6 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    17aa:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    17ac:	32 bd       	out	0x22, r19	; 34
    17ae:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    17b0:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	fa 9a       	sbi	0x1f, 2	; 31
    17b8:	f9 9a       	sbi	0x1f, 1	; 31
    17ba:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
    17bc:	08 95       	ret

000017be <readFrets>:
};

//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
int readFrets(int guitarString, volatile uint8_t *port)
{
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	fb 01       	movw	r30, r22
  	*port &= ~(1<<guitarString);  // Set the string LOW
    17ca:	90 81       	ld	r25, Z
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <readFrets+0x18>
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	8a 95       	dec	r24
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <readFrets+0x14>
    17da:	f2 2e       	mov	r15, r18
    17dc:	82 2f       	mov	r24, r18
    17de:	80 95       	com	r24
    17e0:	89 23       	and	r24, r25
    17e2:	80 83       	st	Z, r24
    17e4:	84 e1       	ldi	r24, 0x14	; 20
    17e6:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
    17e8:	00 00       	nop
			x--;
    17ea:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
    17ec:	2f ef       	ldi	r18, 0xFF	; 255
    17ee:	8f 3f       	cpi	r24, 0xFF	; 255
    17f0:	92 07       	cpc	r25, r18
    17f2:	d1 f7       	brne	.-12     	; 0x17e8 <readFrets+0x2a>

	// Then we have to delay for a while, since right after the switch, the pin values
	// jump around a bit
	doXnops(20);	
	// Read the values on the frets
  	int i = fret_pin;               
    17f4:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;
    17f6:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// More delay funcitonality... without these delays, there is some bouncing
    17f8:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// on the pins, so the read screws up.
    17fa:	83 b1       	in	r24, 0x03	; 3
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
    17fc:	81 fd       	sbrc	r24, 1
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <readFrets+0x48>
    1800:	02 e0       	ldi	r16, 0x02	; 2
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <readFrets+0x4c>
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
    180a:	82 fd       	sbrc	r24, 2
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <readFrets+0x56>
    180e:	c4 e0       	ldi	r28, 0x04	; 4
    1810:	d0 e0       	ldi	r29, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <readFrets+0x5a>
    1814:	c0 e0       	ldi	r28, 0x00	; 0
    1816:	d0 e0       	ldi	r29, 0x00	; 0
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
    1818:	83 fd       	sbrc	r24, 3
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <readFrets+0x64>
    181c:	a8 e0       	ldi	r26, 0x08	; 8
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <readFrets+0x68>
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
    1826:	84 fd       	sbrc	r24, 4
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <readFrets+0x72>
    182a:	60 e1       	ldi	r22, 0x10	; 16
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <readFrets+0x76>
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
    1834:	85 fd       	sbrc	r24, 5
    1836:	03 c0       	rjmp	.+6      	; 0x183e <readFrets+0x80>
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <readFrets+0x84>
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
    1842:	26 b1       	in	r18, 0x06	; 6
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	36 95       	lsr	r19
    1848:	27 95       	ror	r18
    184a:	36 95       	lsr	r19
    184c:	27 95       	ror	r18
    184e:	20 95       	com	r18
    1850:	30 95       	com	r19
    1852:	21 70       	andi	r18, 0x01	; 1
    1854:	30 70       	andi	r19, 0x00	; 0
    1856:	20 2b       	or	r18, r16
    1858:	31 2b       	or	r19, r17
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
    185a:	2c 2b       	or	r18, r28
    185c:	3d 2b       	or	r19, r29
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
    185e:	2a 2b       	or	r18, r26
    1860:	3b 2b       	or	r19, r27
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
    1862:	26 2b       	or	r18, r22
    1864:	37 2b       	or	r19, r23
	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
 	stringState |= ( (!(i & (1<<strum_pin))) << 0); //pick touching the string

	//Turn the string back HIGH and return
	*port |= (1<<guitarString); 
    1866:	80 81       	ld	r24, Z
    1868:	8f 29       	or	r24, r15
    186a:	80 83       	st	Z, r24
    186c:	24 2b       	or	r18, r20
    186e:	35 2b       	or	r19, r21
	return stringState;
}
    1870:	c9 01       	movw	r24, r18
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	08 95       	ret

0000187e <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{	
    187e:	2f 92       	push	r2
    1880:	3f 92       	push	r3
    1882:	4f 92       	push	r4
    1884:	5f 92       	push	r5
    1886:	6f 92       	push	r6
    1888:	7f 92       	push	r7
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	c7 54       	subi	r28, 0x47	; 71
    18a8:	d1 40       	sbci	r29, 0x01	; 1
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	// First, set up the guitar stuff - These functions are stored in guitarInitFunctions.h/.c
	setPins();
    18b4:	0e 94 82 0b 	call	0x1704	; 0x1704 <setPins>
	setTimer();	
    18b8:	0e 94 9f 0b 	call	0x173e	; 0x173e <setTimer>
 	
	// Now set up all the communication stuff - initialization routines
 	//  set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
 	startPS3Communication();
    18bc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <startPS3Communication>
 	startWiiCommunication();
    18c0:	0e 94 0b 18 	call	0x3016	; 0x3016 <startWiiCommunication>
    
	// Declaration of variables used in Main()
	int greenTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0}; //These give timing to properly read green buttons on each string.
    18c4:	8c e0       	ldi	r24, 0x0C	; 12
    18c6:	9e 01       	movw	r18, r28
    18c8:	2e 5e       	subi	r18, 0xEE	; 238
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	d9 01       	movw	r26, r18
    18ce:	e8 2f       	mov	r30, r24
    18d0:	1d 92       	st	X+, r1
    18d2:	ea 95       	dec	r30
    18d4:	e9 f7       	brne	.-6      	; 0x18d0 <main+0x52>
	int triedGreen[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};  // Also used for the green button timing thing
    18d6:	ae 01       	movw	r20, r28
    18d8:	42 5e       	subi	r20, 0xE2	; 226
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	da 01       	movw	r26, r20
    18de:	e8 2f       	mov	r30, r24
    18e0:	1d 92       	st	X+, r1
    18e2:	ea 95       	dec	r30
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <main+0x62>
	int stringState[6] = {0,0,0,0,0,0}; // This stores an int for each string,
    18e6:	fe 01       	movw	r30, r28
    18e8:	ba 96       	adiw	r30, 0x2a	; 42
    18ea:	df 01       	movw	r26, r30
    18ec:	98 2f       	mov	r25, r24
    18ee:	1d 92       	st	X+, r1
    18f0:	9a 95       	dec	r25
    18f2:	e9 f7       	brne	.-6      	; 0x18ee <main+0x70>
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS]; //This holds the button patterns the
																	 // controller compares the string presses
																	 // to in order to judge if a button is being
																	 // pressed. It's the size of all the chord combinations,
																	 // but in Note Mode, only the first 5 blocks get looked at. 
    int stringStateTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};
    18f4:	be 01       	movw	r22, r28
    18f6:	6e 5b       	subi	r22, 0xBE	; 190
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	db 01       	movw	r26, r22
    18fc:	1d 92       	st	X+, r1
    18fe:	8a 95       	dec	r24
    1900:	e9 f7       	brne	.-6      	; 0x18fc <main+0x7e>

	char configMode = 0; // Start in normal mode
	int buttonToAssign = 0; // declare some variables
    1902:	1c 82       	std	Y+4, r1	; 0x04
    1904:	1b 82       	std	Y+3, r1	; 0x03
	char plusLock = 0;
    1906:	19 82       	std	Y+1, r1	; 0x01
	char previousPlusOn = 0; // This is used as a lock so we don't program all the buttons at once
    1908:	1a 82       	std	Y+2, r1	; 0x02
	int debounceTimer = 0; // This is used as a global timer for debouncing buttons
    190a:	1e 82       	std	Y+6, r1	; 0x06
    190c:	1d 82       	std	Y+5, r1	; 0x05
		char homeOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
    190e:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
    1910:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
    1912:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
    1914:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
    1916:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
    1918:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
    191a:	1d 86       	std	Y+13, r1	; 0x0d
		data->plusOn   = 0;
    191c:	1e 86       	std	Y+14, r1	; 0x0e
		data->minusOn  = 0;
    191e:	1f 86       	std	Y+15, r1	; 0x0f
		data->numberOfStringsPressed = 0;
    1920:	18 8a       	std	Y+16, r1	; 0x10
		data->homeOn   = 0;
    1922:	19 8a       	std	Y+17, r1	; 0x11
    1924:	44 24       	eor	r4, r4
    1926:	55 24       	eor	r5, r5
        tempStringState[0] = readFrets(first_string, &string_1_port);
		tempStringState[1] = readFrets(second_string, &string_2_port);
		tempStringState[2] = readFrets(third_string, &string_3_port);
		tempStringState[3] = readFrets(fourth_string, &string_4_port);
		tempStringState[4] = readFrets(fifth_string, &string_5_port);
		tempStringState[5] = readFrets(sixth_string, &string_6_port);
    1928:	c0 5c       	subi	r28, 0xC0	; 192
    192a:	de 4f       	sbci	r29, 0xFE	; 254
    192c:	e8 83       	st	Y, r30
    192e:	c0 54       	subi	r28, 0x40	; 64
    1930:	d1 40       	sbci	r29, 0x01	; 1
    1932:	cf 5b       	subi	r28, 0xBF	; 191
    1934:	de 4f       	sbci	r29, 0xFE	; 254
    1936:	f8 83       	st	Y, r31
    1938:	c1 54       	subi	r28, 0x41	; 65
    193a:	d1 40       	sbci	r29, 0x01	; 1
    193c:	db 01       	movw	r26, r22
    193e:	ce 5b       	subi	r28, 0xBE	; 190
    1940:	de 4f       	sbci	r29, 0xFE	; 254
    1942:	68 83       	st	Y, r22
    1944:	c2 54       	subi	r28, 0x42	; 66
    1946:	d1 40       	sbci	r29, 0x01	; 1
    1948:	cd 5b       	subi	r28, 0xBD	; 189
    194a:	de 4f       	sbci	r29, 0xFE	; 254
    194c:	b8 83       	st	Y, r27
    194e:	c3 54       	subi	r28, 0x43	; 67
    1950:	d1 40       	sbci	r29, 0x01	; 1

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
    1952:	e6 e3       	ldi	r30, 0x36	; 54
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	ec 0f       	add	r30, r28
    1958:	fd 1f       	adc	r31, r29
    195a:	3e 96       	adiw	r30, 0x0e	; 14
    195c:	c2 5c       	subi	r28, 0xC2	; 194
    195e:	de 4f       	sbci	r29, 0xFE	; 254
    1960:	f9 83       	std	Y+1, r31	; 0x01
    1962:	e8 83       	st	Y, r30
    1964:	ce 53       	subi	r28, 0x3E	; 62
    1966:	d1 40       	sbci	r29, 0x01	; 1
	// First the defaults for Note Mode.  We're declaring our temporary storage
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    1968:	96 ec       	ldi	r25, 0xC6	; 198
    196a:	89 2e       	mov	r8, r25
    196c:	91 2c       	mov	r9, r1
    196e:	8c 0e       	add	r8, r28
    1970:	9d 1e       	adc	r9, r29

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
    1972:	8e e0       	ldi	r24, 0x0E	; 14
    1974:	28 2e       	mov	r2, r24
    1976:	31 2c       	mov	r3, r1
			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
    1978:	0e e4       	ldi	r16, 0x4E	; 78
    197a:	60 2e       	mov	r6, r16
    197c:	71 2c       	mov	r7, r1
    197e:	6c 0e       	add	r6, r28
    1980:	7d 1e       	adc	r7, r29
    1982:	cc 5b       	subi	r28, 0xBC	; 188
    1984:	de 4f       	sbci	r29, 0xFE	; 254
    1986:	28 83       	st	Y, r18
    1988:	c4 54       	subi	r28, 0x44	; 68
    198a:	d1 40       	sbci	r29, 0x01	; 1
    198c:	cb 5b       	subi	r28, 0xBB	; 187
    198e:	de 4f       	sbci	r29, 0xFE	; 254
    1990:	38 83       	st	Y, r19
    1992:	c5 54       	subi	r28, 0x45	; 69
    1994:	d1 40       	sbci	r29, 0x01	; 1
    1996:	ca 5b       	subi	r28, 0xBA	; 186
    1998:	de 4f       	sbci	r29, 0xFE	; 254
    199a:	48 83       	st	Y, r20
    199c:	c6 54       	subi	r28, 0x46	; 70
    199e:	d1 40       	sbci	r29, 0x01	; 1
    19a0:	c9 5b       	subi	r28, 0xB9	; 185
    19a2:	de 4f       	sbci	r29, 0xFE	; 254
    19a4:	58 83       	st	Y, r21
    19a6:	c7 54       	subi	r28, 0x47	; 71
    19a8:	d1 40       	sbci	r29, 0x01	; 1
 					 /* main event loop */
    while(1)
	{   
		// We first read all the strings for button hits and store them into
		//  our stringState array.  Strum processing is also handled here for now.
        tempStringState[0] = readFrets(first_string, &string_1_port);
    19aa:	87 e0       	ldi	r24, 0x07	; 7
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	6b e2       	ldi	r22, 0x2B	; 43
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    19b6:	9f ab       	std	Y+55, r25	; 0x37
    19b8:	8e ab       	std	Y+54, r24	; 0x36
		tempStringState[1] = readFrets(second_string, &string_2_port);
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	6b e2       	ldi	r22, 0x2B	; 43
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    19c6:	99 af       	std	Y+57, r25	; 0x39
    19c8:	88 af       	std	Y+56, r24	; 0x38
		tempStringState[2] = readFrets(third_string, &string_3_port);
    19ca:	85 e0       	ldi	r24, 0x05	; 5
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	6b e2       	ldi	r22, 0x2B	; 43
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    19d6:	9b af       	std	Y+59, r25	; 0x3b
    19d8:	8a af       	std	Y+58, r24	; 0x3a
		tempStringState[3] = readFrets(fourth_string, &string_4_port);
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	6b e2       	ldi	r22, 0x2B	; 43
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    19e6:	9d af       	std	Y+61, r25	; 0x3d
    19e8:	8c af       	std	Y+60, r24	; 0x3c
		tempStringState[4] = readFrets(fifth_string, &string_5_port);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	65 e2       	ldi	r22, 0x25	; 37
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    19f6:	9f af       	std	Y+63, r25	; 0x3f
    19f8:	8e af       	std	Y+62, r24	; 0x3e
		tempStringState[5] = readFrets(sixth_string, &string_6_port);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	68 e2       	ldi	r22, 0x28	; 40
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 df 0b 	call	0x17be	; 0x17be <readFrets>
    1a06:	22 96       	adiw	r28, 0x02	; 2
    1a08:	9f af       	std	Y+63, r25	; 0x3f
    1a0a:	8e af       	std	Y+62, r24	; 0x3e
    1a0c:	22 97       	sbiw	r28, 0x02	; 2
    1a0e:	9e 01       	movw	r18, r28
    1a10:	2a 5c       	subi	r18, 0xCA	; 202
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	c0 5c       	subi	r28, 0xC0	; 192
    1a16:	de 4f       	sbci	r29, 0xFE	; 254
    1a18:	88 81       	ld	r24, Y
    1a1a:	c0 54       	subi	r28, 0x40	; 64
    1a1c:	d1 40       	sbci	r29, 0x01	; 1
    1a1e:	cf 5b       	subi	r28, 0xBF	; 191
    1a20:	de 4f       	sbci	r29, 0xFE	; 254
    1a22:	98 81       	ld	r25, Y
    1a24:	c1 54       	subi	r28, 0x41	; 65
    1a26:	d1 40       	sbci	r29, 0x01	; 1
    1a28:	bc 01       	movw	r22, r24
    1a2a:	ce 5b       	subi	r28, 0xBE	; 190
    1a2c:	de 4f       	sbci	r29, 0xFE	; 254
    1a2e:	88 81       	ld	r24, Y
    1a30:	c2 54       	subi	r28, 0x42	; 66
    1a32:	d1 40       	sbci	r29, 0x01	; 1
    1a34:	cd 5b       	subi	r28, 0xBD	; 189
    1a36:	de 4f       	sbci	r29, 0xFE	; 254
    1a38:	98 81       	ld	r25, Y
    1a3a:	c3 54       	subi	r28, 0x43	; 67
    1a3c:	d1 40       	sbci	r29, 0x01	; 1
    1a3e:	fc 01       	movw	r30, r24

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
        {
                if (tempStringState[i] == stringState[i])
    1a40:	d9 01       	movw	r26, r18
    1a42:	4d 91       	ld	r20, X+
    1a44:	5c 91       	ld	r21, X
    1a46:	db 01       	movw	r26, r22
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	48 17       	cp	r20, r24
    1a4e:	59 07       	cpc	r21, r25
    1a50:	19 f4       	brne	.+6      	; 0x1a58 <main+0x1da>
                        stringStateTimers[i] = 0;
    1a52:	11 82       	std	Z+1, r1	; 0x01
    1a54:	10 82       	st	Z, r1
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <main+0x1e4>
                else
                        stringStateTimers[i] += 1;
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
                // If we've seen enough cycles of a new string state, update stringState 
                if (stringStateTimers[i] >= STRING_DEBOUNCE_DELAY)
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	0a 97       	sbiw	r24, 0x0a	; 10
    1a68:	2c f0       	brlt	.+10     	; 0x1a74 <main+0x1f6>
                {
                        stringState[i] = tempStringState[i];
    1a6a:	db 01       	movw	r26, r22
    1a6c:	4d 93       	st	X+, r20
    1a6e:	5c 93       	st	X, r21
                        stringStateTimers[i] = 0;
    1a70:	11 82       	std	Z+1, r1	; 0x01
    1a72:	10 82       	st	Z, r1
    1a74:	2e 5f       	subi	r18, 0xFE	; 254
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	6e 5f       	subi	r22, 0xFE	; 254
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	32 96       	adiw	r30, 0x02	; 2
		tempStringState[4] = readFrets(fifth_string, &string_5_port);
		tempStringState[5] = readFrets(sixth_string, &string_6_port);

        // Debounce the strings by making sure what is being fretted
        // remains for a certain number of cycles through the main loop
        for (int i = 0; i <= 6; i++)
    1a7e:	c2 5c       	subi	r28, 0xC2	; 194
    1a80:	de 4f       	sbci	r29, 0xFE	; 254
    1a82:	88 81       	ld	r24, Y
    1a84:	99 81       	ldd	r25, Y+1	; 0x01
    1a86:	ce 53       	subi	r28, 0x3E	; 62
    1a88:	d1 40       	sbci	r29, 0x01	; 1
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	c1 f6       	brne	.-80     	; 0x1a40 <main+0x1c2>
		char homeOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
    1a90:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
    1a92:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
    1a94:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
    1a96:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
    1a98:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
    1a9a:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
    1a9c:	1d 86       	std	Y+13, r1	; 0x0d
		data->plusOn   = 0;
		data->minusOn  = 0;
		data->numberOfStringsPressed = 0;
    1a9e:	18 8a       	std	Y+16, r1	; 0x10
		data->homeOn   = 0;
    1aa0:	19 8a       	std	Y+17, r1	; 0x11

// This function just reads our plus and minus buttons and sets the data struct accordingly
inline void readOtherButtons(dataForController* data)
{
	// read our plus and minus buttons
	int i = misc_pin; // check for plus and minus
    1aa2:	86 b1       	in	r24, 0x06	; 6
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
	data->plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing it drops it low
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	28 27       	eor	r18, r24
    1aac:	39 27       	eor	r19, r25
    1aae:	21 70       	andi	r18, 0x01	; 1
    1ab0:	2e 87       	std	Y+14, r18	; 0x0e
	data->minusOn = !(i & (1<<minus_pin));
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	a1 e0       	ldi	r26, 0x01	; 1
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	8a 27       	eor	r24, r26
    1abc:	9b 27       	eor	r25, r27
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	8f 87       	std	Y+15, r24	; 0x0f
		return 0;
}

inline int testForResetButtonPatterns(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1ac2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ac4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ac6:	80 97       	sbiw	r24, 0x20	; 32
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <main+0x24e>
    1aca:	e7 c0       	rjmp	.+462    	; 0x1c9a <main+0x41c>
    1acc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ace:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ad0:	89 2b       	or	r24, r25
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <main+0x258>
    1ad4:	e2 c0       	rjmp	.+452    	; 0x1c9a <main+0x41c>
    1ad6:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ad8:	9f a5       	ldd	r25, Y+47	; 0x2f
    1ada:	80 97       	sbiw	r24, 0x20	; 32
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <main+0x262>
    1ade:	dd c0       	rjmp	.+442    	; 0x1c9a <main+0x41c>
    1ae0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae4:	89 2b       	or	r24, r25
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <main+0x26c>
    1ae8:	d8 c0       	rjmp	.+432    	; 0x1c9a <main+0x41c>
    1aea:	8a a9       	ldd	r24, Y+50	; 0x32
    1aec:	9b a9       	ldd	r25, Y+51	; 0x33
    1aee:	80 97       	sbiw	r24, 0x20	; 32
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <main+0x276>
    1af2:	d3 c0       	rjmp	.+422    	; 0x1c9a <main+0x41c>
    1af4:	8c a9       	ldd	r24, Y+52	; 0x34
    1af6:	9d a9       	ldd	r25, Y+53	; 0x35
    1af8:	89 2b       	or	r24, r25
    1afa:	09 f0       	breq	.+2      	; 0x1afe <main+0x280>
    1afc:	ce c0       	rjmp	.+412    	; 0x1c9a <main+0x41c>
	// First the defaults for Note Mode.  We're declaring our temporary storage
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    1afe:	f4 01       	movw	r30, r8
    1b00:	11 82       	std	Z+1, r1	; 0x01
    1b02:	10 82       	st	Z, r1
    buttonStringPatterns[0][1] = 0b0001100; 
    1b04:	2c e0       	ldi	r18, 0x0C	; 12
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	33 83       	std	Z+3, r19	; 0x03
    1b0a:	22 83       	std	Z+2, r18	; 0x02
	buttonStringPatterns[0][2] = 0b0000000;	
    1b0c:	15 82       	std	Z+5, r1	; 0x05
    1b0e:	14 82       	std	Z+4, r1	; 0x04
	buttonStringPatterns[0][3] = 0b0000110;
    1b10:	06 e0       	ldi	r16, 0x06	; 6
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	17 83       	std	Z+7, r17	; 0x07
    1b16:	06 83       	std	Z+6, r16	; 0x06
	buttonStringPatterns[0][4] = 0b0000000;
    1b18:	11 86       	std	Z+9, r1	; 0x09
    1b1a:	10 86       	std	Z+8, r1	; 0x08
	buttonStringPatterns[0][5] = 0b0000010;
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	93 87       	std	Z+11, r25	; 0x0b
    1b22:	82 87       	std	Z+10, r24	; 0x0a

	buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
    1b24:	95 87       	std	Z+13, r25	; 0x0d
    1b26:	84 87       	std	Z+12, r24	; 0x0c
	buttonStringPatterns[1][1] = 0b0000000; 
    1b28:	17 86       	std	Z+15, r1	; 0x0f
    1b2a:	16 86       	std	Z+14, r1	; 0x0e
	buttonStringPatterns[1][2] = 0b0000001;
    1b2c:	b1 8b       	std	Z+17, r27	; 0x11
    1b2e:	a0 8b       	std	Z+16, r26	; 0x10
	buttonStringPatterns[1][3] = 0b0000000;
    1b30:	13 8a       	std	Z+19, r1	; 0x13
    1b32:	12 8a       	std	Z+18, r1	; 0x12
	buttonStringPatterns[1][4] = 0b0000001;
    1b34:	b5 8b       	std	Z+21, r27	; 0x15
    1b36:	a4 8b       	std	Z+20, r26	; 0x14
	buttonStringPatterns[1][5] = 0b0001100;
    1b38:	37 8b       	std	Z+23, r19	; 0x17
    1b3a:	26 8b       	std	Z+22, r18	; 0x16

	buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
    1b3c:	31 8f       	std	Z+25, r19	; 0x19
    1b3e:	20 8f       	std	Z+24, r18	; 0x18
	buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
    1b40:	13 8e       	std	Z+27, r1	; 0x1b
    1b42:	12 8e       	std	Z+26, r1	; 0x1a
	buttonStringPatterns[2][2] = 0b0000110;
    1b44:	15 8f       	std	Z+29, r17	; 0x1d
    1b46:	04 8f       	std	Z+28, r16	; 0x1c
	buttonStringPatterns[2][3] = 0b0000000;
    1b48:	17 8e       	std	Z+31, r1	; 0x1f
    1b4a:	16 8e       	std	Z+30, r1	; 0x1e
	buttonStringPatterns[2][4] = 0b0000010;
    1b4c:	91 a3       	std	Z+33, r25	; 0x21
    1b4e:	80 a3       	std	Z+32, r24	; 0x20
	buttonStringPatterns[2][5] = 0b0000000;
    1b50:	13 a2       	std	Z+35, r1	; 0x23
    1b52:	12 a2       	std	Z+34, r1	; 0x22
							  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    1b54:	15 a2       	std	Z+37, r1	; 0x25
    1b56:	14 a2       	std	Z+36, r1	; 0x24
	buttonStringPatterns[3][1] = 0b0000001; 
    1b58:	b7 a3       	std	Z+39, r27	; 0x27
    1b5a:	a6 a3       	std	Z+38, r26	; 0x26
	buttonStringPatterns[3][2] = 0b0001100;
    1b5c:	31 a7       	std	Z+41, r19	; 0x29
    1b5e:	20 a7       	std	Z+40, r18	; 0x28
	buttonStringPatterns[3][3] = 0b0000000;
    1b60:	13 a6       	std	Z+43, r1	; 0x2b
    1b62:	12 a6       	std	Z+42, r1	; 0x2a
	buttonStringPatterns[3][4] = 0b0001100;
    1b64:	35 a7       	std	Z+45, r19	; 0x2d
    1b66:	24 a7       	std	Z+44, r18	; 0x2c
	buttonStringPatterns[3][5] = 0b0000000;
    1b68:	17 a6       	std	Z+47, r1	; 0x2f
    1b6a:	16 a6       	std	Z+46, r1	; 0x2e

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - orange button
    1b6c:	11 aa       	std	Z+49, r1	; 0x31
    1b6e:	10 aa       	std	Z+48, r1	; 0x30
	buttonStringPatterns[4][1] = 0b0000110; 
    1b70:	13 ab       	std	Z+51, r17	; 0x33
    1b72:	02 ab       	std	Z+50, r16	; 0x32
	buttonStringPatterns[4][2] = 0b0000000;
    1b74:	15 aa       	std	Z+53, r1	; 0x35
    1b76:	14 aa       	std	Z+52, r1	; 0x34
	buttonStringPatterns[4][3] = 0b0000001;
    1b78:	b7 ab       	std	Z+55, r27	; 0x37
    1b7a:	a6 ab       	std	Z+54, r26	; 0x36
	buttonStringPatterns[4][4] = 0b0000000;
    1b7c:	11 ae       	std	Z+57, r1	; 0x39
    1b7e:	10 ae       	std	Z+56, r1	; 0x38
	buttonStringPatterns[4][5] = 0b0000001;
    1b80:	b3 af       	std	Z+59, r27	; 0x3b
    1b82:	a2 af       	std	Z+58, r26	; 0x3a
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	b4 01       	movw	r22, r8
    1b8a:	4c e3       	ldi	r20, 0x3C	; 60
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	22 ed       	ldi	r18, 0xD2	; 210
    1b90:	3b e0       	ldi	r19, 0x0B	; 11
    1b92:	0e 94 4e 18 	call	0x309c	; 0x309c <__eewr_block>

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
    1b96:	d4 01       	movw	r26, r8
    1b98:	11 96       	adiw	r26, 0x01	; 1
    1b9a:	3c 92       	st	X, r3
    1b9c:	2e 92       	st	-X, r2
	buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
    1b9e:	13 96       	adiw	r26, 0x03	; 3
    1ba0:	3c 92       	st	X, r3
    1ba2:	2e 92       	st	-X, r2
    1ba4:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
    1ba6:	15 96       	adiw	r26, 0x05	; 5
    1ba8:	1c 92       	st	X, r1
    1baa:	1e 92       	st	-X, r1
    1bac:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000000;
    1bae:	17 96       	adiw	r26, 0x07	; 7
    1bb0:	1c 92       	st	X, r1
    1bb2:	1e 92       	st	-X, r1
    1bb4:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
    1bb6:	19 96       	adiw	r26, 0x09	; 9
    1bb8:	1c 92       	st	X, r1
    1bba:	1e 92       	st	-X, r1
    1bbc:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0001110;
    1bbe:	1b 96       	adiw	r26, 0x0b	; 11
    1bc0:	3c 92       	st	X, r3
    1bc2:	2e 92       	st	-X, r2
    1bc4:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
    1bc6:	1d 96       	adiw	r26, 0x0d	; 13
    1bc8:	1c 92       	st	X, r1
    1bca:	1e 92       	st	-X, r1
    1bcc:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
    1bce:	1f 96       	adiw	r26, 0x0f	; 15
    1bd0:	3c 92       	st	X, r3
    1bd2:	2e 92       	st	-X, r2
    1bd4:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0001110;
    1bd6:	51 96       	adiw	r26, 0x11	; 17
    1bd8:	3c 92       	st	X, r3
    1bda:	2e 92       	st	-X, r2
    1bdc:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
    1bde:	53 96       	adiw	r26, 0x13	; 19
    1be0:	1c 92       	st	X, r1
    1be2:	1e 92       	st	-X, r1
    1be4:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0001110;
    1be6:	55 96       	adiw	r26, 0x15	; 21
    1be8:	3c 92       	st	X, r3
    1bea:	2e 92       	st	-X, r2
    1bec:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0000000;
    1bee:	57 96       	adiw	r26, 0x17	; 23
    1bf0:	1c 92       	st	X, r1
    1bf2:	1e 92       	st	-X, r1
    1bf4:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
    1bf6:	59 96       	adiw	r26, 0x19	; 25
    1bf8:	1c 92       	st	X, r1
    1bfa:	1e 92       	st	-X, r1
    1bfc:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
    1bfe:	5b 96       	adiw	r26, 0x1b	; 27
    1c00:	1c 93       	st	X, r17
    1c02:	0e 93       	st	-X, r16
    1c04:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
    1c06:	5d 96       	adiw	r26, 0x1d	; 29
    1c08:	1c 93       	st	X, r17
    1c0a:	0e 93       	st	-X, r16
    1c0c:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000110;
    1c0e:	5f 96       	adiw	r26, 0x1f	; 31
    1c10:	1c 93       	st	X, r17
    1c12:	0e 93       	st	-X, r16
    1c14:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000000;
    1c16:	91 96       	adiw	r26, 0x21	; 33
    1c18:	1c 92       	st	X, r1
    1c1a:	1e 92       	st	-X, r1
    1c1c:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
    1c1e:	93 96       	adiw	r26, 0x23	; 35
    1c20:	1c 92       	st	X, r1
    1c22:	1e 92       	st	-X, r1
    1c24:	92 97       	sbiw	r26, 0x22	; 34
									  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
    1c26:	95 96       	adiw	r26, 0x25	; 37
    1c28:	1c 92       	st	X, r1
    1c2a:	1e 92       	st	-X, r1
    1c2c:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000000; // This an A chord
    1c2e:	97 96       	adiw	r26, 0x27	; 39
    1c30:	1c 92       	st	X, r1
    1c32:	1e 92       	st	-X, r1
    1c34:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0000110;
    1c36:	99 96       	adiw	r26, 0x29	; 41
    1c38:	1c 93       	st	X, r17
    1c3a:	0e 93       	st	-X, r16
    1c3c:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000110;
    1c3e:	9b 96       	adiw	r26, 0x2b	; 43
    1c40:	1c 93       	st	X, r17
    1c42:	0e 93       	st	-X, r16
    1c44:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0000110;
    1c46:	9d 96       	adiw	r26, 0x2d	; 45
    1c48:	1c 93       	st	X, r17
    1c4a:	0e 93       	st	-X, r16
    1c4c:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
    1c4e:	9f 96       	adiw	r26, 0x2f	; 47
    1c50:	1c 92       	st	X, r1
    1c52:	1e 92       	st	-X, r1
    1c54:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
    1c56:	d1 96       	adiw	r26, 0x31	; 49
    1c58:	1c 92       	st	X, r1
    1c5a:	1e 92       	st	-X, r1
    1c5c:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
    1c5e:	d3 96       	adiw	r26, 0x33	; 51
    1c60:	1c 92       	st	X, r1
    1c62:	1e 92       	st	-X, r1
    1c64:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
    1c66:	d5 96       	adiw	r26, 0x35	; 53
    1c68:	1c 92       	st	X, r1
    1c6a:	1e 92       	st	-X, r1
    1c6c:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0001110;
    1c6e:	d7 96       	adiw	r26, 0x37	; 55
    1c70:	3c 92       	st	X, r3
    1c72:	2e 92       	st	-X, r2
    1c74:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0001110;
    1c76:	d9 96       	adiw	r26, 0x39	; 57
    1c78:	3c 92       	st	X, r3
    1c7a:	2e 92       	st	-X, r2
    1c7c:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0001110;
    1c7e:	db 96       	adiw	r26, 0x3b	; 59
    1c80:	3c 92       	st	X, r3
    1c82:	2e 92       	st	-X, r2
    1c84:	da 97       	sbiw	r26, 0x3a	; 58
    1c86:	88 e7       	ldi	r24, 0x78	; 120
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	b4 01       	movw	r22, r8
    1c8c:	48 e7       	ldi	r20, 0x78	; 120
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	22 ed       	ldi	r18, 0xD2	; 210
    1c92:	3b e0       	ldi	r19, 0x0B	; 11
    1c94:	0e 94 4e 18 	call	0x309c	; 0x309c <__eewr_block>
    1c98:	55 24       	eor	r5, r5
		return 0;
}

inline int testForHomeChord(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1c9a:	2a a5       	ldd	r18, Y+42	; 0x2a
    1c9c:	3b a5       	ldd	r19, Y+43	; 0x2b
    1c9e:	20 32       	cpi	r18, 0x20	; 32
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	b1 f4       	brne	.+44     	; 0x1cd0 <main+0x452>
    1ca4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ca6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ca8:	89 2b       	or	r24, r25
    1caa:	91 f4       	brne	.+36     	; 0x1cd0 <main+0x452>
    1cac:	8e a5       	ldd	r24, Y+46	; 0x2e
    1cae:	9f a5       	ldd	r25, Y+47	; 0x2f
    1cb0:	89 2b       	or	r24, r25
    1cb2:	71 f4       	brne	.+28     	; 0x1cd0 <main+0x452>
    1cb4:	88 a9       	ldd	r24, Y+48	; 0x30
    1cb6:	99 a9       	ldd	r25, Y+49	; 0x31
    1cb8:	89 2b       	or	r24, r25
    1cba:	51 f4       	brne	.+20     	; 0x1cd0 <main+0x452>
    1cbc:	8a a9       	ldd	r24, Y+50	; 0x32
    1cbe:	9b a9       	ldd	r25, Y+51	; 0x33
    1cc0:	89 2b       	or	r24, r25
    1cc2:	31 f4       	brne	.+12     	; 0x1cd0 <main+0x452>
    1cc4:	8c a9       	ldd	r24, Y+52	; 0x34
    1cc6:	9d a9       	ldd	r25, Y+53	; 0x35
    1cc8:	80 97       	sbiw	r24, 0x20	; 32
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <main+0x452>
		}
		
		// Test if we're trying to hit the Home button
		if(testForHomeChord(stringState))
		{
			data.homeOn = 1;
    1ccc:	b1 e0       	ldi	r27, 0x01	; 1
    1cce:	b9 8b       	std	Y+17, r27	; 0x11
		}

		// Check to see if we're trying to enter Config Mode;
		// disabled if we're playing with frets
		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
    1cd0:	e2 e0       	ldi	r30, 0x02	; 2
    1cd2:	5e 16       	cp	r5, r30
    1cd4:	21 f0       	breq	.+8      	; 0x1cde <main+0x460>
    1cd6:	f4 e0       	ldi	r31, 0x04	; 4
    1cd8:	5f 16       	cp	r5, r31
    1cda:	09 f0       	breq	.+2      	; 0x1cde <main+0x460>
    1cdc:	f1 c0       	rjmp	.+482    	; 0x1ec0 <main+0x642>
		{
			if (configMode == 0)
    1cde:	44 20       	and	r4, r4
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <main+0x466>
    1ce2:	9e c0       	rjmp	.+316    	; 0x1e20 <main+0x5a2>

// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.
inline char testForConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
    1ce4:	20 32       	cpi	r18, 0x20	; 32
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <main+0x46e>
    1cea:	97 c0       	rjmp	.+302    	; 0x1e1a <main+0x59c>
    1cec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cee:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cf0:	80 97       	sbiw	r24, 0x20	; 32
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <main+0x478>
    1cf4:	92 c0       	rjmp	.+292    	; 0x1e1a <main+0x59c>
    1cf6:	8e a5       	ldd	r24, Y+46	; 0x2e
    1cf8:	9f a5       	ldd	r25, Y+47	; 0x2f
    1cfa:	80 97       	sbiw	r24, 0x20	; 32
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <main+0x482>
    1cfe:	8d c0       	rjmp	.+282    	; 0x1e1a <main+0x59c>
    1d00:	88 a9       	ldd	r24, Y+48	; 0x30
    1d02:	99 a9       	ldd	r25, Y+49	; 0x31
    1d04:	89 2b       	or	r24, r25
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <main+0x48c>
    1d08:	88 c0       	rjmp	.+272    	; 0x1e1a <main+0x59c>
    1d0a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d0c:	9b a9       	ldd	r25, Y+51	; 0x33
    1d0e:	89 2b       	or	r24, r25
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <main+0x496>
    1d12:	83 c0       	rjmp	.+262    	; 0x1e1a <main+0x59c>
    1d14:	8c a9       	ldd	r24, Y+52	; 0x34
    1d16:	9d a9       	ldd	r25, Y+53	; 0x35
    1d18:	89 2b       	or	r24, r25
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <main+0x4a0>
    1d1c:	7e c0       	rjmp	.+252    	; 0x1e1a <main+0x59c>
			{
				configMode = testForConfigMode(stringState);
				
				// If we're playing with notes, when we enter config mode, we need to clear the 
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	58 16       	cp	r5, r24
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <main+0x4a8>
    1d24:	78 c0       	rjmp	.+240    	; 0x1e16 <main+0x598>
	return stringState;
}

inline void clearButtonStringPatterns(int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
    1d26:	d3 01       	movw	r26, r6
    1d28:	11 96       	adiw	r26, 0x01	; 1
    1d2a:	1c 92       	st	X, r1
    1d2c:	1e 92       	st	-X, r1
    1d2e:	13 96       	adiw	r26, 0x03	; 3
    1d30:	1c 92       	st	X, r1
    1d32:	1e 92       	st	-X, r1
    1d34:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
    1d36:	15 96       	adiw	r26, 0x05	; 5
    1d38:	1c 92       	st	X, r1
    1d3a:	1e 92       	st	-X, r1
    1d3c:	14 97       	sbiw	r26, 0x04	; 4
    1d3e:	17 96       	adiw	r26, 0x07	; 7
    1d40:	1c 92       	st	X, r1
    1d42:	1e 92       	st	-X, r1
    1d44:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
    1d46:	19 96       	adiw	r26, 0x09	; 9
    1d48:	1c 92       	st	X, r1
    1d4a:	1e 92       	st	-X, r1
    1d4c:	18 97       	sbiw	r26, 0x08	; 8
    1d4e:	1b 96       	adiw	r26, 0x0b	; 11
    1d50:	1c 92       	st	X, r1
    1d52:	1e 92       	st	-X, r1
    1d54:	1a 97       	sbiw	r26, 0x0a	; 10
	buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
    1d56:	1d 96       	adiw	r26, 0x0d	; 13
    1d58:	1c 92       	st	X, r1
    1d5a:	1e 92       	st	-X, r1
    1d5c:	1c 97       	sbiw	r26, 0x0c	; 12
    1d5e:	1f 96       	adiw	r26, 0x0f	; 15
    1d60:	1c 92       	st	X, r1
    1d62:	1e 92       	st	-X, r1
    1d64:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
    1d66:	51 96       	adiw	r26, 0x11	; 17
    1d68:	1c 92       	st	X, r1
    1d6a:	1e 92       	st	-X, r1
    1d6c:	50 97       	sbiw	r26, 0x10	; 16
    1d6e:	53 96       	adiw	r26, 0x13	; 19
    1d70:	1c 92       	st	X, r1
    1d72:	1e 92       	st	-X, r1
    1d74:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
    1d76:	55 96       	adiw	r26, 0x15	; 21
    1d78:	1c 92       	st	X, r1
    1d7a:	1e 92       	st	-X, r1
    1d7c:	54 97       	sbiw	r26, 0x14	; 20
    1d7e:	57 96       	adiw	r26, 0x17	; 23
    1d80:	1c 92       	st	X, r1
    1d82:	1e 92       	st	-X, r1
    1d84:	56 97       	sbiw	r26, 0x16	; 22
	buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
    1d86:	59 96       	adiw	r26, 0x19	; 25
    1d88:	1c 92       	st	X, r1
    1d8a:	1e 92       	st	-X, r1
    1d8c:	58 97       	sbiw	r26, 0x18	; 24
    1d8e:	5b 96       	adiw	r26, 0x1b	; 27
    1d90:	1c 92       	st	X, r1
    1d92:	1e 92       	st	-X, r1
    1d94:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
    1d96:	5d 96       	adiw	r26, 0x1d	; 29
    1d98:	1c 92       	st	X, r1
    1d9a:	1e 92       	st	-X, r1
    1d9c:	5c 97       	sbiw	r26, 0x1c	; 28
    1d9e:	5f 96       	adiw	r26, 0x1f	; 31
    1da0:	1c 92       	st	X, r1
    1da2:	1e 92       	st	-X, r1
    1da4:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
    1da6:	91 96       	adiw	r26, 0x21	; 33
    1da8:	1c 92       	st	X, r1
    1daa:	1e 92       	st	-X, r1
    1dac:	90 97       	sbiw	r26, 0x20	; 32
    1dae:	93 96       	adiw	r26, 0x23	; 35
    1db0:	1c 92       	st	X, r1
    1db2:	1e 92       	st	-X, r1
    1db4:	92 97       	sbiw	r26, 0x22	; 34
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
    1db6:	95 96       	adiw	r26, 0x25	; 37
    1db8:	1c 92       	st	X, r1
    1dba:	1e 92       	st	-X, r1
    1dbc:	94 97       	sbiw	r26, 0x24	; 36
    1dbe:	97 96       	adiw	r26, 0x27	; 39
    1dc0:	1c 92       	st	X, r1
    1dc2:	1e 92       	st	-X, r1
    1dc4:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
    1dc6:	99 96       	adiw	r26, 0x29	; 41
    1dc8:	1c 92       	st	X, r1
    1dca:	1e 92       	st	-X, r1
    1dcc:	98 97       	sbiw	r26, 0x28	; 40
    1dce:	9b 96       	adiw	r26, 0x2b	; 43
    1dd0:	1c 92       	st	X, r1
    1dd2:	1e 92       	st	-X, r1
    1dd4:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
    1dd6:	9d 96       	adiw	r26, 0x2d	; 45
    1dd8:	1c 92       	st	X, r1
    1dda:	1e 92       	st	-X, r1
    1ddc:	9c 97       	sbiw	r26, 0x2c	; 44
    1dde:	9f 96       	adiw	r26, 0x2f	; 47
    1de0:	1c 92       	st	X, r1
    1de2:	1e 92       	st	-X, r1
    1de4:	9e 97       	sbiw	r26, 0x2e	; 46
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
    1de6:	d1 96       	adiw	r26, 0x31	; 49
    1de8:	1c 92       	st	X, r1
    1dea:	1e 92       	st	-X, r1
    1dec:	d0 97       	sbiw	r26, 0x30	; 48
    1dee:	d3 96       	adiw	r26, 0x33	; 51
    1df0:	1c 92       	st	X, r1
    1df2:	1e 92       	st	-X, r1
    1df4:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
    1df6:	d5 96       	adiw	r26, 0x35	; 53
    1df8:	1c 92       	st	X, r1
    1dfa:	1e 92       	st	-X, r1
    1dfc:	d4 97       	sbiw	r26, 0x34	; 52
    1dfe:	d7 96       	adiw	r26, 0x37	; 55
    1e00:	1c 92       	st	X, r1
    1e02:	1e 92       	st	-X, r1
    1e04:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
    1e06:	d9 96       	adiw	r26, 0x39	; 57
    1e08:	1c 92       	st	X, r1
    1e0a:	1e 92       	st	-X, r1
    1e0c:	d8 97       	sbiw	r26, 0x38	; 56
    1e0e:	db 96       	adiw	r26, 0x3b	; 59
    1e10:	1c 92       	st	X, r1
    1e12:	1e 92       	st	-X, r1
    1e14:	da 97       	sbiw	r26, 0x3a	; 58
    1e16:	44 24       	eor	r4, r4
    1e18:	43 94       	inc	r4
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
				{
					clearButtonStringPatterns(buttonStringPatterns);
				}
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
    1e1a:	1c 82       	std	Y+4, r1	; 0x04
    1e1c:	1b 82       	std	Y+3, r1	; 0x03
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
    1e1e:	19 82       	std	Y+1, r1	; 0x01
			}

			// Config Mode operation
			if (configMode == 1) 
    1e20:	b1 e0       	ldi	r27, 0x01	; 1
    1e22:	4b 16       	cp	r4, r27
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <main+0x5aa>
    1e26:	4c c0       	rjmp	.+152    	; 0x1ec0 <main+0x642>
}

//This function tests to see if we're pressing the correct string combination to end config mode
inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1e28:	23 2b       	or	r18, r19
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <main+0x5b0>
    1e2c:	f5 c0       	rjmp	.+490    	; 0x2018 <main+0x79a>
    1e2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e30:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e32:	80 97       	sbiw	r24, 0x20	; 32
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <main+0x5ba>
    1e36:	f0 c0       	rjmp	.+480    	; 0x2018 <main+0x79a>
    1e38:	8e a5       	ldd	r24, Y+46	; 0x2e
    1e3a:	9f a5       	ldd	r25, Y+47	; 0x2f
    1e3c:	80 97       	sbiw	r24, 0x20	; 32
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <main+0x5c4>
    1e40:	eb c0       	rjmp	.+470    	; 0x2018 <main+0x79a>
    1e42:	88 a9       	ldd	r24, Y+48	; 0x30
    1e44:	99 a9       	ldd	r25, Y+49	; 0x31
    1e46:	80 97       	sbiw	r24, 0x20	; 32
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <main+0x5ce>
    1e4a:	e6 c0       	rjmp	.+460    	; 0x2018 <main+0x79a>
    1e4c:	8a a9       	ldd	r24, Y+50	; 0x32
    1e4e:	9b a9       	ldd	r25, Y+51	; 0x33
    1e50:	89 2b       	or	r24, r25
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <main+0x5d8>
    1e54:	e1 c0       	rjmp	.+450    	; 0x2018 <main+0x79a>
    1e56:	8c a9       	ldd	r24, Y+52	; 0x34
    1e58:	9d a9       	ldd	r25, Y+53	; 0x35
    1e5a:	89 2b       	or	r24, r25
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <main+0x5e2>
    1e5e:	dc c0       	rjmp	.+440    	; 0x2018 <main+0x79a>
				if (testForEndConfigMode(stringState))
					{
						// Now save this new button mapping to the EEPROM 
						// Since we're already passing in buttonsStringPatterns
						// as a pointer, we don't use the '&' operator
						if (controllerMode == NOTES)
    1e60:	e2 e0       	ldi	r30, 0x02	; 2
    1e62:	5e 16       	cp	r5, r30
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <main+0x5f4>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	b3 01       	movw	r22, r6
    1e6c:	4c e3       	ldi	r20, 0x3C	; 60
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	22 c0       	rjmp	.+68     	; 0x1eb6 <main+0x638>
							eeprom_write_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
						else if (controllerMode == CHORDS)
    1e72:	f4 e0       	ldi	r31, 0x04	; 4
    1e74:	5f 16       	cp	r5, r31
    1e76:	39 f5       	brne	.+78     	; 0x1ec6 <main+0x648>
    1e78:	19 c0       	rjmp	.+50     	; 0x1eac <main+0x62e>
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	05 97       	sbiw	r24, 0x05	; 5
    1e80:	0c f4       	brge	.+2      	; 0x1e84 <main+0x606>
    1e82:	af c0       	rjmp	.+350    	; 0x1fe2 <main+0x764>
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	88 23       	and	r24, r24
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <main+0x60e>
    1e8a:	ab c0       	rjmp	.+342    	; 0x1fe2 <main+0x764>
					{
						buttonToAssign = 0;
    1e8c:	1c 82       	std	Y+4, r1	; 0x04
    1e8e:	1b 82       	std	Y+3, r1	; 0x03
    1e90:	a8 c0       	rjmp	.+336    	; 0x1fe2 <main+0x764>
					}
					
					// Or if we've programmed all 10 notes in Chord mode, exit programming mode
					if (controllerMode == CHORDS && buttonToAssign >= NUM_CHORDS_BUTTONS && plusLock == 0 )
    1e92:	24 e0       	ldi	r18, 0x04	; 4
    1e94:	52 16       	cp	r5, r18
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <main+0x61c>
    1e98:	a4 c0       	rjmp	.+328    	; 0x1fe2 <main+0x764>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	0a 97       	sbiw	r24, 0x0a	; 10
    1ea0:	0c f4       	brge	.+2      	; 0x1ea4 <main+0x626>
    1ea2:	9f c0       	rjmp	.+318    	; 0x1fe2 <main+0x764>
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <main+0x62e>
    1eaa:	9b c0       	rjmp	.+310    	; 0x1fe2 <main+0x764>
    1eac:	88 e7       	ldi	r24, 0x78	; 120
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b3 01       	movw	r22, r6
    1eb2:	48 e7       	ldi	r20, 0x78	; 120
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	22 ed       	ldi	r18, 0xD2	; 210
    1eb8:	3b e0       	ldi	r19, 0x0B	; 11
    1eba:	0e 94 4e 18 	call	0x309c	; 0x309c <__eewr_block>
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <main+0x648>
					}
		}	}	}	 // End of Config Mode code

		
		// Normal operation
		if (configMode == 0)
    1ec0:	44 20       	and	r4, r4
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <main+0x648>
    1ec4:	8e c0       	rjmp	.+284    	; 0x1fe2 <main+0x764>
		return 0;
}

inline int testForMinusChord(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1ec6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ec8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1eca:	89 2b       	or	r24, r25
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <main+0x652>
    1ece:	5b c0       	rjmp	.+182    	; 0x1f86 <main+0x708>
    1ed0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ed2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ed4:	89 2b       	or	r24, r25
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <main+0x65c>
    1ed8:	56 c0       	rjmp	.+172    	; 0x1f86 <main+0x708>
    1eda:	2e a5       	ldd	r18, Y+46	; 0x2e
    1edc:	3f a5       	ldd	r19, Y+47	; 0x2f
    1ede:	21 15       	cp	r18, r1
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	71 f4       	brne	.+28     	; 0x1f00 <main+0x682>
    1ee4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ee6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ee8:	89 2b       	or	r24, r25
    1eea:	51 f4       	brne	.+20     	; 0x1f00 <main+0x682>
    1eec:	8a a9       	ldd	r24, Y+50	; 0x32
    1eee:	9b a9       	ldd	r25, Y+51	; 0x33
    1ef0:	89 2b       	or	r24, r25
    1ef2:	31 f4       	brne	.+12     	; 0x1f00 <main+0x682>
    1ef4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ef6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ef8:	80 97       	sbiw	r24, 0x20	; 32
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <main+0x682>
		{
			//Test if Minus is being played by the chord instead of the button
			// This means it won't get read in config mode, which is good.
			if(testForMinusChord(stringState))
				data.minusOn = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	8f 87       	std	Y+15, r24	; 0x0f
}

inline int testForSwitchModes(int stringState[])
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00000000) &&
    1f00:	20 32       	cpi	r18, 0x20	; 32
    1f02:	31 05       	cpc	r19, r1
    1f04:	81 f4       	brne	.+32     	; 0x1f26 <main+0x6a8>
    1f06:	88 a9       	ldd	r24, Y+48	; 0x30
    1f08:	99 a9       	ldd	r25, Y+49	; 0x31
    1f0a:	80 97       	sbiw	r24, 0x20	; 32
    1f0c:	e1 f5       	brne	.+120    	; 0x1f86 <main+0x708>
    1f0e:	8a a9       	ldd	r24, Y+50	; 0x32
    1f10:	9b a9       	ldd	r25, Y+51	; 0x33
    1f12:	80 97       	sbiw	r24, 0x20	; 32
    1f14:	c1 f5       	brne	.+112    	; 0x1f86 <main+0x708>
    1f16:	8c a9       	ldd	r24, Y+52	; 0x34
    1f18:	9d a9       	ldd	r25, Y+53	; 0x35
    1f1a:	89 2b       	or	r24, r25
    1f1c:	a1 f5       	brne	.+104    	; 0x1f86 <main+0x708>
static inline void switchPlayModes(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if (testForSwitchModes(stringState))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
    1f1e:	50 fc       	sbrc	r5, 0
    1f20:	32 c0       	rjmp	.+100    	; 0x1f86 <main+0x708>
			{++*controllerMode;}  //This puts it into a transitional mode
    1f22:	53 94       	inc	r5
    1f24:	30 c0       	rjmp	.+96     	; 0x1f86 <main+0x708>
		return 0;
}

inline int testForNoStringsPressed(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
    1f26:	23 2b       	or	r18, r19
    1f28:	71 f5       	brne	.+92     	; 0x1f86 <main+0x708>
    1f2a:	88 a9       	ldd	r24, Y+48	; 0x30
    1f2c:	99 a9       	ldd	r25, Y+49	; 0x31
    1f2e:	89 2b       	or	r24, r25
    1f30:	51 f5       	brne	.+84     	; 0x1f86 <main+0x708>
    1f32:	8a a9       	ldd	r24, Y+50	; 0x32
    1f34:	9b a9       	ldd	r25, Y+51	; 0x33
    1f36:	89 2b       	or	r24, r25
    1f38:	31 f5       	brne	.+76     	; 0x1f86 <main+0x708>
    1f3a:	8c a9       	ldd	r24, Y+52	; 0x34
    1f3c:	9d a9       	ldd	r25, Y+53	; 0x35
    1f3e:	89 2b       	or	r24, r25
    1f40:	11 f5       	brne	.+68     	; 0x1f86 <main+0x708>
	}
	// And if we're not pressing that anymore, switch from the transitional mode to the regular mode,
	//  resetting the button patterns as necessary
	else if(testForNoStringsPressed(stringState)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
    1f42:	95 e0       	ldi	r25, 0x05	; 5
    1f44:	59 16       	cp	r5, r25
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <main+0x6ce>
    1f48:	55 24       	eor	r5, r5
    1f4a:	1d c0       	rjmp	.+58     	; 0x1f86 <main+0x708>
			{*controllerMode = FRETS;}

		// Now, reset the buttonStringPattern array to be appropriate for the mode
		// For this, we'll read it from the EEPROM memory.
		else if (*controllerMode  == FRETS_TO_NOTES)
    1f4c:	a1 e0       	ldi	r26, 0x01	; 1
    1f4e:	5a 16       	cp	r5, r26
    1f50:	61 f4       	brne	.+24     	; 0x1f6a <main+0x6ec>
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
    1f52:	c3 01       	movw	r24, r6
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	4c e3       	ldi	r20, 0x3C	; 60
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	2a ec       	ldi	r18, 0xCA	; 202
    1f5e:	3b e0       	ldi	r19, 0x0B	; 11
    1f60:	0e 94 32 18 	call	0x3064	; 0x3064 <__eerd_block>
    1f64:	b2 e0       	ldi	r27, 0x02	; 2
    1f66:	5b 2e       	mov	r5, r27
    1f68:	0e c0       	rjmp	.+28     	; 0x1f86 <main+0x708>
		{
			// Notice, we're already passing in buttonStringPatterns as an address, so the EEPROM read looks a bit strange
			eeprom_read_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
    1f6a:	b3 e0       	ldi	r27, 0x03	; 3
    1f6c:	5b 16       	cp	r5, r27
    1f6e:	59 f4       	brne	.+22     	; 0x1f86 <main+0x708>
    1f70:	c3 01       	movw	r24, r6
    1f72:	68 e7       	ldi	r22, 0x78	; 120
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	48 e7       	ldi	r20, 0x78	; 120
    1f78:	50 e0       	ldi	r21, 0x00	; 0
    1f7a:	2a ec       	ldi	r18, 0xCA	; 202
    1f7c:	3b e0       	ldi	r19, 0x0B	; 11
    1f7e:	0e 94 32 18 	call	0x3064	; 0x3064 <__eerd_block>
    1f82:	a4 e0       	ldi	r26, 0x04	; 4
    1f84:	5a 2e       	mov	r5, r26
			switchPlayModes(stringState, buttonStringPatterns, &controllerMode);

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
    1f86:	65 2d       	mov	r22, r5
    1f88:	50 fc       	sbrc	r5, 0
    1f8a:	25 c0       	rjmp	.+74     	; 0x1fd6 <main+0x758>
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	07 96       	adiw	r24, 0x07	; 7
    1f90:	c0 5c       	subi	r28, 0xC0	; 192
    1f92:	de 4f       	sbci	r29, 0xFE	; 254
    1f94:	68 81       	ld	r22, Y
    1f96:	c0 54       	subi	r28, 0x40	; 64
    1f98:	d1 40       	sbci	r29, 0x01	; 1
    1f9a:	cf 5b       	subi	r28, 0xBF	; 191
    1f9c:	de 4f       	sbci	r29, 0xFE	; 254
    1f9e:	78 81       	ld	r23, Y
    1fa0:	c1 54       	subi	r28, 0x41	; 65
    1fa2:	d1 40       	sbci	r29, 0x01	; 1
    1fa4:	a3 01       	movw	r20, r6
    1fa6:	25 2d       	mov	r18, r5
    1fa8:	cc 5b       	subi	r28, 0xBC	; 188
    1faa:	de 4f       	sbci	r29, 0xFE	; 254
    1fac:	08 81       	ld	r16, Y
    1fae:	c4 54       	subi	r28, 0x44	; 68
    1fb0:	d1 40       	sbci	r29, 0x01	; 1
    1fb2:	cb 5b       	subi	r28, 0xBB	; 187
    1fb4:	de 4f       	sbci	r29, 0xFE	; 254
    1fb6:	18 81       	ld	r17, Y
    1fb8:	c5 54       	subi	r28, 0x45	; 69
    1fba:	d1 40       	sbci	r29, 0x01	; 1
    1fbc:	ca 5b       	subi	r28, 0xBA	; 186
    1fbe:	de 4f       	sbci	r29, 0xFE	; 254
    1fc0:	e8 80       	ld	r14, Y
    1fc2:	c6 54       	subi	r28, 0x46	; 70
    1fc4:	d1 40       	sbci	r29, 0x01	; 1
    1fc6:	c9 5b       	subi	r28, 0xB9	; 185
    1fc8:	de 4f       	sbci	r29, 0xFE	; 254
    1fca:	f8 80       	ld	r15, Y
    1fcc:	c7 54       	subi	r28, 0x47	; 71
    1fce:	d1 40       	sbci	r29, 0x01	; 1
    1fd0:	0e 94 df 09 	call	0x13be	; 0x13be <processStringState>
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <main+0x762>
			}
			else
			{   // Now, if we're in a transitional controller mode, we'll forget that data and substitue 
				// visual cue data to show that we're changing to a specific mode
				//  The function itself can be found in processStringState.h/.c
				displayTransitionState(&data, controllerMode);
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	07 96       	adiw	r24, 0x07	; 7
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <displayTransitionState>
    1fe0:	44 24       	eor	r4, r4
		}
			    
		// Now our processing is complete, so using those button presses, we set up the 
		// button data packet. This function depends on the console and is 
		// set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
		sendPS3Data(data);
    1fe2:	ef 80       	ldd	r14, Y+7	; 0x07
    1fe4:	f8 84       	ldd	r15, Y+8	; 0x08
    1fe6:	09 85       	ldd	r16, Y+9	; 0x09
    1fe8:	1a 85       	ldd	r17, Y+10	; 0x0a
    1fea:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fec:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fee:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ff0:	5e 85       	ldd	r21, Y+14	; 0x0e
    1ff2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ff4:	78 89       	ldd	r23, Y+16	; 0x10
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	0e 94 66 10 	call	0x20cc	; 0x20cc <sendPS3Data>
		sendWiiData(data);
    1ffc:	ef 80       	ldd	r14, Y+7	; 0x07
    1ffe:	f8 84       	ldd	r15, Y+8	; 0x08
    2000:	09 85       	ldd	r16, Y+9	; 0x09
    2002:	1a 85       	ldd	r17, Y+10	; 0x0a
    2004:	2b 85       	ldd	r18, Y+11	; 0x0b
    2006:	3c 85       	ldd	r19, Y+12	; 0x0c
    2008:	4d 85       	ldd	r20, Y+13	; 0x0d
    200a:	5e 85       	ldd	r21, Y+14	; 0x0e
    200c:	6f 85       	ldd	r22, Y+15	; 0x0f
    200e:	78 89       	ldd	r23, Y+16	; 0x10
    2010:	89 89       	ldd	r24, Y+17	; 0x11
    2012:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <sendWiiData>
    2016:	c9 cc       	rjmp	.-1646   	; 0x19aa <main+0x12c>
				else
				{
					// Now set up the data packet to the interface layer to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					//  The function itself can be found in processStringState.h/.c
					configSetButtonData(&data, &buttonToAssign, buttonStringPatterns, stringState, controllerMode,
    2018:	ce 01       	movw	r24, r28
    201a:	07 96       	adiw	r24, 0x07	; 7
    201c:	be 01       	movw	r22, r28
    201e:	6d 5f       	subi	r22, 0xFD	; 253
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	a3 01       	movw	r20, r6
    2024:	c0 5c       	subi	r28, 0xC0	; 192
    2026:	de 4f       	sbci	r29, 0xFE	; 254
    2028:	28 81       	ld	r18, Y
    202a:	c0 54       	subi	r28, 0x40	; 64
    202c:	d1 40       	sbci	r29, 0x01	; 1
    202e:	cf 5b       	subi	r28, 0xBF	; 191
    2030:	de 4f       	sbci	r29, 0xFE	; 254
    2032:	38 81       	ld	r19, Y
    2034:	c1 54       	subi	r28, 0x41	; 65
    2036:	d1 40       	sbci	r29, 0x01	; 1
    2038:	05 2d       	mov	r16, r5
    203a:	7e 01       	movw	r14, r28
    203c:	08 94       	sec
    203e:	e1 1c       	adc	r14, r1
    2040:	f1 1c       	adc	r15, r1
    2042:	f2 e0       	ldi	r31, 0x02	; 2
    2044:	cf 2e       	mov	r12, r31
    2046:	d1 2c       	mov	r13, r1
    2048:	cc 0e       	add	r12, r28
    204a:	dd 1e       	adc	r13, r29
    204c:	e5 e0       	ldi	r30, 0x05	; 5
    204e:	ae 2e       	mov	r10, r30
    2050:	b1 2c       	mov	r11, r1
    2052:	ac 0e       	add	r10, r28
    2054:	bd 1e       	adc	r11, r29
    2056:	0e 94 0c 0a 	call	0x1418	; 0x1418 <configSetButtonData>
											&plusLock, &previousPlusOn, &debounceTimer);
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
    205a:	1e 86       	std	Y+14, r1	; 0x0e
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
    205c:	e2 e0       	ldi	r30, 0x02	; 2
    205e:	5e 16       	cp	r5, r30
    2060:	09 f0       	breq	.+2      	; 0x2064 <main+0x7e6>
    2062:	17 cf       	rjmp	.-466    	; 0x1e92 <main+0x614>
    2064:	0a cf       	rjmp	.-492    	; 0x1e7a <main+0x5fc>

00002066 <usbFunctionSetup>:


/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	28 97       	sbiw	r28, 0x08	; 8
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
usbRequest_t    *rq = (void *)data;
    207a:	fc 01       	movw	r30, r24
    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
	uchar extraBuffer[8];
	
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS)
    207c:	80 81       	ld	r24, Z
    207e:	80 76       	andi	r24, 0x60	; 96
    2080:	80 32       	cpi	r24, 0x20	; 32
    2082:	d1 f4       	brne	.+52     	; 0x20b8 <usbFunctionSetup+0x52>
	{    /* class request type */
        if(rq->bRequest == USBRQ_HID_GET_REPORT)
    2084:	81 81       	ldd	r24, Z+1	; 0x01
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	41 f4       	brne	.+16     	; 0x209a <usbFunctionSetup+0x34>
			extraBuffer[4] = 
			extraBuffer[5] =
			extraBuffer[6] =
			extraBuffer[7] = 0;

            usbMsgPtr = extraBuffer;
    208a:	ce 01       	movw	r24, r28
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	90 93 70 02 	sts	0x0270, r25
    2092:	80 93 6f 02 	sts	0x026F, r24
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	10 c0       	rjmp	.+32     	; 0x20ba <usbFunctionSetup+0x54>
            return 8; //extraBuffer's size
        }
		else if(rq->bRequest == USBRQ_HID_GET_IDLE)
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	41 f4       	brne	.+16     	; 0x20ae <usbFunctionSetup+0x48>
		{
            usbMsgPtr = &idleRate;
    209e:	88 e2       	ldi	r24, 0x28	; 40
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	90 93 70 02 	sts	0x0270, r25
    20a6:	80 93 6f 02 	sts	0x026F, r24
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <usbFunctionSetup+0x54>
            return 1;
        }
		else if(rq->bRequest == USBRQ_HID_SET_IDLE)
    20ae:	8a 30       	cpi	r24, 0x0A	; 10
    20b0:	19 f4       	brne	.+6      	; 0x20b8 <usbFunctionSetup+0x52>
		{
            idleRate = rq->wValue.bytes[1];
    20b2:	83 81       	ldd	r24, Z+3	; 0x03
    20b4:	80 93 28 01 	sts	0x0128, r24
    20b8:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
    20ba:	28 96       	adiw	r28, 0x08	; 8
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <sendPS3Data>:
	usbPoll();
}


void sendPS3Data(dataForController data)
{
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	2b 97       	sbiw	r28, 0x0b	; 11
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	9e 2d       	mov	r25, r14
    20ea:	e9 82       	std	Y+1, r14	; 0x01
    20ec:	bf 2d       	mov	r27, r15
    20ee:	fa 82       	std	Y+2, r15	; 0x02
    20f0:	f0 2f       	mov	r31, r16
    20f2:	0b 83       	std	Y+3, r16	; 0x03
    20f4:	01 2f       	mov	r16, r17
    20f6:	1c 83       	std	Y+4, r17	; 0x04
    20f8:	e2 2f       	mov	r30, r18
    20fa:	2d 83       	std	Y+5, r18	; 0x05
    20fc:	13 2f       	mov	r17, r19
    20fe:	3e 83       	std	Y+6, r19	; 0x06
    2100:	a4 2f       	mov	r26, r20
    2102:	4f 83       	std	Y+7, r20	; 0x07
    2104:	35 2f       	mov	r19, r21
    2106:	58 87       	std	Y+8, r21	; 0x08
    2108:	26 2f       	mov	r18, r22
    210a:	69 87       	std	Y+9, r22	; 0x09
    210c:	7a 87       	std	Y+10, r23	; 0x0a
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	48 2f       	mov	r20, r24
	byte5 - z axis (Whammy Bar)
	byte6 - rzaxis (Choose solo style)
*/
       //set the buttons to all at default positions
        reportBuffer[0] = 0b00000000;
        reportBuffer[1] = 0b00000000;
    2112:	10 92 4f 02 	sts	0x024F, r1
        reportBuffer[2] = 0b00001000;
    2116:	88 e0       	ldi	r24, 0x08	; 8
    2118:	80 93 50 02 	sts	0x0250, r24
        reportBuffer[3] = 0b10000000;
    211c:	80 e8       	ldi	r24, 0x80	; 128
    211e:	80 93 51 02 	sts	0x0251, r24
        reportBuffer[4] = 0b10000000;
    2122:	80 93 52 02 	sts	0x0252, r24
        reportBuffer[5] = 0b10000000;
    2126:	80 93 53 02 	sts	0x0253, r24
        reportBuffer[6] = 0b00000000;
    212a:	10 92 54 02 	sts	0x0254, r1


        // Since 'colorOn' is 1 when a fret is pressed, we shift it to the proper place and | it to set the
        // corresponding button bit to one, which corresponds to a button press.
        reportBuffer[0] |= (data.orangeOn << ORANGE_BIT);
        reportBuffer[0] |= (data.blueOn << BLUE_BIT);
    212e:	e2 95       	swap	r30
    2130:	e0 7f       	andi	r30, 0xF0	; 240
    2132:	e0 2b       	or	r30, r16
        reportBuffer[0] |= (data.yellowOn << YELLOW_BIT);
        reportBuffer[0] |= (data.redOn << RED_BIT);
        reportBuffer[0] |= (data.greenOn << GREEN_BIT);
    2134:	bb 0f       	add	r27, r27
    2136:	bb 0f       	add	r27, r27
    2138:	ff 0f       	add	r31, r31
    213a:	ff 0f       	add	r31, r31
    213c:	ff 0f       	add	r31, r31
    213e:	fb 2b       	or	r31, r27
    2140:	99 0f       	add	r25, r25
    2142:	9f 2b       	or	r25, r31
    2144:	9e 2b       	or	r25, r30
    2146:	90 93 4e 02 	sts	0x024E, r25

        // On the PS3, the strumming shows up as a hat switch, so we have to use conditionals for this..
        if (data.upOn)
    214a:	11 23       	and	r17, r17
    214c:	11 f0       	breq	.+4      	; 0x2152 <sendPS3Data+0x86>
                reportBuffer[2] = 0b00000000;
    214e:	10 92 50 02 	sts	0x0250, r1
        if (data.downOn)
    2152:	aa 23       	and	r26, r26
    2154:	19 f0       	breq	.+6      	; 0x215c <sendPS3Data+0x90>
                reportBuffer[2] = 0b00000100;
    2156:	84 e0       	ldi	r24, 0x04	; 4
    2158:	80 93 50 02 	sts	0x0250, r24

		//Finally, Start, Star Power, and the Home button (not working yet)
		reportBuffer[1] |= (data.plusOn << PLUS_BIT);
    215c:	33 0f       	add	r19, r19
    215e:	80 91 4f 02 	lds	r24, 0x024F
    2162:	38 2b       	or	r19, r24
        reportBuffer[0] |= (data.minusOn << MINUS_BIT);
    2164:	22 95       	swap	r18
    2166:	22 0f       	add	r18, r18
    2168:	20 7e       	andi	r18, 0xE0	; 224
    216a:	80 91 4e 02 	lds	r24, 0x024E
    216e:	82 2b       	or	r24, r18
    2170:	80 93 4e 02 	sts	0x024E, r24
		reportBuffer[1] |= (data.homeOn << HOME_BIT);
    2174:	42 95       	swap	r20
    2176:	40 7f       	andi	r20, 0xF0	; 240
    2178:	34 2b       	or	r19, r20
    217a:	30 93 4f 02 	sts	0x024F, r19

        //Then we finish off some USB stuff.
        wdt_reset();  //Reset the watchdog timer
    217e:	a8 95       	wdr
        usbPoll();    //USB poll - must be called at least once per 10ms
    2180:	0e 94 64 12 	call	0x24c8	; 0x24c8 <usbPoll>

        // Now, regardless of mode, we have to send the data to the 
        // USB controlling library from the buffer we've been building
        if(usbInterruptIsReady())
    2184:	80 91 60 02 	lds	r24, 0x0260
    2188:	84 ff       	sbrs	r24, 4
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <sendPS3Data+0xca>
        {
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
    218c:	8e e4       	ldi	r24, 0x4E	; 78
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	67 e0       	ldi	r22, 0x07	; 7
    2192:	0e 94 92 13 	call	0x2724	; 0x2724 <usbSetInterrupt>
        }
                

}
    2196:	2b 96       	adiw	r28, 0x0b	; 11
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	08 95       	ret

000021b0 <startPS3Communication>:
/* ------------------------------------------------------------------------- */

void startPS3Communication(void)
{
    // First, set up all the USB communication stuff
    wdt_enable(WDTO_1S);
    21b0:	2e e0       	ldi	r18, 0x0E	; 14
    21b2:	88 e1       	ldi	r24, 0x18	; 24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	a8 95       	wdr
    21bc:	80 93 60 00 	sts	0x0060, r24
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	20 93 60 00 	sts	0x0060, r18
     * RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

    usbInit();
    21c6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    21ca:	54 9a       	sbi	0x0a, 4	; 10
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ce:	48 eb       	ldi	r20, 0xB8	; 184
    21d0:	5b e0       	ldi	r21, 0x0B	; 11
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <startPS3Communication+0x2c>
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
    21d4:	a8 95       	wdr
    21d6:	ca 01       	movw	r24, r20
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <startPS3Communication+0x28>
     */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
    21dc:	21 50       	subi	r18, 0x01	; 1
    21de:	d1 f7       	brne	.-12     	; 0x21d4 <startPS3Communication+0x24>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
    21e0:	54 98       	cbi	0x0a, 4	; 10
    sei();
    21e2:	78 94       	sei
	usbPoll();
    21e4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <usbPoll>
}
    21e8:	08 95       	ret

000021ea <usbCrc16>:
    21ea:	a8 2f       	mov	r26, r24
    21ec:	b9 2f       	mov	r27, r25
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	50 ea       	ldi	r21, 0xA0	; 160
    21f6:	60 95       	com	r22
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <usbCrcLoopEntry>

000021fc <usbCrcByteLoop>:
    21fc:	2d 91       	ld	r18, X+
    21fe:	82 27       	eor	r24, r18

00002200 <usbCrcBitLoop>:
    2200:	97 95       	ror	r25
    2202:	87 95       	ror	r24
    2204:	10 f0       	brcs	.+4      	; 0x220a <usbCrcNoXor>
    2206:	84 27       	eor	r24, r20
    2208:	95 27       	eor	r25, r21

0000220a <usbCrcNoXor>:
    220a:	30 5e       	subi	r19, 0xE0	; 224
    220c:	c8 f3       	brcs	.-14     	; 0x2200 <usbCrcBitLoop>

0000220e <usbCrcLoopEntry>:
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	a8 f3       	brcs	.-22     	; 0x21fc <usbCrcByteLoop>

00002212 <usbCrcReady>:
    2212:	08 95       	ret

00002214 <usbCrc16Append>:
    2214:	ea df       	rcall	.-44     	; 0x21ea <usbCrc16>
    2216:	8d 93       	st	X+, r24
    2218:	9d 93       	st	X+, r25
    221a:	08 95       	ret

0000221c <__vector_2>:
    221c:	cf 93       	push	r28
    221e:	cf b7       	in	r28, 0x3f	; 63
    2220:	cf 93       	push	r28

00002222 <waitForJ>:
    2222:	c3 95       	inc	r28
    2224:	4c 9b       	sbis	0x09, 4	; 9
    2226:	e9 f7       	brne	.-6      	; 0x2222 <waitForJ>

00002228 <waitForK>:
    2228:	4c 9b       	sbis	0x09, 4	; 9
    222a:	09 c0       	rjmp	.+18     	; 0x223e <foundK>
    222c:	4c 9b       	sbis	0x09, 4	; 9
    222e:	07 c0       	rjmp	.+14     	; 0x223e <foundK>
    2230:	4c 9b       	sbis	0x09, 4	; 9
    2232:	05 c0       	rjmp	.+10     	; 0x223e <foundK>
    2234:	4c 9b       	sbis	0x09, 4	; 9
    2236:	03 c0       	rjmp	.+6      	; 0x223e <foundK>
    2238:	4c 9b       	sbis	0x09, 4	; 9
    223a:	01 c0       	rjmp	.+2      	; 0x223e <foundK>
    223c:	a3 c0       	rjmp	.+326    	; 0x2384 <sofError>

0000223e <foundK>:
    223e:	df 93       	push	r29
    2240:	c0 91 6e 02 	lds	r28, 0x026E
    2244:	dd 27       	eor	r29, r29
    2246:	cb 58       	subi	r28, 0x8B	; 139
    2248:	dd 4f       	sbci	r29, 0xFD	; 253
    224a:	4c 9b       	sbis	0x09, 4	; 9
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <haveTwoBitsK>
    224e:	df 91       	pop	r29
    2250:	eb cf       	rjmp	.-42     	; 0x2228 <waitForK>

00002252 <haveTwoBitsK>:
    2252:	2f 93       	push	r18
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	09 b1       	in	r16, 0x09	; 9
    225a:	2f ef       	ldi	r18, 0xFF	; 255
    225c:	04 fb       	bst	r16, 4
    225e:	20 f9       	bld	r18, 0
    2260:	4f 93       	push	r20
    2262:	3f 93       	push	r19
    2264:	19 b1       	in	r17, 0x09	; 9
    2266:	4f ef       	ldi	r20, 0xFF	; 255
    2268:	01 27       	eor	r16, r17
    226a:	04 fb       	bst	r16, 4
    226c:	21 f9       	bld	r18, 1
    226e:	3b e0       	ldi	r19, 0x0B	; 11
    2270:	31 c0       	rjmp	.+98     	; 0x22d4 <rxbit2>

00002272 <unstuff0>:
    2272:	4e 7f       	andi	r20, 0xFE	; 254
    2274:	01 2f       	mov	r16, r17
    2276:	19 b1       	in	r17, 0x09	; 9
    2278:	21 60       	ori	r18, 0x01	; 1
    227a:	28 c0       	rjmp	.+80     	; 0x22cc <didUnstuff0>

0000227c <unstuff1>:
    227c:	10 2f       	mov	r17, r16
    227e:	4d 7f       	andi	r20, 0xFD	; 253
    2280:	22 60       	ori	r18, 0x02	; 2
    2282:	00 00       	nop
    2284:	09 b1       	in	r16, 0x09	; 9
    2286:	29 c0       	rjmp	.+82     	; 0x22da <didUnstuff1>

00002288 <unstuff2>:
    2288:	4b 7f       	andi	r20, 0xFB	; 251
    228a:	24 60       	ori	r18, 0x04	; 4
    228c:	01 2f       	mov	r16, r17
    228e:	00 00       	nop
    2290:	19 b1       	in	r17, 0x09	; 9
    2292:	2b c0       	rjmp	.+86     	; 0x22ea <didUnstuff2>

00002294 <unstuff3>:
    2294:	19 b1       	in	r17, 0x09	; 9
    2296:	47 7f       	andi	r20, 0xF7	; 247
    2298:	28 60       	ori	r18, 0x08	; 8
    229a:	2a c0       	rjmp	.+84     	; 0x22f0 <didUnstuff3>

0000229c <unstuff4>:
    229c:	4f 7e       	andi	r20, 0xEF	; 239
    229e:	09 b1       	in	r16, 0x09	; 9
    22a0:	20 61       	ori	r18, 0x10	; 16
    22a2:	2c c0       	rjmp	.+88     	; 0x22fc <didUnstuff4>

000022a4 <unstuff5>:
    22a4:	4f 7d       	andi	r20, 0xDF	; 223
    22a6:	19 b1       	in	r17, 0x09	; 9
    22a8:	20 62       	ori	r18, 0x20	; 32
    22aa:	2f c0       	rjmp	.+94     	; 0x230a <didUnstuff5>

000022ac <unstuff6>:
    22ac:	4f 7b       	andi	r20, 0xBF	; 191
    22ae:	09 b1       	in	r16, 0x09	; 9
    22b0:	20 64       	ori	r18, 0x40	; 64
    22b2:	32 c0       	rjmp	.+100    	; 0x2318 <didUnstuff6>

000022b4 <rxLoop>:
    22b4:	42 27       	eor	r20, r18
    22b6:	09 b1       	in	r16, 0x09	; 9
    22b8:	49 93       	st	Y+, r20
    22ba:	4f ef       	ldi	r20, 0xFF	; 255
    22bc:	00 00       	nop
    22be:	10 27       	eor	r17, r16
    22c0:	14 fb       	bst	r17, 4
    22c2:	20 f9       	bld	r18, 0
    22c4:	19 b1       	in	r17, 0x09	; 9
    22c6:	18 71       	andi	r17, 0x18	; 24
    22c8:	c9 f1       	breq	.+114    	; 0x233c <se0>
    22ca:	29 7f       	andi	r18, 0xF9	; 249

000022cc <didUnstuff0>:
    22cc:	91 f2       	breq	.-92     	; 0x2272 <unstuff0>
    22ce:	01 27       	eor	r16, r17
    22d0:	04 fb       	bst	r16, 4
    22d2:	21 f9       	bld	r18, 1

000022d4 <rxbit2>:
    22d4:	09 b1       	in	r16, 0x09	; 9
    22d6:	23 7f       	andi	r18, 0xF3	; 243
    22d8:	89 f2       	breq	.-94     	; 0x227c <unstuff1>

000022da <didUnstuff1>:
    22da:	31 50       	subi	r19, 0x01	; 1
    22dc:	58 f1       	brcs	.+86     	; 0x2334 <overflow>
    22de:	10 27       	eor	r17, r16
    22e0:	14 fb       	bst	r17, 4
    22e2:	22 f9       	bld	r18, 2
    22e4:	19 b1       	in	r17, 0x09	; 9
    22e6:	27 7e       	andi	r18, 0xE7	; 231
    22e8:	79 f2       	breq	.-98     	; 0x2288 <unstuff2>

000022ea <didUnstuff2>:
    22ea:	01 27       	eor	r16, r17
    22ec:	04 fb       	bst	r16, 4
    22ee:	23 f9       	bld	r18, 3

000022f0 <didUnstuff3>:
    22f0:	2f 7c       	andi	r18, 0xCF	; 207
    22f2:	81 f2       	breq	.-96     	; 0x2294 <unstuff3>
    22f4:	09 b1       	in	r16, 0x09	; 9
    22f6:	10 27       	eor	r17, r16
    22f8:	14 fb       	bst	r17, 4
    22fa:	24 f9       	bld	r18, 4

000022fc <didUnstuff4>:
    22fc:	2f 79       	andi	r18, 0x9F	; 159
    22fe:	71 f2       	breq	.-100    	; 0x229c <unstuff4>
    2300:	00 c0       	rjmp	.+0      	; 0x2302 <didUnstuff4+0x6>
    2302:	19 b1       	in	r17, 0x09	; 9
    2304:	01 27       	eor	r16, r17
    2306:	04 fb       	bst	r16, 4
    2308:	25 f9       	bld	r18, 5

0000230a <didUnstuff5>:
    230a:	2f 73       	andi	r18, 0x3F	; 63
    230c:	59 f2       	breq	.-106    	; 0x22a4 <unstuff5>
    230e:	00 c0       	rjmp	.+0      	; 0x2310 <didUnstuff5+0x6>
    2310:	09 b1       	in	r16, 0x09	; 9
    2312:	10 27       	eor	r17, r16
    2314:	14 fb       	bst	r17, 4
    2316:	26 f9       	bld	r18, 6

00002318 <didUnstuff6>:
    2318:	22 30       	cpi	r18, 0x02	; 2
    231a:	40 f2       	brcs	.-112    	; 0x22ac <unstuff6>
    231c:	00 c0       	rjmp	.+0      	; 0x231e <didUnstuff6+0x6>
    231e:	19 b1       	in	r17, 0x09	; 9
    2320:	01 27       	eor	r16, r17
    2322:	04 fb       	bst	r16, 4
    2324:	27 f9       	bld	r18, 7

00002326 <didUnstuff7>:
    2326:	24 30       	cpi	r18, 0x04	; 4
    2328:	28 f6       	brcc	.-118    	; 0x22b4 <rxLoop>

0000232a <unstuff7>:
    232a:	4f 77       	andi	r20, 0x7F	; 127
    232c:	20 68       	ori	r18, 0x80	; 128
    232e:	19 b1       	in	r17, 0x09	; 9
    2330:	00 00       	nop
    2332:	f9 cf       	rjmp	.-14     	; 0x2326 <didUnstuff7>

00002334 <overflow>:
    2334:	12 e0       	ldi	r17, 0x02	; 2
    2336:	1c bb       	out	0x1c, r17	; 28

00002338 <ignorePacket>:
    2338:	00 27       	eor	r16, r16
    233a:	19 c0       	rjmp	.+50     	; 0x236e <handleSetupOrOut>

0000233c <se0>:
    233c:	3b 50       	subi	r19, 0x0B	; 11
    233e:	31 95       	neg	r19
    2340:	c3 1b       	sub	r28, r19
    2342:	d0 40       	sbci	r29, 0x00	; 0
    2344:	12 e0       	ldi	r17, 0x02	; 2
    2346:	1c bb       	out	0x1c, r17	; 28
    2348:	08 81       	ld	r16, Y
    234a:	03 3c       	cpi	r16, 0xC3	; 195
    234c:	f9 f0       	breq	.+62     	; 0x238c <handleData>
    234e:	0b 34       	cpi	r16, 0x4B	; 75
    2350:	e9 f0       	breq	.+58     	; 0x238c <handleData>
    2352:	20 91 6c 02 	lds	r18, 0x026C
    2356:	19 81       	ldd	r17, Y+1	; 0x01
    2358:	11 0f       	add	r17, r17
    235a:	12 13       	cpse	r17, r18
    235c:	ed cf       	rjmp	.-38     	; 0x2338 <ignorePacket>
    235e:	4a 81       	ldd	r20, Y+2	; 0x02
    2360:	44 1f       	adc	r20, r20
    2362:	09 36       	cpi	r16, 0x69	; 105
    2364:	41 f1       	breq	.+80     	; 0x23b6 <handleIn>
    2366:	0d 32       	cpi	r16, 0x2D	; 45
    2368:	11 f0       	breq	.+4      	; 0x236e <handleSetupOrOut>
    236a:	01 3e       	cpi	r16, 0xE1	; 225
    236c:	29 f7       	brne	.-54     	; 0x2338 <ignorePacket>

0000236e <handleSetupOrOut>:
    236e:	00 93 73 02 	sts	0x0273, r16

00002372 <doReturn>:
    2372:	3f 91       	pop	r19
    2374:	4f 91       	pop	r20
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	2f 91       	pop	r18
    237c:	df 91       	pop	r29
    237e:	cc b3       	in	r28, 0x1c	; 28
    2380:	c1 fd       	sbrc	r28, 1
    2382:	4f cf       	rjmp	.-354    	; 0x2222 <waitForJ>

00002384 <sofError>:
    2384:	cf 91       	pop	r28
    2386:	cf bf       	out	0x3f, r28	; 63
    2388:	cf 91       	pop	r28
    238a:	18 95       	reti

0000238c <handleData>:
    238c:	20 91 73 02 	lds	r18, 0x0273
    2390:	22 23       	and	r18, r18
    2392:	79 f3       	breq	.-34     	; 0x2372 <doReturn>
    2394:	10 91 71 02 	lds	r17, 0x0271
    2398:	11 23       	and	r17, r17
    239a:	c1 f5       	brne	.+112    	; 0x240c <sendNakAndReti>
    239c:	34 30       	cpi	r19, 0x04	; 4
    239e:	c2 f1       	brmi	.+112    	; 0x2410 <sendAckAndReti>
    23a0:	30 93 71 02 	sts	0x0271, r19
    23a4:	20 93 6d 02 	sts	0x026D, r18
    23a8:	10 91 6e 02 	lds	r17, 0x026E
    23ac:	3b e0       	ldi	r19, 0x0B	; 11
    23ae:	31 1b       	sub	r19, r17
    23b0:	30 93 6e 02 	sts	0x026E, r19
    23b4:	2d c0       	rjmp	.+90     	; 0x2410 <sendAckAndReti>

000023b6 <handleIn>:
    23b6:	00 91 71 02 	lds	r16, 0x0271
    23ba:	01 30       	cpi	r16, 0x01	; 1
    23bc:	3c f5       	brge	.+78     	; 0x240c <sendNakAndReti>
    23be:	0a e5       	ldi	r16, 0x5A	; 90
    23c0:	4f 70       	andi	r20, 0x0F	; 15
    23c2:	49 f4       	brne	.+18     	; 0x23d6 <handleIn1>
    23c4:	30 91 00 01 	lds	r19, 0x0100
    23c8:	34 fd       	sbrc	r19, 4
    23ca:	24 c0       	rjmp	.+72     	; 0x2414 <sendCntAndReti>
    23cc:	00 93 00 01 	sts	0x0100, r16
    23d0:	c5 e5       	ldi	r28, 0x55	; 85
    23d2:	d2 e0       	ldi	r29, 0x02	; 2
    23d4:	23 c0       	rjmp	.+70     	; 0x241c <usbSendAndReti>

000023d6 <handleIn1>:
    23d6:	41 35       	cpi	r20, 0x51	; 81
    23d8:	49 f0       	breq	.+18     	; 0x23ec <handleIn3>
    23da:	30 91 60 02 	lds	r19, 0x0260
    23de:	34 fd       	sbrc	r19, 4
    23e0:	19 c0       	rjmp	.+50     	; 0x2414 <sendCntAndReti>
    23e2:	00 93 60 02 	sts	0x0260, r16
    23e6:	c1 e6       	ldi	r28, 0x61	; 97
    23e8:	d2 e0       	ldi	r29, 0x02	; 2
    23ea:	18 c0       	rjmp	.+48     	; 0x241c <usbSendAndReti>

000023ec <handleIn3>:
    23ec:	30 91 8b 02 	lds	r19, 0x028B
    23f0:	34 fd       	sbrc	r19, 4
    23f2:	10 c0       	rjmp	.+32     	; 0x2414 <sendCntAndReti>
    23f4:	00 93 8b 02 	sts	0x028B, r16
    23f8:	cc e8       	ldi	r28, 0x8C	; 140
    23fa:	d2 e0       	ldi	r29, 0x02	; 2
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <usbSendAndReti>

000023fe <stuffN1Delay>:
    23fe:	27 95       	ror	r18
    2400:	a8 f4       	brcc	.+42     	; 0x242c <doExorN1>
    2402:	51 50       	subi	r21, 0x01	; 1
    2404:	a9 f4       	brne	.+42     	; 0x2430 <commonN1>
    2406:	22 0f       	add	r18, r18
    2408:	00 00       	nop
    240a:	f9 cf       	rjmp	.-14     	; 0x23fe <stuffN1Delay>

0000240c <sendNakAndReti>:
    240c:	4a e5       	ldi	r20, 0x5A	; 90
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <usbSendX3>

00002410 <sendAckAndReti>:
    2410:	42 ed       	ldi	r20, 0xD2	; 210
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <usbSendX3>

00002414 <sendCntAndReti>:
    2414:	43 2f       	mov	r20, r19

00002416 <usbSendX3>:
    2416:	c4 e1       	ldi	r28, 0x14	; 20
    2418:	d0 e0       	ldi	r29, 0x00	; 0
    241a:	32 e0       	ldi	r19, 0x02	; 2

0000241c <usbSendAndReti>:
    241c:	1a b1       	in	r17, 0x0a	; 10
    241e:	18 61       	ori	r17, 0x18	; 24
    2420:	5c 9a       	sbi	0x0b, 4	; 11
    2422:	1a b9       	out	0x0a, r17	; 10
    2424:	0b b1       	in	r16, 0x0b	; 11
    2426:	20 e4       	ldi	r18, 0x40	; 64
    2428:	18 e1       	ldi	r17, 0x18	; 24
    242a:	5f 93       	push	r21

0000242c <doExorN1>:
    242c:	01 27       	eor	r16, r17
    242e:	56 e0       	ldi	r21, 0x06	; 6

00002430 <commonN1>:
    2430:	0b b9       	out	0x0b, r16	; 11
    2432:	27 95       	ror	r18
    2434:	20 f4       	brcc	.+8      	; 0x243e <doExorN2>
    2436:	51 50       	subi	r21, 0x01	; 1
    2438:	21 f4       	brne	.+8      	; 0x2442 <commonN2>
    243a:	22 0f       	add	r18, r18
    243c:	f9 cf       	rjmp	.-14     	; 0x2430 <commonN1>

0000243e <doExorN2>:
    243e:	01 27       	eor	r16, r17
    2440:	56 e0       	ldi	r21, 0x06	; 6

00002442 <commonN2>:
    2442:	00 00       	nop
    2444:	3b 5a       	subi	r19, 0xAB	; 171
    2446:	0b b9       	out	0x0b, r16	; 11
    2448:	d0 f2       	brcs	.-76     	; 0x23fe <stuffN1Delay>

0000244a <stuff6Delay>:
    244a:	27 95       	ror	r18
    244c:	28 f4       	brcc	.+10     	; 0x2458 <doExor6>
    244e:	51 50       	subi	r21, 0x01	; 1
    2450:	29 f4       	brne	.+10     	; 0x245c <common6>
    2452:	22 0f       	add	r18, r18
    2454:	00 00       	nop
    2456:	f9 cf       	rjmp	.-14     	; 0x244a <stuff6Delay>

00002458 <doExor6>:
    2458:	01 27       	eor	r16, r17
    245a:	56 e0       	ldi	r21, 0x06	; 6

0000245c <common6>:
    245c:	27 95       	ror	r18
    245e:	0b b9       	out	0x0b, r16	; 11
    2460:	20 f4       	brcc	.+8      	; 0x246a <doExor7>
    2462:	51 50       	subi	r21, 0x01	; 1
    2464:	21 f4       	brne	.+8      	; 0x246e <common7>
    2466:	22 0f       	add	r18, r18
    2468:	f9 cf       	rjmp	.-14     	; 0x245c <common6>

0000246a <doExor7>:
    246a:	01 27       	eor	r16, r17
    246c:	56 e0       	ldi	r21, 0x06	; 6

0000246e <common7>:
    246e:	29 91       	ld	r18, Y+
    2470:	33 23       	and	r19, r19
    2472:	0b b9       	out	0x0b, r16	; 11
    2474:	21 f6       	brne	.-120    	; 0x23fe <stuffN1Delay>
    2476:	07 7e       	andi	r16, 0xE7	; 231
    2478:	10 91 72 02 	lds	r17, 0x0272
    247c:	11 0f       	add	r17, r17
    247e:	c6 51       	subi	r28, 0x16	; 22
    2480:	d0 40       	sbci	r29, 0x00	; 0
    2482:	0b b9       	out	0x0b, r16	; 11
    2484:	11 f0       	breq	.+4      	; 0x248a <skipAddrAssign>
    2486:	10 93 6c 02 	sts	0x026C, r17

0000248a <skipAddrAssign>:
    248a:	12 e0       	ldi	r17, 0x02	; 2
    248c:	1c bb       	out	0x1c, r17	; 28
    248e:	00 61       	ori	r16, 0x10	; 16
    2490:	1a b1       	in	r17, 0x0a	; 10
    2492:	17 7e       	andi	r17, 0xE7	; 231
    2494:	40 2f       	mov	r20, r16
    2496:	47 7e       	andi	r20, 0xE7	; 231
    2498:	5f 91       	pop	r21
    249a:	00 c0       	rjmp	.+0      	; 0x249c <skipAddrAssign+0x12>
    249c:	00 c0       	rjmp	.+0      	; 0x249e <skipAddrAssign+0x14>
    249e:	0b b9       	out	0x0b, r16	; 11
    24a0:	1a b9       	out	0x0a, r17	; 10
    24a2:	4b b9       	out	0x0b, r20	; 11
    24a4:	66 cf       	rjmp	.-308    	; 0x2372 <doReturn>

000024a6 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    24a6:	e9 e6       	ldi	r30, 0x69	; 105
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	8c 60       	ori	r24, 0x0C	; 12
    24ae:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    24b0:	e9 9a       	sbi	0x1d, 1	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    24b2:	8b e4       	ldi	r24, 0x4B	; 75
    24b4:	80 93 61 02 	sts	0x0261, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    24b8:	80 93 8c 02 	sts	0x028C, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    24bc:	8a e5       	ldi	r24, 0x5A	; 90
    24be:	80 93 60 02 	sts	0x0260, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
    24c2:	80 93 8b 02 	sts	0x028B, r24
#endif
#endif
}
    24c6:	08 95       	ret

000024c8 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    24ce:	90 91 71 02 	lds	r25, 0x0271
    24d2:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
    24d4:	97 fd       	sbrc	r25, 7
    24d6:	a8 c0       	rjmp	.+336    	; 0x2628 <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    24d8:	20 91 6e 02 	lds	r18, 0x026E
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    24dc:	80 91 6d 02 	lds	r24, 0x026D
    24e0:	8d 32       	cpi	r24, 0x2D	; 45
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <usbPoll+0x1e>
    24e4:	9f c0       	rjmp	.+318    	; 0x2624 <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    24e6:	98 30       	cpi	r25, 0x08	; 8
    24e8:	09 f0       	breq	.+2      	; 0x24ec <usbPoll+0x24>
    24ea:	9c c0       	rjmp	.+312    	; 0x2624 <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    24ec:	cc e0       	ldi	r28, 0x0C	; 12
    24ee:	d0 e0       	ldi	r29, 0x00	; 0
    24f0:	c2 1b       	sub	r28, r18
    24f2:	d1 09       	sbc	r29, r1
    24f4:	cb 58       	subi	r28, 0x8B	; 139
    24f6:	dd 4f       	sbci	r29, 0xFD	; 253
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    24f8:	83 ec       	ldi	r24, 0xC3	; 195
    24fa:	80 93 55 02 	sts	0x0255, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    24fe:	8a e5       	ldi	r24, 0x5A	; 90
    2500:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
    2504:	10 92 29 01 	sts	0x0129, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    2508:	88 81       	ld	r24, Y
    250a:	80 76       	andi	r24, 0x60	; 96
    250c:	29 f0       	breq	.+10     	; 0x2518 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    250e:	ce 01       	movw	r24, r28
    2510:	0e 94 33 10 	call	0x2066	; 0x2066 <usbFunctionSetup>
    2514:	28 2f       	mov	r18, r24
    2516:	7d c0       	rjmp	.+250    	; 0x2612 <usbPoll+0x14a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    251a:	10 92 5e 02 	sts	0x025E, r1
    SWITCH_START(rq->bRequest)
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    2520:	88 23       	and	r24, r24
    2522:	21 f4       	brne	.+8      	; 0x252c <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    2524:	10 92 5f 02 	sts	0x025F, r1
    2528:	22 e0       	ldi	r18, 0x02	; 2
    252a:	6d c0       	rjmp	.+218    	; 0x2606 <usbPoll+0x13e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    252c:	85 30       	cpi	r24, 0x05	; 5
    252e:	19 f4       	brne	.+6      	; 0x2536 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
    2530:	90 93 72 02 	sts	0x0272, r25
    2534:	67 c0       	rjmp	.+206    	; 0x2604 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    2536:	86 30       	cpi	r24, 0x06	; 6
    2538:	09 f0       	breq	.+2      	; 0x253c <usbPoll+0x74>
    253a:	4e c0       	rjmp	.+156    	; 0x25d8 <usbPoll+0x110>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	41 f4       	brne	.+16     	; 0x2552 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    2542:	86 ee       	ldi	r24, 0xE6	; 230
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 70 02 	sts	0x0270, r25
    254a:	80 93 6f 02 	sts	0x026F, r24
    254e:	22 e1       	ldi	r18, 0x12	; 18
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    2552:	82 30       	cpi	r24, 0x02	; 2
    2554:	41 f4       	brne	.+16     	; 0x2566 <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    2556:	88 ef       	ldi	r24, 0xF8	; 248
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 70 02 	sts	0x0270, r25
    255e:	80 93 6f 02 	sts	0x026F, r24
    2562:	29 e2       	ldi	r18, 0x29	; 41
    2564:	35 c0       	rjmp	.+106    	; 0x25d0 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	f1 f4       	brne	.+60     	; 0x25a6 <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    256a:	99 23       	and	r25, r25
    256c:	41 f4       	brne	.+16     	; 0x257e <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    256e:	82 eb       	ldi	r24, 0xB2	; 178
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	90 93 70 02 	sts	0x0270, r25
    2576:	80 93 6f 02 	sts	0x026F, r24
    257a:	24 e0       	ldi	r18, 0x04	; 4
    257c:	29 c0       	rjmp	.+82     	; 0x25d0 <usbPoll+0x108>
        SWITCH_CASE(1)
    257e:	91 30       	cpi	r25, 0x01	; 1
    2580:	41 f4       	brne	.+16     	; 0x2592 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    2582:	86 eb       	ldi	r24, 0xB6	; 182
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	90 93 70 02 	sts	0x0270, r25
    258a:	80 93 6f 02 	sts	0x026F, r24
    258e:	2c e1       	ldi	r18, 0x1C	; 28
    2590:	1f c0       	rjmp	.+62     	; 0x25d0 <usbPoll+0x108>
        SWITCH_CASE(2)
    2592:	92 30       	cpi	r25, 0x02	; 2
    2594:	e1 f4       	brne	.+56     	; 0x25ce <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    2596:	82 ed       	ldi	r24, 0xD2	; 210
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	90 93 70 02 	sts	0x0270, r25
    259e:	80 93 6f 02 	sts	0x026F, r24
    25a2:	24 e1       	ldi	r18, 0x14	; 20
    25a4:	15 c0       	rjmp	.+42     	; 0x25d0 <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    25a6:	81 32       	cpi	r24, 0x21	; 33
    25a8:	41 f4       	brne	.+16     	; 0x25ba <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    25aa:	8a e0       	ldi	r24, 0x0A	; 10
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	90 93 70 02 	sts	0x0270, r25
    25b2:	80 93 6f 02 	sts	0x026F, r24
    25b6:	29 e0       	ldi	r18, 0x09	; 9
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    25ba:	82 32       	cpi	r24, 0x22	; 34
    25bc:	41 f4       	brne	.+16     	; 0x25ce <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    25be:	88 e6       	ldi	r24, 0x68	; 104
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	90 93 70 02 	sts	0x0270, r25
    25c6:	80 93 6f 02 	sts	0x026F, r24
    25ca:	2a e4       	ldi	r18, 0x4A	; 74
    25cc:	01 c0       	rjmp	.+2      	; 0x25d0 <usbPoll+0x108>
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    25d0:	80 e4       	ldi	r24, 0x40	; 64
    25d2:	80 93 29 01 	sts	0x0129, r24
    25d6:	1d c0       	rjmp	.+58     	; 0x2612 <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	21 f4       	brne	.+8      	; 0x25e4 <usbPoll+0x11c>
    25dc:	21 e0       	ldi	r18, 0x01	; 1
    25de:	84 e7       	ldi	r24, 0x74	; 116
    25e0:	92 e0       	ldi	r25, 0x02	; 2
    25e2:	13 c0       	rjmp	.+38     	; 0x260a <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    25e4:	89 30       	cpi	r24, 0x09	; 9
    25e6:	19 f4       	brne	.+6      	; 0x25ee <usbPoll+0x126>
        usbConfiguration = value;
    25e8:	90 93 74 02 	sts	0x0274, r25
    25ec:	0b c0       	rjmp	.+22     	; 0x2604 <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    25ee:	8a 30       	cpi	r24, 0x0A	; 10
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <usbPoll+0x12e>
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	08 c0       	rjmp	.+16     	; 0x2606 <usbPoll+0x13e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    25f6:	8b 30       	cpi	r24, 0x0B	; 11
    25f8:	29 f4       	brne	.+10     	; 0x2604 <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    25fa:	8b e4       	ldi	r24, 0x4B	; 75
    25fc:	80 93 61 02 	sts	0x0261, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    2600:	80 93 8c 02 	sts	0x028C, r24
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	8e e5       	ldi	r24, 0x5E	; 94
    2608:	92 e0       	ldi	r25, 0x02	; 2
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    260a:	90 93 70 02 	sts	0x0270, r25
    260e:	80 93 6f 02 	sts	0x026F, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	88 23       	and	r24, r24
    2616:	21 f4       	brne	.+8      	; 0x2620 <usbPoll+0x158>
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	82 17       	cp	r24, r18
    261c:	08 f4       	brcc	.+2      	; 0x2620 <usbPoll+0x158>
    261e:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    2620:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    2624:	10 92 71 02 	sts	0x0271, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    2628:	80 91 00 01 	lds	r24, 0x0100
    262c:	84 ff       	sbrs	r24, 4
    262e:	4a c0       	rjmp	.+148    	; 0x26c4 <usbPoll+0x1fc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    2630:	80 91 01 01 	lds	r24, 0x0101
    2634:	8f 3f       	cpi	r24, 0xFF	; 255
    2636:	09 f4       	brne	.+2      	; 0x263a <usbPoll+0x172>
    2638:	45 c0       	rjmp	.+138    	; 0x26c4 <usbPoll+0x1fc>
    263a:	18 2f       	mov	r17, r24
    263c:	89 30       	cpi	r24, 0x09	; 9
    263e:	08 f0       	brcs	.+2      	; 0x2642 <usbPoll+0x17a>
    2640:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    2642:	81 1b       	sub	r24, r17
    2644:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    2648:	80 91 55 02 	lds	r24, 0x0255
    264c:	98 e8       	ldi	r25, 0x88	; 136
    264e:	89 27       	eor	r24, r25
    2650:	80 93 55 02 	sts	0x0255, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    2654:	11 23       	and	r17, r17
    2656:	41 f1       	breq	.+80     	; 0x26a8 <usbPoll+0x1e0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    2658:	20 91 6f 02 	lds	r18, 0x026F
    265c:	30 91 70 02 	lds	r19, 0x0270
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    2660:	80 91 29 01 	lds	r24, 0x0129
    2664:	86 ff       	sbrs	r24, 6
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <usbPoll+0x1ba>
    2668:	a6 e5       	ldi	r26, 0x56	; 86
    266a:	b2 e0       	ldi	r27, 0x02	; 2
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    2670:	f9 01       	movw	r30, r18
    2672:	e8 0f       	add	r30, r24
    2674:	f9 1f       	adc	r31, r25
    2676:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    2678:	ed 93       	st	X+, r30
    267a:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    267c:	18 17       	cp	r17, r24
    267e:	c1 f7       	brne	.-16     	; 0x2670 <usbPoll+0x1a8>
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <usbPoll+0x1ca>
    2682:	91 2f       	mov	r25, r17
    2684:	d9 01       	movw	r26, r18
    2686:	e6 e5       	ldi	r30, 0x56	; 86
    2688:	f2 e0       	ldi	r31, 0x02	; 2
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    268a:	8d 91       	ld	r24, X+
    268c:	81 93       	st	Z+, r24
                }while(--i);
    268e:	91 50       	subi	r25, 0x01	; 1
    2690:	e1 f7       	brne	.-8      	; 0x268a <usbPoll+0x1c2>
    2692:	11 50       	subi	r17, 0x01	; 1
    2694:	81 2f       	mov	r24, r17
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	1f 5f       	subi	r17, 0xFF	; 255
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    26a0:	90 93 70 02 	sts	0x0270, r25
    26a4:	80 93 6f 02 	sts	0x026F, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    26a8:	86 e5       	ldi	r24, 0x56	; 86
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	61 2f       	mov	r22, r17
    26ae:	0e 94 0a 11 	call	0x2214	; 0x2214 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    26b2:	61 2f       	mov	r22, r17
    26b4:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    26b6:	6c 30       	cpi	r22, 0x0C	; 12
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <usbPoll+0x1f8>
            usbMsgLen = USB_NO_MSG;
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    26c0:	60 93 00 01 	sts	0x0100, r22
    26c4:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    26c6:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    26c8:	88 71       	andi	r24, 0x18	; 24
    26ca:	31 f4       	brne	.+12     	; 0x26d8 <usbPoll+0x210>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    26cc:	91 50       	subi	r25, 0x01	; 1
    26ce:	d9 f7       	brne	.-10     	; 0x26c6 <usbPoll+0x1fe>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    26d0:	10 92 72 02 	sts	0x0272, r1
    usbDeviceAddr = 0;
    26d4:	10 92 6c 02 	sts	0x026C, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	08 95       	ret

000026e0 <usbSetInterrupt3>:
}
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    26e0:	1f 93       	push	r17
    26e2:	dc 01       	movw	r26, r24
    26e4:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    26e6:	80 91 8b 02 	lds	r24, 0x028B
    26ea:	84 ff       	sbrs	r24, 4
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <usbSetInterrupt3+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    26ee:	80 91 8c 02 	lds	r24, 0x028C
    26f2:	98 e8       	ldi	r25, 0x88	; 136
    26f4:	89 27       	eor	r24, r25
    26f6:	80 93 8c 02 	sts	0x028C, r24
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <usbSetInterrupt3+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    26fc:	8a e5       	ldi	r24, 0x5A	; 90
    26fe:	80 93 8b 02 	sts	0x028B, r24
    2702:	91 2f       	mov	r25, r17
    2704:	ed e8       	ldi	r30, 0x8D	; 141
    2706:	f2 e0       	ldi	r31, 0x02	; 2
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    2708:	8d 91       	ld	r24, X+
    270a:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    270c:	91 50       	subi	r25, 0x01	; 1
    270e:	e1 f7       	brne	.-8      	; 0x2708 <usbSetInterrupt3+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    2710:	8d e8       	ldi	r24, 0x8D	; 141
    2712:	92 e0       	ldi	r25, 0x02	; 2
    2714:	61 2f       	mov	r22, r17
    2716:	0e 94 0a 11 	call	0x2214	; 0x2214 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    271a:	1c 5f       	subi	r17, 0xFC	; 252
    271c:	10 93 8b 02 	sts	0x028B, r17

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
}
    2720:	1f 91       	pop	r17
    2722:	08 95       	ret

00002724 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    2724:	1f 93       	push	r17
    2726:	dc 01       	movw	r26, r24
    2728:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    272a:	80 91 60 02 	lds	r24, 0x0260
    272e:	84 ff       	sbrs	r24, 4
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    2732:	80 91 61 02 	lds	r24, 0x0261
    2736:	98 e8       	ldi	r25, 0x88	; 136
    2738:	89 27       	eor	r24, r25
    273a:	80 93 61 02 	sts	0x0261, r24
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    2740:	8a e5       	ldi	r24, 0x5A	; 90
    2742:	80 93 60 02 	sts	0x0260, r24
    2746:	91 2f       	mov	r25, r17
    2748:	e2 e6       	ldi	r30, 0x62	; 98
    274a:	f2 e0       	ldi	r31, 0x02	; 2
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    274c:	8d 91       	ld	r24, X+
    274e:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    2750:	91 50       	subi	r25, 0x01	; 1
    2752:	e1 f7       	brne	.-8      	; 0x274c <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    2754:	82 e6       	ldi	r24, 0x62	; 98
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	61 2f       	mov	r22, r17
    275a:	0e 94 0a 11 	call	0x2214	; 0x2214 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    275e:	1c 5f       	subi	r17, 0xFC	; 252
    2760:	10 93 60 02 	sts	0x0260, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    2764:	1f 91       	pop	r17
    2766:	08 95       	ret

00002768 <twi_slave_init>:
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    2768:	10 92 4b 02 	sts	0x024B, r1
    276c:	10 92 4a 02 	sts	0x024A, r1

        // set slave address
        TWAR = addr << 1;
    2770:	88 0f       	add	r24, r24
    2772:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2776:	85 e4       	ldi	r24, 0x45	; 69
    2778:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    277c:	78 94       	sei
}
    277e:	08 95       	ret

00002780 <twi_clear_int>:

void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
    2780:	88 23       	and	r24, r24
    2782:	11 f0       	breq	.+4      	; 0x2788 <twi_clear_int+0x8>
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2784:	85 ec       	ldi	r24, 0xC5	; 197
    2786:	01 c0       	rjmp	.+2      	; 0x278a <twi_clear_int+0xa>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2788:	85 e8       	ldi	r24, 0x85	; 133
    278a:	80 93 bc 00 	sts	0x00BC, r24
    278e:	08 95       	ret

00002790 <wm_ror8>:
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	88 e0       	ldi	r24, 0x08	; 8
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	86 1b       	sub	r24, r22
    279c:	97 0b       	sbc	r25, r23
    279e:	a9 01       	movw	r20, r18
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <wm_ror8+0x16>
    27a2:	44 0f       	add	r20, r20
    27a4:	55 1f       	adc	r21, r21
    27a6:	8a 95       	dec	r24
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <wm_ror8+0x12>
    27aa:	ca 01       	movw	r24, r20
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <wm_ror8+0x22>
    27ae:	35 95       	asr	r19
    27b0:	27 95       	ror	r18
    27b2:	6a 95       	dec	r22
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <wm_ror8+0x1e>
}
    27b6:	82 2b       	or	r24, r18
    27b8:	08 95       	ret

000027ba <wm_newaction>:
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy((void*)twi_reg, d, 6);
    27ba:	aa e4       	ldi	r26, 0x4A	; 74
    27bc:	b1 e0       	ldi	r27, 0x01	; 1
    27be:	fc 01       	movw	r30, r24
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	01 90       	ld	r0, Z+
    27c4:	0d 92       	st	X+, r0
    27c6:	81 50       	subi	r24, 0x01	; 1
    27c8:	e1 f7       	brne	.-8      	; 0x27c2 <wm_newaction+0x8>
}
    27ca:	08 95       	ret

000027cc <wm_init>:

void wm_init(const unsigned char * id, unsigned char * t, const unsigned char * cal_data, void (*function)(void))
{
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	18 2f       	mov	r17, r24
    27d2:	09 2f       	mov	r16, r25
}

void wm_newaction(unsigned char * d)
{
        // load button data from user application
        memcpy((void*)twi_reg, d, 6);
    27d4:	aa e4       	ldi	r26, 0x4A	; 74
    27d6:	b1 e0       	ldi	r27, 0x01	; 1
    27d8:	fb 01       	movw	r30, r22
    27da:	86 e0       	ldi	r24, 0x06	; 6
    27dc:	01 90       	ld	r0, Z+
    27de:	0d 92       	st	X+, r0
    27e0:	81 50       	subi	r24, 0x01	; 1
    27e2:	e1 f7       	brne	.-8      	; 0x27dc <wm_init+0x10>
        // link user function
        // wm_sample_event = function;

        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption
    27e4:	10 92 3a 02 	sts	0x023A, r1
    27e8:	81 2f       	mov	r24, r17
    27ea:	90 2f       	mov	r25, r16
    27ec:	9c 01       	movw	r18, r24
    27ee:	d9 01       	movw	r26, r18
    27f0:	2a ef       	ldi	r18, 0xFA	; 250
    27f2:	30 e0       	ldi	r19, 0x00	; 0

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
        {
                twi_reg[j] = id[i];
    27f4:	8d 91       	ld	r24, X+
    27f6:	f9 01       	movw	r30, r18
    27f8:	e6 5b       	subi	r30, 0xB6	; 182
    27fa:	fe 4f       	sbci	r31, 0xFE	; 254
    27fc:	80 83       	st	Z, r24
        // start state
        wm_newaction(t);
        twi_reg[0xF0] = 0; // disable encryption

        // set id
        for(unsigned int i = 0, j = 0xFA; i < 6; i++, j++)
    27fe:	2f 5f       	subi	r18, 0xFF	; 255
    2800:	3f 4f       	sbci	r19, 0xFF	; 255
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	20 30       	cpi	r18, 0x00	; 0
    2806:	38 07       	cpc	r19, r24
    2808:	a9 f7       	brne	.-22     	; 0x27f4 <wm_init+0x28>
    280a:	da 01       	movw	r26, r20
    280c:	20 e2       	ldi	r18, 0x20	; 32
    280e:	30 e0       	ldi	r19, 0x00	; 0
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
        {
                twi_reg[j] = cal_data[i];
    2810:	8d 91       	ld	r24, X+
    2812:	f9 01       	movw	r30, r18
    2814:	e6 5b       	subi	r30, 0xB6	; 182
    2816:	fe 4f       	sbci	r31, 0xFE	; 254
    2818:	80 83       	st	Z, r24
        {
                twi_reg[j] = id[i];
        }

        // set calibration data
        for(unsigned int i = 0, j = 0x20; i < 6; i++, j++)
    281a:	2f 5f       	subi	r18, 0xFF	; 255
    281c:	3f 4f       	sbci	r19, 0xFF	; 255
    281e:	26 32       	cpi	r18, 0x26	; 38
    2820:	31 05       	cpc	r19, r1
    2822:	b1 f7       	brne	.-20     	; 0x2810 <wm_init+0x44>
        /*dev_detect_port &= 0xFF ^ _BV(dev_detect_pin);
        dev_detect_ddr |= _BV(dev_detect_pin);
        _delay_ms(50); // delay to simulate disconnect
		*/
        // ready twi bus, no pull-ups
        twi_port &= 0xFF ^ _BV(twi_scl_pin);
    2824:	45 98       	cbi	0x08, 5	; 8
        twi_port &= 0xFF ^ _BV(twi_sda_pin);
    2826:	44 98       	cbi	0x08, 4	; 8
static volatile unsigned char twi_rw_len; // length of most recent operation

void twi_slave_init(unsigned char addr)
{
        // initialize stuff
        twi_reg_addr = 0;
    2828:	10 92 4b 02 	sts	0x024B, r1
    282c:	10 92 4a 02 	sts	0x024A, r1

        // set slave address
        TWAR = addr << 1;
    2830:	84 ea       	ldi	r24, 0xA4	; 164
    2832:	80 93 ba 00 	sts	0x00BA, r24
        
        // enable twi module, acks, and twi interrupt
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2836:	85 e4       	ldi	r24, 0x45	; 69
    2838:	80 93 bc 00 	sts	0x00BC, r24

        // enable interrupts
        sei();
    283c:	78 94       	sei
        // start twi slave, link events
        twi_slave_init(0x52);

        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <wm_gentabs>:
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
}

void wm_gentabs()
{
    2844:	2f 92       	push	r2
    2846:	3f 92       	push	r3
    2848:	4f 92       	push	r4
    284a:	5f 92       	push	r5
    284c:	6f 92       	push	r6
    284e:	7f 92       	push	r7
    2850:	8f 92       	push	r8
    2852:	9f 92       	push	r9
    2854:	af 92       	push	r10
    2856:	bf 92       	push	r11
    2858:	cf 92       	push	r12
    285a:	df 92       	push	r13
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	68 97       	sbiw	r28, 0x18	; 24
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	41 e2       	ldi	r20, 0x21	; 33
    287a:	64 2e       	mov	r6, r20
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	74 2e       	mov	r7, r20
    2880:	88 24       	eor	r8, r8
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    2882:	37 e0       	ldi	r19, 0x07	; 7
    2884:	23 2e       	mov	r2, r19
    2886:	31 2c       	mov	r3, r1
    2888:	2c 0e       	add	r2, r28
    288a:	3d 1e       	adc	r3, r29
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    288c:	28 e0       	ldi	r18, 0x08	; 8
    288e:	42 2e       	mov	r4, r18
    2890:	51 2c       	mov	r5, r1
    2892:	cb c0       	rjmp	.+406    	; 0x2a2a <wm_gentabs+0x1e6>
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
    2894:	84 91       	lpm	r24, Z+
    2896:	8d 93       	st	X+, r24
    2898:	31 96       	adiw	r30, 0x01	; 1
                // generate test key
                unsigned char ans[6];
                unsigned char tkey[6];
                unsigned char t0[10];
                
                for(unsigned char i = 0; i < 6; i++)
    289a:	a2 15       	cp	r26, r2
    289c:	b3 05       	cpc	r27, r3
    289e:	d1 f7       	brne	.-12     	; 0x2894 <wm_gentabs+0x50>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
    28a4:	fc 01       	movw	r30, r24
    28a6:	e6 5d       	subi	r30, 0xD6	; 214
    28a8:	fe 4f       	sbci	r31, 0xFE	; 254
    28aa:	e0 81       	ld	r30, Z
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	e5 5b       	subi	r30, 0xB5	; 181
    28b0:	fe 4f       	sbci	r31, 0xFE	; 254
    28b2:	e4 91       	lpm	r30, Z+
    28b4:	ad e0       	ldi	r26, 0x0D	; 13
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ac 0f       	add	r26, r28
    28ba:	bd 1f       	adc	r27, r29
    28bc:	a8 0f       	add	r26, r24
    28be:	b9 1f       	adc	r27, r25
    28c0:	ec 93       	st	X, r30
    28c2:	01 96       	adiw	r24, 0x01	; 1
                
                for(unsigned char i = 0; i < 6; i++)
                {
                        ans[i] = pgm_read_byte(&(ans_tbl[idx][i]));
                }       
                for(unsigned char i = 0; i < 10; i++)
    28c4:	8a 30       	cpi	r24, 0x0A	; 10
    28c6:	91 05       	cpc	r25, r1
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <wm_gentabs+0x60>
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    28ca:	aa 88       	ldd	r10, Y+18	; 0x12
    28cc:	cf 84       	ldd	r12, Y+15	; 0x0f
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    28ce:	29 81       	ldd	r18, Y+1	; 0x01
    28d0:	2a 25       	eor	r18, r10
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4c 2d       	mov	r20, r12
    28d6:	47 70       	andi	r20, 0x07	; 7
    28d8:	50 e0       	ldi	r21, 0x00	; 0
                for(unsigned char i = 0; i < 10; i++)
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
    28da:	9e 88       	ldd	r9, Y+22	; 0x16
    28dc:	b9 88       	ldd	r11, Y+17	; 0x11
    28de:	c2 01       	movw	r24, r4
    28e0:	84 1b       	sub	r24, r20
    28e2:	95 0b       	sbc	r25, r21
    28e4:	b9 01       	movw	r22, r18
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <wm_gentabs+0xa8>
    28e8:	66 0f       	add	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	8a 95       	dec	r24
    28ee:	e2 f7       	brpl	.-8      	; 0x28e8 <wm_gentabs+0xa4>
    28f0:	cb 01       	movw	r24, r22
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <wm_gentabs+0xb4>
    28f4:	35 95       	asr	r19
    28f6:	27 95       	ror	r18
    28f8:	4a 95       	dec	r20
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <wm_gentabs+0xb0>
    28fc:	82 2b       	or	r24, r18
    28fe:	89 19       	sub	r24, r9
    2900:	8b 25       	eor	r24, r11
    2902:	8f 83       	std	Y+7, r24	; 0x07
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    2904:	ee 84       	ldd	r14, Y+14	; 0x0e
    2906:	dd 84       	ldd	r13, Y+13	; 0x0d
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2908:	2a 81       	ldd	r18, Y+2	; 0x02
    290a:	2e 25       	eor	r18, r14
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4d 2d       	mov	r20, r13
    2910:	47 70       	andi	r20, 0x07	; 7
    2912:	50 e0       	ldi	r21, 0x00	; 0
                {
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
    2914:	ac 89       	ldd	r26, Y+20	; 0x14
    2916:	c2 01       	movw	r24, r4
    2918:	84 1b       	sub	r24, r20
    291a:	95 0b       	sbc	r25, r21
    291c:	f9 01       	movw	r30, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <wm_gentabs+0xe0>
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	8a 95       	dec	r24
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <wm_gentabs+0xdc>
    2928:	cf 01       	movw	r24, r30
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <wm_gentabs+0xec>
    292c:	35 95       	asr	r19
    292e:	27 95       	ror	r18
    2930:	4a 95       	dec	r20
    2932:	e2 f7       	brpl	.-8      	; 0x292c <wm_gentabs+0xe8>
    2934:	82 2b       	or	r24, r18
    2936:	8a 19       	sub	r24, r10
    2938:	8a 27       	eor	r24, r26
    293a:	88 87       	std	Y+8, r24	; 0x08
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    293c:	eb 89       	ldd	r30, Y+19	; 0x13
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	2e 27       	eor	r18, r30
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	0d 89       	ldd	r16, Y+21	; 0x15
    2946:	07 70       	andi	r16, 0x07	; 7
    2948:	10 e0       	ldi	r17, 0x00	; 0
    294a:	b2 01       	movw	r22, r4
    294c:	60 1b       	sub	r22, r16
    294e:	71 0b       	sbc	r23, r17
                        t0[i] = pgm_read_byte(&(sboxes[0][wm_rand[i]]));
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
    2950:	c9 01       	movw	r24, r18
    2952:	06 2e       	mov	r0, r22
    2954:	02 c0       	rjmp	.+4      	; 0x295a <wm_gentabs+0x116>
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	0a 94       	dec	r0
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <wm_gentabs+0x112>
    295e:	00 2e       	mov	r0, r16
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <wm_gentabs+0x122>
    2962:	35 95       	asr	r19
    2964:	27 95       	ror	r18
    2966:	0a 94       	dec	r0
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <wm_gentabs+0x11e>
    296a:	82 2b       	or	r24, r18
    296c:	8c 19       	sub	r24, r12
    296e:	8d 25       	eor	r24, r13
    2970:	89 87       	std	Y+9, r24	; 0x09
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    2972:	2c 81       	ldd	r18, Y+4	; 0x04
    2974:	2b 25       	eor	r18, r11
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a 2f       	mov	r20, r26
    297a:	47 70       	andi	r20, 0x07	; 7
    297c:	84 2f       	mov	r24, r20
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	98 8f       	std	Y+24, r25	; 0x18
    2982:	8f 8b       	std	Y+23, r24	; 0x17
                }
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
    2984:	d8 88       	ldd	r13, Y+16	; 0x10
    2986:	c2 01       	movw	r24, r4
    2988:	4f 89       	ldd	r20, Y+23	; 0x17
    298a:	58 8d       	ldd	r21, Y+24	; 0x18
    298c:	84 1b       	sub	r24, r20
    298e:	95 0b       	sbc	r25, r21
    2990:	a9 01       	movw	r20, r18
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <wm_gentabs+0x154>
    2994:	44 0f       	add	r20, r20
    2996:	55 1f       	adc	r21, r21
    2998:	8a 95       	dec	r24
    299a:	e2 f7       	brpl	.-8      	; 0x2994 <wm_gentabs+0x150>
    299c:	ca 01       	movw	r24, r20
    299e:	0f 88       	ldd	r0, Y+23	; 0x17
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <wm_gentabs+0x162>
    29a2:	35 95       	asr	r19
    29a4:	27 95       	ror	r18
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <wm_gentabs+0x15e>
    29aa:	82 2b       	or	r24, r18
    29ac:	8d 19       	sub	r24, r13
    29ae:	8c 25       	eor	r24, r12
    29b0:	8a 87       	std	Y+10, r24	; 0x0a
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	e8 26       	eor	r14, r24
    29b6:	ff 24       	eor	r15, r15
    29b8:	e7 70       	andi	r30, 0x07	; 7
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
        
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
    29bc:	c2 01       	movw	r24, r4
    29be:	8e 1b       	sub	r24, r30
    29c0:	9f 0b       	sbc	r25, r31
    29c2:	97 01       	movw	r18, r14
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <wm_gentabs+0x186>
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	8a 95       	dec	r24
    29cc:	e2 f7       	brpl	.-8      	; 0x29c6 <wm_gentabs+0x182>
    29ce:	c9 01       	movw	r24, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <wm_gentabs+0x192>
    29d2:	f5 94       	asr	r15
    29d4:	e7 94       	ror	r14
    29d6:	ea 95       	dec	r30
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <wm_gentabs+0x18e>
    29da:	8e 29       	or	r24, r14
    29dc:	8d 19       	sub	r24, r13
    29de:	8b 25       	eor	r24, r11
    29e0:	8b 87       	std	Y+11, r24	; 0x0b
*/

unsigned char wm_ror8(unsigned char a, unsigned char b)
{
        // bit shift with roll-over
        return (a >> b) | ((a << (8 - b)) & 0xFF);
    29e2:	8e 81       	ldd	r24, Y+6	; 0x06
    29e4:	a8 27       	eor	r26, r24
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
                tkey[0] = ((wm_ror8((ans[0] ^ t0[5]), (t0[2] % 8)) - t0[9]) ^ t0[4]);
                tkey[1] = ((wm_ror8((ans[1] ^ t0[1]), (t0[0] % 8)) - t0[5]) ^ t0[7]);
                tkey[2] = ((wm_ror8((ans[2] ^ t0[6]), (t0[8] % 8)) - t0[2]) ^ t0[0]);
                tkey[3] = ((wm_ror8((ans[3] ^ t0[4]), (t0[7] % 8)) - t0[3]) ^ t0[2]);
                tkey[4] = ((wm_ror8((ans[4] ^ t0[1]), (t0[6] % 8)) - t0[3]) ^ t0[4]);
                tkey[5] = ((wm_ror8((ans[5] ^ t0[7]), (t0[8] % 8)) - t0[5]) ^ t0[9]);
    29e8:	ad 01       	movw	r20, r26
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <wm_gentabs+0x1ac>
    29ec:	44 0f       	add	r20, r20
    29ee:	55 1f       	adc	r21, r21
    29f0:	6a 95       	dec	r22
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <wm_gentabs+0x1a8>
    29f4:	ba 01       	movw	r22, r20
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <wm_gentabs+0x1b8>
    29f8:	b5 95       	asr	r27
    29fa:	a7 95       	ror	r26
    29fc:	0a 95       	dec	r16
    29fe:	e2 f7       	brpl	.-8      	; 0x29f8 <wm_gentabs+0x1b4>
    2a00:	6a 2b       	or	r22, r26
    2a02:	6a 19       	sub	r22, r10
    2a04:	69 25       	eor	r22, r9
    2a06:	6c 87       	std	Y+12, r22	; 0x0c

                // compare with actual key
                if(memcmp((void*)tkey, (void*)wm_key, 6) == 0) break; // if match, then use this idx
    2a08:	c1 01       	movw	r24, r2
    2a0a:	64 e3       	ldi	r22, 0x34	; 52
    2a0c:	71 e0       	ldi	r23, 0x01	; 1
    2a0e:	46 e0       	ldi	r20, 0x06	; 6
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 25 18 	call	0x304a	; 0x304a <memcmp>
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	61 f0       	breq	.+24     	; 0x2a32 <wm_gentabs+0x1ee>
void wm_gentabs()
{
        unsigned char idx;

        // check all idx
        for(idx = 0; idx < 7; idx++)
    2a1a:	83 94       	inc	r8
    2a1c:	66 e0       	ldi	r22, 0x06	; 6
    2a1e:	70 e0       	ldi	r23, 0x00	; 0
    2a20:	66 0e       	add	r6, r22
    2a22:	77 1e       	adc	r7, r23
    2a24:	77 e0       	ldi	r23, 0x07	; 7
    2a26:	87 16       	cp	r8, r23
    2a28:	21 f0       	breq	.+8      	; 0x2a32 <wm_gentabs+0x1ee>
    2a2a:	de 01       	movw	r26, r28
    2a2c:	11 96       	adiw	r26, 0x01	; 1
    2a2e:	f3 01       	movw	r30, r6
    2a30:	31 cf       	rjmp	.-414    	; 0x2894 <wm_gentabs+0x50>
                // compare with actual key
                if(memcmp((void*)tkey, (void*)wm_key, 6) == 0) break; // if match, then use this idx
        }

        // generate encryption from idx key and rand
        wm_ft[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[3]]));
    2a32:	28 2d       	mov	r18, r8
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	2f 5f       	subi	r18, 0xFF	; 255
    2a38:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3a:	52 2f       	mov	r21, r18
    2a3c:	44 27       	eor	r20, r20
    2a3e:	80 91 38 01 	lds	r24, 0x0138
    2a42:	fa 01       	movw	r30, r20
    2a44:	e8 0f       	add	r30, r24
    2a46:	f1 1d       	adc	r31, r1
    2a48:	e5 5b       	subi	r30, 0xB5	; 181
    2a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4c:	94 91       	lpm	r25, Z+
    2a4e:	2f 5f       	subi	r18, 0xFF	; 255
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	32 2f       	mov	r19, r18
    2a54:	22 27       	eor	r18, r18
    2a56:	80 91 2d 01 	lds	r24, 0x012D
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	e8 0f       	add	r30, r24
    2a5e:	f1 1d       	adc	r31, r1
    2a60:	e5 5b       	subi	r30, 0xB5	; 181
    2a62:	fe 4f       	sbci	r31, 0xFE	; 254
    2a64:	e4 91       	lpm	r30, Z+
    2a66:	e9 27       	eor	r30, r25
    2a68:	e0 93 3a 01 	sts	0x013A, r30
        wm_ft[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    2a6c:	80 91 36 01 	lds	r24, 0x0136
    2a70:	fa 01       	movw	r30, r20
    2a72:	e8 0f       	add	r30, r24
    2a74:	f1 1d       	adc	r31, r1
    2a76:	e5 5b       	subi	r30, 0xB5	; 181
    2a78:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7a:	94 91       	lpm	r25, Z+
    2a7c:	80 91 2f 01 	lds	r24, 0x012F
    2a80:	f9 01       	movw	r30, r18
    2a82:	e8 0f       	add	r30, r24
    2a84:	f1 1d       	adc	r31, r1
    2a86:	e5 5b       	subi	r30, 0xB5	; 181
    2a88:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8a:	e4 91       	lpm	r30, Z+
    2a8c:	e9 27       	eor	r30, r25
    2a8e:	e0 93 3b 01 	sts	0x013B, r30
        wm_ft[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    2a92:	80 91 39 01 	lds	r24, 0x0139
    2a96:	fa 01       	movw	r30, r20
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f1 1d       	adc	r31, r1
    2a9c:	e5 5b       	subi	r30, 0xB5	; 181
    2a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa0:	94 91       	lpm	r25, Z+
    2aa2:	80 91 31 01 	lds	r24, 0x0131
    2aa6:	f9 01       	movw	r30, r18
    2aa8:	e8 0f       	add	r30, r24
    2aaa:	f1 1d       	adc	r31, r1
    2aac:	e5 5b       	subi	r30, 0xB5	; 181
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	e4 91       	lpm	r30, Z+
    2ab2:	e9 27       	eor	r30, r25
    2ab4:	e0 93 3c 01 	sts	0x013C, r30
        wm_ft[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[2]]));
    2ab8:	80 91 34 01 	lds	r24, 0x0134
    2abc:	fa 01       	movw	r30, r20
    2abe:	e8 0f       	add	r30, r24
    2ac0:	f1 1d       	adc	r31, r1
    2ac2:	e5 5b       	subi	r30, 0xB5	; 181
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	94 91       	lpm	r25, Z+
    2ac8:	80 91 2c 01 	lds	r24, 0x012C
    2acc:	f9 01       	movw	r30, r18
    2ace:	e8 0f       	add	r30, r24
    2ad0:	f1 1d       	adc	r31, r1
    2ad2:	e5 5b       	subi	r30, 0xB5	; 181
    2ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad6:	e4 91       	lpm	r30, Z+
    2ad8:	e9 27       	eor	r30, r25
    2ada:	e0 93 3d 01 	sts	0x013D, r30
        wm_ft[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    2ade:	80 91 35 01 	lds	r24, 0x0135
    2ae2:	fa 01       	movw	r30, r20
    2ae4:	e8 0f       	add	r30, r24
    2ae6:	f1 1d       	adc	r31, r1
    2ae8:	e5 5b       	subi	r30, 0xB5	; 181
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	94 91       	lpm	r25, Z+
    2aee:	80 91 2e 01 	lds	r24, 0x012E
    2af2:	f9 01       	movw	r30, r18
    2af4:	e8 0f       	add	r30, r24
    2af6:	f1 1d       	adc	r31, r1
    2af8:	e5 5b       	subi	r30, 0xB5	; 181
    2afa:	fe 4f       	sbci	r31, 0xFE	; 254
    2afc:	e4 91       	lpm	r30, Z+
    2afe:	e9 27       	eor	r30, r25
    2b00:	e0 93 3e 01 	sts	0x013E, r30
        wm_ft[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    2b04:	80 91 37 01 	lds	r24, 0x0137
    2b08:	fa 01       	movw	r30, r20
    2b0a:	e8 0f       	add	r30, r24
    2b0c:	f1 1d       	adc	r31, r1
    2b0e:	e5 5b       	subi	r30, 0xB5	; 181
    2b10:	fe 4f       	sbci	r31, 0xFE	; 254
    2b12:	94 91       	lpm	r25, Z+
    2b14:	80 91 33 01 	lds	r24, 0x0133
    2b18:	f9 01       	movw	r30, r18
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f1 1d       	adc	r31, r1
    2b1e:	e5 5b       	subi	r30, 0xB5	; 181
    2b20:	fe 4f       	sbci	r31, 0xFE	; 254
    2b22:	e4 91       	lpm	r30, Z+
    2b24:	e9 27       	eor	r30, r25
    2b26:	e0 93 3f 01 	sts	0x013F, r30
        wm_ft[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    2b2a:	80 91 2a 01 	lds	r24, 0x012A
    2b2e:	fa 01       	movw	r30, r20
    2b30:	e8 0f       	add	r30, r24
    2b32:	f1 1d       	adc	r31, r1
    2b34:	e5 5b       	subi	r30, 0xB5	; 181
    2b36:	fe 4f       	sbci	r31, 0xFE	; 254
    2b38:	94 91       	lpm	r25, Z+
    2b3a:	80 91 30 01 	lds	r24, 0x0130
    2b3e:	f9 01       	movw	r30, r18
    2b40:	e8 0f       	add	r30, r24
    2b42:	f1 1d       	adc	r31, r1
    2b44:	e5 5b       	subi	r30, 0xB5	; 181
    2b46:	fe 4f       	sbci	r31, 0xFE	; 254
    2b48:	e4 91       	lpm	r30, Z+
    2b4a:	e9 27       	eor	r30, r25
    2b4c:	e0 93 40 01 	sts	0x0140, r30
        wm_ft[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    2b50:	80 91 2b 01 	lds	r24, 0x012B
    2b54:	fa 01       	movw	r30, r20
    2b56:	e8 0f       	add	r30, r24
    2b58:	f1 1d       	adc	r31, r1
    2b5a:	e5 5b       	subi	r30, 0xB5	; 181
    2b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5e:	94 91       	lpm	r25, Z+
    2b60:	80 91 32 01 	lds	r24, 0x0132
    2b64:	f9 01       	movw	r30, r18
    2b66:	e8 0f       	add	r30, r24
    2b68:	f1 1d       	adc	r31, r1
    2b6a:	e5 5b       	subi	r30, 0xB5	; 181
    2b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6e:	e4 91       	lpm	r30, Z+
    2b70:	e9 27       	eor	r30, r25
    2b72:	e0 93 41 01 	sts	0x0141, r30
        
        wm_sb[0] = pgm_read_byte(&(sboxes[idx + 1][wm_key[0]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[1]]));
    2b76:	80 91 34 01 	lds	r24, 0x0134
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	e8 0f       	add	r30, r24
    2b7e:	f1 1d       	adc	r31, r1
    2b80:	e5 5b       	subi	r30, 0xB5	; 181
    2b82:	fe 4f       	sbci	r31, 0xFE	; 254
    2b84:	94 91       	lpm	r25, Z+
    2b86:	80 91 2b 01 	lds	r24, 0x012B
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	e5 5b       	subi	r30, 0xB5	; 181
    2b92:	fe 4f       	sbci	r31, 0xFE	; 254
    2b94:	e4 91       	lpm	r30, Z+
    2b96:	e9 27       	eor	r30, r25
    2b98:	e0 93 42 01 	sts	0x0142, r30
        wm_sb[1] = pgm_read_byte(&(sboxes[idx + 1][wm_key[5]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[4]]));
    2b9c:	80 91 39 01 	lds	r24, 0x0139
    2ba0:	fa 01       	movw	r30, r20
    2ba2:	e8 0f       	add	r30, r24
    2ba4:	f1 1d       	adc	r31, r1
    2ba6:	e5 5b       	subi	r30, 0xB5	; 181
    2ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    2baa:	94 91       	lpm	r25, Z+
    2bac:	80 91 2e 01 	lds	r24, 0x012E
    2bb0:	f9 01       	movw	r30, r18
    2bb2:	e8 0f       	add	r30, r24
    2bb4:	f1 1d       	adc	r31, r1
    2bb6:	e5 5b       	subi	r30, 0xB5	; 181
    2bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bba:	e4 91       	lpm	r30, Z+
    2bbc:	e9 27       	eor	r30, r25
    2bbe:	e0 93 43 01 	sts	0x0143, r30
        wm_sb[2] = pgm_read_byte(&(sboxes[idx + 1][wm_key[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[0]]));
    2bc2:	80 91 37 01 	lds	r24, 0x0137
    2bc6:	fa 01       	movw	r30, r20
    2bc8:	e8 0f       	add	r30, r24
    2bca:	f1 1d       	adc	r31, r1
    2bcc:	e5 5b       	subi	r30, 0xB5	; 181
    2bce:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd0:	94 91       	lpm	r25, Z+
    2bd2:	80 91 2a 01 	lds	r24, 0x012A
    2bd6:	f9 01       	movw	r30, r18
    2bd8:	e8 0f       	add	r30, r24
    2bda:	f1 1d       	adc	r31, r1
    2bdc:	e5 5b       	subi	r30, 0xB5	; 181
    2bde:	fe 4f       	sbci	r31, 0xFE	; 254
    2be0:	e4 91       	lpm	r30, Z+
    2be2:	e9 27       	eor	r30, r25
    2be4:	e0 93 44 01 	sts	0x0144, r30
        wm_sb[3] = pgm_read_byte(&(sboxes[idx + 1][wm_key[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[9]]));
    2be8:	80 91 36 01 	lds	r24, 0x0136
    2bec:	fa 01       	movw	r30, r20
    2bee:	e8 0f       	add	r30, r24
    2bf0:	f1 1d       	adc	r31, r1
    2bf2:	e5 5b       	subi	r30, 0xB5	; 181
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	94 91       	lpm	r25, Z+
    2bf8:	80 91 33 01 	lds	r24, 0x0133
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	e8 0f       	add	r30, r24
    2c00:	f1 1d       	adc	r31, r1
    2c02:	e5 5b       	subi	r30, 0xB5	; 181
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	e4 91       	lpm	r30, Z+
    2c08:	e9 27       	eor	r30, r25
    2c0a:	e0 93 45 01 	sts	0x0145, r30
        wm_sb[4] = pgm_read_byte(&(sboxes[idx + 1][wm_key[4]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[7]]));
    2c0e:	80 91 38 01 	lds	r24, 0x0138
    2c12:	fa 01       	movw	r30, r20
    2c14:	e8 0f       	add	r30, r24
    2c16:	f1 1d       	adc	r31, r1
    2c18:	e5 5b       	subi	r30, 0xB5	; 181
    2c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1c:	94 91       	lpm	r25, Z+
    2c1e:	80 91 31 01 	lds	r24, 0x0131
    2c22:	f9 01       	movw	r30, r18
    2c24:	e8 0f       	add	r30, r24
    2c26:	f1 1d       	adc	r31, r1
    2c28:	e5 5b       	subi	r30, 0xB5	; 181
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	e4 91       	lpm	r30, Z+
    2c2e:	e9 27       	eor	r30, r25
    2c30:	e0 93 46 01 	sts	0x0146, r30
        wm_sb[5] = pgm_read_byte(&(sboxes[idx + 1][wm_key[1]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[8]]));
    2c34:	80 91 35 01 	lds	r24, 0x0135
    2c38:	fa 01       	movw	r30, r20
    2c3a:	e8 0f       	add	r30, r24
    2c3c:	f1 1d       	adc	r31, r1
    2c3e:	e5 5b       	subi	r30, 0xB5	; 181
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	94 91       	lpm	r25, Z+
    2c44:	80 91 32 01 	lds	r24, 0x0132
    2c48:	f9 01       	movw	r30, r18
    2c4a:	e8 0f       	add	r30, r24
    2c4c:	f1 1d       	adc	r31, r1
    2c4e:	e5 5b       	subi	r30, 0xB5	; 181
    2c50:	fe 4f       	sbci	r31, 0xFE	; 254
    2c52:	e4 91       	lpm	r30, Z+
    2c54:	e9 27       	eor	r30, r25
    2c56:	e0 93 47 01 	sts	0x0147, r30
        wm_sb[6] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[3]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[5]]));
    2c5a:	80 91 2d 01 	lds	r24, 0x012D
    2c5e:	fa 01       	movw	r30, r20
    2c60:	e8 0f       	add	r30, r24
    2c62:	f1 1d       	adc	r31, r1
    2c64:	e5 5b       	subi	r30, 0xB5	; 181
    2c66:	fe 4f       	sbci	r31, 0xFE	; 254
    2c68:	94 91       	lpm	r25, Z+
    2c6a:	80 91 2f 01 	lds	r24, 0x012F
    2c6e:	f9 01       	movw	r30, r18
    2c70:	e8 0f       	add	r30, r24
    2c72:	f1 1d       	adc	r31, r1
    2c74:	e5 5b       	subi	r30, 0xB5	; 181
    2c76:	fe 4f       	sbci	r31, 0xFE	; 254
    2c78:	e4 91       	lpm	r30, Z+
    2c7a:	e9 27       	eor	r30, r25
    2c7c:	e0 93 48 01 	sts	0x0148, r30
        wm_sb[7] = pgm_read_byte(&(sboxes[idx + 1][wm_rand[2]])) ^ pgm_read_byte(&(sboxes[idx + 2][wm_rand[6]]));
    2c80:	80 91 2c 01 	lds	r24, 0x012C
    2c84:	48 0f       	add	r20, r24
    2c86:	51 1d       	adc	r21, r1
    2c88:	45 5b       	subi	r20, 0xB5	; 181
    2c8a:	5e 4f       	sbci	r21, 0xFE	; 254
    2c8c:	fa 01       	movw	r30, r20
    2c8e:	94 91       	lpm	r25, Z+
    2c90:	80 91 30 01 	lds	r24, 0x0130
    2c94:	28 0f       	add	r18, r24
    2c96:	31 1d       	adc	r19, r1
    2c98:	25 5b       	subi	r18, 0xB5	; 181
    2c9a:	3e 4f       	sbci	r19, 0xFE	; 254
    2c9c:	f9 01       	movw	r30, r18
    2c9e:	84 91       	lpm	r24, Z+
    2ca0:	89 27       	eor	r24, r25
    2ca2:	80 93 49 01 	sts	0x0149, r24
}
    2ca6:	68 96       	adiw	r28, 0x18	; 24
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	df 90       	pop	r13
    2cc0:	cf 90       	pop	r12
    2cc2:	bf 90       	pop	r11
    2cc4:	af 90       	pop	r10
    2cc6:	9f 90       	pop	r9
    2cc8:	8f 90       	pop	r8
    2cca:	7f 90       	pop	r7
    2ccc:	6f 90       	pop	r6
    2cce:	5f 90       	pop	r5
    2cd0:	4f 90       	pop	r4
    2cd2:	3f 90       	pop	r3
    2cd4:	2f 90       	pop	r2
    2cd6:	08 95       	ret

00002cd8 <wm_slaveRx>:
                wm_sample_event();
        }
}*/

void wm_slaveRx(unsigned char addr, unsigned char l)
{
    2cd8:	98 2f       	mov	r25, r24
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
    2cda:	80 54       	subi	r24, 0x40	; 64
    2cdc:	86 30       	cpi	r24, 0x06	; 6
    2cde:	a0 f4       	brcc	.+40     	; 0x2d08 <wm_slaveRx+0x30>
    2ce0:	20 e4       	ldi	r18, 0x40	; 64
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	49 e4       	ldi	r20, 0x49	; 73
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	fa 01       	movw	r30, r20
    2cea:	e2 1b       	sub	r30, r18
    2cec:	f3 0b       	sbc	r31, r19
        {
                for(unsigned int i = 0; i < 6; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    2cee:	d9 01       	movw	r26, r18
    2cf0:	a6 5b       	subi	r26, 0xB6	; 182
    2cf2:	be 4f       	sbci	r27, 0xFE	; 254
    2cf4:	8c 91       	ld	r24, X
    2cf6:	e6 5d       	subi	r30, 0xD6	; 214
    2cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfa:	80 83       	st	Z, r24
    2cfc:	2f 5f       	subi	r18, 0xFF	; 255
    2cfe:	3f 4f       	sbci	r19, 0xFF	; 255
void wm_slaveRx(unsigned char addr, unsigned char l)
{
        // if encryption data is sent, store them accordingly
        if(addr >= 0x40 && addr < 0x46)
        {
                for(unsigned int i = 0; i < 6; i++)
    2d00:	26 34       	cpi	r18, 0x46	; 70
    2d02:	31 05       	cpc	r19, r1
    2d04:	89 f7       	brne	.-30     	; 0x2ce8 <wm_slaveRx+0x10>
    2d06:	08 95       	ret
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
                }
        }
        else if(addr >= 0x46 && addr < 0x4C)
    2d08:	89 2f       	mov	r24, r25
    2d0a:	86 54       	subi	r24, 0x46	; 70
    2d0c:	86 30       	cpi	r24, 0x06	; 6
    2d0e:	c8 f4       	brcc	.+50     	; 0x2d42 <wm_slaveRx+0x6a>
        {
                for(unsigned int i = 6; i < 10; i++)
                {
                        wm_rand[9 - i] = twi_reg[0x40 + i];
    2d10:	80 91 90 01 	lds	r24, 0x0190
    2d14:	80 93 2d 01 	sts	0x012D, r24
    2d18:	80 91 91 01 	lds	r24, 0x0191
    2d1c:	80 93 2c 01 	sts	0x012C, r24
    2d20:	80 91 92 01 	lds	r24, 0x0192
    2d24:	80 93 2b 01 	sts	0x012B, r24
    2d28:	80 91 93 01 	lds	r24, 0x0193
    2d2c:	80 93 2a 01 	sts	0x012A, r24
                }
                for(unsigned int i = 0; i < 2; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    2d30:	80 91 94 01 	lds	r24, 0x0194
    2d34:	80 93 39 01 	sts	0x0139, r24
    2d38:	80 91 95 01 	lds	r24, 0x0195
    2d3c:	80 93 38 01 	sts	0x0138, r24
    2d40:	08 95       	ret
                }
        }
        else if(addr >= 0x4C && addr < 0x50)
    2d42:	89 2f       	mov	r24, r25
    2d44:	8c 54       	subi	r24, 0x4C	; 76
    2d46:	84 30       	cpi	r24, 0x04	; 4
    2d48:	c8 f4       	brcc	.+50     	; 0x2d7c <wm_slaveRx+0xa4>
        {
                for(unsigned int i = 2; i < 6; i++)
                {
                        wm_key[5 - i] = twi_reg[0x40 + 10 + i];
    2d4a:	80 91 96 01 	lds	r24, 0x0196
    2d4e:	80 93 37 01 	sts	0x0137, r24
    2d52:	80 91 97 01 	lds	r24, 0x0197
    2d56:	80 93 36 01 	sts	0x0136, r24
    2d5a:	80 91 98 01 	lds	r24, 0x0198
    2d5e:	80 93 35 01 	sts	0x0135, r24
    2d62:	80 91 99 01 	lds	r24, 0x0199
    2d66:	80 93 34 01 	sts	0x0134, r24
                }
                if(addr + l == 0x50)
    2d6a:	89 2f       	mov	r24, r25
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	86 0f       	add	r24, r22
    2d70:	91 1d       	adc	r25, r1
    2d72:	80 35       	cpi	r24, 0x50	; 80
    2d74:	91 05       	cpc	r25, r1
    2d76:	11 f4       	brne	.+4      	; 0x2d7c <wm_slaveRx+0xa4>
                {
                        // generate decryption once all data is loaded
                        wm_gentabs();
    2d78:	0e 94 22 14 	call	0x2844	; 0x2844 <wm_gentabs>
    2d7c:	08 95       	ret

00002d7e <__vector_24>:
        // make the wiimote think something is connected
        //dev_detect_port |= _BV(dev_detect_pin);
}

ISR(TWI_vect)
{
    2d7e:	1f 92       	push	r1
    2d80:	0f 92       	push	r0
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
        switch(TW_STATUS)
    2da0:	80 91 b9 00 	lds	r24, 0x00B9
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	88 7f       	andi	r24, 0xF8	; 248
    2da8:	90 70       	andi	r25, 0x00	; 0
    2daa:	80 39       	cpi	r24, 0x90	; 144
    2dac:	91 05       	cpc	r25, r1
    2dae:	e9 f1       	breq	.+122    	; 0x2e2a <__vector_24+0xac>
    2db0:	81 39       	cpi	r24, 0x91	; 145
    2db2:	91 05       	cpc	r25, r1
    2db4:	d4 f4       	brge	.+52     	; 0x2dea <__vector_24+0x6c>
    2db6:	80 37       	cpi	r24, 0x70	; 112
    2db8:	91 05       	cpc	r25, r1
    2dba:	a1 f1       	breq	.+104    	; 0x2e24 <__vector_24+0xa6>
    2dbc:	81 37       	cpi	r24, 0x71	; 113
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	44 f4       	brge	.+16     	; 0x2dd2 <__vector_24+0x54>
    2dc2:	80 36       	cpi	r24, 0x60	; 96
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	71 f1       	breq	.+92     	; 0x2e24 <__vector_24+0xa6>
    2dc8:	88 36       	cpi	r24, 0x68	; 104
    2dca:	91 05       	cpc	r25, r1
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <__vector_24+0x52>
    2dce:	b6 c0       	rjmp	.+364    	; 0x2f3c <__vector_24+0x1be>
    2dd0:	29 c0       	rjmp	.+82     	; 0x2e24 <__vector_24+0xa6>
    2dd2:	80 38       	cpi	r24, 0x80	; 128
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	49 f1       	breq	.+82     	; 0x2e2a <__vector_24+0xac>
    2dd8:	88 38       	cpi	r24, 0x88	; 136
    2dda:	91 05       	cpc	r25, r1
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <__vector_24+0x62>
    2dde:	ae c0       	rjmp	.+348    	; 0x2f3c <__vector_24+0x1be>
    2de0:	88 37       	cpi	r24, 0x78	; 120
    2de2:	91 05       	cpc	r25, r1
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <__vector_24+0x6a>
    2de6:	aa c0       	rjmp	.+340    	; 0x2f3c <__vector_24+0x1be>
    2de8:	1d c0       	rjmp	.+58     	; 0x2e24 <__vector_24+0xa6>
    2dea:	80 3b       	cpi	r24, 0xB0	; 176
    2dec:	91 05       	cpc	r25, r1
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <__vector_24+0x74>
    2df0:	6a c0       	rjmp	.+212    	; 0x2ec6 <__vector_24+0x148>
    2df2:	81 3b       	cpi	r24, 0xB1	; 177
    2df4:	91 05       	cpc	r25, r1
    2df6:	4c f4       	brge	.+18     	; 0x2e0a <__vector_24+0x8c>
    2df8:	80 3a       	cpi	r24, 0xA0	; 160
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <__vector_24+0x82>
    2dfe:	57 c0       	rjmp	.+174    	; 0x2eae <__vector_24+0x130>
    2e00:	88 3a       	cpi	r24, 0xA8	; 168
    2e02:	91 05       	cpc	r25, r1
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <__vector_24+0x8a>
    2e06:	9a c0       	rjmp	.+308    	; 0x2f3c <__vector_24+0x1be>
    2e08:	5e c0       	rjmp	.+188    	; 0x2ec6 <__vector_24+0x148>
    2e0a:	80 3c       	cpi	r24, 0xC0	; 192
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <__vector_24+0x94>
    2e10:	93 c0       	rjmp	.+294    	; 0x2f38 <__vector_24+0x1ba>
    2e12:	88 3c       	cpi	r24, 0xC8	; 200
    2e14:	91 05       	cpc	r25, r1
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <__vector_24+0x9c>
    2e18:	8f c0       	rjmp	.+286    	; 0x2f38 <__vector_24+0x1ba>
    2e1a:	88 3b       	cpi	r24, 0xB8	; 184
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <__vector_24+0xa4>
    2e20:	8d c0       	rjmp	.+282    	; 0x2f3c <__vector_24+0x1be>
    2e22:	53 c0       	rjmp	.+166    	; 0x2eca <__vector_24+0x14c>
                case TW_SR_SLA_ACK: // addressed, returned ack
                case TW_SR_GCALL_ACK: // addressed generally, returned ack
                case TW_SR_ARB_LOST_SLA_ACK: // lost arbitration, returned ack
                case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration generally, returned ack
                        // get ready to receive pointer
                        twi_first_addr_flag = 0;
    2e24:	10 92 4c 02 	sts	0x024C, r1
    2e28:	87 c0       	rjmp	.+270    	; 0x2f38 <__vector_24+0x1ba>
                        // ack
                        twi_clear_int(1);
                        break;
                case TW_SR_DATA_ACK: // data received, returned ack
                case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
                if(twi_first_addr_flag != 0)
    2e2a:	80 91 4c 02 	lds	r24, 0x024C
    2e2e:	88 23       	and	r24, r24
    2e30:	89 f1       	breq	.+98     	; 0x2e94 <__vector_24+0x116>
                {
                        // put byte in register
                        unsigned char t = TWDR;
    2e32:	20 91 bb 00 	lds	r18, 0x00BB
                        if(twi_reg[0xF0] == 0xAA && twi_reg_addr != 0xF0) // if encryption is on
    2e36:	80 91 3a 02 	lds	r24, 0x023A
    2e3a:	8a 3a       	cpi	r24, 0xAA	; 170
    2e3c:	19 f5       	brne	.+70     	; 0x2e84 <__vector_24+0x106>
    2e3e:	80 91 4a 02 	lds	r24, 0x024A
    2e42:	90 91 4b 02 	lds	r25, 0x024B
    2e46:	80 3f       	cpi	r24, 0xF0	; 240
    2e48:	91 05       	cpc	r25, r1
    2e4a:	e1 f0       	breq	.+56     	; 0x2e84 <__vector_24+0x106>
                        {
                                // decrypt
                                twi_reg[twi_reg_addr] = (t ^ wm_sb[twi_reg_addr % 8]) + wm_ft[twi_reg_addr % 8];
    2e4c:	a0 91 4a 02 	lds	r26, 0x024A
    2e50:	b0 91 4b 02 	lds	r27, 0x024B
    2e54:	e0 91 4a 02 	lds	r30, 0x024A
    2e58:	f0 91 4b 02 	lds	r31, 0x024B
    2e5c:	e7 70       	andi	r30, 0x07	; 7
    2e5e:	f0 70       	andi	r31, 0x00	; 0
    2e60:	ee 5b       	subi	r30, 0xBE	; 190
    2e62:	fe 4f       	sbci	r31, 0xFE	; 254
    2e64:	80 81       	ld	r24, Z
    2e66:	e0 91 4a 02 	lds	r30, 0x024A
    2e6a:	f0 91 4b 02 	lds	r31, 0x024B
    2e6e:	e7 70       	andi	r30, 0x07	; 7
    2e70:	f0 70       	andi	r31, 0x00	; 0
    2e72:	e6 5c       	subi	r30, 0xC6	; 198
    2e74:	fe 4f       	sbci	r31, 0xFE	; 254
    2e76:	90 81       	ld	r25, Z
    2e78:	82 27       	eor	r24, r18
    2e7a:	89 0f       	add	r24, r25
    2e7c:	a6 5b       	subi	r26, 0xB6	; 182
    2e7e:	be 4f       	sbci	r27, 0xFE	; 254
    2e80:	8c 93       	st	X, r24
    2e82:	4c c0       	rjmp	.+152    	; 0x2f1c <__vector_24+0x19e>
                        }
                        else
                        {
                                twi_reg[twi_reg_addr] = t;
    2e84:	e0 91 4a 02 	lds	r30, 0x024A
    2e88:	f0 91 4b 02 	lds	r31, 0x024B
    2e8c:	e6 5b       	subi	r30, 0xB6	; 182
    2e8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e90:	20 83       	st	Z, r18
    2e92:	44 c0       	rjmp	.+136    	; 0x2f1c <__vector_24+0x19e>
                        twi_rw_len++;
                }
                else
                {
                        // set address
                        twi_reg_addr = TWDR;
    2e94:	80 91 bb 00 	lds	r24, 0x00BB
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	90 93 4b 02 	sts	0x024B, r25
    2e9e:	80 93 4a 02 	sts	0x024A, r24
                        twi_first_addr_flag = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 93 4c 02 	sts	0x024C, r24
                        twi_rw_len = 0;
    2ea8:	10 92 4d 02 	sts	0x024D, r1
    2eac:	45 c0       	rjmp	.+138    	; 0x2f38 <__vector_24+0x1ba>
                }
                twi_clear_int(1); // ack
                        break;
                case TW_SR_STOP: // stop or repeated start condition received
                        // run user defined function
                        wm_slaveRx(twi_reg_addr - twi_rw_len, twi_rw_len);
    2eae:	80 91 4a 02 	lds	r24, 0x024A
    2eb2:	90 91 4b 02 	lds	r25, 0x024B
    2eb6:	20 91 4d 02 	lds	r18, 0x024D
    2eba:	60 91 4d 02 	lds	r22, 0x024D
    2ebe:	82 1b       	sub	r24, r18
    2ec0:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <wm_slaveRx>
    2ec4:	39 c0       	rjmp	.+114    	; 0x2f38 <__vector_24+0x1ba>
                // Slave Tx
                case TW_ST_SLA_ACK:     // addressed, returned ack
                case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
                        // run user defined function (not anymore)
                        //wm_slaveTxStart(twi_reg_addr);
                        twi_rw_len = 0;
    2ec6:	10 92 4d 02 	sts	0x024D, r1
                case TW_ST_DATA_ACK: // byte sent, ack returned
                        // ready output byte
                        if(twi_reg[0xF0] == 0xAA) // encryption is on
    2eca:	80 91 3a 02 	lds	r24, 0x023A
    2ece:	8a 3a       	cpi	r24, 0xAA	; 170
    2ed0:	e1 f4       	brne	.+56     	; 0x2f0a <__vector_24+0x18c>
                        {
                                // encrypt
                                TWDR = (twi_reg[twi_reg_addr] - wm_ft[twi_reg_addr % 8]) ^ wm_sb[twi_reg_addr % 8];
    2ed2:	e0 91 4a 02 	lds	r30, 0x024A
    2ed6:	f0 91 4b 02 	lds	r31, 0x024B
    2eda:	e6 5b       	subi	r30, 0xB6	; 182
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	80 81       	ld	r24, Z
    2ee0:	e0 91 4a 02 	lds	r30, 0x024A
    2ee4:	f0 91 4b 02 	lds	r31, 0x024B
    2ee8:	e7 70       	andi	r30, 0x07	; 7
    2eea:	f0 70       	andi	r31, 0x00	; 0
    2eec:	e6 5c       	subi	r30, 0xC6	; 198
    2eee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef0:	20 81       	ld	r18, Z
    2ef2:	e0 91 4a 02 	lds	r30, 0x024A
    2ef6:	f0 91 4b 02 	lds	r31, 0x024B
    2efa:	e7 70       	andi	r30, 0x07	; 7
    2efc:	f0 70       	andi	r31, 0x00	; 0
    2efe:	ee 5b       	subi	r30, 0xBE	; 190
    2f00:	fe 4f       	sbci	r31, 0xFE	; 254
    2f02:	90 81       	ld	r25, Z
    2f04:	82 1b       	sub	r24, r18
    2f06:	89 27       	eor	r24, r25
    2f08:	07 c0       	rjmp	.+14     	; 0x2f18 <__vector_24+0x19a>
                        }
                        else
                        {
                                TWDR = twi_reg[twi_reg_addr];
    2f0a:	e0 91 4a 02 	lds	r30, 0x024A
    2f0e:	f0 91 4b 02 	lds	r31, 0x024B
    2f12:	e6 5b       	subi	r30, 0xB6	; 182
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	80 81       	ld	r24, Z
    2f18:	80 93 bb 00 	sts	0x00BB, r24
                        }
                        twi_reg_addr++;
    2f1c:	80 91 4a 02 	lds	r24, 0x024A
    2f20:	90 91 4b 02 	lds	r25, 0x024B
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	90 93 4b 02 	sts	0x024B, r25
    2f2a:	80 93 4a 02 	sts	0x024A, r24
                        twi_rw_len++;
    2f2e:	80 91 4d 02 	lds	r24, 0x024D
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	80 93 4d 02 	sts	0x024D, r24
void twi_clear_int(unsigned char ack)
{
        // get ready by clearing interrupt, with or without ack
        if(ack != 0)
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f38:	85 ec       	ldi	r24, 0xC5	; 197
    2f3a:	01 c0       	rjmp	.+2      	; 0x2f3e <__vector_24+0x1c0>
        }
        else
        {
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f3c:	85 e8       	ldi	r24, 0x85	; 133
    2f3e:	80 93 bc 00 	sts	0x00BC, r24
                        break;
                default:
                        twi_clear_int(0);
                        break;
        }
}
    2f42:	ff 91       	pop	r31
    2f44:	ef 91       	pop	r30
    2f46:	bf 91       	pop	r27
    2f48:	af 91       	pop	r26
    2f4a:	9f 91       	pop	r25
    2f4c:	8f 91       	pop	r24
    2f4e:	7f 91       	pop	r23
    2f50:	6f 91       	pop	r22
    2f52:	5f 91       	pop	r21
    2f54:	4f 91       	pop	r20
    2f56:	3f 91       	pop	r19
    2f58:	2f 91       	pop	r18
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <wm_timer_inc>:
        0x00, 0x00, 0x00, 0x00
};
void wm_timer_inc()  // This function is unused by me.
{
        return;
}
    2f64:	08 95       	ret

00002f66 <sendWiiData>:
} // end of startCommunciation


// This function takes the 'color'On values set by readF and sets up the but_dat array accordingly
void sendWiiData(dataForController data)
{
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	2b 97       	sbiw	r28, 0x0b	; 11
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	ee 2d       	mov	r30, r14
    2f84:	e9 82       	std	Y+1, r14	; 0x01
    2f86:	ef 2c       	mov	r14, r15
    2f88:	fa 82       	std	Y+2, r15	; 0x02
    2f8a:	f0 2e       	mov	r15, r16
    2f8c:	0b 83       	std	Y+3, r16	; 0x03
    2f8e:	f1 2f       	mov	r31, r17
    2f90:	1c 83       	std	Y+4, r17	; 0x04
    2f92:	a2 2f       	mov	r26, r18
    2f94:	2d 83       	std	Y+5, r18	; 0x05
    2f96:	b3 2f       	mov	r27, r19
    2f98:	3e 83       	std	Y+6, r19	; 0x06
    2f9a:	34 2f       	mov	r19, r20
    2f9c:	4f 83       	std	Y+7, r20	; 0x07
    2f9e:	25 2f       	mov	r18, r21
    2fa0:	58 87       	std	Y+8, r21	; 0x08
    2fa2:	96 2f       	mov	r25, r22
    2fa4:	69 87       	std	Y+9, r22	; 0x09
    2fa6:	7a 87       	std	Y+10, r23	; 0x0a
    2fa8:	8b 87       	std	Y+11, r24	; 0x0b
	but_dat[5] &= ~(data.blueOn << BLUE_BIT);
	but_dat[5] &= ~(data.yellowOn << YELLOW_BIT);
	but_dat[5] &= ~(data.redOn << RED_BIT);
	but_dat[5] &= ~(data.greenOn << GREEN_BIT);

	but_dat[5] &= ~(data.upOn << UP_BIT);
    2faa:	a7 95       	ror	r26
    2fac:	aa 27       	eor	r26, r26
    2fae:	a7 95       	ror	r26
    2fb0:	f2 95       	swap	r31
    2fb2:	ff 0f       	add	r31, r31
    2fb4:	f0 7e       	andi	r31, 0xE0	; 224
    2fb6:	fa 2b       	or	r31, r26
    2fb8:	bf 2b       	or	r27, r31
    2fba:	ff 0c       	add	r15, r15
    2fbc:	ff 0c       	add	r15, r15
    2fbe:	ff 0c       	add	r15, r15
    2fc0:	fb 2a       	or	r15, r27
    2fc2:	e2 94       	swap	r14
    2fc4:	ee 0c       	add	r14, r14
    2fc6:	ee 0c       	add	r14, r14
    2fc8:	80 ec       	ldi	r24, 0xC0	; 192
    2fca:	e8 22       	and	r14, r24
    2fcc:	ef 28       	or	r14, r15
    2fce:	e2 95       	swap	r30
    2fd0:	e0 7f       	andi	r30, 0xF0	; 240
    2fd2:	ee 29       	or	r30, r14
    2fd4:	e0 95       	com	r30
    2fd6:	e0 93 9c 02 	sts	0x029C, r30
	but_dat[4] &= ~(data.downOn << DOWN_BIT);

	but_dat[4] &= ~(data.plusOn << PLUS_BIT);
	but_dat[4] &= ~(data.minusOn << MINUS_BIT);
    2fda:	32 95       	swap	r19
    2fdc:	33 0f       	add	r19, r19
    2fde:	33 0f       	add	r19, r19
    2fe0:	30 7c       	andi	r19, 0xC0	; 192
    2fe2:	22 0f       	add	r18, r18
    2fe4:	22 0f       	add	r18, r18
    2fe6:	23 2b       	or	r18, r19
    2fe8:	92 95       	swap	r25
    2fea:	90 7f       	andi	r25, 0xF0	; 240
    2fec:	92 2b       	or	r25, r18
    2fee:	90 95       	com	r25
    2ff0:	90 93 9b 02 	sts	0x029B, r25

	// Finally, we send that packet to the 
	// TWI transfer register, handled by the wiimote.c library
	wm_newaction(but_dat);
    2ff4:	87 e9       	ldi	r24, 0x97	; 151
    2ff6:	92 e0       	ldi	r25, 0x02	; 2
    2ff8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <wm_newaction>

}
    2ffc:	2b 96       	adiw	r28, 0x0b	; 11
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	1f 91       	pop	r17
    300e:	0f 91       	pop	r16
    3010:	ff 90       	pop	r15
    3012:	ef 90       	pop	r14
    3014:	08 95       	ret

00003016 <startWiiCommunication>:
}

void startWiiCommunication(void)
{
  	// Start the wiimote communication and make wiimote think this is a guitar
    wm_init(guitar_id, but_dat, cal_data, wm_timer_inc);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	67 e9       	ldi	r22, 0x97	; 151
    301c:	72 e0       	ldi	r23, 0x02	; 2
    301e:	48 e0       	ldi	r20, 0x08	; 8
    3020:	51 e0       	ldi	r21, 0x01	; 1
    3022:	22 eb       	ldi	r18, 0xB2	; 178
    3024:	37 e1       	ldi	r19, 0x17	; 23
    3026:	0e 94 e6 13 	call	0x27cc	; 0x27cc <wm_init>

	// initialize button data array
    but_dat[0] = 0b00011111;
    302a:	8f e1       	ldi	r24, 0x1F	; 31
    302c:	80 93 97 02 	sts	0x0297, r24
    but_dat[1] = 0b00011111;
    3030:	80 93 98 02 	sts	0x0298, r24
    but_dat[2] = 0b00001111; // last 5 bits are touchbar data, should be 0F for no touching
    3034:	8f e0       	ldi	r24, 0x0F	; 15
    3036:	80 93 99 02 	sts	0x0299, r24
    but_dat[3] = 0b00001111; // last 5 bits are whammy bar data, should be 0F probably
    303a:	80 93 9a 02 	sts	0x029A, r24
    but_dat[4] = 0b11111111; // no buttons pressed (with the Wiimote, 0 is pressed)
    303e:	8f ef       	ldi	r24, 0xFF	; 255
    3040:	80 93 9b 02 	sts	0x029B, r24
    but_dat[5] = 0b11111111; // no buttons pressed
    3044:	80 93 9c 02 	sts	0x029C, r24
} // end of startCommunciation
    3048:	08 95       	ret

0000304a <memcmp>:
    304a:	fb 01       	movw	r30, r22
    304c:	dc 01       	movw	r26, r24
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <memcmp+0xe>
    3050:	8d 91       	ld	r24, X+
    3052:	01 90       	ld	r0, Z+
    3054:	80 19       	sub	r24, r0
    3056:	21 f4       	brne	.+8      	; 0x3060 <memcmp+0x16>
    3058:	41 50       	subi	r20, 0x01	; 1
    305a:	50 40       	sbci	r21, 0x00	; 0
    305c:	c8 f7       	brcc	.-14     	; 0x3050 <memcmp+0x6>
    305e:	88 1b       	sub	r24, r24
    3060:	99 0b       	sbc	r25, r25
    3062:	08 95       	ret

00003064 <__eerd_block>:
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e8 e3       	ldi	r30, 0x38	; 56
    306a:	f8 e1       	ldi	r31, 0x18	; 24
    306c:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x14>
    3070:	7c 01       	movw	r14, r24
    3072:	eb 01       	movw	r28, r22
    3074:	8a 01       	movw	r16, r20
    3076:	69 01       	movw	r12, r18
    3078:	09 c0       	rjmp	.+18     	; 0x308c <__eerd_block+0x28>
    307a:	ce 01       	movw	r24, r28
    307c:	21 96       	adiw	r28, 0x01	; 1
    307e:	f6 01       	movw	r30, r12
    3080:	09 95       	icall
    3082:	f7 01       	movw	r30, r14
    3084:	81 93       	st	Z+, r24
    3086:	7f 01       	movw	r14, r30
    3088:	01 50       	subi	r16, 0x01	; 1
    308a:	10 40       	sbci	r17, 0x00	; 0
    308c:	01 15       	cp	r16, r1
    308e:	11 05       	cpc	r17, r1
    3090:	a1 f7       	brne	.-24     	; 0x307a <__eerd_block+0x16>
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	e8 e0       	ldi	r30, 0x08	; 8
    3098:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x14>

0000309c <__eewr_block>:
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e4 e5       	ldi	r30, 0x54	; 84
    30a2:	f8 e1       	ldi	r31, 0x18	; 24
    30a4:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x14>
    30a8:	ec 01       	movw	r28, r24
    30aa:	7b 01       	movw	r14, r22
    30ac:	8a 01       	movw	r16, r20
    30ae:	69 01       	movw	r12, r18
    30b0:	09 c0       	rjmp	.+18     	; 0x30c4 <__eewr_block+0x28>
    30b2:	ce 01       	movw	r24, r28
    30b4:	21 96       	adiw	r28, 0x01	; 1
    30b6:	f7 01       	movw	r30, r14
    30b8:	61 91       	ld	r22, Z+
    30ba:	7f 01       	movw	r14, r30
    30bc:	f6 01       	movw	r30, r12
    30be:	09 95       	icall
    30c0:	01 50       	subi	r16, 0x01	; 1
    30c2:	10 40       	sbci	r17, 0x00	; 0
    30c4:	01 15       	cp	r16, r1
    30c6:	11 05       	cpc	r17, r1
    30c8:	a1 f7       	brne	.-24     	; 0x30b2 <__eewr_block+0x16>
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	e8 e0       	ldi	r30, 0x08	; 8
    30d0:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x14>

000030d4 <__prologue_saves__>:
    30d4:	2f 92       	push	r2
    30d6:	3f 92       	push	r3
    30d8:	4f 92       	push	r4
    30da:	5f 92       	push	r5
    30dc:	6f 92       	push	r6
    30de:	7f 92       	push	r7
    30e0:	8f 92       	push	r8
    30e2:	9f 92       	push	r9
    30e4:	af 92       	push	r10
    30e6:	bf 92       	push	r11
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	ca 1b       	sub	r28, r26
    30fe:	db 0b       	sbc	r29, r27
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	09 94       	ijmp

0000310c <__epilogue_restores__>:
    310c:	2a 88       	ldd	r2, Y+18	; 0x12
    310e:	39 88       	ldd	r3, Y+17	; 0x11
    3110:	48 88       	ldd	r4, Y+16	; 0x10
    3112:	5f 84       	ldd	r5, Y+15	; 0x0f
    3114:	6e 84       	ldd	r6, Y+14	; 0x0e
    3116:	7d 84       	ldd	r7, Y+13	; 0x0d
    3118:	8c 84       	ldd	r8, Y+12	; 0x0c
    311a:	9b 84       	ldd	r9, Y+11	; 0x0b
    311c:	aa 84       	ldd	r10, Y+10	; 0x0a
    311e:	b9 84       	ldd	r11, Y+9	; 0x09
    3120:	c8 84       	ldd	r12, Y+8	; 0x08
    3122:	df 80       	ldd	r13, Y+7	; 0x07
    3124:	ee 80       	ldd	r14, Y+6	; 0x06
    3126:	fd 80       	ldd	r15, Y+5	; 0x05
    3128:	0c 81       	ldd	r16, Y+4	; 0x04
    312a:	1b 81       	ldd	r17, Y+3	; 0x03
    312c:	aa 81       	ldd	r26, Y+2	; 0x02
    312e:	b9 81       	ldd	r27, Y+1	; 0x01
    3130:	ce 0f       	add	r28, r30
    3132:	d1 1d       	adc	r29, r1
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	ed 01       	movw	r28, r26
    3140:	08 95       	ret

00003142 <_exit>:
    3142:	f8 94       	cli

00003144 <__stop_program>:
    3144:	ff cf       	rjmp	.-2      	; 0x3144 <__stop_program>
