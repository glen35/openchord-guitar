
V1_USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001cd8  00001d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800102  00800102  00001d8e  2**0
                  ALLOC
  3 .eeprom       00000172  00810000  00810000  00001d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000376  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b5f  00000000  00000000  00002316  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000932  00000000  00000000  00003e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000170e  00000000  00000000  000047a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00005eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000881  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba4  00000000  00000000  000068c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000746d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_2>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
      68:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
      78:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
      88:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
      98:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
      a8:	32 09 35 75 08 95 04 81 02 c0                       2.5u......

000000b2 <usbDescriptorString0>:
      b2:	04 03 09 04                                         ....

000000b6 <usbDescriptorStringVendor>:
      b6:	1c 03 4f 00 70 00 65 00 6e 00 43 00 68 00 6f 00     ..O.p.e.n.C.h.o.
      c6:	72 00 64 00 2e 00 6f 00 72 00 67 00                 r.d...o.r.g.

000000d2 <usbDescriptorStringDevice>:
      d2:	14 03 56 00 31 00 20 00 47 00 75 00 69 00 74 00     ..V.1. .G.u.i.t.
      e2:	61 00 72 00                                         a.r.

000000e6 <usbDescriptorDevice>:
      e6:	12 01 10 01 00 00 00 08 ba 12 00 02 00 01 01 02     ................
      f6:	00 01                                               ..

000000f8 <usbDescriptorConfiguration>:
      f8:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
     108:	00 00 09 21 01 01 00 01 22 4a 00 07 05 81 03 08     ...!...."J......
     118:	00 0a 07 05 83 03 08 00 0a 00                       ..........

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d4 e0       	ldi	r29, 0x04	; 4
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e8 ed       	ldi	r30, 0xD8	; 216
     136:	fc e1       	ldi	r31, 0x1C	; 28
     138:	02 c0       	rjmp	.+4      	; 0x13e <.do_copy_data_start>

0000013a <.do_copy_data_loop>:
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0

0000013e <.do_copy_data_start>:
     13e:	a2 30       	cpi	r26, 0x02	; 2
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <.do_copy_data_loop>

00000144 <__do_clear_bss>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a2 e0       	ldi	r26, 0x02	; 2
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	ae 34       	cpi	r26, 0x4E	; 78
     150:	b1 07       	cpc	r27, r17
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 20 01 	call	0x240	; 0x240 <main>
     158:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     160:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     162:	f9 99       	sbic	0x1f, 1	; 31
     164:	fe cf       	rjmp	.-4      	; 0x162 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     166:	32 bd       	out	0x22, r19	; 34
     168:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     16a:	f8 9a       	sbi	0x1f, 0	; 31
     16c:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
     16e:	08 95       	ret

00000170 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
     170:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     172:	f9 99       	sbic	0x1f, 1	; 31
     174:	fe cf       	rjmp	.-4      	; 0x172 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     176:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     178:	32 bd       	out	0x22, r19	; 34
     17a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     17c:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	fa 9a       	sbi	0x1f, 2	; 31
     184:	f9 9a       	sbi	0x1f, 1	; 31
     186:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
     188:	08 95       	ret

0000018a <readFrets>:
};

//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
int readFrets(int guitarString)
{
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
  	string_port &= ~(1<<guitarString);  // Set the string LOW
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	02 c0       	rjmp	.+4      	; 0x19c <readFrets+0x12>
     198:	22 0f       	add	r18, r18
     19a:	33 1f       	adc	r19, r19
     19c:	8a 95       	dec	r24
     19e:	e2 f7       	brpl	.-8      	; 0x198 <readFrets+0xe>
     1a0:	12 2f       	mov	r17, r18
     1a2:	82 2f       	mov	r24, r18
     1a4:	80 95       	com	r24
     1a6:	89 23       	and	r24, r25
     1a8:	8b b9       	out	0x0b, r24	; 11
     1aa:	84 e1       	ldi	r24, 0x14	; 20
     1ac:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
     1ae:	00 00       	nop
			x--;
     1b0:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
     1b2:	2f ef       	ldi	r18, 0xFF	; 255
     1b4:	8f 3f       	cpi	r24, 0xFF	; 255
     1b6:	92 07       	cpc	r25, r18
     1b8:	d1 f7       	brne	.-12     	; 0x1ae <readFrets+0x24>

	// Then we have to delay for a while, since right after the switch, the pin values
	// jump around a bit
	doXnops(20);	
	// Read the values on the frets
  	int i = fret_pin;               
     1ba:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;
     1bc:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// More delay funcitonality... without these delays, there is some bouncing
     1be:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// on the pins, so the read screws up.
     1c0:	83 b1       	in	r24, 0x03	; 3
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
     1c2:	81 fd       	sbrc	r24, 1
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <readFrets+0x42>
     1c6:	c2 e0       	ldi	r28, 0x02	; 2
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <readFrets+0x46>
     1cc:	c0 e0       	ldi	r28, 0x00	; 0
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
     1d0:	82 fd       	sbrc	r24, 2
     1d2:	03 c0       	rjmp	.+6      	; 0x1da <readFrets+0x50>
     1d4:	a4 e0       	ldi	r26, 0x04	; 4
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <readFrets+0x54>
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
     1de:	83 fd       	sbrc	r24, 3
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <readFrets+0x5e>
     1e2:	e8 e0       	ldi	r30, 0x08	; 8
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <readFrets+0x62>
     1e8:	e0 e0       	ldi	r30, 0x00	; 0
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
     1ec:	84 fd       	sbrc	r24, 4
     1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <readFrets+0x6c>
     1f0:	60 e1       	ldi	r22, 0x10	; 16
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <readFrets+0x70>
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
     1fa:	85 fd       	sbrc	r24, 5
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <readFrets+0x7a>
     1fe:	40 e2       	ldi	r20, 0x20	; 32
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <readFrets+0x7e>
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	50 e0       	ldi	r21, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
     208:	26 b1       	in	r18, 0x06	; 6
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	36 95       	lsr	r19
     20e:	27 95       	ror	r18
     210:	36 95       	lsr	r19
     212:	27 95       	ror	r18
     214:	20 95       	com	r18
     216:	30 95       	com	r19
     218:	21 70       	andi	r18, 0x01	; 1
     21a:	30 70       	andi	r19, 0x00	; 0
     21c:	2c 2b       	or	r18, r28
     21e:	3d 2b       	or	r19, r29
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
     220:	2a 2b       	or	r18, r26
     222:	3b 2b       	or	r19, r27
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
     224:	2e 2b       	or	r18, r30
     226:	3f 2b       	or	r19, r31
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
     228:	26 2b       	or	r18, r22
     22a:	37 2b       	or	r19, r23
	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
 	stringState |= ( (!(i & (1<<strum_pin))) << 0); //pick touching the string

	//Turn the string back HIGH and return
	string_port |= (1<<guitarString); 
     22c:	8b b1       	in	r24, 0x0b	; 11
     22e:	18 2b       	or	r17, r24
     230:	1b b9       	out	0x0b, r17	; 11
     232:	24 2b       	or	r18, r20
     234:	35 2b       	or	r19, r21
	return stringState;
}
     236:	c9 01       	movw	r24, r18
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{
     240:	2f 92       	push	r2
     242:	3f 92       	push	r3
     244:	4f 92       	push	r4
     246:	5f 92       	push	r5
     248:	6f 92       	push	r6
     24a:	7f 92       	push	r7
     24c:	8f 92       	push	r8
     24e:	9f 92       	push	r9
     250:	af 92       	push	r10
     252:	bf 92       	push	r11
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	df 93       	push	r29
     262:	cf 93       	push	r28
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	c5 52       	subi	r28, 0x25	; 37
     26a:	d1 40       	sbci	r29, 0x01	; 1
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
  // Now set up all the communication stuff - initialization routines
  //  set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
  startCommunication();
     276:	0e 94 b5 0a 	call	0x156a	; 0x156a <startCommunication>

	//Debug stuff - the following goes before the while loop in main()
	int timer;
    DDRB |= 1;
     27a:	20 9a       	sbi	0x04, 0	; 4
  // set PORTB for output
  
  uint8_t string[1];
  uint8_t x = 10;
     27c:	8a e0       	ldi	r24, 0x0A	; 10
     27e:	8a 83       	std	Y+2, r24	; 0x02
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
     280:	ce 01       	movw	r24, r28
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	68 e6       	ldi	r22, 0x68	; 104
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	41 e0       	ldi	r20, 0x01	; 1
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	20 eb       	ldi	r18, 0xB0	; 176
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__eerd_block>

  eeprom_read_block( (void*)&string, (void*)&nonvolitileString, 1);
  if (string[0] == 50)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	be 01       	movw	r22, r28
     298:	6e 5f       	subi	r22, 0xFE	; 254
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	82 33       	cpi	r24, 0x32	; 50
     29e:	11 f4       	brne	.+4      	; 0x2a4 <main+0x64>
  {
  	  x = 250;
     2a0:	8a ef       	ldi	r24, 0xFA	; 250
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <main+0x66>
  	  eeprom_write_block( (void*)&x, (void*)&nonvolitileString, 1);
  }
  else
  {
  	  x = 50;
     2a4:	82 e3       	ldi	r24, 0x32	; 50
     2a6:	8a 83       	std	Y+2, r24	; 0x02
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
     2a8:	88 e6       	ldi	r24, 0x68	; 104
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	41 e0       	ldi	r20, 0x01	; 1
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	28 eb       	ldi	r18, 0xB8	; 184
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__eewr_block>
  	  eeprom_write_block( (void*)&x, (void*)&nonvolitileString, 1);
  }
  timer = x;

	// First, set up the guitar stuff - These functions are stored in guitarInitFunctions.h/.c
	setPins();
     2b8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setPins>
	setTimer();	
     2bc:	0e 94 8e 04 	call	0x91c	; 0x91c <setTimer>

    // Declaration of variables used in Main()
	int greenTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0}; //These give timing to properly read green buttons on each string.
     2c0:	8c e0       	ldi	r24, 0x0C	; 12
     2c2:	fe 01       	movw	r30, r28
     2c4:	72 96       	adiw	r30, 0x12	; 18
     2c6:	df 01       	movw	r26, r30
     2c8:	98 2f       	mov	r25, r24
     2ca:	1d 92       	st	X+, r1
     2cc:	9a 95       	dec	r25
     2ce:	e9 f7       	brne	.-6      	; 0x2ca <main+0x8a>
	int triedGreen[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};  // Also used for the green button timing thing
     2d0:	fe 01       	movw	r30, r28
     2d2:	7e 96       	adiw	r30, 0x1e	; 30
     2d4:	df 01       	movw	r26, r30
     2d6:	98 2f       	mov	r25, r24
     2d8:	1d 92       	st	X+, r1
     2da:	9a 95       	dec	r25
     2dc:	e9 f7       	brne	.-6      	; 0x2d8 <main+0x98>
	int stringState[6] = {0,0,0,0,0,0}; // This stores an int for each string,
     2de:	fe 01       	movw	r30, r28
     2e0:	ba 96       	adiw	r30, 0x2a	; 42
     2e2:	df 01       	movw	r26, r30
     2e4:	1d 92       	st	X+, r1
     2e6:	8a 95       	dec	r24
     2e8:	e9 f7       	brne	.-6      	; 0x2e4 <main+0xa4>
																	 // controller compares the string presses
																	 // to in order to judge if a button is being
																	 // pressed. It's the size of all the chord combinations,
																	 // but in Note Mode, only the first 5 blocks get looked at. 
	char configMode = 0; // Start in normal mode
	int buttonToAssign = 0; // declare some variables
     2ea:	1e 82       	std	Y+6, r1	; 0x06
     2ec:	1d 82       	std	Y+5, r1	; 0x05
	char plusLock = 0;
     2ee:	1b 82       	std	Y+3, r1	; 0x03
	char previousPlusOn = 0; // This is used as a lock so we don't program all the buttons at once
     2f0:	1c 82       	std	Y+4, r1	; 0x04
	int debounceTimer = 0; // This is used as a global timer for debouncing buttons
     2f2:	18 86       	std	Y+8, r1	; 0x08
     2f4:	1f 82       	std	Y+7, r1	; 0x07
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     2f6:	1d 86       	std	Y+13, r1	; 0x0d
		data->blueOn   = 0;
     2f8:	1c 86       	std	Y+12, r1	; 0x0c
		data->yellowOn = 0;
     2fa:	1b 86       	std	Y+11, r1	; 0x0b
		data->redOn    = 0;
     2fc:	1a 86       	std	Y+10, r1	; 0x0a
		data->greenOn  = 0;
     2fe:	19 86       	std	Y+9, r1	; 0x09
		data->upOn     = 0;
     300:	1e 86       	std	Y+14, r1	; 0x0e
		data->downOn   = 0;
     302:	1f 86       	std	Y+15, r1	; 0x0f
		data->plusOn   = 0;
     304:	18 8a       	std	Y+16, r1	; 0x10
		data->minusOn  = 0;
     306:	19 8a       	std	Y+17, r1	; 0x11
	
	dataForController data;
	clearData(&data); //This function is contained in V1Typedefs.h

	//Debug Stuff - it's complementary code is in ps3interface.h and .c
	DDRC &= ~(1<<5); //Turn 5 on Port C to inputs
     308:	3d 98       	cbi	0x07, 5	; 7
	PORTC |= (1<<5); //Turn off the internal pullup resistor on pin 5
     30a:	45 9a       	sbi	0x08, 5	; 8
     30c:	88 24       	eor	r8, r8
     30e:	99 24       	eor	r9, r9
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     310:	ac e6       	ldi	r26, 0x6C	; 108
     312:	4a 2e       	mov	r4, r26
     314:	51 2c       	mov	r5, r1
     316:	4c 0e       	add	r4, r28
     318:	5d 1e       	adc	r5, r29
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
     31a:	fe e6       	ldi	r31, 0x6E	; 110
     31c:	2f 2e       	mov	r2, r31
     31e:	31 2c       	mov	r3, r1
     320:	2c 0e       	add	r2, r28
     322:	3d 1e       	adc	r3, r29
    while(1){  
	              /* main event loop */
		
		// We first read all the strings for button hits and store them into
		//  our stringState array.  Strum processing is also handled here for now.
        stringState[0] = readFrets(first_string);
     324:	87 e0       	ldi	r24, 0x07	; 7
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     32c:	9b a7       	std	Y+43, r25	; 0x2b
     32e:	8a a7       	std	Y+42, r24	; 0x2a
		stringState[1] = readFrets(second_string);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     338:	9d a7       	std	Y+45, r25	; 0x2d
     33a:	8c a7       	std	Y+44, r24	; 0x2c
		stringState[2] = readFrets(third_string);
     33c:	85 e0       	ldi	r24, 0x05	; 5
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     344:	9f a7       	std	Y+47, r25	; 0x2f
     346:	8e a7       	std	Y+46, r24	; 0x2e
		stringState[3] = readFrets(fourth_string);
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     350:	99 ab       	std	Y+49, r25	; 0x31
     352:	88 ab       	std	Y+48, r24	; 0x30
		stringState[4] = readFrets(fifth_string);
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     35c:	9b ab       	std	Y+51, r25	; 0x33
     35e:	8a ab       	std	Y+50, r24	; 0x32
		stringState[5] = readFrets(sixth_string);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     368:	bc 01       	movw	r22, r24
     36a:	9d ab       	std	Y+53, r25	; 0x35
     36c:	8c ab       	std	Y+52, r24	; 0x34
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     36e:	1d 86       	std	Y+13, r1	; 0x0d
		data->blueOn   = 0;
     370:	1c 86       	std	Y+12, r1	; 0x0c
		data->yellowOn = 0;
     372:	1b 86       	std	Y+11, r1	; 0x0b
		data->redOn    = 0;
     374:	1a 86       	std	Y+10, r1	; 0x0a
		data->greenOn  = 0;
     376:	19 86       	std	Y+9, r1	; 0x09
		data->upOn     = 0;
     378:	1e 86       	std	Y+14, r1	; 0x0e
		data->downOn   = 0;
     37a:	1f 86       	std	Y+15, r1	; 0x0f

// This function just reads our plus and minus buttons and sets the data struct accordingly
inline void readOtherButtons(dataForController* data)
{
	// read our plus and minus buttons
	int i = misc_pin; // check for plus and minus
     37c:	26 b1       	in	r18, 0x06	; 6
     37e:	30 e0       	ldi	r19, 0x00	; 0
	data->plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing it drops it low
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	84 27       	eor	r24, r20
     388:	95 27       	eor	r25, r21
     38a:	81 70       	andi	r24, 0x01	; 1
     38c:	88 8b       	std	Y+16, r24	; 0x10
	data->minusOn = !(i & (1<<minus_pin));
     38e:	36 95       	lsr	r19
     390:	27 95       	ror	r18
     392:	24 27       	eor	r18, r20
     394:	35 27       	eor	r19, r21
     396:	21 70       	andi	r18, 0x01	; 1
     398:	29 8b       	std	Y+17, r18	; 0x11
		return 0;
}

inline int testForResetButtonPatterns(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     39a:	2a a5       	ldd	r18, Y+42	; 0x2a
     39c:	3b a5       	ldd	r19, Y+43	; 0x2b
     39e:	20 32       	cpi	r18, 0x20	; 32
     3a0:	31 05       	cpc	r19, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0x166>
     3a4:	ed c0       	rjmp	.+474    	; 0x580 <__stack+0x81>
     3a6:	8c a5       	ldd	r24, Y+44	; 0x2c
     3a8:	9d a5       	ldd	r25, Y+45	; 0x2d
     3aa:	89 2b       	or	r24, r25
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x170>
     3ae:	e8 c0       	rjmp	.+464    	; 0x580 <__stack+0x81>
     3b0:	8e a5       	ldd	r24, Y+46	; 0x2e
     3b2:	9f a5       	ldd	r25, Y+47	; 0x2f
     3b4:	80 97       	sbiw	r24, 0x20	; 32
     3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x17a>
     3b8:	e3 c0       	rjmp	.+454    	; 0x580 <__stack+0x81>
     3ba:	88 a9       	ldd	r24, Y+48	; 0x30
     3bc:	99 a9       	ldd	r25, Y+49	; 0x31
     3be:	89 2b       	or	r24, r25
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <main+0x184>
     3c2:	de c0       	rjmp	.+444    	; 0x580 <__stack+0x81>
     3c4:	8a a9       	ldd	r24, Y+50	; 0x32
     3c6:	9b a9       	ldd	r25, Y+51	; 0x33
     3c8:	80 97       	sbiw	r24, 0x20	; 32
     3ca:	09 f0       	breq	.+2      	; 0x3ce <main+0x18e>
     3cc:	d9 c0       	rjmp	.+434    	; 0x580 <__stack+0x81>
     3ce:	61 15       	cp	r22, r1
     3d0:	71 05       	cpc	r23, r1
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x196>
     3d4:	d5 c0       	rjmp	.+426    	; 0x580 <__stack+0x81>
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    buttonStringPatterns[0][0] = 0x0000000; // [0][0] through [0][5] - green button
     3d6:	8e 01       	movw	r16, r28
     3d8:	02 55       	subi	r16, 0x52	; 82
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	f8 01       	movw	r30, r16
     3de:	11 82       	std	Z+1, r1	; 0x01
     3e0:	10 82       	st	Z, r1
	buttonStringPatterns[0][1] = 0b0001100; 
     3e2:	2c e0       	ldi	r18, 0x0C	; 12
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	33 83       	std	Z+3, r19	; 0x03
     3e8:	22 83       	std	Z+2, r18	; 0x02
	buttonStringPatterns[0][2] = 0b0000000;	
     3ea:	15 82       	std	Z+5, r1	; 0x05
     3ec:	14 82       	std	Z+4, r1	; 0x04
	buttonStringPatterns[0][3] = 0b0000110;
     3ee:	66 e0       	ldi	r22, 0x06	; 6
     3f0:	e6 2e       	mov	r14, r22
     3f2:	f1 2c       	mov	r15, r1
     3f4:	f7 82       	std	Z+7, r15	; 0x07
     3f6:	e6 82       	std	Z+6, r14	; 0x06
	buttonStringPatterns[0][4] = 0b0000000;
     3f8:	11 86       	std	Z+9, r1	; 0x09
     3fa:	10 86       	std	Z+8, r1	; 0x08
	buttonStringPatterns[0][5] = 0b0000010;
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	93 87       	std	Z+11, r25	; 0x0b
     402:	82 87       	std	Z+10, r24	; 0x0a

	buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
     404:	95 87       	std	Z+13, r25	; 0x0d
     406:	84 87       	std	Z+12, r24	; 0x0c
	buttonStringPatterns[1][1] = 0b0000000; 
     408:	17 86       	std	Z+15, r1	; 0x0f
     40a:	16 86       	std	Z+14, r1	; 0x0e
	buttonStringPatterns[1][2] = 0b0000001;
     40c:	51 8b       	std	Z+17, r21	; 0x11
     40e:	40 8b       	std	Z+16, r20	; 0x10
	buttonStringPatterns[1][3] = 0b0000000;
     410:	13 8a       	std	Z+19, r1	; 0x13
     412:	12 8a       	std	Z+18, r1	; 0x12
	buttonStringPatterns[1][4] = 0b0000001;
     414:	55 8b       	std	Z+21, r21	; 0x15
     416:	44 8b       	std	Z+20, r20	; 0x14
	buttonStringPatterns[1][5] = 0b0001100;
     418:	37 8b       	std	Z+23, r19	; 0x17
     41a:	26 8b       	std	Z+22, r18	; 0x16

	buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
     41c:	31 8f       	std	Z+25, r19	; 0x19
     41e:	20 8f       	std	Z+24, r18	; 0x18
	buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
     420:	13 8e       	std	Z+27, r1	; 0x1b
     422:	12 8e       	std	Z+26, r1	; 0x1a
	buttonStringPatterns[2][2] = 0b0000110;
     424:	f5 8e       	std	Z+29, r15	; 0x1d
     426:	e4 8e       	std	Z+28, r14	; 0x1c
	buttonStringPatterns[2][3] = 0b0000000;
     428:	17 8e       	std	Z+31, r1	; 0x1f
     42a:	16 8e       	std	Z+30, r1	; 0x1e
	buttonStringPatterns[2][4] = 0b0000010;
     42c:	91 a3       	std	Z+33, r25	; 0x21
     42e:	80 a3       	std	Z+32, r24	; 0x20
	buttonStringPatterns[2][5] = 0b0000000;
     430:	13 a2       	std	Z+35, r1	; 0x23
     432:	12 a2       	std	Z+34, r1	; 0x22
							  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     434:	15 a2       	std	Z+37, r1	; 0x25
     436:	14 a2       	std	Z+36, r1	; 0x24
	buttonStringPatterns[3][1] = 0b0000001; 
     438:	57 a3       	std	Z+39, r21	; 0x27
     43a:	46 a3       	std	Z+38, r20	; 0x26
	buttonStringPatterns[3][2] = 0b0001100;
     43c:	31 a7       	std	Z+41, r19	; 0x29
     43e:	20 a7       	std	Z+40, r18	; 0x28
	buttonStringPatterns[3][3] = 0b0000000;
     440:	13 a6       	std	Z+43, r1	; 0x2b
     442:	12 a6       	std	Z+42, r1	; 0x2a
	buttonStringPatterns[3][4] = 0b0001100;
     444:	35 a7       	std	Z+45, r19	; 0x2d
     446:	24 a7       	std	Z+44, r18	; 0x2c
	buttonStringPatterns[3][5] = 0b0000000;
     448:	17 a6       	std	Z+47, r1	; 0x2f
     44a:	16 a6       	std	Z+46, r1	; 0x2e

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - orange button
     44c:	11 aa       	std	Z+49, r1	; 0x31
     44e:	10 aa       	std	Z+48, r1	; 0x30
	buttonStringPatterns[4][1] = 0b0000110; 
     450:	f3 aa       	std	Z+51, r15	; 0x33
     452:	e2 aa       	std	Z+50, r14	; 0x32
	buttonStringPatterns[4][2] = 0b0000000;
     454:	15 aa       	std	Z+53, r1	; 0x35
     456:	14 aa       	std	Z+52, r1	; 0x34
	buttonStringPatterns[4][3] = 0b0000001;
     458:	57 ab       	std	Z+55, r21	; 0x37
     45a:	46 ab       	std	Z+54, r20	; 0x36
	buttonStringPatterns[4][4] = 0b0000000;
     45c:	11 ae       	std	Z+57, r1	; 0x39
     45e:	10 ae       	std	Z+56, r1	; 0x38
	buttonStringPatterns[4][5] = 0b0000001;
     460:	53 af       	std	Z+59, r21	; 0x3b
     462:	42 af       	std	Z+58, r20	; 0x3a
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	b8 01       	movw	r22, r16
     46a:	4c e3       	ldi	r20, 0x3C	; 60
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	28 eb       	ldi	r18, 0xB8	; 184
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__eewr_block>

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
     476:	8e e0       	ldi	r24, 0x0E	; 14
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	d8 01       	movw	r26, r16
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 93       	st	X, r25
     480:	8e 93       	st	-X, r24
	buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
     482:	13 96       	adiw	r26, 0x03	; 3
     484:	9c 93       	st	X, r25
     486:	8e 93       	st	-X, r24
     488:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
     48a:	15 96       	adiw	r26, 0x05	; 5
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000000;
     492:	17 96       	adiw	r26, 0x07	; 7
     494:	1c 92       	st	X, r1
     496:	1e 92       	st	-X, r1
     498:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
     49a:	19 96       	adiw	r26, 0x09	; 9
     49c:	1c 92       	st	X, r1
     49e:	1e 92       	st	-X, r1
     4a0:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0001110;
     4a2:	1b 96       	adiw	r26, 0x0b	; 11
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
     4a8:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
     4aa:	1d 96       	adiw	r26, 0x0d	; 13
     4ac:	1c 92       	st	X, r1
     4ae:	1e 92       	st	-X, r1
     4b0:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
     4b2:	1f 96       	adiw	r26, 0x0f	; 15
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0001110;
     4ba:	51 96       	adiw	r26, 0x11	; 17
     4bc:	9c 93       	st	X, r25
     4be:	8e 93       	st	-X, r24
     4c0:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
     4c2:	53 96       	adiw	r26, 0x13	; 19
     4c4:	1c 92       	st	X, r1
     4c6:	1e 92       	st	-X, r1
     4c8:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0001110;
     4ca:	55 96       	adiw	r26, 0x15	; 21
     4cc:	9c 93       	st	X, r25
     4ce:	8e 93       	st	-X, r24
     4d0:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0000000;
     4d2:	57 96       	adiw	r26, 0x17	; 23
     4d4:	1c 92       	st	X, r1
     4d6:	1e 92       	st	-X, r1
     4d8:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
     4da:	59 96       	adiw	r26, 0x19	; 25
     4dc:	1c 92       	st	X, r1
     4de:	1e 92       	st	-X, r1
     4e0:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
     4e2:	5b 96       	adiw	r26, 0x1b	; 27
     4e4:	fc 92       	st	X, r15
     4e6:	ee 92       	st	-X, r14
     4e8:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
     4ea:	5d 96       	adiw	r26, 0x1d	; 29
     4ec:	fc 92       	st	X, r15
     4ee:	ee 92       	st	-X, r14
     4f0:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000110;
     4f2:	5f 96       	adiw	r26, 0x1f	; 31
     4f4:	fc 92       	st	X, r15
     4f6:	ee 92       	st	-X, r14
     4f8:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000000;
     4fa:	91 96       	adiw	r26, 0x21	; 33
     4fc:	1c 92       	st	X, r1
     4fe:	1e 92       	st	-X, r1
     500:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
     502:	93 96       	adiw	r26, 0x23	; 35
     504:	1c 92       	st	X, r1
     506:	1e 92       	st	-X, r1
     508:	92 97       	sbiw	r26, 0x22	; 34
									  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     50a:	95 96       	adiw	r26, 0x25	; 37
     50c:	1c 92       	st	X, r1
     50e:	1e 92       	st	-X, r1
     510:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000000; // This an A chord
     512:	97 96       	adiw	r26, 0x27	; 39
     514:	1c 92       	st	X, r1
     516:	1e 92       	st	-X, r1
     518:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0000110;
     51a:	99 96       	adiw	r26, 0x29	; 41
     51c:	fc 92       	st	X, r15
     51e:	ee 92       	st	-X, r14
     520:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000110;
     522:	9b 96       	adiw	r26, 0x2b	; 43
     524:	fc 92       	st	X, r15
     526:	ee 92       	st	-X, r14
     528:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0000110;
     52a:	9d 96       	adiw	r26, 0x2d	; 45
     52c:	fc 92       	st	X, r15
     52e:	ee 92       	st	-X, r14
     530:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
     532:	9f 96       	adiw	r26, 0x2f	; 47
     534:	1c 92       	st	X, r1
     536:	1e 92       	st	-X, r1
     538:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
     53a:	d1 96       	adiw	r26, 0x31	; 49
     53c:	1c 92       	st	X, r1
     53e:	1e 92       	st	-X, r1
     540:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
     542:	d3 96       	adiw	r26, 0x33	; 51
     544:	1c 92       	st	X, r1
     546:	1e 92       	st	-X, r1
     548:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
     54a:	d5 96       	adiw	r26, 0x35	; 53
     54c:	1c 92       	st	X, r1
     54e:	1e 92       	st	-X, r1
     550:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0001110;
     552:	d7 96       	adiw	r26, 0x37	; 55
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
     558:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0001110;
     55a:	d9 96       	adiw	r26, 0x39	; 57
     55c:	9c 93       	st	X, r25
     55e:	8e 93       	st	-X, r24
     560:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0001110;
     562:	db 96       	adiw	r26, 0x3b	; 59
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	da 97       	sbiw	r26, 0x3a	; 58
     56a:	88 e7       	ldi	r24, 0x78	; 120
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	b8 01       	movw	r22, r16
     570:	48 e7       	ldi	r20, 0x78	; 120
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	28 eb       	ldi	r18, 0xB8	; 184
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__eewr_block>
     57c:	99 24       	eor	r9, r9
     57e:	f0 c0       	rjmp	.+480    	; 0x760 <__stack+0x261>
			//if so, reset the button mappings to default and the play mode to chords.
			controllerMode = FRETS;
			setEepromToDefault(&notesModeButtonPatterns, &chordModeButtonPatterns); // Stored in buttonStringPatterns.h
		}

		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
     580:	b2 e0       	ldi	r27, 0x02	; 2
     582:	9b 16       	cp	r9, r27
     584:	21 f0       	breq	.+8      	; 0x58e <__stack+0x8f>
     586:	e4 e0       	ldi	r30, 0x04	; 4
     588:	9e 16       	cp	r9, r30
     58a:	09 f0       	breq	.+2      	; 0x58e <__stack+0x8f>
     58c:	e9 c0       	rjmp	.+466    	; 0x760 <__stack+0x261>
		{
			// Check to see if we're trying to enter Config Mode; disabled if we're playing with frets
			if (configMode == 0)
     58e:	88 20       	and	r8, r8
     590:	09 f0       	breq	.+2      	; 0x594 <__stack+0x95>
     592:	91 c0       	rjmp	.+290    	; 0x6b6 <__stack+0x1b7>

// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.
inline char testForConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     594:	20 32       	cpi	r18, 0x20	; 32
     596:	31 05       	cpc	r19, r1
     598:	09 f0       	breq	.+2      	; 0x59c <__stack+0x9d>
     59a:	8a c0       	rjmp	.+276    	; 0x6b0 <__stack+0x1b1>
     59c:	8c a5       	ldd	r24, Y+44	; 0x2c
     59e:	9d a5       	ldd	r25, Y+45	; 0x2d
     5a0:	80 97       	sbiw	r24, 0x20	; 32
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <__stack+0xa7>
     5a4:	85 c0       	rjmp	.+266    	; 0x6b0 <__stack+0x1b1>
     5a6:	8e a5       	ldd	r24, Y+46	; 0x2e
     5a8:	9f a5       	ldd	r25, Y+47	; 0x2f
     5aa:	80 97       	sbiw	r24, 0x20	; 32
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__stack+0xb1>
     5ae:	80 c0       	rjmp	.+256    	; 0x6b0 <__stack+0x1b1>
     5b0:	88 a9       	ldd	r24, Y+48	; 0x30
     5b2:	99 a9       	ldd	r25, Y+49	; 0x31
     5b4:	89 2b       	or	r24, r25
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__stack+0xbb>
     5b8:	7b c0       	rjmp	.+246    	; 0x6b0 <__stack+0x1b1>
     5ba:	8a a9       	ldd	r24, Y+50	; 0x32
     5bc:	9b a9       	ldd	r25, Y+51	; 0x33
     5be:	89 2b       	or	r24, r25
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <__stack+0xc5>
     5c2:	76 c0       	rjmp	.+236    	; 0x6b0 <__stack+0x1b1>
     5c4:	61 15       	cp	r22, r1
     5c6:	71 05       	cpc	r23, r1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__stack+0xcd>
     5ca:	72 c0       	rjmp	.+228    	; 0x6b0 <__stack+0x1b1>
			{
				configMode = testForConfigMode(stringState);
				
				// If we're playing with notes, when we enter config mode, we need to clear the 
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	9f 16       	cp	r9, r31
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <__stack+0xd5>
     5d2:	6c c0       	rjmp	.+216    	; 0x6ac <__stack+0x1ad>
	return stringState;
}

inline void clearButtonStringPatterns(int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
     5d4:	1f aa       	std	Y+55, r1	; 0x37
     5d6:	1e aa       	std	Y+54, r1	; 0x36
     5d8:	19 ae       	std	Y+57, r1	; 0x39
     5da:	18 ae       	std	Y+56, r1	; 0x38
	buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
     5dc:	1b ae       	std	Y+59, r1	; 0x3b
     5de:	1a ae       	std	Y+58, r1	; 0x3a
     5e0:	1d ae       	std	Y+61, r1	; 0x3d
     5e2:	1c ae       	std	Y+60, r1	; 0x3c
	buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
     5e4:	1f ae       	std	Y+63, r1	; 0x3f
     5e6:	1e ae       	std	Y+62, r1	; 0x3e
     5e8:	22 96       	adiw	r28, 0x02	; 2
     5ea:	1f ae       	std	Y+63, r1	; 0x3f
     5ec:	1e ae       	std	Y+62, r1	; 0x3e
     5ee:	22 97       	sbiw	r28, 0x02	; 2
	buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
     5f0:	24 96       	adiw	r28, 0x04	; 4
     5f2:	1f ae       	std	Y+63, r1	; 0x3f
     5f4:	1e ae       	std	Y+62, r1	; 0x3e
     5f6:	24 97       	sbiw	r28, 0x04	; 4
     5f8:	26 96       	adiw	r28, 0x06	; 6
     5fa:	1f ae       	std	Y+63, r1	; 0x3f
     5fc:	1e ae       	std	Y+62, r1	; 0x3e
     5fe:	26 97       	sbiw	r28, 0x06	; 6
	buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
     600:	28 96       	adiw	r28, 0x08	; 8
     602:	1f ae       	std	Y+63, r1	; 0x3f
     604:	1e ae       	std	Y+62, r1	; 0x3e
     606:	28 97       	sbiw	r28, 0x08	; 8
     608:	2a 96       	adiw	r28, 0x0a	; 10
     60a:	1f ae       	std	Y+63, r1	; 0x3f
     60c:	1e ae       	std	Y+62, r1	; 0x3e
     60e:	2a 97       	sbiw	r28, 0x0a	; 10
	buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
     610:	2c 96       	adiw	r28, 0x0c	; 12
     612:	1f ae       	std	Y+63, r1	; 0x3f
     614:	1e ae       	std	Y+62, r1	; 0x3e
     616:	2c 97       	sbiw	r28, 0x0c	; 12
     618:	2e 96       	adiw	r28, 0x0e	; 14
     61a:	1f ae       	std	Y+63, r1	; 0x3f
     61c:	1e ae       	std	Y+62, r1	; 0x3e
     61e:	2e 97       	sbiw	r28, 0x0e	; 14
	buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
     620:	60 96       	adiw	r28, 0x10	; 16
     622:	1f ae       	std	Y+63, r1	; 0x3f
     624:	1e ae       	std	Y+62, r1	; 0x3e
     626:	60 97       	sbiw	r28, 0x10	; 16
     628:	62 96       	adiw	r28, 0x12	; 18
     62a:	1f ae       	std	Y+63, r1	; 0x3f
     62c:	1e ae       	std	Y+62, r1	; 0x3e
     62e:	62 97       	sbiw	r28, 0x12	; 18
	buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
     630:	64 96       	adiw	r28, 0x14	; 20
     632:	1f ae       	std	Y+63, r1	; 0x3f
     634:	1e ae       	std	Y+62, r1	; 0x3e
     636:	64 97       	sbiw	r28, 0x14	; 20
     638:	66 96       	adiw	r28, 0x16	; 22
     63a:	1f ae       	std	Y+63, r1	; 0x3f
     63c:	1e ae       	std	Y+62, r1	; 0x3e
     63e:	66 97       	sbiw	r28, 0x16	; 22
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
     640:	68 96       	adiw	r28, 0x18	; 24
     642:	1f ae       	std	Y+63, r1	; 0x3f
     644:	1e ae       	std	Y+62, r1	; 0x3e
     646:	68 97       	sbiw	r28, 0x18	; 24
     648:	6a 96       	adiw	r28, 0x1a	; 26
     64a:	1f ae       	std	Y+63, r1	; 0x3f
     64c:	1e ae       	std	Y+62, r1	; 0x3e
     64e:	6a 97       	sbiw	r28, 0x1a	; 26
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
     650:	6c 96       	adiw	r28, 0x1c	; 28
     652:	1f ae       	std	Y+63, r1	; 0x3f
     654:	1e ae       	std	Y+62, r1	; 0x3e
     656:	6c 97       	sbiw	r28, 0x1c	; 28
     658:	6e 96       	adiw	r28, 0x1e	; 30
     65a:	1f ae       	std	Y+63, r1	; 0x3f
     65c:	1e ae       	std	Y+62, r1	; 0x3e
     65e:	6e 97       	sbiw	r28, 0x1e	; 30
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
     660:	a0 96       	adiw	r28, 0x20	; 32
     662:	1f ae       	std	Y+63, r1	; 0x3f
     664:	1e ae       	std	Y+62, r1	; 0x3e
     666:	a0 97       	sbiw	r28, 0x20	; 32
     668:	a2 96       	adiw	r28, 0x22	; 34
     66a:	1f ae       	std	Y+63, r1	; 0x3f
     66c:	1e ae       	std	Y+62, r1	; 0x3e
     66e:	a2 97       	sbiw	r28, 0x22	; 34
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
     670:	a4 96       	adiw	r28, 0x24	; 36
     672:	1f ae       	std	Y+63, r1	; 0x3f
     674:	1e ae       	std	Y+62, r1	; 0x3e
     676:	a4 97       	sbiw	r28, 0x24	; 36
     678:	a6 96       	adiw	r28, 0x26	; 38
     67a:	1f ae       	std	Y+63, r1	; 0x3f
     67c:	1e ae       	std	Y+62, r1	; 0x3e
     67e:	a6 97       	sbiw	r28, 0x26	; 38
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
     680:	a8 96       	adiw	r28, 0x28	; 40
     682:	1f ae       	std	Y+63, r1	; 0x3f
     684:	1e ae       	std	Y+62, r1	; 0x3e
     686:	a8 97       	sbiw	r28, 0x28	; 40
     688:	aa 96       	adiw	r28, 0x2a	; 42
     68a:	1f ae       	std	Y+63, r1	; 0x3f
     68c:	1e ae       	std	Y+62, r1	; 0x3e
     68e:	aa 97       	sbiw	r28, 0x2a	; 42
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     690:	ac 96       	adiw	r28, 0x2c	; 44
     692:	1f ae       	std	Y+63, r1	; 0x3f
     694:	1e ae       	std	Y+62, r1	; 0x3e
     696:	ac 97       	sbiw	r28, 0x2c	; 44
     698:	d2 01       	movw	r26, r4
     69a:	1d 92       	st	X+, r1
     69c:	1c 92       	st	X, r1
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
     69e:	f1 01       	movw	r30, r2
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	10 82       	st	Z, r1
     6a4:	e2 96       	adiw	r28, 0x32	; 50
     6a6:	1f ae       	std	Y+63, r1	; 0x3f
     6a8:	1e ae       	std	Y+62, r1	; 0x3e
     6aa:	e2 97       	sbiw	r28, 0x32	; 50
     6ac:	88 24       	eor	r8, r8
     6ae:	83 94       	inc	r8
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
				{
					clearButtonStringPatterns(buttonStringPatterns);
				}
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
     6b0:	1e 82       	std	Y+6, r1	; 0x06
     6b2:	1d 82       	std	Y+5, r1	; 0x05
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
     6b4:	1b 82       	std	Y+3, r1	; 0x03
			}

			// Config Mode operation
			if (configMode == 1) 
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	8f 16       	cp	r8, r31
     6ba:	09 f0       	breq	.+2      	; 0x6be <__stack+0x1bf>
     6bc:	51 c0       	rjmp	.+162    	; 0x760 <__stack+0x261>
}

//This function tests to see if we're pressing the correct string combination to end config mode
inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     6be:	23 2b       	or	r18, r19
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <__stack+0x1c5>
     6c2:	e9 c0       	rjmp	.+466    	; 0x896 <__stack+0x397>
     6c4:	8c a5       	ldd	r24, Y+44	; 0x2c
     6c6:	9d a5       	ldd	r25, Y+45	; 0x2d
     6c8:	80 97       	sbiw	r24, 0x20	; 32
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__stack+0x1cf>
     6cc:	e4 c0       	rjmp	.+456    	; 0x896 <__stack+0x397>
     6ce:	8e a5       	ldd	r24, Y+46	; 0x2e
     6d0:	9f a5       	ldd	r25, Y+47	; 0x2f
     6d2:	80 97       	sbiw	r24, 0x20	; 32
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <__stack+0x1d9>
     6d6:	df c0       	rjmp	.+446    	; 0x896 <__stack+0x397>
     6d8:	88 a9       	ldd	r24, Y+48	; 0x30
     6da:	99 a9       	ldd	r25, Y+49	; 0x31
     6dc:	80 97       	sbiw	r24, 0x20	; 32
     6de:	09 f0       	breq	.+2      	; 0x6e2 <__stack+0x1e3>
     6e0:	da c0       	rjmp	.+436    	; 0x896 <__stack+0x397>
     6e2:	8a a9       	ldd	r24, Y+50	; 0x32
     6e4:	9b a9       	ldd	r25, Y+51	; 0x33
     6e6:	89 2b       	or	r24, r25
     6e8:	09 f0       	breq	.+2      	; 0x6ec <__stack+0x1ed>
     6ea:	d5 c0       	rjmp	.+426    	; 0x896 <__stack+0x397>
     6ec:	67 2b       	or	r22, r23
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <__stack+0x1f3>
     6f0:	d2 c0       	rjmp	.+420    	; 0x896 <__stack+0x397>
				if (testForEndConfigMode(stringState))
					{
						// Now save this new button mapping to the EEPROM 
						// Since we're already passing in buttonsStringPatterns
						// as a pointer, we don't use the '&' operator
						if (controllerMode == NOTES)
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	98 16       	cp	r9, r24
     6f6:	41 f4       	brne	.+16     	; 0x708 <__stack+0x209>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	be 01       	movw	r22, r28
     6fe:	6a 5c       	subi	r22, 0xCA	; 202
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	4c e3       	ldi	r20, 0x3C	; 60
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	27 c0       	rjmp	.+78     	; 0x756 <__stack+0x257>
							eeprom_write_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
						else if (controllerMode == CHORDS)
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	99 16       	cp	r9, r25
     70c:	61 f5       	brne	.+88     	; 0x766 <__stack+0x267>
     70e:	88 e7       	ldi	r24, 0x78	; 120
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	be 01       	movw	r22, r28
     714:	6a 5c       	subi	r22, 0xCA	; 202
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	1c c0       	rjmp	.+56     	; 0x752 <__stack+0x253>
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	05 97       	sbiw	r24, 0x05	; 5
     720:	0c f4       	brge	.+2      	; 0x724 <__stack+0x225>
     722:	ad c0       	rjmp	.+346    	; 0x87e <__stack+0x37f>
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	88 23       	and	r24, r24
     728:	09 f0       	breq	.+2      	; 0x72c <__stack+0x22d>
     72a:	a9 c0       	rjmp	.+338    	; 0x87e <__stack+0x37f>
					{
						buttonToAssign = 0;
     72c:	1e 82       	std	Y+6, r1	; 0x06
     72e:	1d 82       	std	Y+5, r1	; 0x05
     730:	a6 c0       	rjmp	.+332    	; 0x87e <__stack+0x37f>
					}
					
					// Or if we've programmed all 10 notes in Chord mode, exit programming mode
					if (controllerMode == CHORDS && buttonToAssign >= NUM_CHORDS_BUTTONS && plusLock == 0 )
     732:	a4 e0       	ldi	r26, 0x04	; 4
     734:	9a 16       	cp	r9, r26
     736:	09 f0       	breq	.+2      	; 0x73a <__stack+0x23b>
     738:	a2 c0       	rjmp	.+324    	; 0x87e <__stack+0x37f>
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	0a 97       	sbiw	r24, 0x0a	; 10
     740:	0c f4       	brge	.+2      	; 0x744 <__stack+0x245>
     742:	9d c0       	rjmp	.+314    	; 0x87e <__stack+0x37f>
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	88 23       	and	r24, r24
     748:	09 f0       	breq	.+2      	; 0x74c <__stack+0x24d>
     74a:	99 c0       	rjmp	.+306    	; 0x87e <__stack+0x37f>
     74c:	88 e7       	ldi	r24, 0x78	; 120
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	b3 01       	movw	r22, r6
     752:	48 e7       	ldi	r20, 0x78	; 120
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	28 eb       	ldi	r18, 0xB8	; 184
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__eewr_block>
     75e:	03 c0       	rjmp	.+6      	; 0x766 <__stack+0x267>
					}
		}	}	}	 // End of Config Mode code

		
		// Normal operation
		if (configMode == 0)
     760:	88 20       	and	r8, r8
     762:	09 f0       	breq	.+2      	; 0x766 <__stack+0x267>
     764:	8c c0       	rjmp	.+280    	; 0x87e <__stack+0x37f>
		return 0;
}

inline int testForMinusChord(int stringState[])
{
	if ((stringState[0] == 0b00011110) &&
     766:	8a a5       	ldd	r24, Y+42	; 0x2a
     768:	9b a5       	ldd	r25, Y+43	; 0x2b
     76a:	8e 31       	cpi	r24, 0x1E	; 30
     76c:	91 05       	cpc	r25, r1
     76e:	e1 f4       	brne	.+56     	; 0x7a8 <__stack+0x2a9>
     770:	8c a5       	ldd	r24, Y+44	; 0x2c
     772:	9d a5       	ldd	r25, Y+45	; 0x2d
     774:	4e 97       	sbiw	r24, 0x1e	; 30
     776:	09 f0       	breq	.+2      	; 0x77a <__stack+0x27b>
     778:	67 c0       	rjmp	.+206    	; 0x848 <__stack+0x349>
     77a:	8e a5       	ldd	r24, Y+46	; 0x2e
     77c:	9f a5       	ldd	r25, Y+47	; 0x2f
     77e:	4e 97       	sbiw	r24, 0x1e	; 30
     780:	09 f0       	breq	.+2      	; 0x784 <__stack+0x285>
     782:	62 c0       	rjmp	.+196    	; 0x848 <__stack+0x349>
     784:	88 a9       	ldd	r24, Y+48	; 0x30
     786:	99 a9       	ldd	r25, Y+49	; 0x31
     788:	4e 97       	sbiw	r24, 0x1e	; 30
     78a:	09 f0       	breq	.+2      	; 0x78e <__stack+0x28f>
     78c:	5d c0       	rjmp	.+186    	; 0x848 <__stack+0x349>
     78e:	8a a9       	ldd	r24, Y+50	; 0x32
     790:	9b a9       	ldd	r25, Y+51	; 0x33
     792:	4e 97       	sbiw	r24, 0x1e	; 30
     794:	09 f0       	breq	.+2      	; 0x798 <__stack+0x299>
     796:	58 c0       	rjmp	.+176    	; 0x848 <__stack+0x349>
     798:	8c a9       	ldd	r24, Y+52	; 0x34
     79a:	9d a9       	ldd	r25, Y+53	; 0x35
     79c:	4e 97       	sbiw	r24, 0x1e	; 30
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__stack+0x2a3>
     7a0:	53 c0       	rjmp	.+166    	; 0x848 <__stack+0x349>
		{
			//Test if Minus is being played by the chord instead of the button
			// This means it won't get read in config mode, which is good.
			if(testForMinusChord(stringState))
				data.minusOn = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 8b       	std	Y+17, r24	; 0x11
     7a6:	50 c0       	rjmp	.+160    	; 0x848 <__stack+0x349>
}

inline int testForSwitchModes(int stringState[])
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00000000) &&
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__stack+0x2af>
     7ac:	4d c0       	rjmp	.+154    	; 0x848 <__stack+0x349>
     7ae:	8c a5       	ldd	r24, Y+44	; 0x2c
     7b0:	9d a5       	ldd	r25, Y+45	; 0x2d
     7b2:	89 2b       	or	r24, r25
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__stack+0x2b9>
     7b6:	48 c0       	rjmp	.+144    	; 0x848 <__stack+0x349>
     7b8:	8e a5       	ldd	r24, Y+46	; 0x2e
     7ba:	9f a5       	ldd	r25, Y+47	; 0x2f
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	91 05       	cpc	r25, r1
     7c0:	89 f4       	brne	.+34     	; 0x7e4 <__stack+0x2e5>
     7c2:	88 a9       	ldd	r24, Y+48	; 0x30
     7c4:	99 a9       	ldd	r25, Y+49	; 0x31
     7c6:	80 97       	sbiw	r24, 0x20	; 32
     7c8:	09 f0       	breq	.+2      	; 0x7cc <__stack+0x2cd>
     7ca:	3e c0       	rjmp	.+124    	; 0x848 <__stack+0x349>
     7cc:	8a a9       	ldd	r24, Y+50	; 0x32
     7ce:	9b a9       	ldd	r25, Y+51	; 0x33
     7d0:	80 97       	sbiw	r24, 0x20	; 32
     7d2:	d1 f5       	brne	.+116    	; 0x848 <__stack+0x349>
     7d4:	8c a9       	ldd	r24, Y+52	; 0x34
     7d6:	9d a9       	ldd	r25, Y+53	; 0x35
     7d8:	89 2b       	or	r24, r25
     7da:	b1 f5       	brne	.+108    	; 0x848 <__stack+0x349>
static inline void switchPlayModes(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if (testForSwitchModes(stringState))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
     7dc:	90 fc       	sbrc	r9, 0
     7de:	34 c0       	rjmp	.+104    	; 0x848 <__stack+0x349>
			{++*controllerMode;}  //This puts it into a transitional mode
     7e0:	93 94       	inc	r9
     7e2:	32 c0       	rjmp	.+100    	; 0x848 <__stack+0x349>
		return 0;
}

inline int testForNoStringsPressed(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     7e4:	89 2b       	or	r24, r25
     7e6:	81 f5       	brne	.+96     	; 0x848 <__stack+0x349>
     7e8:	88 a9       	ldd	r24, Y+48	; 0x30
     7ea:	99 a9       	ldd	r25, Y+49	; 0x31
     7ec:	89 2b       	or	r24, r25
     7ee:	61 f5       	brne	.+88     	; 0x848 <__stack+0x349>
     7f0:	8a a9       	ldd	r24, Y+50	; 0x32
     7f2:	9b a9       	ldd	r25, Y+51	; 0x33
     7f4:	89 2b       	or	r24, r25
     7f6:	41 f5       	brne	.+80     	; 0x848 <__stack+0x349>
     7f8:	8c a9       	ldd	r24, Y+52	; 0x34
     7fa:	9d a9       	ldd	r25, Y+53	; 0x35
     7fc:	89 2b       	or	r24, r25
     7fe:	21 f5       	brne	.+72     	; 0x848 <__stack+0x349>
	}
	// And if we're not pressing that anymore, switch from the transitional mode to the regular mode,
	//  resetting the button patterns as necessary
	else if(testForNoStringsPressed(stringState)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
     800:	b5 e0       	ldi	r27, 0x05	; 5
     802:	9b 16       	cp	r9, r27
     804:	11 f4       	brne	.+4      	; 0x80a <__stack+0x30b>
     806:	99 24       	eor	r9, r9
     808:	1f c0       	rjmp	.+62     	; 0x848 <__stack+0x349>
			{*controllerMode = FRETS;}

		// Now, reset the buttonStringPattern array to be appropriate for the mode
		// For this, we'll read it from the EEPROM memory.
		else if (*controllerMode  == FRETS_TO_NOTES)
     80a:	e1 e0       	ldi	r30, 0x01	; 1
     80c:	9e 16       	cp	r9, r30
     80e:	69 f4       	brne	.+26     	; 0x82a <__stack+0x32b>
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
     810:	ce 01       	movw	r24, r28
     812:	c6 96       	adiw	r24, 0x36	; 54
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	4c e3       	ldi	r20, 0x3C	; 60
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	20 eb       	ldi	r18, 0xB0	; 176
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__eerd_block>
     824:	52 e0       	ldi	r21, 0x02	; 2
     826:	95 2e       	mov	r9, r21
     828:	0f c0       	rjmp	.+30     	; 0x848 <__stack+0x349>
		{
			// Notice, we're already passing in buttonStringPatterns as an address, so the EEPROM read looks a bit strange
			eeprom_read_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
     82a:	f3 e0       	ldi	r31, 0x03	; 3
     82c:	9f 16       	cp	r9, r31
     82e:	61 f4       	brne	.+24     	; 0x848 <__stack+0x349>
     830:	ce 01       	movw	r24, r28
     832:	c6 96       	adiw	r24, 0x36	; 54
     834:	68 e7       	ldi	r22, 0x78	; 120
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	48 e7       	ldi	r20, 0x78	; 120
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	20 eb       	ldi	r18, 0xB0	; 176
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__eerd_block>
     844:	44 e0       	ldi	r20, 0x04	; 4
     846:	94 2e       	mov	r9, r20
			switchPlayModes(stringState, buttonStringPatterns, &controllerMode);

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
     848:	69 2d       	mov	r22, r9
     84a:	ce 01       	movw	r24, r28
     84c:	09 96       	adiw	r24, 0x09	; 9
     84e:	90 fc       	sbrc	r9, 0
     850:	12 c0       	rjmp	.+36     	; 0x876 <__stack+0x377>
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
     852:	be 01       	movw	r22, r28
     854:	66 5d       	subi	r22, 0xD6	; 214
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	ae 01       	movw	r20, r28
     85a:	4a 5c       	subi	r20, 0xCA	; 202
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	29 2d       	mov	r18, r9
     860:	8e 01       	movw	r16, r28
     862:	0e 5e       	subi	r16, 0xEE	; 238
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	3e e1       	ldi	r19, 0x1E	; 30
     868:	e3 2e       	mov	r14, r19
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	0e 94 87 08 	call	0x110e	; 0x110e <processStringState>
     874:	03 c0       	rjmp	.+6      	; 0x87c <__stack+0x37d>
			}
			else
			{   // Now, if we're in a transitional controller mode, we'll forget that data and substitue 
				// visual cue data to show that we're changing to a specific mode
				//  The function itself can be found in processStringState.h/.c
				displayTransitionState(&data, controllerMode);
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 9e 08 	call	0x113c	; 0x113c <displayTransitionState>
     87c:	88 24       	eor	r8, r8
		}
			    
		// Now our processing is complete, so using those button presses, we set up the 
		// button data packet. This function depends on the console and is 
		// set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
		sendData(data);
     87e:	09 85       	ldd	r16, Y+9	; 0x09
     880:	1a 85       	ldd	r17, Y+10	; 0x0a
     882:	2b 85       	ldd	r18, Y+11	; 0x0b
     884:	3c 85       	ldd	r19, Y+12	; 0x0c
     886:	4d 85       	ldd	r20, Y+13	; 0x0d
     888:	5e 85       	ldd	r21, Y+14	; 0x0e
     88a:	6f 85       	ldd	r22, Y+15	; 0x0f
     88c:	78 89       	ldd	r23, Y+16	; 0x10
     88e:	89 89       	ldd	r24, Y+17	; 0x11
     890:	0e 94 4d 0a 	call	0x149a	; 0x149a <sendData>
     894:	47 cd       	rjmp	.-1394   	; 0x324 <main+0xe4>
				else
				{
					// Now set up the data packet to the interface layer to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					//  The function itself can be found in processStringState.h/.c
					configSetButtonData(&data, &buttonToAssign, buttonStringPatterns, stringState, controllerMode,
     896:	b6 e3       	ldi	r27, 0x36	; 54
     898:	6b 2e       	mov	r6, r27
     89a:	71 2c       	mov	r7, r1
     89c:	6c 0e       	add	r6, r28
     89e:	7d 1e       	adc	r7, r29
     8a0:	ce 01       	movw	r24, r28
     8a2:	09 96       	adiw	r24, 0x09	; 9
     8a4:	be 01       	movw	r22, r28
     8a6:	6b 5f       	subi	r22, 0xFB	; 251
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	a3 01       	movw	r20, r6
     8ac:	9e 01       	movw	r18, r28
     8ae:	26 5d       	subi	r18, 0xD6	; 214
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	09 2d       	mov	r16, r9
     8b4:	a3 e0       	ldi	r26, 0x03	; 3
     8b6:	ea 2e       	mov	r14, r26
     8b8:	f1 2c       	mov	r15, r1
     8ba:	ec 0e       	add	r14, r28
     8bc:	fd 1e       	adc	r15, r29
     8be:	f4 e0       	ldi	r31, 0x04	; 4
     8c0:	cf 2e       	mov	r12, r31
     8c2:	d1 2c       	mov	r13, r1
     8c4:	cc 0e       	add	r12, r28
     8c6:	dd 1e       	adc	r13, r29
     8c8:	e7 e0       	ldi	r30, 0x07	; 7
     8ca:	ae 2e       	mov	r10, r30
     8cc:	b1 2c       	mov	r11, r1
     8ce:	ac 0e       	add	r10, r28
     8d0:	bd 1e       	adc	r11, r29
     8d2:	0e 94 b4 08 	call	0x1168	; 0x1168 <configSetButtonData>
											&plusLock, &previousPlusOn, &debounceTimer);
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
     8d6:	18 8a       	std	Y+16, r1	; 0x10
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	98 16       	cp	r9, r24
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__stack+0x3e1>
     8de:	29 cf       	rjmp	.-430    	; 0x732 <__stack+0x233>
     8e0:	1c cf       	rjmp	.-456    	; 0x71a <__stack+0x21b>

000008e2 <setPins>:
#include "guitarInitFunctions.h"

void setPins(void)
{
	// Set the fret pins as input pins, with internal resistor
	fret_ddr &= ~(1<<green_pin);        // input
     8e2:	21 98       	cbi	0x04, 1	; 4
	fret_port |= (1<<green_pin);		//pull-up enabled	
     8e4:	29 9a       	sbi	0x05, 1	; 5
	fret_ddr &= ~(1<<red_pin);
     8e6:	22 98       	cbi	0x04, 2	; 4
	fret_port |= (1<<red_pin);
     8e8:	2a 9a       	sbi	0x05, 2	; 5
	fret_ddr &= ~(1<<yellow_pin);
     8ea:	23 98       	cbi	0x04, 3	; 4
	fret_port |= (1<<yellow_pin);
     8ec:	2b 9a       	sbi	0x05, 3	; 5
	fret_ddr &= ~(1<<blue_pin);
     8ee:	24 98       	cbi	0x04, 4	; 4
	fret_port |= (1<<blue_pin);
     8f0:	2c 9a       	sbi	0x05, 4	; 5
	fret_ddr &= ~(1<<orange_pin);
     8f2:	25 98       	cbi	0x04, 5	; 4
	fret_port |= (1<<orange_pin);
     8f4:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	misc_ddr &= ~(1<<plus_pin);
     8f6:	38 98       	cbi	0x07, 0	; 7
	misc_port |= (1<<plus_pin);
     8f8:	40 9a       	sbi	0x08, 0	; 8
	misc_ddr &= ~(1<<minus_pin);
     8fa:	39 98       	cbi	0x07, 1	; 7
	misc_port |= (1<<minus_pin);
     8fc:	41 9a       	sbi	0x08, 1	; 8

	pick_ddr &= ~(1<<strum_pin);
     8fe:	3a 98       	cbi	0x07, 2	; 7
	pick_port |= (1<<strum_pin);
     900:	42 9a       	sbi	0x08, 2	; 8

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	string_ddr |= (1<<first_string);  //output
     902:	57 9a       	sbi	0x0a, 7	; 10
	string_port |= (1<<first_string); // set high
     904:	5f 9a       	sbi	0x0b, 7	; 11
	string_ddr |= (1<<second_string);  
     906:	56 9a       	sbi	0x0a, 6	; 10
	string_port |= (1<<second_string);
     908:	5e 9a       	sbi	0x0b, 6	; 11
	string_ddr |= (1<<third_string);  
     90a:	55 9a       	sbi	0x0a, 5	; 10
	string_port |= (1<<third_string);
     90c:	5d 9a       	sbi	0x0b, 5	; 11
	string_ddr |= (1<<fourth_string);  
     90e:	52 9a       	sbi	0x0a, 2	; 10
	string_port |= (1<<fourth_string);
     910:	5a 9a       	sbi	0x0b, 2	; 11
	string_ddr |= (1<<fifth_string);  
     912:	51 9a       	sbi	0x0a, 1	; 10
	string_port |= (1<<fifth_string);
     914:	59 9a       	sbi	0x0b, 1	; 11
	string_ddr |= (1<<sixth_string);  
     916:	50 9a       	sbi	0x0a, 0	; 10
	string_port |= (1<<sixth_string);
     918:	58 9a       	sbi	0x0b, 0	; 11
}
     91a:	08 95       	ret

0000091c <setTimer>:

void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
     91c:	e4 e6       	ldi	r30, 0x64	; 100
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	87 7f       	andi	r24, 0xF7	; 247
     924:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
     926:	e0 e8       	ldi	r30, 0x80	; 128
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 77       	andi	r24, 0x7F	; 127
     92e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  //  to the pins on the chip. Otherwise, we might
     930:	80 81       	ld	r24, Z
     932:	8f 7b       	andi	r24, 0xBF	; 191
     934:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  //  get signals coming out of some of the pins we might use
     936:	80 81       	ld	r24, Z
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     93c:	80 81       	ld	r24, Z
     93e:	8f 7e       	andi	r24, 0xEF	; 239
     940:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
     942:	80 81       	ld	r24, Z
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
     948:	80 81       	ld	r24, Z
     94a:	8e 7f       	andi	r24, 0xFE	; 254
     94c:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
     94e:	e1 e8       	ldi	r30, 0x81	; 129
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	87 7f       	andi	r24, 0xF7	; 247
     956:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
     958:	80 81       	ld	r24, Z
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
     95e:	80 81       	ld	r24, Z
     960:	84 60       	ori	r24, 0x04	; 4
     962:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
     964:	80 81       	ld	r24, Z
     966:	8d 7f       	andi	r24, 0xFD	; 253
     968:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
     96a:	80 81       	ld	r24, Z
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
     970:	08 95       	ret

00000972 <processChords>:
*/
#include "processStringState.h"

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	8c 01       	movw	r16, r24
     97c:	fb 01       	movw	r30, r22
     97e:	ea 01       	movw	r28, r20
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
				data->downOn = 1;
				data->upOn   = 0;
			}
			else
			{
				data->upOn   = 1;
     984:	41 e0       	ldi	r20, 0x01	; 1
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
	{
		if (stringState[guitarString] & 1)
     986:	db 01       	movw	r26, r22
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	80 ff       	sbrs	r24, 0
     990:	13 c0       	rjmp	.+38     	; 0x9b8 <processChords+0x46>
		{
			stringState[guitarString] &= ~1; //Set the last bit to zero
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	8d 93       	st	X+, r24
     996:	9c 93       	st	X, r25
			if (guitarString < 3)
     998:	23 30       	cpi	r18, 0x03	; 3
     99a:	31 05       	cpc	r19, r1
     99c:	3c f4       	brge	.+14     	; 0x9ac <processChords+0x3a>
			{
				data->downOn = 1;
     99e:	d8 01       	movw	r26, r16
     9a0:	16 96       	adiw	r26, 0x06	; 6
     9a2:	4c 93       	st	X, r20
     9a4:	16 97       	sbiw	r26, 0x06	; 6
				data->upOn   = 0;
     9a6:	15 96       	adiw	r26, 0x05	; 5
     9a8:	1c 92       	st	X, r1
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <processChords+0x46>
			}
			else
			{
				data->upOn   = 1;
     9ac:	d8 01       	movw	r26, r16
     9ae:	15 96       	adiw	r26, 0x05	; 5
     9b0:	4c 93       	st	X, r20
     9b2:	15 97       	sbiw	r26, 0x05	; 5
				data->downOn = 0;
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	1c 92       	st	X, r1

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	6e 5f       	subi	r22, 0xFE	; 254
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	26 30       	cpi	r18, 0x06	; 6
     9c2:	31 05       	cpc	r19, r1
     9c4:	01 f7       	brne	.-64     	; 0x986 <processChords+0x14>
			}
		}
	}

	// First, save us some trouble and see if we're not pressing anything at all..
	if ((stringState[0] == 0b00000000) &&
     9c6:	40 81       	ld	r20, Z
     9c8:	51 81       	ldd	r21, Z+1	; 0x01
     9ca:	41 15       	cp	r20, r1
     9cc:	51 05       	cpc	r21, r1
     9ce:	a9 f4       	brne	.+42     	; 0x9fa <processChords+0x88>
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	89 2b       	or	r24, r25
     9d6:	89 f4       	brne	.+34     	; 0x9fa <processChords+0x88>
     9d8:	84 81       	ldd	r24, Z+4	; 0x04
     9da:	95 81       	ldd	r25, Z+5	; 0x05
     9dc:	89 2b       	or	r24, r25
     9de:	69 f4       	brne	.+26     	; 0x9fa <processChords+0x88>
     9e0:	86 81       	ldd	r24, Z+6	; 0x06
     9e2:	97 81       	ldd	r25, Z+7	; 0x07
     9e4:	89 2b       	or	r24, r25
     9e6:	49 f4       	brne	.+18     	; 0x9fa <processChords+0x88>
     9e8:	80 85       	ldd	r24, Z+8	; 0x08
     9ea:	91 85       	ldd	r25, Z+9	; 0x09
     9ec:	89 2b       	or	r24, r25
     9ee:	29 f4       	brne	.+10     	; 0x9fa <processChords+0x88>
     9f0:	82 85       	ldd	r24, Z+10	; 0x0a
     9f2:	93 85       	ldd	r25, Z+11	; 0x0b
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f4       	brne	.+2      	; 0x9fa <processChords+0x88>
     9f8:	31 c2       	rjmp	.+1122   	; 0xe5c <processChords+0x4ea>
		return;

	// Now see if what's being played on the fretboard matches any of the button patterns in
	//  buttonStringPatterns
	// green
	if(stringState[0] == buttonStringPatterns[0][0] &&
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	48 17       	cp	r20, r24
     a00:	59 07       	cpc	r21, r25
     a02:	39 f5       	brne	.+78     	; 0xa52 <processChords+0xe0>
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	33 81       	ldd	r19, Z+3	; 0x03
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	01 f5       	brne	.+64     	; 0xa52 <processChords+0xe0>
     a12:	24 81       	ldd	r18, Z+4	; 0x04
     a14:	35 81       	ldd	r19, Z+5	; 0x05
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	9d 81       	ldd	r25, Y+5	; 0x05
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	c9 f4       	brne	.+50     	; 0xa52 <processChords+0xe0>
     a20:	26 81       	ldd	r18, Z+6	; 0x06
     a22:	37 81       	ldd	r19, Z+7	; 0x07
     a24:	8e 81       	ldd	r24, Y+6	; 0x06
     a26:	9f 81       	ldd	r25, Y+7	; 0x07
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	91 f4       	brne	.+36     	; 0xa52 <processChords+0xe0>
     a2e:	20 85       	ldd	r18, Z+8	; 0x08
     a30:	31 85       	ldd	r19, Z+9	; 0x09
     a32:	88 85       	ldd	r24, Y+8	; 0x08
     a34:	99 85       	ldd	r25, Y+9	; 0x09
     a36:	28 17       	cp	r18, r24
     a38:	39 07       	cpc	r19, r25
     a3a:	59 f4       	brne	.+22     	; 0xa52 <processChords+0xe0>
     a3c:	22 85       	ldd	r18, Z+10	; 0x0a
     a3e:	33 85       	ldd	r19, Z+11	; 0x0b
     a40:	8a 85       	ldd	r24, Y+10	; 0x0a
     a42:	9b 85       	ldd	r25, Y+11	; 0x0b
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	21 f4       	brne	.+8      	; 0xa52 <processChords+0xe0>
	   stringState[2] == buttonStringPatterns[0][2] &&
	   stringState[3] == buttonStringPatterns[0][3] &&
	   stringState[4] == buttonStringPatterns[0][4] &&
	   stringState[5] == buttonStringPatterns[0][5]  ) 
		{
			data->greenOn = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	f8 01       	movw	r30, r16
     a4e:	80 83       	st	Z, r24
     a50:	05 c2       	rjmp	.+1034   	; 0xe5c <processChords+0x4ea>
  		}
	// red
	else if(stringState[0] == buttonStringPatterns[1][0] &&
     a52:	de 01       	movw	r26, r28
     a54:	1c 96       	adiw	r26, 0x0c	; 12
     a56:	8c 85       	ldd	r24, Y+12	; 0x0c
     a58:	9d 85       	ldd	r25, Y+13	; 0x0d
     a5a:	48 17       	cp	r20, r24
     a5c:	59 07       	cpc	r21, r25
     a5e:	81 f5       	brne	.+96     	; 0xac0 <processChords+0x14e>
     a60:	22 81       	ldd	r18, Z+2	; 0x02
     a62:	33 81       	ldd	r19, Z+3	; 0x03
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	8d 91       	ld	r24, X+
     a68:	9c 91       	ld	r25, X
     a6a:	13 97       	sbiw	r26, 0x03	; 3
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	39 f5       	brne	.+78     	; 0xac0 <processChords+0x14e>
     a72:	24 81       	ldd	r18, Z+4	; 0x04
     a74:	35 81       	ldd	r19, Z+5	; 0x05
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	15 97       	sbiw	r26, 0x05	; 5
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	f1 f4       	brne	.+60     	; 0xac0 <processChords+0x14e>
     a84:	26 81       	ldd	r18, Z+6	; 0x06
     a86:	37 81       	ldd	r19, Z+7	; 0x07
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	a9 f4       	brne	.+42     	; 0xac0 <processChords+0x14e>
     a96:	20 85       	ldd	r18, Z+8	; 0x08
     a98:	31 85       	ldd	r19, Z+9	; 0x09
     a9a:	18 96       	adiw	r26, 0x08	; 8
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	19 97       	sbiw	r26, 0x09	; 9
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	61 f4       	brne	.+24     	; 0xac0 <processChords+0x14e>
     aa8:	22 85       	ldd	r18, Z+10	; 0x0a
     aaa:	33 85       	ldd	r19, Z+11	; 0x0b
     aac:	1a 96       	adiw	r26, 0x0a	; 10
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	1b 97       	sbiw	r26, 0x0b	; 11
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	19 f4       	brne	.+6      	; 0xac0 <processChords+0x14e>
	   stringState[2] == buttonStringPatterns[1][2] &&
	   stringState[3] == buttonStringPatterns[1][3] &&
	   stringState[4] == buttonStringPatterns[1][4] &&
	   stringState[5] == buttonStringPatterns[1][5]  ) 
		{
			data->redOn = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	d8 01       	movw	r26, r16
     abe:	dd c0       	rjmp	.+442    	; 0xc7a <processChords+0x308>
  		}

	// yellow
	else if(stringState[0] == buttonStringPatterns[2][0] &&
     ac0:	de 01       	movw	r26, r28
     ac2:	58 96       	adiw	r26, 0x18	; 24
     ac4:	88 8d       	ldd	r24, Y+24	; 0x18
     ac6:	99 8d       	ldd	r25, Y+25	; 0x19
     ac8:	48 17       	cp	r20, r24
     aca:	59 07       	cpc	r21, r25
     acc:	81 f5       	brne	.+96     	; 0xb2e <processChords+0x1bc>
     ace:	22 81       	ldd	r18, Z+2	; 0x02
     ad0:	33 81       	ldd	r19, Z+3	; 0x03
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	39 f5       	brne	.+78     	; 0xb2e <processChords+0x1bc>
     ae0:	24 81       	ldd	r18, Z+4	; 0x04
     ae2:	35 81       	ldd	r19, Z+5	; 0x05
     ae4:	14 96       	adiw	r26, 0x04	; 4
     ae6:	8d 91       	ld	r24, X+
     ae8:	9c 91       	ld	r25, X
     aea:	15 97       	sbiw	r26, 0x05	; 5
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	f1 f4       	brne	.+60     	; 0xb2e <processChords+0x1bc>
     af2:	26 81       	ldd	r18, Z+6	; 0x06
     af4:	37 81       	ldd	r19, Z+7	; 0x07
     af6:	16 96       	adiw	r26, 0x06	; 6
     af8:	8d 91       	ld	r24, X+
     afa:	9c 91       	ld	r25, X
     afc:	17 97       	sbiw	r26, 0x07	; 7
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	a9 f4       	brne	.+42     	; 0xb2e <processChords+0x1bc>
     b04:	20 85       	ldd	r18, Z+8	; 0x08
     b06:	31 85       	ldd	r19, Z+9	; 0x09
     b08:	18 96       	adiw	r26, 0x08	; 8
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	19 97       	sbiw	r26, 0x09	; 9
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	61 f4       	brne	.+24     	; 0xb2e <processChords+0x1bc>
     b16:	22 85       	ldd	r18, Z+10	; 0x0a
     b18:	33 85       	ldd	r19, Z+11	; 0x0b
     b1a:	1a 96       	adiw	r26, 0x0a	; 10
     b1c:	8d 91       	ld	r24, X+
     b1e:	9c 91       	ld	r25, X
     b20:	1b 97       	sbiw	r26, 0x0b	; 11
     b22:	28 17       	cp	r18, r24
     b24:	39 07       	cpc	r19, r25
     b26:	19 f4       	brne	.+6      	; 0xb2e <processChords+0x1bc>
	   stringState[2] == buttonStringPatterns[2][2] &&
	   stringState[3] == buttonStringPatterns[2][3] &&
	   stringState[4] == buttonStringPatterns[2][4] &&
	   stringState[5] == buttonStringPatterns[2][5]  ) 
		{
			 data->yellowOn = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	f8 01       	movw	r30, r16
     b2c:	58 c1       	rjmp	.+688    	; 0xdde <processChords+0x46c>
  		}
	// blue
	else if(stringState[0] == buttonStringPatterns[3][0] &&
     b2e:	de 01       	movw	r26, r28
     b30:	94 96       	adiw	r26, 0x24	; 36
     b32:	8c a1       	ldd	r24, Y+36	; 0x24
     b34:	9d a1       	ldd	r25, Y+37	; 0x25
     b36:	48 17       	cp	r20, r24
     b38:	59 07       	cpc	r21, r25
     b3a:	81 f5       	brne	.+96     	; 0xb9c <processChords+0x22a>
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	33 81       	ldd	r19, Z+3	; 0x03
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	8d 91       	ld	r24, X+
     b44:	9c 91       	ld	r25, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	39 f5       	brne	.+78     	; 0xb9c <processChords+0x22a>
     b4e:	24 81       	ldd	r18, Z+4	; 0x04
     b50:	35 81       	ldd	r19, Z+5	; 0x05
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	8d 91       	ld	r24, X+
     b56:	9c 91       	ld	r25, X
     b58:	15 97       	sbiw	r26, 0x05	; 5
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	f1 f4       	brne	.+60     	; 0xb9c <processChords+0x22a>
     b60:	26 81       	ldd	r18, Z+6	; 0x06
     b62:	37 81       	ldd	r19, Z+7	; 0x07
     b64:	16 96       	adiw	r26, 0x06	; 6
     b66:	8d 91       	ld	r24, X+
     b68:	9c 91       	ld	r25, X
     b6a:	17 97       	sbiw	r26, 0x07	; 7
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	a9 f4       	brne	.+42     	; 0xb9c <processChords+0x22a>
     b72:	20 85       	ldd	r18, Z+8	; 0x08
     b74:	31 85       	ldd	r19, Z+9	; 0x09
     b76:	18 96       	adiw	r26, 0x08	; 8
     b78:	8d 91       	ld	r24, X+
     b7a:	9c 91       	ld	r25, X
     b7c:	19 97       	sbiw	r26, 0x09	; 9
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	61 f4       	brne	.+24     	; 0xb9c <processChords+0x22a>
     b84:	22 85       	ldd	r18, Z+10	; 0x0a
     b86:	33 85       	ldd	r19, Z+11	; 0x0b
     b88:	1a 96       	adiw	r26, 0x0a	; 10
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	1b 97       	sbiw	r26, 0x0b	; 11
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	19 f4       	brne	.+6      	; 0xb9c <processChords+0x22a>
	   stringState[2] == buttonStringPatterns[3][2] &&
	   stringState[3] == buttonStringPatterns[3][3] &&
	   stringState[4] == buttonStringPatterns[3][4] &&
	   stringState[5] == buttonStringPatterns[3][5]  ) 
		{
			 data->blueOn = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	d8 01       	movw	r26, r16
     b9a:	5e c1       	rjmp	.+700    	; 0xe58 <processChords+0x4e6>
  		}
	// orange
	else if(stringState[0] == buttonStringPatterns[4][0] &&
     b9c:	de 01       	movw	r26, r28
     b9e:	d0 96       	adiw	r26, 0x30	; 48
     ba0:	88 a9       	ldd	r24, Y+48	; 0x30
     ba2:	99 a9       	ldd	r25, Y+49	; 0x31
     ba4:	48 17       	cp	r20, r24
     ba6:	59 07       	cpc	r21, r25
     ba8:	89 f5       	brne	.+98     	; 0xc0c <processChords+0x29a>
     baa:	22 81       	ldd	r18, Z+2	; 0x02
     bac:	33 81       	ldd	r19, Z+3	; 0x03
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	8d 91       	ld	r24, X+
     bb2:	9c 91       	ld	r25, X
     bb4:	13 97       	sbiw	r26, 0x03	; 3
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	41 f5       	brne	.+80     	; 0xc0c <processChords+0x29a>
     bbc:	24 81       	ldd	r18, Z+4	; 0x04
     bbe:	35 81       	ldd	r19, Z+5	; 0x05
     bc0:	14 96       	adiw	r26, 0x04	; 4
     bc2:	8d 91       	ld	r24, X+
     bc4:	9c 91       	ld	r25, X
     bc6:	15 97       	sbiw	r26, 0x05	; 5
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	f9 f4       	brne	.+62     	; 0xc0c <processChords+0x29a>
     bce:	26 81       	ldd	r18, Z+6	; 0x06
     bd0:	37 81       	ldd	r19, Z+7	; 0x07
     bd2:	16 96       	adiw	r26, 0x06	; 6
     bd4:	8d 91       	ld	r24, X+
     bd6:	9c 91       	ld	r25, X
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	28 17       	cp	r18, r24
     bdc:	39 07       	cpc	r19, r25
     bde:	b1 f4       	brne	.+44     	; 0xc0c <processChords+0x29a>
     be0:	20 85       	ldd	r18, Z+8	; 0x08
     be2:	31 85       	ldd	r19, Z+9	; 0x09
     be4:	18 96       	adiw	r26, 0x08	; 8
     be6:	8d 91       	ld	r24, X+
     be8:	9c 91       	ld	r25, X
     bea:	19 97       	sbiw	r26, 0x09	; 9
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	69 f4       	brne	.+26     	; 0xc0c <processChords+0x29a>
     bf2:	22 85       	ldd	r18, Z+10	; 0x0a
     bf4:	33 85       	ldd	r19, Z+11	; 0x0b
     bf6:	1a 96       	adiw	r26, 0x0a	; 10
     bf8:	8d 91       	ld	r24, X+
     bfa:	9c 91       	ld	r25, X
     bfc:	1b 97       	sbiw	r26, 0x0b	; 11
     bfe:	28 17       	cp	r18, r24
     c00:	39 07       	cpc	r19, r25
     c02:	21 f4       	brne	.+8      	; 0xc0c <processChords+0x29a>
	   stringState[2] == buttonStringPatterns[4][2] &&
	   stringState[3] == buttonStringPatterns[4][3] &&
	   stringState[4] == buttonStringPatterns[4][4] &&
	   stringState[5] == buttonStringPatterns[4][5]  ) 
		{
			 data->orangeOn = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	f8 01       	movw	r30, r16
     c08:	84 83       	std	Z+4, r24	; 0x04
     c0a:	28 c1       	rjmp	.+592    	; 0xe5c <processChords+0x4ea>
  		}
	//Green and Red
	else if(stringState[0] == buttonStringPatterns[5][0] &&
     c0c:	de 01       	movw	r26, r28
     c0e:	dc 96       	adiw	r26, 0x3c	; 60
     c10:	8c ad       	ldd	r24, Y+60	; 0x3c
     c12:	9d ad       	ldd	r25, Y+61	; 0x3d
     c14:	48 17       	cp	r20, r24
     c16:	59 07       	cpc	r21, r25
     c18:	99 f5       	brne	.+102    	; 0xc80 <processChords+0x30e>
     c1a:	22 81       	ldd	r18, Z+2	; 0x02
     c1c:	33 81       	ldd	r19, Z+3	; 0x03
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	8d 91       	ld	r24, X+
     c22:	9c 91       	ld	r25, X
     c24:	13 97       	sbiw	r26, 0x03	; 3
     c26:	28 17       	cp	r18, r24
     c28:	39 07       	cpc	r19, r25
     c2a:	51 f5       	brne	.+84     	; 0xc80 <processChords+0x30e>
     c2c:	24 81       	ldd	r18, Z+4	; 0x04
     c2e:	35 81       	ldd	r19, Z+5	; 0x05
     c30:	14 96       	adiw	r26, 0x04	; 4
     c32:	8d 91       	ld	r24, X+
     c34:	9c 91       	ld	r25, X
     c36:	15 97       	sbiw	r26, 0x05	; 5
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	09 f5       	brne	.+66     	; 0xc80 <processChords+0x30e>
     c3e:	26 81       	ldd	r18, Z+6	; 0x06
     c40:	37 81       	ldd	r19, Z+7	; 0x07
     c42:	16 96       	adiw	r26, 0x06	; 6
     c44:	8d 91       	ld	r24, X+
     c46:	9c 91       	ld	r25, X
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	c1 f4       	brne	.+48     	; 0xc80 <processChords+0x30e>
     c50:	20 85       	ldd	r18, Z+8	; 0x08
     c52:	31 85       	ldd	r19, Z+9	; 0x09
     c54:	18 96       	adiw	r26, 0x08	; 8
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	19 97       	sbiw	r26, 0x09	; 9
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	79 f4       	brne	.+30     	; 0xc80 <processChords+0x30e>
     c62:	22 85       	ldd	r18, Z+10	; 0x0a
     c64:	33 85       	ldd	r19, Z+11	; 0x0b
     c66:	1a 96       	adiw	r26, 0x0a	; 10
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	1b 97       	sbiw	r26, 0x0b	; 11
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	31 f4       	brne	.+12     	; 0xc80 <processChords+0x30e>
	   stringState[2] == buttonStringPatterns[5][2] &&
	   stringState[3] == buttonStringPatterns[5][3] &&
	   stringState[4] == buttonStringPatterns[5][4] &&
	   stringState[5] == buttonStringPatterns[5][5]  ) 
		{
			data->greenOn = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	d8 01       	movw	r26, r16
     c78:	8c 93       	st	X, r24
			data->redOn = 1;
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	8c 93       	st	X, r24
     c7e:	ee c0       	rjmp	.+476    	; 0xe5c <processChords+0x4ea>
  		}
	//Red and Yellow
	else if(stringState[0] == buttonStringPatterns[6][0] &&
     c80:	de 01       	movw	r26, r28
     c82:	a8 5b       	subi	r26, 0xB8	; 184
     c84:	bf 4f       	sbci	r27, 0xFF	; 255
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	89 f5       	brne	.+98     	; 0xcf4 <processChords+0x382>
     c92:	22 81       	ldd	r18, Z+2	; 0x02
     c94:	33 81       	ldd	r19, Z+3	; 0x03
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	13 97       	sbiw	r26, 0x03	; 3
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	41 f5       	brne	.+80     	; 0xcf4 <processChords+0x382>
     ca4:	24 81       	ldd	r18, Z+4	; 0x04
     ca6:	35 81       	ldd	r19, Z+5	; 0x05
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	15 97       	sbiw	r26, 0x05	; 5
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	f9 f4       	brne	.+62     	; 0xcf4 <processChords+0x382>
     cb6:	26 81       	ldd	r18, Z+6	; 0x06
     cb8:	37 81       	ldd	r19, Z+7	; 0x07
     cba:	16 96       	adiw	r26, 0x06	; 6
     cbc:	8d 91       	ld	r24, X+
     cbe:	9c 91       	ld	r25, X
     cc0:	17 97       	sbiw	r26, 0x07	; 7
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	b1 f4       	brne	.+44     	; 0xcf4 <processChords+0x382>
     cc8:	20 85       	ldd	r18, Z+8	; 0x08
     cca:	31 85       	ldd	r19, Z+9	; 0x09
     ccc:	18 96       	adiw	r26, 0x08	; 8
     cce:	8d 91       	ld	r24, X+
     cd0:	9c 91       	ld	r25, X
     cd2:	19 97       	sbiw	r26, 0x09	; 9
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	69 f4       	brne	.+26     	; 0xcf4 <processChords+0x382>
     cda:	22 85       	ldd	r18, Z+10	; 0x0a
     cdc:	33 85       	ldd	r19, Z+11	; 0x0b
     cde:	1a 96       	adiw	r26, 0x0a	; 10
     ce0:	8d 91       	ld	r24, X+
     ce2:	9c 91       	ld	r25, X
     ce4:	1b 97       	sbiw	r26, 0x0b	; 11
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	21 f4       	brne	.+8      	; 0xcf4 <processChords+0x382>
	   stringState[2] == buttonStringPatterns[6][2] &&
	   stringState[3] == buttonStringPatterns[6][3] &&
	   stringState[4] == buttonStringPatterns[6][4] &&
	   stringState[5] == buttonStringPatterns[6][5]  ) 
		{
			data->redOn = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	f8 01       	movw	r30, r16
     cf0:	81 83       	std	Z+1, r24	; 0x01
     cf2:	75 c0       	rjmp	.+234    	; 0xdde <processChords+0x46c>
			data->yellowOn = 1;
  		}
	// Yellow and Blue
	else if(stringState[0] == buttonStringPatterns[7][0] &&
     cf4:	de 01       	movw	r26, r28
     cf6:	ac 5a       	subi	r26, 0xAC	; 172
     cf8:	bf 4f       	sbci	r27, 0xFF	; 255
     cfa:	8d 91       	ld	r24, X+
     cfc:	9c 91       	ld	r25, X
     cfe:	11 97       	sbiw	r26, 0x01	; 1
     d00:	48 17       	cp	r20, r24
     d02:	59 07       	cpc	r21, r25
     d04:	99 f5       	brne	.+102    	; 0xd6c <processChords+0x3fa>
     d06:	22 81       	ldd	r18, Z+2	; 0x02
     d08:	33 81       	ldd	r19, Z+3	; 0x03
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	8d 91       	ld	r24, X+
     d0e:	9c 91       	ld	r25, X
     d10:	13 97       	sbiw	r26, 0x03	; 3
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	51 f5       	brne	.+84     	; 0xd6c <processChords+0x3fa>
     d18:	24 81       	ldd	r18, Z+4	; 0x04
     d1a:	35 81       	ldd	r19, Z+5	; 0x05
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	8d 91       	ld	r24, X+
     d20:	9c 91       	ld	r25, X
     d22:	15 97       	sbiw	r26, 0x05	; 5
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	09 f5       	brne	.+66     	; 0xd6c <processChords+0x3fa>
     d2a:	26 81       	ldd	r18, Z+6	; 0x06
     d2c:	37 81       	ldd	r19, Z+7	; 0x07
     d2e:	16 96       	adiw	r26, 0x06	; 6
     d30:	8d 91       	ld	r24, X+
     d32:	9c 91       	ld	r25, X
     d34:	17 97       	sbiw	r26, 0x07	; 7
     d36:	28 17       	cp	r18, r24
     d38:	39 07       	cpc	r19, r25
     d3a:	c1 f4       	brne	.+48     	; 0xd6c <processChords+0x3fa>
     d3c:	20 85       	ldd	r18, Z+8	; 0x08
     d3e:	31 85       	ldd	r19, Z+9	; 0x09
     d40:	18 96       	adiw	r26, 0x08	; 8
     d42:	8d 91       	ld	r24, X+
     d44:	9c 91       	ld	r25, X
     d46:	19 97       	sbiw	r26, 0x09	; 9
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	79 f4       	brne	.+30     	; 0xd6c <processChords+0x3fa>
     d4e:	22 85       	ldd	r18, Z+10	; 0x0a
     d50:	33 85       	ldd	r19, Z+11	; 0x0b
     d52:	1a 96       	adiw	r26, 0x0a	; 10
     d54:	8d 91       	ld	r24, X+
     d56:	9c 91       	ld	r25, X
     d58:	1b 97       	sbiw	r26, 0x0b	; 11
     d5a:	28 17       	cp	r18, r24
     d5c:	39 07       	cpc	r19, r25
     d5e:	31 f4       	brne	.+12     	; 0xd6c <processChords+0x3fa>
	   stringState[2] == buttonStringPatterns[7][2] &&
	   stringState[3] == buttonStringPatterns[7][3] &&
	   stringState[4] == buttonStringPatterns[7][4] &&
	   stringState[5] == buttonStringPatterns[7][5]  ) 
		{
			 data->yellowOn = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	d8 01       	movw	r26, r16
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	8c 93       	st	X, r24
     d68:	12 97       	sbiw	r26, 0x02	; 2
     d6a:	76 c0       	rjmp	.+236    	; 0xe58 <processChords+0x4e6>
			 data->blueOn = 1;
  		}
	// Green and Yellow
	else if(stringState[0] == buttonStringPatterns[8][0] &&
     d6c:	de 01       	movw	r26, r28
     d6e:	a0 5a       	subi	r26, 0xA0	; 160
     d70:	bf 4f       	sbci	r27, 0xFF	; 255
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	48 17       	cp	r20, r24
     d7a:	59 07       	cpc	r21, r25
     d7c:	91 f5       	brne	.+100    	; 0xde2 <processChords+0x470>
     d7e:	22 81       	ldd	r18, Z+2	; 0x02
     d80:	33 81       	ldd	r19, Z+3	; 0x03
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	8d 91       	ld	r24, X+
     d86:	9c 91       	ld	r25, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	49 f5       	brne	.+82     	; 0xde2 <processChords+0x470>
     d90:	24 81       	ldd	r18, Z+4	; 0x04
     d92:	35 81       	ldd	r19, Z+5	; 0x05
     d94:	14 96       	adiw	r26, 0x04	; 4
     d96:	8d 91       	ld	r24, X+
     d98:	9c 91       	ld	r25, X
     d9a:	15 97       	sbiw	r26, 0x05	; 5
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	01 f5       	brne	.+64     	; 0xde2 <processChords+0x470>
     da2:	26 81       	ldd	r18, Z+6	; 0x06
     da4:	37 81       	ldd	r19, Z+7	; 0x07
     da6:	16 96       	adiw	r26, 0x06	; 6
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	17 97       	sbiw	r26, 0x07	; 7
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	b9 f4       	brne	.+46     	; 0xde2 <processChords+0x470>
     db4:	20 85       	ldd	r18, Z+8	; 0x08
     db6:	31 85       	ldd	r19, Z+9	; 0x09
     db8:	18 96       	adiw	r26, 0x08	; 8
     dba:	8d 91       	ld	r24, X+
     dbc:	9c 91       	ld	r25, X
     dbe:	19 97       	sbiw	r26, 0x09	; 9
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	71 f4       	brne	.+28     	; 0xde2 <processChords+0x470>
     dc6:	22 85       	ldd	r18, Z+10	; 0x0a
     dc8:	33 85       	ldd	r19, Z+11	; 0x0b
     dca:	1a 96       	adiw	r26, 0x0a	; 10
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	1b 97       	sbiw	r26, 0x0b	; 11
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	29 f4       	brne	.+10     	; 0xde2 <processChords+0x470>
	   stringState[2] == buttonStringPatterns[8][2] &&
	   stringState[3] == buttonStringPatterns[8][3] &&
	   stringState[4] == buttonStringPatterns[8][4] &&
	   stringState[5] == buttonStringPatterns[8][5]  ) 
		{
			 data->greenOn = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	f8 01       	movw	r30, r16
     ddc:	80 83       	st	Z, r24
			 data->yellowOn = 1;
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	3d c0       	rjmp	.+122    	; 0xe5c <processChords+0x4ea>
  		}
	// Red and Blue
	else if(stringState[0] == buttonStringPatterns[9][0] &&
     de2:	de 01       	movw	r26, r28
     de4:	a4 59       	subi	r26, 0x94	; 148
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	8d 91       	ld	r24, X+
     dea:	9c 91       	ld	r25, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	48 17       	cp	r20, r24
     df0:	59 07       	cpc	r21, r25
     df2:	a1 f5       	brne	.+104    	; 0xe5c <processChords+0x4ea>
     df4:	22 81       	ldd	r18, Z+2	; 0x02
     df6:	33 81       	ldd	r19, Z+3	; 0x03
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	28 17       	cp	r18, r24
     e02:	39 07       	cpc	r19, r25
     e04:	59 f5       	brne	.+86     	; 0xe5c <processChords+0x4ea>
     e06:	24 81       	ldd	r18, Z+4	; 0x04
     e08:	35 81       	ldd	r19, Z+5	; 0x05
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	8d 91       	ld	r24, X+
     e0e:	9c 91       	ld	r25, X
     e10:	15 97       	sbiw	r26, 0x05	; 5
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	11 f5       	brne	.+68     	; 0xe5c <processChords+0x4ea>
     e18:	26 81       	ldd	r18, Z+6	; 0x06
     e1a:	37 81       	ldd	r19, Z+7	; 0x07
     e1c:	16 96       	adiw	r26, 0x06	; 6
     e1e:	8d 91       	ld	r24, X+
     e20:	9c 91       	ld	r25, X
     e22:	17 97       	sbiw	r26, 0x07	; 7
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	c9 f4       	brne	.+50     	; 0xe5c <processChords+0x4ea>
     e2a:	20 85       	ldd	r18, Z+8	; 0x08
     e2c:	31 85       	ldd	r19, Z+9	; 0x09
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	8d 91       	ld	r24, X+
     e32:	9c 91       	ld	r25, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	81 f4       	brne	.+32     	; 0xe5c <processChords+0x4ea>
     e3c:	22 85       	ldd	r18, Z+10	; 0x0a
     e3e:	33 85       	ldd	r19, Z+11	; 0x0b
     e40:	1a 96       	adiw	r26, 0x0a	; 10
     e42:	8d 91       	ld	r24, X+
     e44:	9c 91       	ld	r25, X
     e46:	1b 97       	sbiw	r26, 0x0b	; 11
     e48:	28 17       	cp	r18, r24
     e4a:	39 07       	cpc	r19, r25
     e4c:	39 f4       	brne	.+14     	; 0xe5c <processChords+0x4ea>
	   stringState[2] == buttonStringPatterns[9][2] &&
	   stringState[3] == buttonStringPatterns[9][3] &&
	   stringState[4] == buttonStringPatterns[9][4] &&
	   stringState[5] == buttonStringPatterns[9][5]  ) 
		{
			 data->redOn = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	d8 01       	movw	r26, r16
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	8c 93       	st	X, r24
     e56:	11 97       	sbiw	r26, 0x01	; 1
			 data->blueOn = 1;
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	8c 93       	st	X, r24
  		}

	return;
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <processNotes>:

void processNotes(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	dc 01       	movw	r26, r24
     e74:	fb 01       	movw	r30, r22
	/* If we're playing with notes on a scale, then we have to figure out if the proper note is being
	   played, and also if we strummed the correct string.
	 */
	// First thing, we need to reset the strumming code, since we need to check and see if we 
	//  strummed on the correct string or not
	data->upOn = 0;
     e76:	15 96       	adiw	r26, 0x05	; 5
     e78:	1c 92       	st	X, r1
     e7a:	15 97       	sbiw	r26, 0x05	; 5
	data->downOn = 0;
     e7c:	16 96       	adiw	r26, 0x06	; 6
     e7e:	1c 92       	st	X, r1
     e80:	16 97       	sbiw	r26, 0x06	; 6
						// are numbered 0-5
	char buttonPressed = 0;
	char strumPressed  = 0;

	//We also hardcode in a down strum on the empty 6th string, for navigation
	if (stringState[0] & 1)
     e82:	80 81       	ld	r24, Z
     e84:	80 ff       	sbrs	r24, 0
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <processNotes+0x2a>
	{
		data->downOn = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	16 96       	adiw	r26, 0x06	; 6
     e8c:	8c 93       	st	X, r24
     e8e:	16 97       	sbiw	r26, 0x06	; 6
     e90:	7a 01       	movw	r14, r20
     e92:	ba 01       	movw	r22, r20
     e94:	6c 5d       	subi	r22, 0xDC	; 220
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	4f ef       	ldi	r20, 0xFF	; 255
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
     e9e:	11 e0       	ldi	r17, 0x01	; 1
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
	{
		if (stringState[i] != 0) // Only look at strings that are being touched or strummed
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	09 f4       	brne	.+2      	; 0xeaa <processNotes+0x44>
     ea8:	82 c0       	rjmp	.+260    	; 0xfae <processNotes+0x148>
		{
			// Check for open strings being strummed first
			if (stringState[i] == 1) // This means we're strumming an open string
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	91 05       	cpc	r25, r1
     eae:	c1 f5       	brne	.+112    	; 0xf20 <processNotes+0xba>
			{
				if (stringState[i] == buttonStringPatterns[0][i])
     eb0:	e7 01       	movw	r28, r14
     eb2:	88 81       	ld	r24, Y
     eb4:	99 81       	ldd	r25, Y+1	; 0x01
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	11 f4       	brne	.+4      	; 0xebe <processNotes+0x58>
				{
					strumOn = i;
					data->greenOn =  1;	
     eba:	1c 93       	st	X, r17
     ebc:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[1][i])
     ebe:	20 81       	ld	r18, Z
     ec0:	31 81       	ldd	r19, Z+1	; 0x01
     ec2:	e7 01       	movw	r28, r14
     ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	21 f4       	brne	.+8      	; 0xed6 <processNotes+0x70>
				{
					strumOn = i;
					data->redOn =  1;	
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	1c 93       	st	X, r17
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[2][i])
     ed6:	20 81       	ld	r18, Z
     ed8:	31 81       	ldd	r19, Z+1	; 0x01
     eda:	e7 01       	movw	r28, r14
     edc:	88 8d       	ldd	r24, Y+24	; 0x18
     ede:	99 8d       	ldd	r25, Y+25	; 0x19
     ee0:	28 17       	cp	r18, r24
     ee2:	39 07       	cpc	r19, r25
     ee4:	21 f4       	brne	.+8      	; 0xeee <processNotes+0x88>
				{
					strumOn = i;
					data->yellowOn =  1;
     ee6:	12 96       	adiw	r26, 0x02	; 2
     ee8:	1c 93       	st	X, r17
     eea:	12 97       	sbiw	r26, 0x02	; 2
     eec:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[3][i])
     eee:	20 81       	ld	r18, Z
     ef0:	31 81       	ldd	r19, Z+1	; 0x01
     ef2:	eb 01       	movw	r28, r22
     ef4:	88 81       	ld	r24, Y
     ef6:	99 81       	ldd	r25, Y+1	; 0x01
     ef8:	28 17       	cp	r18, r24
     efa:	39 07       	cpc	r19, r25
     efc:	21 f4       	brne	.+8      	; 0xf06 <processNotes+0xa0>
				{
					strumOn = i;
					data->blueOn =  1;
     efe:	13 96       	adiw	r26, 0x03	; 3
     f00:	1c 93       	st	X, r17
     f02:	13 97       	sbiw	r26, 0x03	; 3
     f04:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[4][i])
     f06:	20 81       	ld	r18, Z
     f08:	31 81       	ldd	r19, Z+1	; 0x01
     f0a:	eb 01       	movw	r28, r22
     f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	39 f4       	brne	.+14     	; 0xf24 <processNotes+0xbe>
				{
					strumOn = i;
					data->orangeOn =  1;				
     f16:	14 96       	adiw	r26, 0x04	; 4
     f18:	1c 93       	st	X, r17
     f1a:	14 97       	sbiw	r26, 0x04	; 4
     f1c:	45 2f       	mov	r20, r21
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <processNotes+0xbe>
			}
			 // Now we have checked for strummed notes, we need to check for pressed notes
			 //  so that we can display them for reference as well as use them when strummed
			else
				// First see if we're strumming or not
				strumPressed = stringState[i] & 1;
     f20:	08 2f       	mov	r16, r24
     f22:	01 70       	andi	r16, 0x01	; 1
				// Now ensure the strum bit is zero
				stringState[i] &= (~1);
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	2e 7f       	andi	r18, 0xFE	; 254
     f2a:	31 83       	std	Z+1, r19	; 0x01
     f2c:	20 83       	st	Z, r18
				// Take care of displaying closed notes
				if (stringState[i] == buttonStringPatterns[0][i]&& 
     f2e:	e7 01       	movw	r28, r14
     f30:	88 81       	ld	r24, Y
     f32:	99 81       	ldd	r25, Y+1	; 0x01
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	19 f4       	brne	.+6      	; 0xf40 <processNotes+0xda>
     f3a:	23 2b       	or	r18, r19
     f3c:	09 f0       	breq	.+2      	; 0xf40 <processNotes+0xda>
										buttonStringPatterns[0][i] != 0)
				{
					data->greenOn =  1;	
     f3e:	1c 93       	st	X, r17
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[1][i] && 
     f40:	20 81       	ld	r18, Z
     f42:	31 81       	ldd	r19, Z+1	; 0x01
     f44:	e7 01       	movw	r28, r14
     f46:	8c 85       	ldd	r24, Y+12	; 0x0c
     f48:	9d 85       	ldd	r25, Y+13	; 0x0d
     f4a:	28 17       	cp	r18, r24
     f4c:	39 07       	cpc	r19, r25
     f4e:	29 f4       	brne	.+10     	; 0xf5a <processNotes+0xf4>
     f50:	23 2b       	or	r18, r19
     f52:	19 f0       	breq	.+6      	; 0xf5a <processNotes+0xf4>
										buttonStringPatterns[1][i] != 0)
				{
					data->redOn =  1;	
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	1c 93       	st	X, r17
     f58:	11 97       	sbiw	r26, 0x01	; 1
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[2][i] && 
     f5a:	20 81       	ld	r18, Z
     f5c:	31 81       	ldd	r19, Z+1	; 0x01
     f5e:	e7 01       	movw	r28, r14
     f60:	88 8d       	ldd	r24, Y+24	; 0x18
     f62:	99 8d       	ldd	r25, Y+25	; 0x19
     f64:	28 17       	cp	r18, r24
     f66:	39 07       	cpc	r19, r25
     f68:	29 f4       	brne	.+10     	; 0xf74 <processNotes+0x10e>
     f6a:	23 2b       	or	r18, r19
     f6c:	19 f0       	breq	.+6      	; 0xf74 <processNotes+0x10e>
										buttonStringPatterns[2][i] != 0)
					{
					data->yellowOn =  1;
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	1c 93       	st	X, r17
     f72:	12 97       	sbiw	r26, 0x02	; 2
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[3][i] && 
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	eb 01       	movw	r28, r22
     f7a:	88 81       	ld	r24, Y
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	28 17       	cp	r18, r24
     f80:	39 07       	cpc	r19, r25
     f82:	29 f4       	brne	.+10     	; 0xf8e <processNotes+0x128>
     f84:	23 2b       	or	r18, r19
     f86:	19 f0       	breq	.+6      	; 0xf8e <processNotes+0x128>
										buttonStringPatterns[3][i] != 0)
				{
					data->blueOn =  1;
     f88:	13 96       	adiw	r26, 0x03	; 3
     f8a:	1c 93       	st	X, r17
     f8c:	13 97       	sbiw	r26, 0x03	; 3
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
     f92:	eb 01       	movw	r28, r22
     f94:	8c 85       	ldd	r24, Y+12	; 0x0c
     f96:	9d 85       	ldd	r25, Y+13	; 0x0d
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <processNotes+0x142>
     f9e:	23 2b       	or	r18, r19
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <processNotes+0x142>
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
     fa2:	14 96       	adiw	r26, 0x04	; 4
     fa4:	1c 93       	st	X, r17
     fa6:	14 97       	sbiw	r26, 0x04	; 4
					buttonPressed = 1;									
				}
					// Now deal with strumming
				if ((buttonPressed = 1) && (strumPressed == 1))
     fa8:	01 30       	cpi	r16, 0x01	; 1
     faa:	09 f4       	brne	.+2      	; 0xfae <processNotes+0x148>
     fac:	45 2f       	mov	r20, r21
     fae:	32 96       	adiw	r30, 0x02	; 2
     fb0:	5f 5f       	subi	r21, 0xFF	; 255
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	e8 0e       	add	r14, r24
     fb8:	f9 1e       	adc	r15, r25
     fba:	6e 5f       	subi	r22, 0xFE	; 254
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
	if (stringState[0] & 1)
	{
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
     fbe:	56 30       	cpi	r21, 0x06	; 6
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <processNotes+0x15e>
     fc2:	6e cf       	rjmp	.-292    	; 0xea0 <processNotes+0x3a>
				}
			}
	}

	//Now set the strum buttons properly, so we can have both up and down if we're in this mode
	if ((strumOn >= 0) && (strumOn < 3))
     fc4:	43 30       	cpi	r20, 0x03	; 3
     fc6:	20 f4       	brcc	.+8      	; 0xfd0 <processNotes+0x16a>
	{
		data->downOn = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	8c 93       	st	X, r24
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <processNotes+0x180>
	}
	else if ((strumOn >= 3) && (strumOn < 6 ) && (data->downOn != 1))
     fd0:	43 50       	subi	r20, 0x03	; 3
     fd2:	43 30       	cpi	r20, 0x03	; 3
     fd4:	40 f4       	brcc	.+16     	; 0xfe6 <processNotes+0x180>
     fd6:	16 96       	adiw	r26, 0x06	; 6
     fd8:	8c 91       	ld	r24, X
     fda:	16 97       	sbiw	r26, 0x06	; 6
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	19 f0       	breq	.+6      	; 0xfe6 <processNotes+0x180>
	{
		data->upOn = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	15 96       	adiw	r26, 0x05	; 5
     fe4:	8c 93       	st	X, r24
	}

	return;
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <processFrets>:

void processFrets(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	fc 01       	movw	r30, r24
    1008:	5b 01       	movw	r10, r22
    100a:	d8 01       	movw	r26, r16
    100c:	89 01       	movw	r16, r18
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
		    	{
		        	data->greenOn = 1;
    1012:	ff 24       	eor	r15, r15
    1014:	f3 94       	inc	r15
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
		      triedGreen[guitarString] = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	c8 2e       	mov	r12, r24
    101a:	d1 2c       	mov	r13, r1
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
	{
		// find the proper value by masking the stringState variable for each fret
		char orange = (stringState[guitarString] & (1<<5));
    101c:	e5 01       	movw	r28, r10
    101e:	88 81       	ld	r24, Y
		char blue   = (stringState[guitarString] & (1<<4));
    1020:	98 2f       	mov	r25, r24
    1022:	90 71       	andi	r25, 0x10	; 16
		char yellow = (stringState[guitarString] & (1<<3));
    1024:	28 2f       	mov	r18, r24
    1026:	28 70       	andi	r18, 0x08	; 8
		char red    = (stringState[guitarString] & (1<<2));
    1028:	38 2f       	mov	r19, r24
    102a:	34 70       	andi	r19, 0x04	; 4
		char green  = (stringState[guitarString] & (1<<1));
    102c:	48 2f       	mov	r20, r24
    102e:	42 70       	andi	r20, 0x02	; 2
		if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    1030:	85 ff       	sbrs	r24, 5
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <processFrets+0x4e>
    1034:	99 23       	and	r25, r25
    1036:	71 f0       	breq	.+28     	; 0x1054 <processFrets+0x60>
    1038:	84 81       	ldd	r24, Z+4	; 0x04
    103a:	88 23       	and	r24, r24
    103c:	21 f4       	brne	.+8      	; 0x1046 <processFrets+0x52>
		{    
		    data->orangeOn = 1;
    103e:	f4 82       	std	Z+4, r15	; 0x04
    1040:	40 c0       	rjmp	.+128    	; 0x10c2 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    1042:	99 23       	and	r25, r25
    1044:	39 f0       	breq	.+14     	; 0x1054 <processFrets+0x60>
    1046:	22 23       	and	r18, r18
    1048:	71 f0       	breq	.+28     	; 0x1066 <processFrets+0x72>
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	88 23       	and	r24, r24
    104e:	21 f4       	brne	.+8      	; 0x1058 <processFrets+0x64>
		{
		    data->blueOn = 1;
    1050:	f3 82       	std	Z+3, r15	; 0x03
    1052:	37 c0       	rjmp	.+110    	; 0x10c2 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    1054:	22 23       	and	r18, r18
    1056:	39 f0       	breq	.+14     	; 0x1066 <processFrets+0x72>
    1058:	33 23       	and	r19, r19
    105a:	71 f0       	breq	.+28     	; 0x1078 <processFrets+0x84>
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	88 23       	and	r24, r24
    1060:	21 f4       	brne	.+8      	; 0x106a <processFrets+0x76>
		{
		    data->yellowOn = 1;
    1062:	f2 82       	std	Z+2, r15	; 0x02
    1064:	2e c0       	rjmp	.+92     	; 0x10c2 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((red != 0) && (green != 0) && (data->redOn == 0))
    1066:	33 23       	and	r19, r19
    1068:	39 f0       	breq	.+14     	; 0x1078 <processFrets+0x84>
    106a:	44 23       	and	r20, r20
    106c:	51 f1       	breq	.+84     	; 0x10c2 <processFrets+0xce>
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	88 23       	and	r24, r24
    1072:	21 f4       	brne	.+8      	; 0x107c <processFrets+0x88>
		{
		    data->redOn = 1;
    1074:	f1 82       	std	Z+1, r15	; 0x01
    1076:	25 c0       	rjmp	.+74     	; 0x10c2 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if (green != 0)
    1078:	44 23       	and	r20, r20
    107a:	19 f1       	breq	.+70     	; 0x10c2 <processFrets+0xce>
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    107c:	8d 91       	ld	r24, X+
    107e:	9c 91       	ld	r25, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	89 2b       	or	r24, r25
    1084:	59 f4       	brne	.+22     	; 0x109c <processFrets+0xa8>
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
    1086:	80 91 84 00 	lds	r24, 0x0084
    108a:	90 91 85 00 	lds	r25, 0x0085
    108e:	e8 01       	movw	r28, r16
    1090:	99 83       	std	Y+1, r25	; 0x01
    1092:	88 83       	st	Y, r24
		      triedGreen[guitarString] = 1;
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	dc 92       	st	X, r13
    1098:	ce 92       	st	-X, r12
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <processFrets+0xd4>
		    }
		    else //triedGreen == true
		    {
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
    109c:	20 91 84 00 	lds	r18, 0x0084
    10a0:	30 91 85 00 	lds	r19, 0x0085
    10a4:	e8 01       	movw	r28, r16
    10a6:	48 81       	ld	r20, Y
    10a8:	59 81       	ldd	r21, Y+1	; 0x01
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    10aa:	80 81       	ld	r24, Z
    10ac:	88 23       	and	r24, r24
    10ae:	61 f4       	brne	.+24     	; 0x10c8 <processFrets+0xd4>
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	30 40       	sbci	r19, 0x00	; 0
    10b4:	24 1b       	sub	r18, r20
    10b6:	35 0b       	sbc	r19, r21
    10b8:	24 36       	cpi	r18, 0x64	; 100
    10ba:	31 05       	cpc	r19, r1
    10bc:	28 f0       	brcs	.+10     	; 0x10c8 <processFrets+0xd4>
		    	{
		        	data->greenOn = 1;
    10be:	f0 82       	st	Z, r15
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <processFrets+0xd4>
		    	}
		    }
		}
	    else  //no buttons pressed
	    {
	        triedGreen[guitarString] = 0;
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	1c 92       	st	X, r1
    10c6:	1e 92       	st	-X, r1
		the strum has a direction, so if you strum the
		top 3 strings, you strum down, and if you strum
		the bottom 3 strings, you're strumming up.
	*/
		// Check for strumming
		if (stringState[guitarString] & 1)
    10c8:	e5 01       	movw	r28, r10
    10ca:	88 81       	ld	r24, Y
    10cc:	80 ff       	sbrs	r24, 0
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <processFrets+0xec>
		{
			if (guitarString < 3)
    10d0:	63 30       	cpi	r22, 0x03	; 3
    10d2:	71 05       	cpc	r23, r1
    10d4:	1c f4       	brge	.+6      	; 0x10dc <processFrets+0xe8>
			{
				data->downOn = 1;
    10d6:	f6 82       	std	Z+6, r15	; 0x06
				data->upOn   = 0;
    10d8:	15 82       	std	Z+5, r1	; 0x05
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <processFrets+0xec>
			}
			else
			{
				data->upOn   = 1;
    10dc:	f5 82       	std	Z+5, r15	; 0x05
				data->downOn = 0;
    10de:	16 82       	std	Z+6, r1	; 0x06
		you don't want that to register as a green button press.  So we do some
		timing on that one, so when you press just green, it starts counting
		instead of turing greenOn on, so if the red fret is turned on before it
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a8 0e       	add	r10, r24
    10ea:	b9 1e       	adc	r11, r25
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	0e 5f       	subi	r16, 0xFE	; 254
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	66 30       	cpi	r22, 0x06	; 6
    10f4:	71 05       	cpc	r23, r1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <processFrets+0x106>
    10f8:	91 cf       	rjmp	.-222    	; 0x101c <processFrets+0x28>
				data->downOn = 0;
			}
		}
	}	// end of for loop
	return;
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	08 95       	ret

0000110e <processStringState>:

void processStringState(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], char controllerMode, 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
	if (controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    1116:	24 30       	cpi	r18, 0x04	; 4
    1118:	19 f4       	brne	.+6      	; 0x1120 <processStringState+0x12>
		processChords(data, stringState, buttonStringPatterns);
    111a:	0e 94 b9 04 	call	0x972	; 0x972 <processChords>
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <processStringState+0x24>

	else if (controllerMode == NOTES) // We're playing with notes
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	19 f4       	brne	.+6      	; 0x112a <processStringState+0x1c>
		processNotes(data, stringState, buttonStringPatterns);
    1124:	0e 94 33 07 	call	0xe66	; 0xe66 <processNotes>
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <processStringState+0x24>
	
	else // We're playing with frets
		processFrets(data, stringState,	buttonStringPatterns, greenTimers, triedGreen);
    112a:	98 01       	movw	r18, r16
    112c:	87 01       	movw	r16, r14
    112e:	0e 94 fa 07 	call	0xff4	; 0xff4 <processFrets>

	return;	
}
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret

0000113c <displayTransitionState>:

// This simple function takes in the controller mode and sets the
//  data struct to certain patterns to give the user feedback
//  as to what state is being pressed
void displayTransitionState(dataForController* data, int controllerMode)
{
    113c:	fc 01       	movw	r30, r24
	if (controllerMode == FRETS_TO_NOTES)
    113e:	61 30       	cpi	r22, 0x01	; 1
    1140:	71 05       	cpc	r23, r1
    1142:	21 f4       	brne	.+8      	; 0x114c <displayTransitionState+0x10>
	{
		data->blueOn = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	83 83       	std	Z+3, r24	; 0x03
		data->yellowOn = 1;
    1148:	82 83       	std	Z+2, r24	; 0x02
    114a:	08 95       	ret
	}
	else if (controllerMode == NOTES_TO_CHORDS)
    114c:	63 30       	cpi	r22, 0x03	; 3
    114e:	71 05       	cpc	r23, r1
    1150:	21 f4       	brne	.+8      	; 0x115a <displayTransitionState+0x1e>
	{
		data->blueOn = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	83 83       	std	Z+3, r24	; 0x03
		data->orangeOn = 1;
    1156:	84 83       	std	Z+4, r24	; 0x04
    1158:	08 95       	ret
	}
	else if (controllerMode == CHORDS_TO_FRETS)
    115a:	65 30       	cpi	r22, 0x05	; 5
    115c:	71 05       	cpc	r23, r1
    115e:	19 f4       	brne	.+6      	; 0x1166 <displayTransitionState+0x2a>
	{
		data->yellowOn = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	82 83       	std	Z+2, r24	; 0x02
		data->orangeOn = 1;
    1164:	84 83       	std	Z+4, r24	; 0x04
    1166:	08 95       	ret

00001168 <configSetButtonData>:
/* This function sets up the data struct when we're in config mode so that it shows
 *  the user which colors are currently being programmed.
 */
void configSetButtonData(dataForController* data, int* buttonToAssign, int buttonStringPatterns[][6], 
						int stringState[], char controllerMode, char* plusLock, char* previousPlusOn, int* debounceTimer)
{
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	fc 01       	movw	r30, r24
    117c:	db 01       	movw	r26, r22
    117e:	b9 01       	movw	r22, r18
    1180:	95 01       	movw	r18, r10
	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    1182:	8d 91       	ld	r24, X+
    1184:	9c 91       	ld	r25, X
    1186:	11 97       	sbiw	r26, 0x01	; 1
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	19 f4       	brne	.+6      	; 0x1192 <configSetButtonData+0x2a>
		data->greenOn = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 83       	st	Z, r24
    1190:	34 c0       	rjmp	.+104    	; 0x11fa <configSetButtonData+0x92>
	else if(*buttonToAssign == 1)
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	11 f4       	brne	.+4      	; 0x119c <configSetButtonData+0x34>
		data->redOn = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <configSetButtonData+0x5e>
	else if(*buttonToAssign == 2)
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	91 05       	cpc	r25, r1
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <configSetButtonData+0x3e>
		data->yellowOn = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	23 c0       	rjmp	.+70     	; 0x11ec <configSetButtonData+0x84>
	else if(*buttonToAssign == 3)
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <configSetButtonData+0x48>
		data->blueOn = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	24 c0       	rjmp	.+72     	; 0x11f8 <configSetButtonData+0x90>
	else if(*buttonToAssign == 4)
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	91 05       	cpc	r25, r1
    11b4:	19 f4       	brne	.+6      	; 0x11bc <configSetButtonData+0x54>
		data->orangeOn = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	84 83       	std	Z+4, r24	; 0x04
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <configSetButtonData+0x92>
	else if(*buttonToAssign == 5)
    11bc:	85 30       	cpi	r24, 0x05	; 5
    11be:	91 05       	cpc	r25, r1
    11c0:	21 f4       	brne	.+8      	; 0x11ca <configSetButtonData+0x62>
	{
		data->greenOn = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 83       	st	Z, r24
		data->redOn = 1;
    11c6:	81 83       	std	Z+1, r24	; 0x01
    11c8:	18 c0       	rjmp	.+48     	; 0x11fa <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 6)
    11ca:	86 30       	cpi	r24, 0x06	; 6
    11cc:	91 05       	cpc	r25, r1
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <configSetButtonData+0x6e>
	{
		data->redOn = 1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	81 83       	std	Z+1, r24	; 0x01
    11d4:	0b c0       	rjmp	.+22     	; 0x11ec <configSetButtonData+0x84>
		data->yellowOn = 1;
	}
	else if(*buttonToAssign == 7)
    11d6:	87 30       	cpi	r24, 0x07	; 7
    11d8:	91 05       	cpc	r25, r1
    11da:	19 f4       	brne	.+6      	; 0x11e2 <configSetButtonData+0x7a>
	{
		data->yellowOn = 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	82 83       	std	Z+2, r24	; 0x02
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <configSetButtonData+0x90>
		data->blueOn = 1;
	}
	else if(*buttonToAssign == 8)
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	91 05       	cpc	r25, r1
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <configSetButtonData+0x88>
	{
		data->greenOn = 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 83       	st	Z, r24
		data->yellowOn = 1;
    11ec:	82 83       	std	Z+2, r24	; 0x02
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 9)
    11f0:	09 97       	sbiw	r24, 0x09	; 9
    11f2:	19 f4       	brne	.+6      	; 0x11fa <configSetButtonData+0x92>
	{
		data->redOn = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	81 83       	std	Z+1, r24	; 0x01
		data->blueOn = 1;
    11f8:	83 83       	std	Z+3, r24	; 0x03
	}



	// Code to debounce our plus button, the current state of plusOn to it's recent history
	if (data->plusOn != 0)  // So we're pressing plus
    11fa:	87 81       	ldd	r24, Z+7	; 0x07
    11fc:	88 23       	and	r24, r24
    11fe:	09 f1       	breq	.+66     	; 0x1242 <configSetButtonData+0xda>
	{ 
		if (*previousPlusOn == 0)  // If we weren't pressing plus last time through the main loop
    1200:	e6 01       	movw	r28, r12
    1202:	88 81       	ld	r24, Y
    1204:	88 23       	and	r24, r24
    1206:	59 f4       	brne	.+22     	; 0x121e <configSetButtonData+0xb6>
		{ 
			*debounceTimer = TCNT1;  // Set up a timer
    1208:	80 91 84 00 	lds	r24, 0x0084
    120c:	90 91 85 00 	lds	r25, 0x0085
    1210:	e9 01       	movw	r28, r18
    1212:	99 83       	std	Y+1, r25	; 0x01
    1214:	88 83       	st	Y, r24
			*previousPlusOn = 1;     // remember plus was pressed for the next iteration
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	e6 01       	movw	r28, r12
    121a:	88 83       	st	Y, r24
    121c:	10 c0       	rjmp	.+32     	; 0x123e <configSetButtonData+0xd6>
			data->plusOn = 0;        // but for now, consider plus not pressed.
		}
		else if ( (TCNT1 - *debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - *debounceTimer >= 0))
    121e:	80 91 84 00 	lds	r24, 0x0084
    1222:	90 91 85 00 	lds	r25, 0x0085
    1226:	e9 01       	movw	r28, r18
    1228:	28 81       	ld	r18, Y
    122a:	39 81       	ldd	r19, Y+1	; 0x01
    122c:	82 1b       	sub	r24, r18
    122e:	93 0b       	sbc	r25, r19
    1230:	88 5e       	subi	r24, 0xE8	; 232
    1232:	93 40       	sbci	r25, 0x03	; 3
    1234:	40 f4       	brcc	.+16     	; 0x1246 <configSetButtonData+0xde>
    1236:	80 91 84 00 	lds	r24, 0x0084
    123a:	90 91 85 00 	lds	r25, 0x0085
		{
			data->plusOn = 0;  // This keeps telling us plus wasn't pressed until it's been held long enough
    123e:	17 82       	std	Z+7, r1	; 0x07
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <configSetButtonData+0xde>
		}		
	}
	else
	{
		*previousPlusOn = 0; // and if plus wasn't pressed, remember that for next time
    1242:	e6 01       	movw	r28, r12
    1244:	18 82       	st	Y, r1
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((data->plusOn) && (*plusLock == 0))
    1246:	87 81       	ldd	r24, Z+7	; 0x07
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <configSetButtonData+0xe6>
    124c:	f7 c0       	rjmp	.+494    	; 0x143c <configSetButtonData+0x2d4>
    124e:	f7 01       	movw	r30, r14
    1250:	80 81       	ld	r24, Z
    1252:	88 23       	and	r24, r24
    1254:	09 f0       	breq	.+2      	; 0x1258 <configSetButtonData+0xf0>
    1256:	f4 c0       	rjmp	.+488    	; 0x1440 <configSetButtonData+0x2d8>
	{

		if (controllerMode == CHORDS) 
    1258:	04 30       	cpi	r16, 0x04	; 4
    125a:	09 f0       	breq	.+2      	; 0x125e <configSetButtonData+0xf6>
    125c:	60 c0       	rjmp	.+192    	; 0x131e <configSetButtonData+0x1b6>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
    125e:	8d 91       	ld	r24, X+
    1260:	9c 91       	ld	r25, X
    1262:	11 97       	sbiw	r26, 0x01	; 1
    1264:	fc 01       	movw	r30, r24
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	e8 0f       	add	r30, r24
    126c:	f9 1f       	adc	r31, r25
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	e4 0f       	add	r30, r20
    1278:	f5 1f       	adc	r31, r21
    127a:	11 82       	std	Z+1, r1	; 0x01
    127c:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	11 97       	sbiw	r26, 0x01	; 1
    1284:	fc 01       	movw	r30, r24
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	e8 0f       	add	r30, r24
    128c:	f9 1f       	adc	r31, r25
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	e4 0f       	add	r30, r20
    1298:	f5 1f       	adc	r31, r21
    129a:	13 82       	std	Z+3, r1	; 0x03
    129c:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
    129e:	8d 91       	ld	r24, X+
    12a0:	9c 91       	ld	r25, X
    12a2:	11 97       	sbiw	r26, 0x01	; 1
    12a4:	fc 01       	movw	r30, r24
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e4 0f       	add	r30, r20
    12b8:	f5 1f       	adc	r31, r21
    12ba:	15 82       	std	Z+5, r1	; 0x05
    12bc:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
    12be:	8d 91       	ld	r24, X+
    12c0:	9c 91       	ld	r25, X
    12c2:	11 97       	sbiw	r26, 0x01	; 1
    12c4:	fc 01       	movw	r30, r24
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	e8 0f       	add	r30, r24
    12cc:	f9 1f       	adc	r31, r25
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	e4 0f       	add	r30, r20
    12d8:	f5 1f       	adc	r31, r21
    12da:	17 82       	std	Z+7, r1	; 0x07
    12dc:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
    12de:	8d 91       	ld	r24, X+
    12e0:	9c 91       	ld	r25, X
    12e2:	11 97       	sbiw	r26, 0x01	; 1
    12e4:	fc 01       	movw	r30, r24
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	e8 0f       	add	r30, r24
    12ec:	f9 1f       	adc	r31, r25
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	e4 0f       	add	r30, r20
    12f8:	f5 1f       	adc	r31, r21
    12fa:	11 86       	std	Z+9, r1	; 0x09
    12fc:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
    12fe:	8d 91       	ld	r24, X+
    1300:	9c 91       	ld	r25, X
    1302:	11 97       	sbiw	r26, 0x01	; 1
    1304:	fc 01       	movw	r30, r24
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	e8 0f       	add	r30, r24
    130c:	f9 1f       	adc	r31, r25
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	e4 0f       	add	r30, r20
    1318:	f5 1f       	adc	r31, r21
    131a:	13 86       	std	Z+11, r1	; 0x0b
    131c:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
    131e:	8d 91       	ld	r24, X+
    1320:	9c 91       	ld	r25, X
    1322:	11 97       	sbiw	r26, 0x01	; 1
    1324:	fc 01       	movw	r30, r24
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e8 0f       	add	r30, r24
    132c:	f9 1f       	adc	r31, r25
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	e4 0f       	add	r30, r20
    1338:	f5 1f       	adc	r31, r21
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	eb 01       	movw	r28, r22
    1340:	28 81       	ld	r18, Y
    1342:	39 81       	ldd	r19, Y+1	; 0x01
    1344:	82 2b       	or	r24, r18
    1346:	93 2b       	or	r25, r19
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
    134c:	8d 91       	ld	r24, X+
    134e:	9c 91       	ld	r25, X
    1350:	11 97       	sbiw	r26, 0x01	; 1
    1352:	fc 01       	movw	r30, r24
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	e8 0f       	add	r30, r24
    135a:	f9 1f       	adc	r31, r25
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	e4 0f       	add	r30, r20
    1366:	f5 1f       	adc	r31, r21
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	2a 81       	ldd	r18, Y+2	; 0x02
    136e:	3b 81       	ldd	r19, Y+3	; 0x03
    1370:	82 2b       	or	r24, r18
    1372:	93 2b       	or	r25, r19
    1374:	93 83       	std	Z+3, r25	; 0x03
    1376:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
    1378:	8d 91       	ld	r24, X+
    137a:	9c 91       	ld	r25, X
    137c:	11 97       	sbiw	r26, 0x01	; 1
    137e:	fc 01       	movw	r30, r24
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e8 0f       	add	r30, r24
    1386:	f9 1f       	adc	r31, r25
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	e4 0f       	add	r30, r20
    1392:	f5 1f       	adc	r31, r21
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	95 81       	ldd	r25, Z+5	; 0x05
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	82 2b       	or	r24, r18
    139e:	93 2b       	or	r25, r19
    13a0:	95 83       	std	Z+5, r25	; 0x05
    13a2:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
    13a4:	8d 91       	ld	r24, X+
    13a6:	9c 91       	ld	r25, X
    13a8:	11 97       	sbiw	r26, 0x01	; 1
    13aa:	fc 01       	movw	r30, r24
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	e8 0f       	add	r30, r24
    13b2:	f9 1f       	adc	r31, r25
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e4 0f       	add	r30, r20
    13be:	f5 1f       	adc	r31, r21
    13c0:	86 81       	ldd	r24, Z+6	; 0x06
    13c2:	97 81       	ldd	r25, Z+7	; 0x07
    13c4:	2e 81       	ldd	r18, Y+6	; 0x06
    13c6:	3f 81       	ldd	r19, Y+7	; 0x07
    13c8:	82 2b       	or	r24, r18
    13ca:	93 2b       	or	r25, r19
    13cc:	97 83       	std	Z+7, r25	; 0x07
    13ce:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e4 0f       	add	r30, r20
    13ea:	f5 1f       	adc	r31, r21
    13ec:	80 85       	ldd	r24, Z+8	; 0x08
    13ee:	91 85       	ldd	r25, Z+9	; 0x09
    13f0:	28 85       	ldd	r18, Y+8	; 0x08
    13f2:	39 85       	ldd	r19, Y+9	; 0x09
    13f4:	82 2b       	or	r24, r18
    13f6:	93 2b       	or	r25, r19
    13f8:	91 87       	std	Z+9, r25	; 0x09
    13fa:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
    13fc:	8d 91       	ld	r24, X+
    13fe:	9c 91       	ld	r25, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	fc 01       	movw	r30, r24
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e8 0f       	add	r30, r24
    140a:	f9 1f       	adc	r31, r25
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e4 0f       	add	r30, r20
    1416:	f5 1f       	adc	r31, r21
    1418:	82 85       	ldd	r24, Z+10	; 0x0a
    141a:	93 85       	ldd	r25, Z+11	; 0x0b
    141c:	2a 85       	ldd	r18, Y+10	; 0x0a
    141e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1420:	82 2b       	or	r24, r18
    1422:	93 2b       	or	r25, r19
    1424:	93 87       	std	Z+11, r25	; 0x0b
    1426:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;  // we set up a lock, so we don't assign all the buttons at once
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	f7 01       	movw	r30, r14
    142c:	80 83       	st	Z, r24
		*buttonToAssign += 1;
    142e:	8d 91       	ld	r24, X+
    1430:	9c 91       	ld	r25, X
    1432:	11 97       	sbiw	r26, 0x01	; 1
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	8d 93       	st	X+, r24
    1438:	9c 93       	st	X, r25
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <configSetButtonData+0x2d8>
	}
	else if(data->plusOn == 0)
	{
		*plusLock = 0;
    143c:	e7 01       	movw	r28, r14
    143e:	18 82       	st	Y, r1
	}
	return;
}
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	08 95       	ret

00001454 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
    1454:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
    1456:	80 81       	ld	r24, Z
    1458:	80 76       	andi	r24, 0x60	; 96
    145a:	80 32       	cpi	r24, 0x20	; 32
    145c:	e1 f4       	brne	.+56     	; 0x1496 <usbFunctionSetup+0x42>
        //DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
    145e:	81 81       	ldd	r24, Z+1	; 0x01
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	41 f4       	brne	.+16     	; 0x1474 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	90 93 27 01 	sts	0x0127, r25
    146c:	80 93 26 01 	sts	0x0126, r24
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	41 f4       	brne	.+16     	; 0x1488 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	90 93 27 01 	sts	0x0127, r25
    1480:	80 93 26 01 	sts	0x0126, r24
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
    1488:	8a 30       	cpi	r24, 0x0A	; 10
    148a:	29 f4       	brne	.+10     	; 0x1496 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
    148c:	83 81       	ldd	r24, Z+3	; 0x03
    148e:	80 93 02 01 	sts	0x0102, r24
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	08 95       	ret
    1496:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
    1498:	08 95       	ret

0000149a <sendData>:
	usbPoll();
}


void sendData(dataForController data)
{
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	29 97       	sbiw	r28, 0x09	; 9
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	90 2f       	mov	r25, r16
    14b4:	09 83       	std	Y+1, r16	; 0x01
    14b6:	f1 2f       	mov	r31, r17
    14b8:	1a 83       	std	Y+2, r17	; 0x02
    14ba:	e2 2f       	mov	r30, r18
    14bc:	2b 83       	std	Y+3, r18	; 0x03
    14be:	a3 2f       	mov	r26, r19
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	34 2f       	mov	r19, r20
    14c4:	4d 83       	std	Y+5, r20	; 0x05
    14c6:	b5 2f       	mov	r27, r21
    14c8:	5e 83       	std	Y+6, r21	; 0x06
    14ca:	46 2f       	mov	r20, r22
    14cc:	6f 83       	std	Y+7, r22	; 0x07
    14ce:	27 2f       	mov	r18, r23
    14d0:	78 87       	std	Y+8, r23	; 0x08
    14d2:	89 87       	std	Y+9, r24	; 0x09
    14d4:	58 2f       	mov	r21, r24

       //set the buttons to all at default positions
        reportBuffer[0] = 0b00000000;
        reportBuffer[1] = 0b00000000;
    14d6:	10 92 06 01 	sts	0x0106, r1
        reportBuffer[2] = 0b00001000;
    14da:	88 e0       	ldi	r24, 0x08	; 8
    14dc:	80 93 07 01 	sts	0x0107, r24
        reportBuffer[3] = 0b10000000;
    14e0:	80 e8       	ldi	r24, 0x80	; 128
    14e2:	80 93 08 01 	sts	0x0108, r24
        reportBuffer[4] = 0b10000000;
    14e6:	80 93 09 01 	sts	0x0109, r24
        reportBuffer[5] = 0b10000000;
    14ea:	80 93 0a 01 	sts	0x010A, r24
        reportBuffer[6] = 0b00000000;
    14ee:	10 92 0b 01 	sts	0x010B, r1


        // Since 'colorOn' is 1 when a fret is pressed, we shift it to the proper place and | it to set the
        // corresponding button bit to one, which corresponds to a button press.
        reportBuffer[0] |= (data.orangeOn << ORANGE_BIT);
        reportBuffer[0] |= (data.blueOn << BLUE_BIT);
    14f2:	32 95       	swap	r19
    14f4:	30 7f       	andi	r19, 0xF0	; 240
    14f6:	3a 2b       	or	r19, r26
        reportBuffer[0] |= (data.yellowOn << YELLOW_BIT);
        reportBuffer[0] |= (data.redOn << RED_BIT);
        reportBuffer[0] |= (data.greenOn << GREEN_BIT);
    14f8:	ff 0f       	add	r31, r31
    14fa:	ff 0f       	add	r31, r31
    14fc:	ee 0f       	add	r30, r30
    14fe:	ee 0f       	add	r30, r30
    1500:	ee 0f       	add	r30, r30
    1502:	ef 2b       	or	r30, r31
    1504:	99 0f       	add	r25, r25
    1506:	9e 2b       	or	r25, r30
    1508:	93 2b       	or	r25, r19
    150a:	90 93 05 01 	sts	0x0105, r25

        // On the PS3, the strumming shows up as a hat switch, so we have to use conditionals for this..
        if (data.upOn)
    150e:	bb 23       	and	r27, r27
    1510:	11 f0       	breq	.+4      	; 0x1516 <sendData+0x7c>
                reportBuffer[2] = 0b00000000;
    1512:	10 92 07 01 	sts	0x0107, r1
        if (data.downOn)
    1516:	44 23       	and	r20, r20
    1518:	19 f0       	breq	.+6      	; 0x1520 <sendData+0x86>
                reportBuffer[2] = 0b00000100;
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	80 93 07 01 	sts	0x0107, r24

        reportBuffer[1] |= (data.plusOn << PLUS_BIT);
    1520:	22 0f       	add	r18, r18
    1522:	80 91 06 01 	lds	r24, 0x0106
    1526:	82 2b       	or	r24, r18
    1528:	80 93 06 01 	sts	0x0106, r24
        reportBuffer[0] |= (data.minusOn << MINUS_BIT);
    152c:	52 95       	swap	r21
    152e:	55 0f       	add	r21, r21
    1530:	50 7e       	andi	r21, 0xE0	; 224
    1532:	80 91 05 01 	lds	r24, 0x0105
    1536:	85 2b       	or	r24, r21
    1538:	80 93 05 01 	sts	0x0105, r24

        //Then we finish off some USB stuff.
        wdt_reset();  //Reset the watchdog timer
    153c:	a8 95       	wdr
        usbPoll();    //USB poll - must be called at least once per 10ms
    153e:	0e 94 89 0b 	call	0x1712	; 0x1712 <usbPoll>

        // Now, regardless of mode, we have to send the data to the 
        // USB controlling library from the buffer we've been building
        if(usbInterruptIsReady())
    1542:	80 91 17 01 	lds	r24, 0x0117
    1546:	84 ff       	sbrs	r24, 4
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <sendData+0xba>
        {
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	67 e0       	ldi	r22, 0x07	; 7
    1550:	0e 94 67 0b 	call	0x16ce	; 0x16ce <usbSetInterrupt>
        }
                

}
    1554:	29 96       	adiw	r28, 0x09	; 9
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <startCommunication>:
	reportBuffer[5] = 0b10000000;
	reportBuffer[6] = 0b00000000;
*/

    // First, set up all the USB communication stuff
    wdt_enable(WDTO_1S);
    156a:	2e e0       	ldi	r18, 0x0E	; 14
    156c:	88 e1       	ldi	r24, 0x18	; 24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	a8 95       	wdr
    1576:	80 93 60 00 	sts	0x0060, r24
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	20 93 60 00 	sts	0x0060, r18
     * RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

    usbInit();
    1580:	0e 94 34 0b 	call	0x1668	; 0x1668 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    1584:	54 9a       	sbi	0x0a, 4	; 10
    1586:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1588:	40 ea       	ldi	r20, 0xA0	; 160
    158a:	5f e0       	ldi	r21, 0x0F	; 15
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <startCommunication+0x2c>
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
    158e:	a8 95       	wdr
    1590:	ca 01       	movw	r24, r20
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <startCommunication+0x28>
     */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
    1596:	21 50       	subi	r18, 0x01	; 1
    1598:	d1 f7       	brne	.-12     	; 0x158e <startCommunication+0x24>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
    159a:	54 98       	cbi	0x0a, 4	; 10
    sei();
    159c:	78 94       	sei
	usbPoll();
    159e:	0e 94 89 0b 	call	0x1712	; 0x1712 <usbPoll>
}
    15a2:	08 95       	ret

000015a4 <usbEventResetReady>:
    }
    OSCCAL = optimumValue;
}
 
void    usbEventResetReady(void)
{
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
    15b2:	f8 94       	cli
    15b4:	00 e0       	ldi	r16, 0x00	; 0
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	d8 2e       	mov	r13, r24
    15ba:	ee 24       	eor	r14, r14
    15bc:	ff 24       	eor	r15, r15
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);
 
    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
    15be:	1d 2d       	mov	r17, r13
    15c0:	10 0f       	add	r17, r16
    15c2:	10 93 66 00 	sts	0x0066, r17
        x = usbMeasureFrameLength();    // proportional to current real frequency
    15c6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <usbMeasureFrameLength>
    15ca:	ec 01       	movw	r28, r24
        if(x < targetValue)             // frequency still too low
    15cc:	88 e0       	ldi	r24, 0x08	; 8
    15ce:	cc 3e       	cpi	r28, 0xEC	; 236
    15d0:	d8 07       	cpc	r29, r24
    15d2:	0c f0       	brlt	.+2      	; 0x15d6 <usbEventResetReady+0x32>
    15d4:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
    15d6:	d6 94       	lsr	r13
    15d8:	08 94       	sec
    15da:	e1 1c       	adc	r14, r1
    15dc:	f1 1c       	adc	r15, r1
    }while(step > 0);
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	e8 16       	cp	r14, r24
    15e2:	f1 04       	cpc	r15, r1
    15e4:	11 f0       	breq	.+4      	; 0x15ea <usbEventResetReady+0x46>
    15e6:	01 2f       	mov	r16, r17
    15e8:	ea cf       	rjmp	.-44     	; 0x15be <usbEventResetReady+0x1a>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
    15ea:	11 50       	subi	r17, 0x01	; 1
    15ec:	10 93 66 00 	sts	0x0066, r17
    15f0:	1f 5f       	subi	r17, 0xFF	; 255
    15f2:	e1 2e       	mov	r14, r17
    15f4:	ff 24       	eor	r15, r15
    15f6:	08 94       	sec
    15f8:	e1 1c       	adc	r14, r1
    15fa:	f1 1c       	adc	r15, r1
    15fc:	17 c0       	rjmp	.+46     	; 0x162c <usbEventResetReady+0x88>
        x = usbMeasureFrameLength() - targetValue;
    15fe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <usbMeasureFrameLength>
    1602:	9c 01       	movw	r18, r24
    1604:	2c 5e       	subi	r18, 0xEC	; 236
    1606:	38 40       	sbci	r19, 0x08	; 8
    1608:	37 ff       	sbrs	r19, 7
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <usbEventResetReady+0x6e>
    160c:	30 95       	com	r19
    160e:	21 95       	neg	r18
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
    1612:	2c 17       	cp	r18, r28
    1614:	3d 07       	cpc	r19, r29
    1616:	14 f0       	brlt	.+4      	; 0x161c <usbEventResetReady+0x78>
    1618:	9e 01       	movw	r18, r28
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <usbEventResetReady+0x7c>
            optimumDev = x;
            optimumValue = OSCCAL;
    161c:	10 91 66 00 	lds	r17, 0x0066
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
    1620:	80 91 66 00 	lds	r24, 0x0066
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 66 00 	sts	0x0066, r24
    162a:	e9 01       	movw	r28, r18
    162c:	80 91 66 00 	lds	r24, 0x0066
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	e8 16       	cp	r14, r24
    1634:	f9 06       	cpc	r15, r25
    1636:	1c f7       	brge	.-58     	; 0x15fe <usbEventResetReady+0x5a>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
    1638:	10 93 66 00 	sts	0x0066, r17
 
void    usbEventResetReady(void)
{
    cli();  // usbMeasureFrameLength() counts CPU cycles, so disable interrupts.
    calibrateOscillator();
    sei();
    163c:	78 94       	sei
    eeprom_write_byte(0, OSCCAL);   // store the calibrated value in EEPROM
    163e:	80 91 66 00 	lds	r24, 0x0066
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1642:	f9 99       	sbic	0x1f, 1	; 31
    1644:	fe cf       	rjmp	.-4      	; 0x1642 <usbEventResetReady+0x9e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1646:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1648:	12 bc       	out	0x22, r1	; 34
    164a:	11 bc       	out	0x21, r1	; 33
#endif
    EEDR = __value;
    164c:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	fa 9a       	sbi	0x1f, 2	; 31
    1654:	f9 9a       	sbi	0x1f, 1	; 31
    1656:	0f be       	out	0x3f, r0	; 63
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	08 95       	ret

00001668 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    1668:	e9 e6       	ldi	r30, 0x69	; 105
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8c 60       	ori	r24, 0x0C	; 12
    1670:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    1672:	e9 9a       	sbi	0x1d, 1	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1674:	8b e4       	ldi	r24, 0x4B	; 75
    1676:	80 93 18 01 	sts	0x0118, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    167a:	80 93 43 01 	sts	0x0143, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    167e:	8a e5       	ldi	r24, 0x5A	; 90
    1680:	80 93 17 01 	sts	0x0117, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
    1684:	80 93 42 01 	sts	0x0142, r24
#endif
#endif
}
    1688:	08 95       	ret

0000168a <usbSetInterrupt3>:
}
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    168a:	1f 93       	push	r17
    168c:	dc 01       	movw	r26, r24
    168e:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    1690:	80 91 42 01 	lds	r24, 0x0142
    1694:	84 ff       	sbrs	r24, 4
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <usbSetInterrupt3+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    1698:	80 91 43 01 	lds	r24, 0x0143
    169c:	98 e8       	ldi	r25, 0x88	; 136
    169e:	89 27       	eor	r24, r25
    16a0:	80 93 43 01 	sts	0x0143, r24
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <usbSetInterrupt3+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    16a6:	8a e5       	ldi	r24, 0x5A	; 90
    16a8:	80 93 42 01 	sts	0x0142, r24
    16ac:	91 2f       	mov	r25, r17
    16ae:	e4 e4       	ldi	r30, 0x44	; 68
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    16b2:	8d 91       	ld	r24, X+
    16b4:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    16b6:	91 50       	subi	r25, 0x01	; 1
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <usbSetInterrupt3+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    16ba:	84 e4       	ldi	r24, 0x44	; 68
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	61 2f       	mov	r22, r17
    16c0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    16c4:	1c 5f       	subi	r17, 0xFC	; 252
    16c6:	10 93 42 01 	sts	0x0142, r17

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
}
    16ca:	1f 91       	pop	r17
    16cc:	08 95       	ret

000016ce <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    16ce:	1f 93       	push	r17
    16d0:	dc 01       	movw	r26, r24
    16d2:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    16d4:	80 91 17 01 	lds	r24, 0x0117
    16d8:	84 ff       	sbrs	r24, 4
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    16dc:	80 91 18 01 	lds	r24, 0x0118
    16e0:	98 e8       	ldi	r25, 0x88	; 136
    16e2:	89 27       	eor	r24, r25
    16e4:	80 93 18 01 	sts	0x0118, r24
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    16ea:	8a e5       	ldi	r24, 0x5A	; 90
    16ec:	80 93 17 01 	sts	0x0117, r24
    16f0:	91 2f       	mov	r25, r17
    16f2:	e9 e1       	ldi	r30, 0x19	; 25
    16f4:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    16f6:	8d 91       	ld	r24, X+
    16f8:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    16fa:	91 50       	subi	r25, 0x01	; 1
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    16fe:	89 e1       	ldi	r24, 0x19	; 25
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	61 2f       	mov	r22, r17
    1704:	0e 94 b8 0c 	call	0x1970	; 0x1970 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    1708:	1c 5f       	subi	r17, 0xFC	; 252
    170a:	10 93 17 01 	sts	0x0117, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    170e:	1f 91       	pop	r17
    1710:	08 95       	ret

00001712 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    1718:	90 91 28 01 	lds	r25, 0x0128
    171c:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
    171e:	97 fd       	sbrc	r25, 7
    1720:	a8 c0       	rjmp	.+336    	; 0x1872 <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    1722:	20 91 25 01 	lds	r18, 0x0125
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    1726:	80 91 24 01 	lds	r24, 0x0124
    172a:	8d 32       	cpi	r24, 0x2D	; 45
    172c:	09 f0       	breq	.+2      	; 0x1730 <usbPoll+0x1e>
    172e:	9f c0       	rjmp	.+318    	; 0x186e <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    1730:	98 30       	cpi	r25, 0x08	; 8
    1732:	09 f0       	breq	.+2      	; 0x1736 <usbPoll+0x24>
    1734:	9c c0       	rjmp	.+312    	; 0x186e <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    1736:	cc e0       	ldi	r28, 0x0C	; 12
    1738:	d0 e0       	ldi	r29, 0x00	; 0
    173a:	c2 1b       	sub	r28, r18
    173c:	d1 09       	sbc	r29, r1
    173e:	c4 5d       	subi	r28, 0xD4	; 212
    1740:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    1742:	83 ec       	ldi	r24, 0xC3	; 195
    1744:	80 93 0c 01 	sts	0x010C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    1748:	8a e5       	ldi	r24, 0x5A	; 90
    174a:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
    174e:	10 92 04 01 	sts	0x0104, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    1752:	88 81       	ld	r24, Y
    1754:	80 76       	andi	r24, 0x60	; 96
    1756:	29 f0       	breq	.+10     	; 0x1762 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    1758:	ce 01       	movw	r24, r28
    175a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <usbFunctionSetup>
    175e:	28 2f       	mov	r18, r24
    1760:	7d c0       	rjmp	.+250    	; 0x185c <usbPoll+0x14a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    1764:	10 92 15 01 	sts	0x0115, r1
    SWITCH_START(rq->bRequest)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    176a:	88 23       	and	r24, r24
    176c:	21 f4       	brne	.+8      	; 0x1776 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    176e:	10 92 16 01 	sts	0x0116, r1
    1772:	22 e0       	ldi	r18, 0x02	; 2
    1774:	6d c0       	rjmp	.+218    	; 0x1850 <usbPoll+0x13e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    1776:	85 30       	cpi	r24, 0x05	; 5
    1778:	19 f4       	brne	.+6      	; 0x1780 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
    177a:	90 93 29 01 	sts	0x0129, r25
    177e:	67 c0       	rjmp	.+206    	; 0x184e <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    1780:	86 30       	cpi	r24, 0x06	; 6
    1782:	09 f0       	breq	.+2      	; 0x1786 <usbPoll+0x74>
    1784:	4e c0       	rjmp	.+156    	; 0x1822 <usbPoll+0x110>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	41 f4       	brne	.+16     	; 0x179c <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    178c:	86 ee       	ldi	r24, 0xE6	; 230
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	90 93 27 01 	sts	0x0127, r25
    1794:	80 93 26 01 	sts	0x0126, r24
    1798:	22 e1       	ldi	r18, 0x12	; 18
    179a:	3f c0       	rjmp	.+126    	; 0x181a <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	41 f4       	brne	.+16     	; 0x17b0 <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    17a0:	88 ef       	ldi	r24, 0xF8	; 248
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	90 93 27 01 	sts	0x0127, r25
    17a8:	80 93 26 01 	sts	0x0126, r24
    17ac:	29 e2       	ldi	r18, 0x29	; 41
    17ae:	35 c0       	rjmp	.+106    	; 0x181a <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	f1 f4       	brne	.+60     	; 0x17f0 <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    17b4:	99 23       	and	r25, r25
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    17b8:	82 eb       	ldi	r24, 0xB2	; 178
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	90 93 27 01 	sts	0x0127, r25
    17c0:	80 93 26 01 	sts	0x0126, r24
    17c4:	24 e0       	ldi	r18, 0x04	; 4
    17c6:	29 c0       	rjmp	.+82     	; 0x181a <usbPoll+0x108>
        SWITCH_CASE(1)
    17c8:	91 30       	cpi	r25, 0x01	; 1
    17ca:	41 f4       	brne	.+16     	; 0x17dc <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    17cc:	86 eb       	ldi	r24, 0xB6	; 182
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	90 93 27 01 	sts	0x0127, r25
    17d4:	80 93 26 01 	sts	0x0126, r24
    17d8:	2c e1       	ldi	r18, 0x1C	; 28
    17da:	1f c0       	rjmp	.+62     	; 0x181a <usbPoll+0x108>
        SWITCH_CASE(2)
    17dc:	92 30       	cpi	r25, 0x02	; 2
    17de:	e1 f4       	brne	.+56     	; 0x1818 <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    17e0:	82 ed       	ldi	r24, 0xD2	; 210
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	90 93 27 01 	sts	0x0127, r25
    17e8:	80 93 26 01 	sts	0x0126, r24
    17ec:	24 e1       	ldi	r18, 0x14	; 20
    17ee:	15 c0       	rjmp	.+42     	; 0x181a <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    17f0:	81 32       	cpi	r24, 0x21	; 33
    17f2:	41 f4       	brne	.+16     	; 0x1804 <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	90 93 27 01 	sts	0x0127, r25
    17fc:	80 93 26 01 	sts	0x0126, r24
    1800:	29 e0       	ldi	r18, 0x09	; 9
    1802:	0b c0       	rjmp	.+22     	; 0x181a <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    1804:	82 32       	cpi	r24, 0x22	; 34
    1806:	41 f4       	brne	.+16     	; 0x1818 <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    1808:	88 e6       	ldi	r24, 0x68	; 104
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	90 93 27 01 	sts	0x0127, r25
    1810:	80 93 26 01 	sts	0x0126, r24
    1814:	2a e4       	ldi	r18, 0x4A	; 74
    1816:	01 c0       	rjmp	.+2      	; 0x181a <usbPoll+0x108>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    181a:	80 e4       	ldi	r24, 0x40	; 64
    181c:	80 93 04 01 	sts	0x0104, r24
    1820:	1d c0       	rjmp	.+58     	; 0x185c <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	21 f4       	brne	.+8      	; 0x182e <usbPoll+0x11c>
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	8b e2       	ldi	r24, 0x2B	; 43
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    182e:	89 30       	cpi	r24, 0x09	; 9
    1830:	19 f4       	brne	.+6      	; 0x1838 <usbPoll+0x126>
        usbConfiguration = value;
    1832:	90 93 2b 01 	sts	0x012B, r25
    1836:	0b c0       	rjmp	.+22     	; 0x184e <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    1838:	8a 30       	cpi	r24, 0x0A	; 10
    183a:	11 f4       	brne	.+4      	; 0x1840 <usbPoll+0x12e>
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <usbPoll+0x13e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    1840:	8b 30       	cpi	r24, 0x0B	; 11
    1842:	29 f4       	brne	.+10     	; 0x184e <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1844:	8b e4       	ldi	r24, 0x4B	; 75
    1846:	80 93 18 01 	sts	0x0118, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    184a:	80 93 43 01 	sts	0x0143, r24
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	85 e1       	ldi	r24, 0x15	; 21
    1852:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    1854:	90 93 27 01 	sts	0x0127, r25
    1858:	80 93 26 01 	sts	0x0126, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    185c:	8f 81       	ldd	r24, Y+7	; 0x07
    185e:	88 23       	and	r24, r24
    1860:	21 f4       	brne	.+8      	; 0x186a <usbPoll+0x158>
    1862:	8e 81       	ldd	r24, Y+6	; 0x06
    1864:	82 17       	cp	r24, r18
    1866:	08 f4       	brcc	.+2      	; 0x186a <usbPoll+0x158>
    1868:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    186a:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    186e:	10 92 28 01 	sts	0x0128, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    1872:	80 91 00 01 	lds	r24, 0x0100
    1876:	84 ff       	sbrs	r24, 4
    1878:	4a c0       	rjmp	.+148    	; 0x190e <usbPoll+0x1fc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    187a:	80 91 01 01 	lds	r24, 0x0101
    187e:	8f 3f       	cpi	r24, 0xFF	; 255
    1880:	09 f4       	brne	.+2      	; 0x1884 <usbPoll+0x172>
    1882:	45 c0       	rjmp	.+138    	; 0x190e <usbPoll+0x1fc>
    1884:	18 2f       	mov	r17, r24
    1886:	89 30       	cpi	r24, 0x09	; 9
    1888:	08 f0       	brcs	.+2      	; 0x188c <usbPoll+0x17a>
    188a:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    188c:	81 1b       	sub	r24, r17
    188e:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    1892:	80 91 0c 01 	lds	r24, 0x010C
    1896:	98 e8       	ldi	r25, 0x88	; 136
    1898:	89 27       	eor	r24, r25
    189a:	80 93 0c 01 	sts	0x010C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    189e:	11 23       	and	r17, r17
    18a0:	41 f1       	breq	.+80     	; 0x18f2 <usbPoll+0x1e0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    18a2:	20 91 26 01 	lds	r18, 0x0126
    18a6:	30 91 27 01 	lds	r19, 0x0127
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    18aa:	80 91 04 01 	lds	r24, 0x0104
    18ae:	86 ff       	sbrs	r24, 6
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <usbPoll+0x1ba>
    18b2:	ad e0       	ldi	r26, 0x0D	; 13
    18b4:	b1 e0       	ldi	r27, 0x01	; 1
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    18ba:	f9 01       	movw	r30, r18
    18bc:	e8 0f       	add	r30, r24
    18be:	f9 1f       	adc	r31, r25
    18c0:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    18c2:	ed 93       	st	X+, r30
    18c4:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    18c6:	18 17       	cp	r17, r24
    18c8:	c1 f7       	brne	.-16     	; 0x18ba <usbPoll+0x1a8>
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <usbPoll+0x1ca>
    18cc:	91 2f       	mov	r25, r17
    18ce:	d9 01       	movw	r26, r18
    18d0:	ed e0       	ldi	r30, 0x0D	; 13
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    18d4:	8d 91       	ld	r24, X+
    18d6:	81 93       	st	Z+, r24
                }while(--i);
    18d8:	91 50       	subi	r25, 0x01	; 1
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <usbPoll+0x1c2>
    18dc:	11 50       	subi	r17, 0x01	; 1
    18de:	81 2f       	mov	r24, r17
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	1f 5f       	subi	r17, 0xFF	; 255
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	82 0f       	add	r24, r18
    18e8:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    18ea:	90 93 27 01 	sts	0x0127, r25
    18ee:	80 93 26 01 	sts	0x0126, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    18f2:	8d e0       	ldi	r24, 0x0D	; 13
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	61 2f       	mov	r22, r17
    18f8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    18fc:	61 2f       	mov	r22, r17
    18fe:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1900:	6c 30       	cpi	r22, 0x0C	; 12
    1902:	19 f0       	breq	.+6      	; 0x190a <usbPoll+0x1f8>
            usbMsgLen = USB_NO_MSG;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    190a:	60 93 00 01 	sts	0x0100, r22
    190e:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    1910:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    1912:	88 71       	andi	r24, 0x18	; 24
    1914:	31 f4       	brne	.+12     	; 0x1922 <usbPoll+0x210>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    1916:	91 50       	subi	r25, 0x01	; 1
    1918:	d9 f7       	brne	.-10     	; 0x1910 <usbPoll+0x1fe>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    191a:	10 92 29 01 	sts	0x0129, r1
    usbDeviceAddr = 0;
    191e:	10 92 23 01 	sts	0x0123, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	99 23       	and	r25, r25
    1926:	09 f4       	brne	.+2      	; 0x192a <usbPoll+0x218>
    1928:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
    192a:	80 91 03 01 	lds	r24, 0x0103
    192e:	81 17       	cp	r24, r17
    1930:	31 f0       	breq	.+12     	; 0x193e <usbPoll+0x22c>
        USB_RESET_HOOK(isReset);
    1932:	11 23       	and	r17, r17
    1934:	11 f4       	brne	.+4      	; 0x193a <usbPoll+0x228>
    1936:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <usbEventResetReady>
        wasReset = isReset;
    193a:	10 93 03 01 	sts	0x0103, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	08 95       	ret

00001946 <usbCrc16>:
    1946:	a8 2f       	mov	r26, r24
    1948:	b9 2f       	mov	r27, r25
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	50 ea       	ldi	r21, 0xA0	; 160
    1952:	60 95       	com	r22
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	09 c0       	rjmp	.+18     	; 0x196a <usbCrcLoopEntry>

00001958 <usbCrcByteLoop>:
    1958:	2d 91       	ld	r18, X+
    195a:	82 27       	eor	r24, r18

0000195c <usbCrcBitLoop>:
    195c:	97 95       	ror	r25
    195e:	87 95       	ror	r24
    1960:	10 f0       	brcs	.+4      	; 0x1966 <usbCrcNoXor>
    1962:	84 27       	eor	r24, r20
    1964:	95 27       	eor	r25, r21

00001966 <usbCrcNoXor>:
    1966:	30 5e       	subi	r19, 0xE0	; 224
    1968:	c8 f3       	brcs	.-14     	; 0x195c <usbCrcBitLoop>

0000196a <usbCrcLoopEntry>:
    196a:	6f 5f       	subi	r22, 0xFF	; 255
    196c:	a8 f3       	brcs	.-22     	; 0x1958 <usbCrcByteLoop>

0000196e <usbCrcReady>:
    196e:	08 95       	ret

00001970 <usbCrc16Append>:
    1970:	ea df       	rcall	.-44     	; 0x1946 <usbCrc16>
    1972:	8d 93       	st	X+, r24
    1974:	9d 93       	st	X+, r25
    1976:	08 95       	ret

00001978 <usbMeasureFrameLength>:
    1978:	a6 e0       	ldi	r26, 0x06	; 6
    197a:	88 27       	eor	r24, r24
    197c:	99 27       	eor	r25, r25

0000197e <usbMFTime16>:
    197e:	aa 95       	dec	r26
    1980:	69 f0       	breq	.+26     	; 0x199c <usbMFTimeout>

00001982 <usbMFWaitStrobe>:
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	e1 f3       	breq	.-8      	; 0x197e <usbMFTime16>
    1986:	4c 99       	sbic	0x09, 4	; 9
    1988:	fc cf       	rjmp	.-8      	; 0x1982 <usbMFWaitStrobe>

0000198a <usbMFWaitIdle>:
    198a:	4c 9b       	sbis	0x09, 4	; 9
    198c:	fe cf       	rjmp	.-4      	; 0x198a <usbMFWaitIdle>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	99 27       	eor	r25, r25

00001992 <usbMFWaitLoop>:
    1992:	a9 b1       	in	r26, 0x09	; 9
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	11 f0       	breq	.+4      	; 0x199c <usbMFTimeout>
    1998:	a8 71       	andi	r26, 0x18	; 24
    199a:	d9 f7       	brne	.-10     	; 0x1992 <usbMFWaitLoop>

0000199c <usbMFTimeout>:
    199c:	08 95       	ret

0000199e <__vector_2>:
    199e:	cf 93       	push	r28
    19a0:	cf b7       	in	r28, 0x3f	; 63
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29

000019a6 <waitForJ>:
    19a6:	c3 95       	inc	r28
    19a8:	4c 9b       	sbis	0x09, 4	; 9
    19aa:	e9 f7       	brne	.-6      	; 0x19a6 <waitForJ>

000019ac <waitForK>:
    19ac:	4c 9b       	sbis	0x09, 4	; 9
    19ae:	0b c0       	rjmp	.+22     	; 0x19c6 <foundK>
    19b0:	4c 9b       	sbis	0x09, 4	; 9
    19b2:	09 c0       	rjmp	.+18     	; 0x19c6 <foundK>
    19b4:	4c 9b       	sbis	0x09, 4	; 9
    19b6:	07 c0       	rjmp	.+14     	; 0x19c6 <foundK>
    19b8:	4c 9b       	sbis	0x09, 4	; 9
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <foundK>
    19bc:	4c 9b       	sbis	0x09, 4	; 9
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <foundK>
    19c0:	4c 9b       	sbis	0x09, 4	; 9
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <foundK>
    19c4:	8b c0       	rjmp	.+278    	; 0x1adc <sofError>

000019c6 <foundK>:
    19c6:	6f 93       	push	r22
    19c8:	c0 91 25 01 	lds	r28, 0x0125
    19cc:	dd 27       	eor	r29, r29
    19ce:	c4 5d       	subi	r28, 0xD4	; 212
    19d0:	de 4f       	sbci	r29, 0xFE	; 254
    19d2:	2f 93       	push	r18
    19d4:	65 e5       	ldi	r22, 0x55	; 85
    19d6:	4c 9b       	sbis	0x09, 4	; 9
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <haveTwoBitsK>
    19da:	2f 91       	pop	r18
    19dc:	6f 91       	pop	r22
    19de:	e6 cf       	rjmp	.-52     	; 0x19ac <waitForK>

000019e0 <haveTwoBitsK>:
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	4f 93       	push	r20
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	40 e1       	ldi	r20, 0x10	; 16
    19ea:	5f 93       	push	r21
    19ec:	09 b1       	in	r16, 0x09	; 9
    19ee:	08 71       	andi	r16, 0x18	; 24
    19f0:	04 fb       	bst	r16, 4
    19f2:	27 f9       	bld	r18, 7
    19f4:	3f 93       	push	r19
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	3b e0       	ldi	r19, 0x0B	; 11
    19fa:	39 c0       	rjmp	.+114    	; 0x1a6e <rxbit1>

000019fc <unstuff6>:
    19fc:	18 71       	andi	r17, 0x18	; 24
    19fe:	40 64       	ori	r20, 0x40	; 64
    1a00:	2f 77       	andi	r18, 0x7F	; 127
    1a02:	01 2f       	mov	r16, r17
    1a04:	5f 5f       	subi	r21, 0xFF	; 255
    1a06:	1e c0       	rjmp	.+60     	; 0x1a44 <didUnstuff6>

00001a08 <unstuff7>:
    1a08:	40 68       	ori	r20, 0x80	; 128
    1a0a:	19 b1       	in	r17, 0x09	; 9
    1a0c:	18 71       	andi	r17, 0x18	; 24
    1a0e:	2f 77       	andi	r18, 0x7F	; 127
    1a10:	52 50       	subi	r21, 0x02	; 2
    1a12:	1f c0       	rjmp	.+62     	; 0x1a52 <didUnstuff7>

00001a14 <unstuffEven>:
    1a14:	40 64       	ori	r20, 0x40	; 64
    1a16:	09 b1       	in	r16, 0x09	; 9
    1a18:	2f 77       	andi	r18, 0x7F	; 127
    1a1a:	08 71       	andi	r16, 0x18	; 24
    1a1c:	d1 f1       	breq	.+116    	; 0x1a92 <se0>
    1a1e:	5f 5f       	subi	r21, 0xFF	; 255
    1a20:	00 c0       	rjmp	.+0      	; 0x1a22 <unstuffEven+0xe>
    1a22:	23 c0       	rjmp	.+70     	; 0x1a6a <didUnstuffE>

00001a24 <unstuffOdd>:
    1a24:	40 62       	ori	r20, 0x20	; 32
    1a26:	19 b1       	in	r17, 0x09	; 9
    1a28:	2f 77       	andi	r18, 0x7F	; 127
    1a2a:	18 71       	andi	r17, 0x18	; 24
    1a2c:	91 f1       	breq	.+100    	; 0x1a92 <se0>
    1a2e:	5f 5f       	subi	r21, 0xFF	; 255
    1a30:	00 c0       	rjmp	.+0      	; 0x1a32 <unstuffOdd+0xe>
    1a32:	25 c0       	rjmp	.+74     	; 0x1a7e <didUnstuffO>

00001a34 <rxByteLoop>:
    1a34:	08 71       	andi	r16, 0x18	; 24
    1a36:	10 27       	eor	r17, r16
    1a38:	51 50       	subi	r21, 0x01	; 1
    1a3a:	12 f4       	brpl	.+4      	; 0x1a40 <skipLeap>
    1a3c:	5d 5f       	subi	r21, 0xFD	; 253
	...

00001a40 <skipLeap>:
    1a40:	11 50       	subi	r17, 0x01	; 1
    1a42:	27 95       	ror	r18

00001a44 <didUnstuff6>:
    1a44:	2c 3f       	cpi	r18, 0xFC	; 252
    1a46:	19 b1       	in	r17, 0x09	; 9
    1a48:	c8 f6       	brcc	.-78     	; 0x19fc <unstuff6>
    1a4a:	18 71       	andi	r17, 0x18	; 24
    1a4c:	01 27       	eor	r16, r17
    1a4e:	01 50       	subi	r16, 0x01	; 1
    1a50:	27 95       	ror	r18

00001a52 <didUnstuff7>:
    1a52:	2c 3f       	cpi	r18, 0xFC	; 252
    1a54:	c8 f6       	brcc	.-78     	; 0x1a08 <unstuff7>
    1a56:	42 27       	eor	r20, r18
    1a58:	49 93       	st	Y+, r20

00001a5a <rxBitLoop>:
    1a5a:	09 b1       	in	r16, 0x09	; 9
    1a5c:	08 71       	andi	r16, 0x18	; 24
    1a5e:	10 27       	eor	r17, r16
    1a60:	4f 73       	andi	r20, 0x3F	; 63
    1a62:	11 50       	subi	r17, 0x01	; 1
    1a64:	27 95       	ror	r18
    1a66:	2c 3f       	cpi	r18, 0xFC	; 252
    1a68:	a8 f6       	brcc	.-86     	; 0x1a14 <unstuffEven>

00001a6a <didUnstuffE>:
    1a6a:	46 95       	lsr	r20
    1a6c:	46 95       	lsr	r20

00001a6e <rxbit1>:
    1a6e:	19 b1       	in	r17, 0x09	; 9
    1a70:	18 71       	andi	r17, 0x18	; 24
    1a72:	79 f0       	breq	.+30     	; 0x1a92 <se0>
    1a74:	01 27       	eor	r16, r17
    1a76:	01 50       	subi	r16, 0x01	; 1
    1a78:	27 95       	ror	r18
    1a7a:	2c 3f       	cpi	r18, 0xFC	; 252
    1a7c:	98 f6       	brcc	.-90     	; 0x1a24 <unstuffOdd>

00001a7e <didUnstuffO>:
    1a7e:	6b 5a       	subi	r22, 0xAB	; 171
    1a80:	60 f3       	brcs	.-40     	; 0x1a5a <rxBitLoop>
    1a82:	31 50       	subi	r19, 0x01	; 1
    1a84:	09 b1       	in	r16, 0x09	; 9
    1a86:	b0 f6       	brcc	.-84     	; 0x1a34 <rxByteLoop>
    1a88:	00 c0       	rjmp	.+0      	; 0x1a8a <overflow>

00001a8a <overflow>:
    1a8a:	12 e0       	ldi	r17, 0x02	; 2
    1a8c:	1c bb       	out	0x1c, r17	; 28

00001a8e <ignorePacket>:
    1a8e:	00 27       	eor	r16, r16
    1a90:	19 c0       	rjmp	.+50     	; 0x1ac4 <handleSetupOrOut>

00001a92 <se0>:
    1a92:	3b 50       	subi	r19, 0x0B	; 11
    1a94:	31 95       	neg	r19
    1a96:	c3 1b       	sub	r28, r19
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	12 e0       	ldi	r17, 0x02	; 2
    1a9c:	1c bb       	out	0x1c, r17	; 28
    1a9e:	08 81       	ld	r16, Y
    1aa0:	03 3c       	cpi	r16, 0xC3	; 195
    1aa2:	09 f1       	breq	.+66     	; 0x1ae6 <handleData>
    1aa4:	0b 34       	cpi	r16, 0x4B	; 75
    1aa6:	f9 f0       	breq	.+62     	; 0x1ae6 <handleData>
    1aa8:	20 91 23 01 	lds	r18, 0x0123
    1aac:	19 81       	ldd	r17, Y+1	; 0x01
    1aae:	11 0f       	add	r17, r17
    1ab0:	12 13       	cpse	r17, r18
    1ab2:	ed cf       	rjmp	.-38     	; 0x1a8e <ignorePacket>
    1ab4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ab6:	44 1f       	adc	r20, r20
    1ab8:	09 36       	cpi	r16, 0x69	; 105
    1aba:	51 f1       	breq	.+84     	; 0x1b10 <handleIn>
    1abc:	0d 32       	cpi	r16, 0x2D	; 45
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <handleSetupOrOut>
    1ac0:	01 3e       	cpi	r16, 0xE1	; 225
    1ac2:	29 f7       	brne	.-54     	; 0x1a8e <ignorePacket>

00001ac4 <handleSetupOrOut>:
    1ac4:	00 93 2a 01 	sts	0x012A, r16

00001ac8 <doReturn>:
    1ac8:	3f 91       	pop	r19
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	2f 91       	pop	r18
    1ad4:	6f 91       	pop	r22
    1ad6:	cc b3       	in	r28, 0x1c	; 28
    1ad8:	c1 fd       	sbrc	r28, 1
    1ada:	65 cf       	rjmp	.-310    	; 0x19a6 <waitForJ>

00001adc <sofError>:
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	cf bf       	out	0x3f, r28	; 63
    1ae2:	cf 91       	pop	r28
    1ae4:	18 95       	reti

00001ae6 <handleData>:
    1ae6:	20 91 2a 01 	lds	r18, 0x012A
    1aea:	22 23       	and	r18, r18
    1aec:	69 f3       	breq	.-38     	; 0x1ac8 <doReturn>
    1aee:	10 91 28 01 	lds	r17, 0x0128
    1af2:	11 23       	and	r17, r17
    1af4:	e9 f5       	brne	.+122    	; 0x1b70 <sendNakAndReti>
    1af6:	34 30       	cpi	r19, 0x04	; 4
    1af8:	ea f1       	brmi	.+122    	; 0x1b74 <sendAckAndReti>
    1afa:	30 93 28 01 	sts	0x0128, r19
    1afe:	20 93 24 01 	sts	0x0124, r18
    1b02:	10 91 25 01 	lds	r17, 0x0125
    1b06:	3b e0       	ldi	r19, 0x0B	; 11
    1b08:	31 1b       	sub	r19, r17
    1b0a:	30 93 25 01 	sts	0x0125, r19
    1b0e:	32 c0       	rjmp	.+100    	; 0x1b74 <sendAckAndReti>

00001b10 <handleIn>:
    1b10:	00 91 28 01 	lds	r16, 0x0128
    1b14:	01 30       	cpi	r16, 0x01	; 1
    1b16:	64 f5       	brge	.+88     	; 0x1b70 <sendNakAndReti>
    1b18:	0a e5       	ldi	r16, 0x5A	; 90
    1b1a:	4f 70       	andi	r20, 0x0F	; 15
    1b1c:	49 f4       	brne	.+18     	; 0x1b30 <handleIn1>
    1b1e:	30 91 00 01 	lds	r19, 0x0100
    1b22:	34 fd       	sbrc	r19, 4
    1b24:	28 c0       	rjmp	.+80     	; 0x1b76 <sendCntAndReti>
    1b26:	00 93 00 01 	sts	0x0100, r16
    1b2a:	cc e0       	ldi	r28, 0x0C	; 12
    1b2c:	d1 e0       	ldi	r29, 0x01	; 1
    1b2e:	27 c0       	rjmp	.+78     	; 0x1b7e <usbSendAndReti>

00001b30 <handleIn1>:
    1b30:	41 35       	cpi	r20, 0x51	; 81
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <handleIn3>
    1b34:	30 91 17 01 	lds	r19, 0x0117
    1b38:	34 fd       	sbrc	r19, 4
    1b3a:	1d c0       	rjmp	.+58     	; 0x1b76 <sendCntAndReti>
    1b3c:	00 93 17 01 	sts	0x0117, r16
    1b40:	c8 e1       	ldi	r28, 0x18	; 24
    1b42:	d1 e0       	ldi	r29, 0x01	; 1
    1b44:	1c c0       	rjmp	.+56     	; 0x1b7e <usbSendAndReti>

00001b46 <handleIn3>:
    1b46:	30 91 42 01 	lds	r19, 0x0142
    1b4a:	34 fd       	sbrc	r19, 4
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <sendCntAndReti>
    1b4e:	00 93 42 01 	sts	0x0142, r16
    1b52:	c3 e4       	ldi	r28, 0x43	; 67
    1b54:	d1 e0       	ldi	r29, 0x01	; 1
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <usbSendAndReti>

00001b58 <bitstuffN>:
    1b58:	05 27       	eor	r16, r21
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
    1b5c:	00 c0       	rjmp	.+0      	; 0x1b5e <bitstuffN+0x6>
    1b5e:	00 00       	nop
    1b60:	0b b9       	out	0x0b, r16	; 11
    1b62:	1a c0       	rjmp	.+52     	; 0x1b98 <didStuffN>

00001b64 <bitstuff6>:
    1b64:	05 27       	eor	r16, r21
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	22 1f       	adc	r18, r18
    1b6a:	1d c0       	rjmp	.+58     	; 0x1ba6 <didStuff6>

00001b6c <bitstuff7>:
    1b6c:	10 e0       	ldi	r17, 0x00	; 0
    1b6e:	21 c0       	rjmp	.+66     	; 0x1bb2 <didStuff7>

00001b70 <sendNakAndReti>:
    1b70:	4a e5       	ldi	r20, 0x5A	; 90
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <sendX3AndReti>

00001b74 <sendAckAndReti>:
    1b74:	32 ed       	ldi	r19, 0xD2	; 210

00001b76 <sendCntAndReti>:
    1b76:	43 2f       	mov	r20, r19

00001b78 <sendX3AndReti>:
    1b78:	c4 e1       	ldi	r28, 0x14	; 20
    1b7a:	d0 e0       	ldi	r29, 0x00	; 0
    1b7c:	32 e0       	ldi	r19, 0x02	; 2

00001b7e <usbSendAndReti>:
    1b7e:	1a b1       	in	r17, 0x0a	; 10
    1b80:	18 61       	ori	r17, 0x18	; 24
    1b82:	5c 9a       	sbi	0x0b, 4	; 11
    1b84:	0b b1       	in	r16, 0x0b	; 11
    1b86:	1a b9       	out	0x0a, r17	; 10
    1b88:	58 e1       	ldi	r21, 0x18	; 24
    1b8a:	20 e8       	ldi	r18, 0x80	; 128

00001b8c <txByteLoop>:
    1b8c:	65 e3       	ldi	r22, 0x35	; 53

00001b8e <txBitLoop>:
    1b8e:	20 ff       	sbrs	r18, 0
    1b90:	05 27       	eor	r16, r21
    1b92:	0b b9       	out	0x0b, r16	; 11
    1b94:	27 95       	ror	r18
    1b96:	17 95       	ror	r17

00001b98 <didStuffN>:
    1b98:	1c 3f       	cpi	r17, 0xFC	; 252
    1b9a:	f0 f6       	brcc	.-68     	; 0x1b58 <bitstuffN>
    1b9c:	66 95       	lsr	r22
    1b9e:	b8 f7       	brcc	.-18     	; 0x1b8e <txBitLoop>
    1ba0:	b1 f7       	brne	.-20     	; 0x1b8e <txBitLoop>
    1ba2:	20 ff       	sbrs	r18, 0
    1ba4:	05 27       	eor	r16, r21

00001ba6 <didStuff6>:
    1ba6:	0b b9       	out	0x0b, r16	; 11
    1ba8:	27 95       	ror	r18
    1baa:	17 95       	ror	r17
    1bac:	1c 3f       	cpi	r17, 0xFC	; 252
    1bae:	d0 f6       	brcc	.-76     	; 0x1b64 <bitstuff6>
    1bb0:	27 95       	ror	r18

00001bb2 <didStuff7>:
    1bb2:	17 95       	ror	r17
    1bb4:	17 ff       	sbrs	r17, 7
    1bb6:	05 27       	eor	r16, r21
    1bb8:	00 00       	nop
    1bba:	1c 3f       	cpi	r17, 0xFC	; 252
    1bbc:	0b b9       	out	0x0b, r16	; 11
    1bbe:	b0 f6       	brcc	.-84     	; 0x1b6c <bitstuff7>
    1bc0:	29 91       	ld	r18, Y+
    1bc2:	3a 95       	dec	r19
    1bc4:	19 f7       	brne	.-58     	; 0x1b8c <txByteLoop>
    1bc6:	07 7e       	andi	r16, 0xE7	; 231
    1bc8:	10 91 29 01 	lds	r17, 0x0129
    1bcc:	11 0f       	add	r17, r17
    1bce:	c6 51       	subi	r28, 0x16	; 22
    1bd0:	d0 40       	sbci	r29, 0x00	; 0
    1bd2:	0b b9       	out	0x0b, r16	; 11
    1bd4:	11 f0       	breq	.+4      	; 0x1bda <skipAddrAssign>
    1bd6:	10 93 23 01 	sts	0x0123, r17

00001bda <skipAddrAssign>:
    1bda:	12 e0       	ldi	r17, 0x02	; 2
    1bdc:	1c bb       	out	0x1c, r17	; 28
    1bde:	00 61       	ori	r16, 0x10	; 16
    1be0:	1a b1       	in	r17, 0x0a	; 10
    1be2:	17 7e       	andi	r17, 0xE7	; 231
    1be4:	40 2f       	mov	r20, r16
    1be6:	47 7e       	andi	r20, 0xE7	; 231
    1be8:	54 e0       	ldi	r21, 0x04	; 4

00001bea <se0Delay>:
    1bea:	5a 95       	dec	r21
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <se0Delay>
    1bee:	0b b9       	out	0x0b, r16	; 11
    1bf0:	1a b9       	out	0x0a, r17	; 10
    1bf2:	4b b9       	out	0x0b, r20	; 11
    1bf4:	69 cf       	rjmp	.-302    	; 0x1ac8 <doReturn>

00001bf6 <__eerd_block>:
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e1 e0       	ldi	r30, 0x01	; 1
    1bfc:	fe e0       	ldi	r31, 0x0E	; 14
    1bfe:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__prologue_saves__+0x14>
    1c02:	7c 01       	movw	r14, r24
    1c04:	eb 01       	movw	r28, r22
    1c06:	8a 01       	movw	r16, r20
    1c08:	69 01       	movw	r12, r18
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <__eerd_block+0x28>
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	21 96       	adiw	r28, 0x01	; 1
    1c10:	f6 01       	movw	r30, r12
    1c12:	09 95       	icall
    1c14:	f7 01       	movw	r30, r14
    1c16:	81 93       	st	Z+, r24
    1c18:	7f 01       	movw	r14, r30
    1c1a:	01 50       	subi	r16, 0x01	; 1
    1c1c:	10 40       	sbci	r17, 0x00	; 0
    1c1e:	01 15       	cp	r16, r1
    1c20:	11 05       	cpc	r17, r1
    1c22:	a1 f7       	brne	.-24     	; 0x1c0c <__eerd_block+0x16>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	e8 e0       	ldi	r30, 0x08	; 8
    1c2a:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__epilogue_restores__+0x14>

00001c2e <__eewr_block>:
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ed e1       	ldi	r30, 0x1D	; 29
    1c34:	fe e0       	ldi	r31, 0x0E	; 14
    1c36:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__prologue_saves__+0x14>
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	7b 01       	movw	r14, r22
    1c3e:	8a 01       	movw	r16, r20
    1c40:	69 01       	movw	r12, r18
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <__eewr_block+0x28>
    1c44:	ce 01       	movw	r24, r28
    1c46:	21 96       	adiw	r28, 0x01	; 1
    1c48:	f7 01       	movw	r30, r14
    1c4a:	61 91       	ld	r22, Z+
    1c4c:	7f 01       	movw	r14, r30
    1c4e:	f6 01       	movw	r30, r12
    1c50:	09 95       	icall
    1c52:	01 50       	subi	r16, 0x01	; 1
    1c54:	10 40       	sbci	r17, 0x00	; 0
    1c56:	01 15       	cp	r16, r1
    1c58:	11 05       	cpc	r17, r1
    1c5a:	a1 f7       	brne	.-24     	; 0x1c44 <__eewr_block+0x16>
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	e8 e0       	ldi	r30, 0x08	; 8
    1c62:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__epilogue_restores__+0x14>

00001c66 <__prologue_saves__>:
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	ca 1b       	sub	r28, r26
    1c90:	db 0b       	sbc	r29, r27
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	09 94       	ijmp

00001c9e <__epilogue_restores__>:
    1c9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1ca0:	39 88       	ldd	r3, Y+17	; 0x11
    1ca2:	48 88       	ldd	r4, Y+16	; 0x10
    1ca4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1caa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1cb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb4:	df 80       	ldd	r13, Y+7	; 0x07
    1cb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cba:	0c 81       	ldd	r16, Y+4	; 0x04
    1cbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1cbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1cc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc2:	ce 0f       	add	r28, r30
    1cc4:	d1 1d       	adc	r29, r1
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	ed 01       	movw	r28, r26
    1cd2:	08 95       	ret

00001cd4 <_exit>:
    1cd4:	f8 94       	cli

00001cd6 <__stop_program>:
    1cd6:	ff cf       	rjmp	.-2      	; 0x1cd6 <__stop_program>
