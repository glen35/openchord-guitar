
V1_USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001bdc  00001c90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bdc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800102  00800102  00001c92  2**0
                  ALLOC
  3 .eeprom       00000172  00810000  00810000  00001c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000035f  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a13  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015f1  00000000  00000000  000044e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000815  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad1  00000000  00000000  00006469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_2>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
      68:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
      78:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
      88:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
      98:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
      a8:	32 09 35 75 08 95 04 81 02 c0                       2.5u......

000000b2 <usbDescriptorString0>:
      b2:	04 03 09 04                                         ....

000000b6 <usbDescriptorStringVendor>:
      b6:	1c 03 4f 00 70 00 65 00 6e 00 43 00 68 00 6f 00     ..O.p.e.n.C.h.o.
      c6:	72 00 64 00 2e 00 6f 00 72 00 67 00                 r.d...o.r.g.

000000d2 <usbDescriptorStringDevice>:
      d2:	14 03 56 00 31 00 20 00 47 00 75 00 69 00 74 00     ..V.1. .G.u.i.t.
      e2:	61 00 72 00                                         a.r.

000000e6 <usbDescriptorDevice>:
      e6:	12 01 10 01 00 00 00 08 ba 12 00 02 00 01 01 02     ................
      f6:	00 01                                               ..

000000f8 <usbDescriptorConfiguration>:
      f8:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
     108:	00 00 09 21 01 01 00 01 22 4a 00 07 05 81 03 08     ...!...."J......
     118:	00 0a 07 05 83 03 08 00 0a 00                       ..........

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d4 e0       	ldi	r29, 0x04	; 4
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	ec ed       	ldi	r30, 0xDC	; 220
     136:	fb e1       	ldi	r31, 0x1B	; 27
     138:	02 c0       	rjmp	.+4      	; 0x13e <.do_copy_data_start>

0000013a <.do_copy_data_loop>:
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0

0000013e <.do_copy_data_start>:
     13e:	a2 30       	cpi	r26, 0x02	; 2
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <.do_copy_data_loop>

00000144 <__do_clear_bss>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a2 e0       	ldi	r26, 0x02	; 2
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	ad 34       	cpi	r26, 0x4D	; 77
     150:	b1 07       	cpc	r27, r17
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 20 01 	call	0x240	; 0x240 <main>
     158:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     160:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     162:	f9 99       	sbic	0x1f, 1	; 31
     164:	fe cf       	rjmp	.-4      	; 0x162 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     166:	32 bd       	out	0x22, r19	; 34
     168:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     16a:	f8 9a       	sbi	0x1f, 0	; 31
     16c:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
     16e:	08 95       	ret

00000170 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
     170:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     172:	f9 99       	sbic	0x1f, 1	; 31
     174:	fe cf       	rjmp	.-4      	; 0x172 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     176:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     178:	32 bd       	out	0x22, r19	; 34
     17a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     17c:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	fa 9a       	sbi	0x1f, 2	; 31
     184:	f9 9a       	sbi	0x1f, 1	; 31
     186:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
     188:	08 95       	ret

0000018a <readFrets>:
};

//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
int readFrets(int guitarString)
{
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
  	string_port &= ~(1<<guitarString);  // Set the string LOW
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	02 c0       	rjmp	.+4      	; 0x19c <readFrets+0x12>
     198:	22 0f       	add	r18, r18
     19a:	33 1f       	adc	r19, r19
     19c:	8a 95       	dec	r24
     19e:	e2 f7       	brpl	.-8      	; 0x198 <readFrets+0xe>
     1a0:	12 2f       	mov	r17, r18
     1a2:	82 2f       	mov	r24, r18
     1a4:	80 95       	com	r24
     1a6:	89 23       	and	r24, r25
     1a8:	8b b9       	out	0x0b, r24	; 11
     1aa:	84 e1       	ldi	r24, 0x14	; 20
     1ac:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
     1ae:	00 00       	nop
			x--;
     1b0:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
     1b2:	2f ef       	ldi	r18, 0xFF	; 255
     1b4:	8f 3f       	cpi	r24, 0xFF	; 255
     1b6:	92 07       	cpc	r25, r18
     1b8:	d1 f7       	brne	.-12     	; 0x1ae <readFrets+0x24>

	// Then we have to delay for a while, since right after the switch, the pin values
	// jump around a bit
	doXnops(20);	
	// Read the values on the frets
  	int i = fret_pin;               
     1ba:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;
     1bc:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// More delay funcitonality... without these delays, there is some bouncing
     1be:	83 b1       	in	r24, 0x03	; 3
	i = fret_pin;		// on the pins, so the read screws up.
     1c0:	83 b1       	in	r24, 0x03	; 3
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
     1c2:	81 fd       	sbrc	r24, 1
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <readFrets+0x42>
     1c6:	c2 e0       	ldi	r28, 0x02	; 2
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <readFrets+0x46>
     1cc:	c0 e0       	ldi	r28, 0x00	; 0
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
     1d0:	82 fd       	sbrc	r24, 2
     1d2:	03 c0       	rjmp	.+6      	; 0x1da <readFrets+0x50>
     1d4:	a4 e0       	ldi	r26, 0x04	; 4
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <readFrets+0x54>
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
     1de:	83 fd       	sbrc	r24, 3
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <readFrets+0x5e>
     1e2:	e8 e0       	ldi	r30, 0x08	; 8
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <readFrets+0x62>
     1e8:	e0 e0       	ldi	r30, 0x00	; 0
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
     1ec:	84 fd       	sbrc	r24, 4
     1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <readFrets+0x6c>
     1f0:	60 e1       	ldi	r22, 0x10	; 16
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <readFrets+0x70>
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
     1fa:	85 fd       	sbrc	r24, 5
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <readFrets+0x7a>
     1fe:	40 e2       	ldi	r20, 0x20	; 32
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <readFrets+0x7e>
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	50 e0       	ldi	r21, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
     208:	26 b1       	in	r18, 0x06	; 6
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(i & (1<<green_pin))) << 1); //green fret
 	stringState |= ( (!(i & (1<<red_pin))) << 2); //red fret
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	36 95       	lsr	r19
     20e:	27 95       	ror	r18
     210:	36 95       	lsr	r19
     212:	27 95       	ror	r18
     214:	20 95       	com	r18
     216:	30 95       	com	r19
     218:	21 70       	andi	r18, 0x01	; 1
     21a:	30 70       	andi	r19, 0x00	; 0
     21c:	2c 2b       	or	r18, r28
     21e:	3d 2b       	or	r19, r29
 	stringState |= ( (!(i & (1<<yellow_pin))) << 3); //yellow fret
     220:	2a 2b       	or	r18, r26
     222:	3b 2b       	or	r19, r27
 	stringState |= ( (!(i & (1<<blue_pin))) << 4); //blue fret
     224:	2e 2b       	or	r18, r30
     226:	3f 2b       	or	r19, r31
 	stringState |= ( (!(i & (1<<orange_pin))) << 5); //orange fret
     228:	26 2b       	or	r18, r22
     22a:	37 2b       	or	r19, r23
	// Also, if we strummed a string, hold that in the 'zeroth' fret
	i = pick_pin;
 	stringState |= ( (!(i & (1<<strum_pin))) << 0); //pick touching the string

	//Turn the string back HIGH and return
	string_port |= (1<<guitarString); 
     22c:	8b b1       	in	r24, 0x0b	; 11
     22e:	18 2b       	or	r17, r24
     230:	1b b9       	out	0x0b, r17	; 11
     232:	24 2b       	or	r18, r20
     234:	35 2b       	or	r19, r21
	return stringState;
}
     236:	c9 01       	movw	r24, r18
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{
     240:	2f 92       	push	r2
     242:	3f 92       	push	r3
     244:	4f 92       	push	r4
     246:	5f 92       	push	r5
     248:	6f 92       	push	r6
     24a:	7f 92       	push	r7
     24c:	8f 92       	push	r8
     24e:	9f 92       	push	r9
     250:	af 92       	push	r10
     252:	bf 92       	push	r11
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	df 93       	push	r29
     262:	cf 93       	push	r28
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	c5 52       	subi	r28, 0x25	; 37
     26a:	d1 40       	sbci	r29, 0x01	; 1
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
  // Now set up all the communication stuff - initialization routines
  //  set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
  startCommunication();
     276:	0e 94 ba 0a 	call	0x1574	; 0x1574 <startCommunication>

	//Debug stuff - the following goes before the while loop in main()
	int timer;
    DDRB |= 1;
     27a:	20 9a       	sbi	0x04, 0	; 4
  // set PORTB for output
  
  uint8_t string[1];
  uint8_t x = 10;
     27c:	8a e0       	ldi	r24, 0x0A	; 10
     27e:	8a 83       	std	Y+2, r24	; 0x02
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
     280:	ce 01       	movw	r24, r28
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	68 e6       	ldi	r22, 0x68	; 104
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	41 e0       	ldi	r20, 0x01	; 1
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	20 eb       	ldi	r18, 0xB0	; 176
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__eerd_block>

  eeprom_read_block( (void*)&string, (void*)&nonvolitileString, 1);
  if (string[0] == 50)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	be 01       	movw	r22, r28
     298:	6e 5f       	subi	r22, 0xFE	; 254
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	82 33       	cpi	r24, 0x32	; 50
     29e:	11 f4       	brne	.+4      	; 0x2a4 <main+0x64>
  {
  	  x = 250;
     2a0:	8a ef       	ldi	r24, 0xFA	; 250
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <main+0x66>
  	  eeprom_write_block( (void*)&x, (void*)&nonvolitileString, 1);
  }
  else
  {
  	  x = 50;
     2a4:	82 e3       	ldi	r24, 0x32	; 50
     2a6:	8a 83       	std	Y+2, r24	; 0x02
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
     2a8:	88 e6       	ldi	r24, 0x68	; 104
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	41 e0       	ldi	r20, 0x01	; 1
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	28 eb       	ldi	r18, 0xB8	; 184
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__eewr_block>
  	  eeprom_write_block( (void*)&x, (void*)&nonvolitileString, 1);
  }
  timer = x;

	// First, set up the guitar stuff - These functions are stored in guitarInitFunctions.h/.c
	setPins();
     2b8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <setPins>
	setTimer();	
     2bc:	0e 94 8e 04 	call	0x91c	; 0x91c <setTimer>

    // Declaration of variables used in Main()
	int greenTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0}; //These give timing to properly read green buttons on each string.
     2c0:	8c e0       	ldi	r24, 0x0C	; 12
     2c2:	fe 01       	movw	r30, r28
     2c4:	72 96       	adiw	r30, 0x12	; 18
     2c6:	df 01       	movw	r26, r30
     2c8:	98 2f       	mov	r25, r24
     2ca:	1d 92       	st	X+, r1
     2cc:	9a 95       	dec	r25
     2ce:	e9 f7       	brne	.-6      	; 0x2ca <main+0x8a>
	int triedGreen[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};  // Also used for the green button timing thing
     2d0:	fe 01       	movw	r30, r28
     2d2:	7e 96       	adiw	r30, 0x1e	; 30
     2d4:	df 01       	movw	r26, r30
     2d6:	98 2f       	mov	r25, r24
     2d8:	1d 92       	st	X+, r1
     2da:	9a 95       	dec	r25
     2dc:	e9 f7       	brne	.-6      	; 0x2d8 <main+0x98>
	int stringState[6] = {0,0,0,0,0,0}; // This stores an int for each string,
     2de:	fe 01       	movw	r30, r28
     2e0:	ba 96       	adiw	r30, 0x2a	; 42
     2e2:	df 01       	movw	r26, r30
     2e4:	1d 92       	st	X+, r1
     2e6:	8a 95       	dec	r24
     2e8:	e9 f7       	brne	.-6      	; 0x2e4 <main+0xa4>
																	 // controller compares the string presses
																	 // to in order to judge if a button is being
																	 // pressed. It's the size of all the chord combinations,
																	 // but in Note Mode, only the first 5 blocks get looked at. 
	char configMode = 0; // Start in normal mode
	int buttonToAssign = 0; // declare some variables
     2ea:	1e 82       	std	Y+6, r1	; 0x06
     2ec:	1d 82       	std	Y+5, r1	; 0x05
	char plusLock = 0;
     2ee:	1b 82       	std	Y+3, r1	; 0x03
	char previousPlusOn = 0; // This is used as a lock so we don't program all the buttons at once
     2f0:	1c 82       	std	Y+4, r1	; 0x04
	int debounceTimer = 0; // This is used as a global timer for debouncing buttons
     2f2:	18 86       	std	Y+8, r1	; 0x08
     2f4:	1f 82       	std	Y+7, r1	; 0x07
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     2f6:	1d 86       	std	Y+13, r1	; 0x0d
		data->blueOn   = 0;
     2f8:	1c 86       	std	Y+12, r1	; 0x0c
		data->yellowOn = 0;
     2fa:	1b 86       	std	Y+11, r1	; 0x0b
		data->redOn    = 0;
     2fc:	1a 86       	std	Y+10, r1	; 0x0a
		data->greenOn  = 0;
     2fe:	19 86       	std	Y+9, r1	; 0x09
		data->upOn     = 0;
     300:	1e 86       	std	Y+14, r1	; 0x0e
		data->downOn   = 0;
     302:	1f 86       	std	Y+15, r1	; 0x0f
		data->plusOn   = 0;
     304:	18 8a       	std	Y+16, r1	; 0x10
		data->minusOn  = 0;
     306:	19 8a       	std	Y+17, r1	; 0x11
	
	dataForController data;
	clearData(&data); //This function is contained in V1Typedefs.h

	//Debug Stuff - it's complementary code is in ps3interface.h and .c
	DDRC &= ~(1<<5); //Turn 5 on Port C to inputs
     308:	3d 98       	cbi	0x07, 5	; 7
	PORTC |= (1<<5); //Turn off the internal pullup resistor on pin 5
     30a:	45 9a       	sbi	0x08, 5	; 8
     30c:	88 24       	eor	r8, r8
     30e:	99 24       	eor	r9, r9
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     310:	ac e6       	ldi	r26, 0x6C	; 108
     312:	4a 2e       	mov	r4, r26
     314:	51 2c       	mov	r5, r1
     316:	4c 0e       	add	r4, r28
     318:	5d 1e       	adc	r5, r29
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
     31a:	fe e6       	ldi	r31, 0x6E	; 110
     31c:	2f 2e       	mov	r2, r31
     31e:	31 2c       	mov	r3, r1
     320:	2c 0e       	add	r2, r28
     322:	3d 1e       	adc	r3, r29
    while(1){  
	              /* main event loop */
		
		// We first read all the strings for button hits and store them into
		//  our stringState array.  Strum processing is also handled here for now.
        stringState[0] = readFrets(first_string);
     324:	87 e0       	ldi	r24, 0x07	; 7
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     32c:	9b a7       	std	Y+43, r25	; 0x2b
     32e:	8a a7       	std	Y+42, r24	; 0x2a
		stringState[1] = readFrets(second_string);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     338:	9d a7       	std	Y+45, r25	; 0x2d
     33a:	8c a7       	std	Y+44, r24	; 0x2c
		stringState[2] = readFrets(third_string);
     33c:	85 e0       	ldi	r24, 0x05	; 5
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     344:	9f a7       	std	Y+47, r25	; 0x2f
     346:	8e a7       	std	Y+46, r24	; 0x2e
		stringState[3] = readFrets(fourth_string);
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     350:	99 ab       	std	Y+49, r25	; 0x31
     352:	88 ab       	std	Y+48, r24	; 0x30
		stringState[4] = readFrets(fifth_string);
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     35c:	9b ab       	std	Y+51, r25	; 0x33
     35e:	8a ab       	std	Y+50, r24	; 0x32
		stringState[5] = readFrets(sixth_string);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     368:	bc 01       	movw	r22, r24
     36a:	9d ab       	std	Y+53, r25	; 0x35
     36c:	8c ab       	std	Y+52, r24	; 0x34
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     36e:	1d 86       	std	Y+13, r1	; 0x0d
		data->blueOn   = 0;
     370:	1c 86       	std	Y+12, r1	; 0x0c
		data->yellowOn = 0;
     372:	1b 86       	std	Y+11, r1	; 0x0b
		data->redOn    = 0;
     374:	1a 86       	std	Y+10, r1	; 0x0a
		data->greenOn  = 0;
     376:	19 86       	std	Y+9, r1	; 0x09
		data->upOn     = 0;
     378:	1e 86       	std	Y+14, r1	; 0x0e
		data->downOn   = 0;
     37a:	1f 86       	std	Y+15, r1	; 0x0f

// This function just reads our plus and minus buttons and sets the data struct accordingly
inline void readOtherButtons(dataForController* data)
{
	// read our plus and minus buttons
	int i = misc_pin; // check for plus and minus
     37c:	26 b1       	in	r18, 0x06	; 6
     37e:	30 e0       	ldi	r19, 0x00	; 0
	data->plusOn = !(i & (1<<plus_pin)); //Plus and minus are held high normally, but pressing it drops it low
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	84 27       	eor	r24, r20
     388:	95 27       	eor	r25, r21
     38a:	81 70       	andi	r24, 0x01	; 1
     38c:	88 8b       	std	Y+16, r24	; 0x10
	data->minusOn = !(i & (1<<minus_pin));
     38e:	36 95       	lsr	r19
     390:	27 95       	ror	r18
     392:	24 27       	eor	r18, r20
     394:	35 27       	eor	r19, r21
     396:	21 70       	andi	r18, 0x01	; 1
     398:	29 8b       	std	Y+17, r18	; 0x11
		return 0;
}

inline int testForResetButtonPatterns(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     39a:	2a a5       	ldd	r18, Y+42	; 0x2a
     39c:	3b a5       	ldd	r19, Y+43	; 0x2b
     39e:	20 32       	cpi	r18, 0x20	; 32
     3a0:	31 05       	cpc	r19, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0x166>
     3a4:	ed c0       	rjmp	.+474    	; 0x580 <__stack+0x81>
     3a6:	8c a5       	ldd	r24, Y+44	; 0x2c
     3a8:	9d a5       	ldd	r25, Y+45	; 0x2d
     3aa:	89 2b       	or	r24, r25
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x170>
     3ae:	e8 c0       	rjmp	.+464    	; 0x580 <__stack+0x81>
     3b0:	8e a5       	ldd	r24, Y+46	; 0x2e
     3b2:	9f a5       	ldd	r25, Y+47	; 0x2f
     3b4:	80 97       	sbiw	r24, 0x20	; 32
     3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x17a>
     3b8:	e3 c0       	rjmp	.+454    	; 0x580 <__stack+0x81>
     3ba:	88 a9       	ldd	r24, Y+48	; 0x30
     3bc:	99 a9       	ldd	r25, Y+49	; 0x31
     3be:	89 2b       	or	r24, r25
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <main+0x184>
     3c2:	de c0       	rjmp	.+444    	; 0x580 <__stack+0x81>
     3c4:	8a a9       	ldd	r24, Y+50	; 0x32
     3c6:	9b a9       	ldd	r25, Y+51	; 0x33
     3c8:	80 97       	sbiw	r24, 0x20	; 32
     3ca:	09 f0       	breq	.+2      	; 0x3ce <main+0x18e>
     3cc:	d9 c0       	rjmp	.+434    	; 0x580 <__stack+0x81>
     3ce:	61 15       	cp	r22, r1
     3d0:	71 05       	cpc	r23, r1
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x196>
     3d4:	d5 c0       	rjmp	.+426    	; 0x580 <__stack+0x81>
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    buttonStringPatterns[0][0] = 0x0000000; // [0][0] through [0][5] - green button
     3d6:	8e 01       	movw	r16, r28
     3d8:	02 55       	subi	r16, 0x52	; 82
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	f8 01       	movw	r30, r16
     3de:	11 82       	std	Z+1, r1	; 0x01
     3e0:	10 82       	st	Z, r1
	buttonStringPatterns[0][1] = 0b0001100; 
     3e2:	2c e0       	ldi	r18, 0x0C	; 12
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	33 83       	std	Z+3, r19	; 0x03
     3e8:	22 83       	std	Z+2, r18	; 0x02
	buttonStringPatterns[0][2] = 0b0000000;	
     3ea:	15 82       	std	Z+5, r1	; 0x05
     3ec:	14 82       	std	Z+4, r1	; 0x04
	buttonStringPatterns[0][3] = 0b0000110;
     3ee:	66 e0       	ldi	r22, 0x06	; 6
     3f0:	e6 2e       	mov	r14, r22
     3f2:	f1 2c       	mov	r15, r1
     3f4:	f7 82       	std	Z+7, r15	; 0x07
     3f6:	e6 82       	std	Z+6, r14	; 0x06
	buttonStringPatterns[0][4] = 0b0000000;
     3f8:	11 86       	std	Z+9, r1	; 0x09
     3fa:	10 86       	std	Z+8, r1	; 0x08
	buttonStringPatterns[0][5] = 0b0000010;
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	93 87       	std	Z+11, r25	; 0x0b
     402:	82 87       	std	Z+10, r24	; 0x0a

	buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
     404:	95 87       	std	Z+13, r25	; 0x0d
     406:	84 87       	std	Z+12, r24	; 0x0c
	buttonStringPatterns[1][1] = 0b0000000; 
     408:	17 86       	std	Z+15, r1	; 0x0f
     40a:	16 86       	std	Z+14, r1	; 0x0e
	buttonStringPatterns[1][2] = 0b0000001;
     40c:	51 8b       	std	Z+17, r21	; 0x11
     40e:	40 8b       	std	Z+16, r20	; 0x10
	buttonStringPatterns[1][3] = 0b0000000;
     410:	13 8a       	std	Z+19, r1	; 0x13
     412:	12 8a       	std	Z+18, r1	; 0x12
	buttonStringPatterns[1][4] = 0b0000001;
     414:	55 8b       	std	Z+21, r21	; 0x15
     416:	44 8b       	std	Z+20, r20	; 0x14
	buttonStringPatterns[1][5] = 0b0001100;
     418:	37 8b       	std	Z+23, r19	; 0x17
     41a:	26 8b       	std	Z+22, r18	; 0x16

	buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
     41c:	31 8f       	std	Z+25, r19	; 0x19
     41e:	20 8f       	std	Z+24, r18	; 0x18
	buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
     420:	13 8e       	std	Z+27, r1	; 0x1b
     422:	12 8e       	std	Z+26, r1	; 0x1a
	buttonStringPatterns[2][2] = 0b0000110;
     424:	f5 8e       	std	Z+29, r15	; 0x1d
     426:	e4 8e       	std	Z+28, r14	; 0x1c
	buttonStringPatterns[2][3] = 0b0000000;
     428:	17 8e       	std	Z+31, r1	; 0x1f
     42a:	16 8e       	std	Z+30, r1	; 0x1e
	buttonStringPatterns[2][4] = 0b0000010;
     42c:	91 a3       	std	Z+33, r25	; 0x21
     42e:	80 a3       	std	Z+32, r24	; 0x20
	buttonStringPatterns[2][5] = 0b0000000;
     430:	13 a2       	std	Z+35, r1	; 0x23
     432:	12 a2       	std	Z+34, r1	; 0x22
							  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     434:	15 a2       	std	Z+37, r1	; 0x25
     436:	14 a2       	std	Z+36, r1	; 0x24
	buttonStringPatterns[3][1] = 0b0000001; 
     438:	57 a3       	std	Z+39, r21	; 0x27
     43a:	46 a3       	std	Z+38, r20	; 0x26
	buttonStringPatterns[3][2] = 0b0001100;
     43c:	31 a7       	std	Z+41, r19	; 0x29
     43e:	20 a7       	std	Z+40, r18	; 0x28
	buttonStringPatterns[3][3] = 0b0000000;
     440:	13 a6       	std	Z+43, r1	; 0x2b
     442:	12 a6       	std	Z+42, r1	; 0x2a
	buttonStringPatterns[3][4] = 0b0001100;
     444:	35 a7       	std	Z+45, r19	; 0x2d
     446:	24 a7       	std	Z+44, r18	; 0x2c
	buttonStringPatterns[3][5] = 0b0000000;
     448:	17 a6       	std	Z+47, r1	; 0x2f
     44a:	16 a6       	std	Z+46, r1	; 0x2e

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - orange button
     44c:	11 aa       	std	Z+49, r1	; 0x31
     44e:	10 aa       	std	Z+48, r1	; 0x30
	buttonStringPatterns[4][1] = 0b0000110; 
     450:	f3 aa       	std	Z+51, r15	; 0x33
     452:	e2 aa       	std	Z+50, r14	; 0x32
	buttonStringPatterns[4][2] = 0b0000000;
     454:	15 aa       	std	Z+53, r1	; 0x35
     456:	14 aa       	std	Z+52, r1	; 0x34
	buttonStringPatterns[4][3] = 0b0000001;
     458:	57 ab       	std	Z+55, r21	; 0x37
     45a:	46 ab       	std	Z+54, r20	; 0x36
	buttonStringPatterns[4][4] = 0b0000000;
     45c:	11 ae       	std	Z+57, r1	; 0x39
     45e:	10 ae       	std	Z+56, r1	; 0x38
	buttonStringPatterns[4][5] = 0b0000001;
     460:	53 af       	std	Z+59, r21	; 0x3b
     462:	42 af       	std	Z+58, r20	; 0x3a
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	b8 01       	movw	r22, r16
     46a:	4c e3       	ldi	r20, 0x3C	; 60
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	28 eb       	ldi	r18, 0xB8	; 184
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__eewr_block>

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
     476:	8e e0       	ldi	r24, 0x0E	; 14
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	d8 01       	movw	r26, r16
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 93       	st	X, r25
     480:	8e 93       	st	-X, r24
	buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
     482:	13 96       	adiw	r26, 0x03	; 3
     484:	9c 93       	st	X, r25
     486:	8e 93       	st	-X, r24
     488:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
     48a:	15 96       	adiw	r26, 0x05	; 5
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000000;
     492:	17 96       	adiw	r26, 0x07	; 7
     494:	1c 92       	st	X, r1
     496:	1e 92       	st	-X, r1
     498:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
     49a:	19 96       	adiw	r26, 0x09	; 9
     49c:	1c 92       	st	X, r1
     49e:	1e 92       	st	-X, r1
     4a0:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0001110;
     4a2:	1b 96       	adiw	r26, 0x0b	; 11
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
     4a8:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
     4aa:	1d 96       	adiw	r26, 0x0d	; 13
     4ac:	1c 92       	st	X, r1
     4ae:	1e 92       	st	-X, r1
     4b0:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
     4b2:	1f 96       	adiw	r26, 0x0f	; 15
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0001110;
     4ba:	51 96       	adiw	r26, 0x11	; 17
     4bc:	9c 93       	st	X, r25
     4be:	8e 93       	st	-X, r24
     4c0:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
     4c2:	53 96       	adiw	r26, 0x13	; 19
     4c4:	1c 92       	st	X, r1
     4c6:	1e 92       	st	-X, r1
     4c8:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0001110;
     4ca:	55 96       	adiw	r26, 0x15	; 21
     4cc:	9c 93       	st	X, r25
     4ce:	8e 93       	st	-X, r24
     4d0:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0000000;
     4d2:	57 96       	adiw	r26, 0x17	; 23
     4d4:	1c 92       	st	X, r1
     4d6:	1e 92       	st	-X, r1
     4d8:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
     4da:	59 96       	adiw	r26, 0x19	; 25
     4dc:	1c 92       	st	X, r1
     4de:	1e 92       	st	-X, r1
     4e0:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
     4e2:	5b 96       	adiw	r26, 0x1b	; 27
     4e4:	fc 92       	st	X, r15
     4e6:	ee 92       	st	-X, r14
     4e8:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
     4ea:	5d 96       	adiw	r26, 0x1d	; 29
     4ec:	fc 92       	st	X, r15
     4ee:	ee 92       	st	-X, r14
     4f0:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000110;
     4f2:	5f 96       	adiw	r26, 0x1f	; 31
     4f4:	fc 92       	st	X, r15
     4f6:	ee 92       	st	-X, r14
     4f8:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000000;
     4fa:	91 96       	adiw	r26, 0x21	; 33
     4fc:	1c 92       	st	X, r1
     4fe:	1e 92       	st	-X, r1
     500:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
     502:	93 96       	adiw	r26, 0x23	; 35
     504:	1c 92       	st	X, r1
     506:	1e 92       	st	-X, r1
     508:	92 97       	sbiw	r26, 0x22	; 34
									  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     50a:	95 96       	adiw	r26, 0x25	; 37
     50c:	1c 92       	st	X, r1
     50e:	1e 92       	st	-X, r1
     510:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000000; // This an A chord
     512:	97 96       	adiw	r26, 0x27	; 39
     514:	1c 92       	st	X, r1
     516:	1e 92       	st	-X, r1
     518:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0000110;
     51a:	99 96       	adiw	r26, 0x29	; 41
     51c:	fc 92       	st	X, r15
     51e:	ee 92       	st	-X, r14
     520:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000110;
     522:	9b 96       	adiw	r26, 0x2b	; 43
     524:	fc 92       	st	X, r15
     526:	ee 92       	st	-X, r14
     528:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0000110;
     52a:	9d 96       	adiw	r26, 0x2d	; 45
     52c:	fc 92       	st	X, r15
     52e:	ee 92       	st	-X, r14
     530:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
     532:	9f 96       	adiw	r26, 0x2f	; 47
     534:	1c 92       	st	X, r1
     536:	1e 92       	st	-X, r1
     538:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
     53a:	d1 96       	adiw	r26, 0x31	; 49
     53c:	1c 92       	st	X, r1
     53e:	1e 92       	st	-X, r1
     540:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
     542:	d3 96       	adiw	r26, 0x33	; 51
     544:	1c 92       	st	X, r1
     546:	1e 92       	st	-X, r1
     548:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
     54a:	d5 96       	adiw	r26, 0x35	; 53
     54c:	1c 92       	st	X, r1
     54e:	1e 92       	st	-X, r1
     550:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0001110;
     552:	d7 96       	adiw	r26, 0x37	; 55
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
     558:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0001110;
     55a:	d9 96       	adiw	r26, 0x39	; 57
     55c:	9c 93       	st	X, r25
     55e:	8e 93       	st	-X, r24
     560:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0001110;
     562:	db 96       	adiw	r26, 0x3b	; 59
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	da 97       	sbiw	r26, 0x3a	; 58
     56a:	88 e7       	ldi	r24, 0x78	; 120
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	b8 01       	movw	r22, r16
     570:	48 e7       	ldi	r20, 0x78	; 120
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	28 eb       	ldi	r18, 0xB8	; 184
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__eewr_block>
     57c:	99 24       	eor	r9, r9
     57e:	f0 c0       	rjmp	.+480    	; 0x760 <__stack+0x261>
			//if so, reset the button mappings to default and the play mode to chords.
			controllerMode = FRETS;
			setEepromToDefault(&notesModeButtonPatterns, &chordModeButtonPatterns); // Stored in buttonStringPatterns.h
		}

		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
     580:	b2 e0       	ldi	r27, 0x02	; 2
     582:	9b 16       	cp	r9, r27
     584:	21 f0       	breq	.+8      	; 0x58e <__stack+0x8f>
     586:	e4 e0       	ldi	r30, 0x04	; 4
     588:	9e 16       	cp	r9, r30
     58a:	09 f0       	breq	.+2      	; 0x58e <__stack+0x8f>
     58c:	e9 c0       	rjmp	.+466    	; 0x760 <__stack+0x261>
		{
			// Check to see if we're trying to enter Config Mode; disabled if we're playing with frets
			if (configMode == 0)
     58e:	88 20       	and	r8, r8
     590:	09 f0       	breq	.+2      	; 0x594 <__stack+0x95>
     592:	91 c0       	rjmp	.+290    	; 0x6b6 <__stack+0x1b7>

// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.
inline char testForConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     594:	20 32       	cpi	r18, 0x20	; 32
     596:	31 05       	cpc	r19, r1
     598:	09 f0       	breq	.+2      	; 0x59c <__stack+0x9d>
     59a:	8a c0       	rjmp	.+276    	; 0x6b0 <__stack+0x1b1>
     59c:	8c a5       	ldd	r24, Y+44	; 0x2c
     59e:	9d a5       	ldd	r25, Y+45	; 0x2d
     5a0:	80 97       	sbiw	r24, 0x20	; 32
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <__stack+0xa7>
     5a4:	85 c0       	rjmp	.+266    	; 0x6b0 <__stack+0x1b1>
     5a6:	8e a5       	ldd	r24, Y+46	; 0x2e
     5a8:	9f a5       	ldd	r25, Y+47	; 0x2f
     5aa:	80 97       	sbiw	r24, 0x20	; 32
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__stack+0xb1>
     5ae:	80 c0       	rjmp	.+256    	; 0x6b0 <__stack+0x1b1>
     5b0:	88 a9       	ldd	r24, Y+48	; 0x30
     5b2:	99 a9       	ldd	r25, Y+49	; 0x31
     5b4:	89 2b       	or	r24, r25
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__stack+0xbb>
     5b8:	7b c0       	rjmp	.+246    	; 0x6b0 <__stack+0x1b1>
     5ba:	8a a9       	ldd	r24, Y+50	; 0x32
     5bc:	9b a9       	ldd	r25, Y+51	; 0x33
     5be:	89 2b       	or	r24, r25
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <__stack+0xc5>
     5c2:	76 c0       	rjmp	.+236    	; 0x6b0 <__stack+0x1b1>
     5c4:	61 15       	cp	r22, r1
     5c6:	71 05       	cpc	r23, r1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__stack+0xcd>
     5ca:	72 c0       	rjmp	.+228    	; 0x6b0 <__stack+0x1b1>
			{
				configMode = testForConfigMode(stringState);
				
				// If we're playing with notes, when we enter config mode, we need to clear the 
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	9f 16       	cp	r9, r31
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <__stack+0xd5>
     5d2:	6c c0       	rjmp	.+216    	; 0x6ac <__stack+0x1ad>
	return stringState;
}

inline void clearButtonStringPatterns(int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
     5d4:	1f aa       	std	Y+55, r1	; 0x37
     5d6:	1e aa       	std	Y+54, r1	; 0x36
     5d8:	19 ae       	std	Y+57, r1	; 0x39
     5da:	18 ae       	std	Y+56, r1	; 0x38
	buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
     5dc:	1b ae       	std	Y+59, r1	; 0x3b
     5de:	1a ae       	std	Y+58, r1	; 0x3a
     5e0:	1d ae       	std	Y+61, r1	; 0x3d
     5e2:	1c ae       	std	Y+60, r1	; 0x3c
	buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
     5e4:	1f ae       	std	Y+63, r1	; 0x3f
     5e6:	1e ae       	std	Y+62, r1	; 0x3e
     5e8:	22 96       	adiw	r28, 0x02	; 2
     5ea:	1f ae       	std	Y+63, r1	; 0x3f
     5ec:	1e ae       	std	Y+62, r1	; 0x3e
     5ee:	22 97       	sbiw	r28, 0x02	; 2
	buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
     5f0:	24 96       	adiw	r28, 0x04	; 4
     5f2:	1f ae       	std	Y+63, r1	; 0x3f
     5f4:	1e ae       	std	Y+62, r1	; 0x3e
     5f6:	24 97       	sbiw	r28, 0x04	; 4
     5f8:	26 96       	adiw	r28, 0x06	; 6
     5fa:	1f ae       	std	Y+63, r1	; 0x3f
     5fc:	1e ae       	std	Y+62, r1	; 0x3e
     5fe:	26 97       	sbiw	r28, 0x06	; 6
	buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
     600:	28 96       	adiw	r28, 0x08	; 8
     602:	1f ae       	std	Y+63, r1	; 0x3f
     604:	1e ae       	std	Y+62, r1	; 0x3e
     606:	28 97       	sbiw	r28, 0x08	; 8
     608:	2a 96       	adiw	r28, 0x0a	; 10
     60a:	1f ae       	std	Y+63, r1	; 0x3f
     60c:	1e ae       	std	Y+62, r1	; 0x3e
     60e:	2a 97       	sbiw	r28, 0x0a	; 10
	buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
     610:	2c 96       	adiw	r28, 0x0c	; 12
     612:	1f ae       	std	Y+63, r1	; 0x3f
     614:	1e ae       	std	Y+62, r1	; 0x3e
     616:	2c 97       	sbiw	r28, 0x0c	; 12
     618:	2e 96       	adiw	r28, 0x0e	; 14
     61a:	1f ae       	std	Y+63, r1	; 0x3f
     61c:	1e ae       	std	Y+62, r1	; 0x3e
     61e:	2e 97       	sbiw	r28, 0x0e	; 14
	buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
     620:	60 96       	adiw	r28, 0x10	; 16
     622:	1f ae       	std	Y+63, r1	; 0x3f
     624:	1e ae       	std	Y+62, r1	; 0x3e
     626:	60 97       	sbiw	r28, 0x10	; 16
     628:	62 96       	adiw	r28, 0x12	; 18
     62a:	1f ae       	std	Y+63, r1	; 0x3f
     62c:	1e ae       	std	Y+62, r1	; 0x3e
     62e:	62 97       	sbiw	r28, 0x12	; 18
	buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
     630:	64 96       	adiw	r28, 0x14	; 20
     632:	1f ae       	std	Y+63, r1	; 0x3f
     634:	1e ae       	std	Y+62, r1	; 0x3e
     636:	64 97       	sbiw	r28, 0x14	; 20
     638:	66 96       	adiw	r28, 0x16	; 22
     63a:	1f ae       	std	Y+63, r1	; 0x3f
     63c:	1e ae       	std	Y+62, r1	; 0x3e
     63e:	66 97       	sbiw	r28, 0x16	; 22
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
     640:	68 96       	adiw	r28, 0x18	; 24
     642:	1f ae       	std	Y+63, r1	; 0x3f
     644:	1e ae       	std	Y+62, r1	; 0x3e
     646:	68 97       	sbiw	r28, 0x18	; 24
     648:	6a 96       	adiw	r28, 0x1a	; 26
     64a:	1f ae       	std	Y+63, r1	; 0x3f
     64c:	1e ae       	std	Y+62, r1	; 0x3e
     64e:	6a 97       	sbiw	r28, 0x1a	; 26
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
     650:	6c 96       	adiw	r28, 0x1c	; 28
     652:	1f ae       	std	Y+63, r1	; 0x3f
     654:	1e ae       	std	Y+62, r1	; 0x3e
     656:	6c 97       	sbiw	r28, 0x1c	; 28
     658:	6e 96       	adiw	r28, 0x1e	; 30
     65a:	1f ae       	std	Y+63, r1	; 0x3f
     65c:	1e ae       	std	Y+62, r1	; 0x3e
     65e:	6e 97       	sbiw	r28, 0x1e	; 30
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
     660:	a0 96       	adiw	r28, 0x20	; 32
     662:	1f ae       	std	Y+63, r1	; 0x3f
     664:	1e ae       	std	Y+62, r1	; 0x3e
     666:	a0 97       	sbiw	r28, 0x20	; 32
     668:	a2 96       	adiw	r28, 0x22	; 34
     66a:	1f ae       	std	Y+63, r1	; 0x3f
     66c:	1e ae       	std	Y+62, r1	; 0x3e
     66e:	a2 97       	sbiw	r28, 0x22	; 34
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
     670:	a4 96       	adiw	r28, 0x24	; 36
     672:	1f ae       	std	Y+63, r1	; 0x3f
     674:	1e ae       	std	Y+62, r1	; 0x3e
     676:	a4 97       	sbiw	r28, 0x24	; 36
     678:	a6 96       	adiw	r28, 0x26	; 38
     67a:	1f ae       	std	Y+63, r1	; 0x3f
     67c:	1e ae       	std	Y+62, r1	; 0x3e
     67e:	a6 97       	sbiw	r28, 0x26	; 38
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
     680:	a8 96       	adiw	r28, 0x28	; 40
     682:	1f ae       	std	Y+63, r1	; 0x3f
     684:	1e ae       	std	Y+62, r1	; 0x3e
     686:	a8 97       	sbiw	r28, 0x28	; 40
     688:	aa 96       	adiw	r28, 0x2a	; 42
     68a:	1f ae       	std	Y+63, r1	; 0x3f
     68c:	1e ae       	std	Y+62, r1	; 0x3e
     68e:	aa 97       	sbiw	r28, 0x2a	; 42
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     690:	ac 96       	adiw	r28, 0x2c	; 44
     692:	1f ae       	std	Y+63, r1	; 0x3f
     694:	1e ae       	std	Y+62, r1	; 0x3e
     696:	ac 97       	sbiw	r28, 0x2c	; 44
     698:	d2 01       	movw	r26, r4
     69a:	1d 92       	st	X+, r1
     69c:	1c 92       	st	X, r1
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
     69e:	f1 01       	movw	r30, r2
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	10 82       	st	Z, r1
     6a4:	e2 96       	adiw	r28, 0x32	; 50
     6a6:	1f ae       	std	Y+63, r1	; 0x3f
     6a8:	1e ae       	std	Y+62, r1	; 0x3e
     6aa:	e2 97       	sbiw	r28, 0x32	; 50
     6ac:	88 24       	eor	r8, r8
     6ae:	83 94       	inc	r8
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
				{
					clearButtonStringPatterns(buttonStringPatterns);
				}
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
     6b0:	1e 82       	std	Y+6, r1	; 0x06
     6b2:	1d 82       	std	Y+5, r1	; 0x05
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
     6b4:	1b 82       	std	Y+3, r1	; 0x03
			}

			// Config Mode operation
			if (configMode == 1) 
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	8f 16       	cp	r8, r31
     6ba:	09 f0       	breq	.+2      	; 0x6be <__stack+0x1bf>
     6bc:	51 c0       	rjmp	.+162    	; 0x760 <__stack+0x261>
}

//This function tests to see if we're pressing the correct string combination to end config mode
inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     6be:	23 2b       	or	r18, r19
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <__stack+0x1c5>
     6c2:	e9 c0       	rjmp	.+466    	; 0x896 <__stack+0x397>
     6c4:	8c a5       	ldd	r24, Y+44	; 0x2c
     6c6:	9d a5       	ldd	r25, Y+45	; 0x2d
     6c8:	80 97       	sbiw	r24, 0x20	; 32
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__stack+0x1cf>
     6cc:	e4 c0       	rjmp	.+456    	; 0x896 <__stack+0x397>
     6ce:	8e a5       	ldd	r24, Y+46	; 0x2e
     6d0:	9f a5       	ldd	r25, Y+47	; 0x2f
     6d2:	80 97       	sbiw	r24, 0x20	; 32
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <__stack+0x1d9>
     6d6:	df c0       	rjmp	.+446    	; 0x896 <__stack+0x397>
     6d8:	88 a9       	ldd	r24, Y+48	; 0x30
     6da:	99 a9       	ldd	r25, Y+49	; 0x31
     6dc:	80 97       	sbiw	r24, 0x20	; 32
     6de:	09 f0       	breq	.+2      	; 0x6e2 <__stack+0x1e3>
     6e0:	da c0       	rjmp	.+436    	; 0x896 <__stack+0x397>
     6e2:	8a a9       	ldd	r24, Y+50	; 0x32
     6e4:	9b a9       	ldd	r25, Y+51	; 0x33
     6e6:	89 2b       	or	r24, r25
     6e8:	09 f0       	breq	.+2      	; 0x6ec <__stack+0x1ed>
     6ea:	d5 c0       	rjmp	.+426    	; 0x896 <__stack+0x397>
     6ec:	67 2b       	or	r22, r23
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <__stack+0x1f3>
     6f0:	d2 c0       	rjmp	.+420    	; 0x896 <__stack+0x397>
				if (testForEndConfigMode(stringState))
					{
						// Now save this new button mapping to the EEPROM 
						// Since we're already passing in buttonsStringPatterns
						// as a pointer, we don't use the '&' operator
						if (controllerMode == NOTES)
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	98 16       	cp	r9, r24
     6f6:	41 f4       	brne	.+16     	; 0x708 <__stack+0x209>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	be 01       	movw	r22, r28
     6fe:	6a 5c       	subi	r22, 0xCA	; 202
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	4c e3       	ldi	r20, 0x3C	; 60
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	27 c0       	rjmp	.+78     	; 0x756 <__stack+0x257>
							eeprom_write_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
						else if (controllerMode == CHORDS)
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	99 16       	cp	r9, r25
     70c:	61 f5       	brne	.+88     	; 0x766 <__stack+0x267>
     70e:	88 e7       	ldi	r24, 0x78	; 120
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	be 01       	movw	r22, r28
     714:	6a 5c       	subi	r22, 0xCA	; 202
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	1c c0       	rjmp	.+56     	; 0x752 <__stack+0x253>
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	05 97       	sbiw	r24, 0x05	; 5
     720:	0c f4       	brge	.+2      	; 0x724 <__stack+0x225>
     722:	ad c0       	rjmp	.+346    	; 0x87e <__stack+0x37f>
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	88 23       	and	r24, r24
     728:	09 f0       	breq	.+2      	; 0x72c <__stack+0x22d>
     72a:	a9 c0       	rjmp	.+338    	; 0x87e <__stack+0x37f>
					{
						buttonToAssign = 0;
     72c:	1e 82       	std	Y+6, r1	; 0x06
     72e:	1d 82       	std	Y+5, r1	; 0x05
     730:	a6 c0       	rjmp	.+332    	; 0x87e <__stack+0x37f>
					}
					
					// Or if we've programmed all 10 notes in Chord mode, exit programming mode
					if (controllerMode == CHORDS && buttonToAssign >= NUM_CHORDS_BUTTONS && plusLock == 0 )
     732:	a4 e0       	ldi	r26, 0x04	; 4
     734:	9a 16       	cp	r9, r26
     736:	09 f0       	breq	.+2      	; 0x73a <__stack+0x23b>
     738:	a2 c0       	rjmp	.+324    	; 0x87e <__stack+0x37f>
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	0a 97       	sbiw	r24, 0x0a	; 10
     740:	0c f4       	brge	.+2      	; 0x744 <__stack+0x245>
     742:	9d c0       	rjmp	.+314    	; 0x87e <__stack+0x37f>
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	88 23       	and	r24, r24
     748:	09 f0       	breq	.+2      	; 0x74c <__stack+0x24d>
     74a:	99 c0       	rjmp	.+306    	; 0x87e <__stack+0x37f>
     74c:	88 e7       	ldi	r24, 0x78	; 120
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	b3 01       	movw	r22, r6
     752:	48 e7       	ldi	r20, 0x78	; 120
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	28 eb       	ldi	r18, 0xB8	; 184
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__eewr_block>
     75e:	03 c0       	rjmp	.+6      	; 0x766 <__stack+0x267>
					}
		}	}	}	 // End of Config Mode code

		
		// Normal operation
		if (configMode == 0)
     760:	88 20       	and	r8, r8
     762:	09 f0       	breq	.+2      	; 0x766 <__stack+0x267>
     764:	8c c0       	rjmp	.+280    	; 0x87e <__stack+0x37f>
		return 0;
}

inline int testForMinusChord(int stringState[])
{
	if ((stringState[0] == 0b00011110) &&
     766:	8a a5       	ldd	r24, Y+42	; 0x2a
     768:	9b a5       	ldd	r25, Y+43	; 0x2b
     76a:	8e 31       	cpi	r24, 0x1E	; 30
     76c:	91 05       	cpc	r25, r1
     76e:	e1 f4       	brne	.+56     	; 0x7a8 <__stack+0x2a9>
     770:	8c a5       	ldd	r24, Y+44	; 0x2c
     772:	9d a5       	ldd	r25, Y+45	; 0x2d
     774:	4e 97       	sbiw	r24, 0x1e	; 30
     776:	09 f0       	breq	.+2      	; 0x77a <__stack+0x27b>
     778:	67 c0       	rjmp	.+206    	; 0x848 <__stack+0x349>
     77a:	8e a5       	ldd	r24, Y+46	; 0x2e
     77c:	9f a5       	ldd	r25, Y+47	; 0x2f
     77e:	4e 97       	sbiw	r24, 0x1e	; 30
     780:	09 f0       	breq	.+2      	; 0x784 <__stack+0x285>
     782:	62 c0       	rjmp	.+196    	; 0x848 <__stack+0x349>
     784:	88 a9       	ldd	r24, Y+48	; 0x30
     786:	99 a9       	ldd	r25, Y+49	; 0x31
     788:	4e 97       	sbiw	r24, 0x1e	; 30
     78a:	09 f0       	breq	.+2      	; 0x78e <__stack+0x28f>
     78c:	5d c0       	rjmp	.+186    	; 0x848 <__stack+0x349>
     78e:	8a a9       	ldd	r24, Y+50	; 0x32
     790:	9b a9       	ldd	r25, Y+51	; 0x33
     792:	4e 97       	sbiw	r24, 0x1e	; 30
     794:	09 f0       	breq	.+2      	; 0x798 <__stack+0x299>
     796:	58 c0       	rjmp	.+176    	; 0x848 <__stack+0x349>
     798:	8c a9       	ldd	r24, Y+52	; 0x34
     79a:	9d a9       	ldd	r25, Y+53	; 0x35
     79c:	4e 97       	sbiw	r24, 0x1e	; 30
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__stack+0x2a3>
     7a0:	53 c0       	rjmp	.+166    	; 0x848 <__stack+0x349>
		{
			//Test if Minus is being played by the chord instead of the button
			// This means it won't get read in config mode, which is good.
			if(testForMinusChord(stringState))
				data.minusOn = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	89 8b       	std	Y+17, r24	; 0x11
     7a6:	50 c0       	rjmp	.+160    	; 0x848 <__stack+0x349>
}

inline int testForSwitchModes(int stringState[])
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00000000) &&
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <__stack+0x2af>
     7ac:	4d c0       	rjmp	.+154    	; 0x848 <__stack+0x349>
     7ae:	8c a5       	ldd	r24, Y+44	; 0x2c
     7b0:	9d a5       	ldd	r25, Y+45	; 0x2d
     7b2:	89 2b       	or	r24, r25
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__stack+0x2b9>
     7b6:	48 c0       	rjmp	.+144    	; 0x848 <__stack+0x349>
     7b8:	8e a5       	ldd	r24, Y+46	; 0x2e
     7ba:	9f a5       	ldd	r25, Y+47	; 0x2f
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	91 05       	cpc	r25, r1
     7c0:	89 f4       	brne	.+34     	; 0x7e4 <__stack+0x2e5>
     7c2:	88 a9       	ldd	r24, Y+48	; 0x30
     7c4:	99 a9       	ldd	r25, Y+49	; 0x31
     7c6:	80 97       	sbiw	r24, 0x20	; 32
     7c8:	09 f0       	breq	.+2      	; 0x7cc <__stack+0x2cd>
     7ca:	3e c0       	rjmp	.+124    	; 0x848 <__stack+0x349>
     7cc:	8a a9       	ldd	r24, Y+50	; 0x32
     7ce:	9b a9       	ldd	r25, Y+51	; 0x33
     7d0:	80 97       	sbiw	r24, 0x20	; 32
     7d2:	d1 f5       	brne	.+116    	; 0x848 <__stack+0x349>
     7d4:	8c a9       	ldd	r24, Y+52	; 0x34
     7d6:	9d a9       	ldd	r25, Y+53	; 0x35
     7d8:	89 2b       	or	r24, r25
     7da:	b1 f5       	brne	.+108    	; 0x848 <__stack+0x349>
static inline void switchPlayModes(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if (testForSwitchModes(stringState))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
     7dc:	90 fc       	sbrc	r9, 0
     7de:	34 c0       	rjmp	.+104    	; 0x848 <__stack+0x349>
			{++*controllerMode;}  //This puts it into a transitional mode
     7e0:	93 94       	inc	r9
     7e2:	32 c0       	rjmp	.+100    	; 0x848 <__stack+0x349>
		return 0;
}

inline int testForNoStringsPressed(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     7e4:	89 2b       	or	r24, r25
     7e6:	81 f5       	brne	.+96     	; 0x848 <__stack+0x349>
     7e8:	88 a9       	ldd	r24, Y+48	; 0x30
     7ea:	99 a9       	ldd	r25, Y+49	; 0x31
     7ec:	89 2b       	or	r24, r25
     7ee:	61 f5       	brne	.+88     	; 0x848 <__stack+0x349>
     7f0:	8a a9       	ldd	r24, Y+50	; 0x32
     7f2:	9b a9       	ldd	r25, Y+51	; 0x33
     7f4:	89 2b       	or	r24, r25
     7f6:	41 f5       	brne	.+80     	; 0x848 <__stack+0x349>
     7f8:	8c a9       	ldd	r24, Y+52	; 0x34
     7fa:	9d a9       	ldd	r25, Y+53	; 0x35
     7fc:	89 2b       	or	r24, r25
     7fe:	21 f5       	brne	.+72     	; 0x848 <__stack+0x349>
	}
	// And if we're not pressing that anymore, switch from the transitional mode to the regular mode,
	//  resetting the button patterns as necessary
	else if(testForNoStringsPressed(stringState)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
     800:	b5 e0       	ldi	r27, 0x05	; 5
     802:	9b 16       	cp	r9, r27
     804:	11 f4       	brne	.+4      	; 0x80a <__stack+0x30b>
     806:	99 24       	eor	r9, r9
     808:	1f c0       	rjmp	.+62     	; 0x848 <__stack+0x349>
			{*controllerMode = FRETS;}

		// Now, reset the buttonStringPattern array to be appropriate for the mode
		// For this, we'll read it from the EEPROM memory.
		else if (*controllerMode  == FRETS_TO_NOTES)
     80a:	e1 e0       	ldi	r30, 0x01	; 1
     80c:	9e 16       	cp	r9, r30
     80e:	69 f4       	brne	.+26     	; 0x82a <__stack+0x32b>
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
     810:	ce 01       	movw	r24, r28
     812:	c6 96       	adiw	r24, 0x36	; 54
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	4c e3       	ldi	r20, 0x3C	; 60
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	20 eb       	ldi	r18, 0xB0	; 176
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__eerd_block>
     824:	52 e0       	ldi	r21, 0x02	; 2
     826:	95 2e       	mov	r9, r21
     828:	0f c0       	rjmp	.+30     	; 0x848 <__stack+0x349>
		{
			// Notice, we're already passing in buttonStringPatterns as an address, so the EEPROM read looks a bit strange
			eeprom_read_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
     82a:	f3 e0       	ldi	r31, 0x03	; 3
     82c:	9f 16       	cp	r9, r31
     82e:	61 f4       	brne	.+24     	; 0x848 <__stack+0x349>
     830:	ce 01       	movw	r24, r28
     832:	c6 96       	adiw	r24, 0x36	; 54
     834:	68 e7       	ldi	r22, 0x78	; 120
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	48 e7       	ldi	r20, 0x78	; 120
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	20 eb       	ldi	r18, 0xB0	; 176
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__eerd_block>
     844:	44 e0       	ldi	r20, 0x04	; 4
     846:	94 2e       	mov	r9, r20
			switchPlayModes(stringState, buttonStringPatterns, &controllerMode);

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
     848:	69 2d       	mov	r22, r9
     84a:	ce 01       	movw	r24, r28
     84c:	09 96       	adiw	r24, 0x09	; 9
     84e:	90 fc       	sbrc	r9, 0
     850:	12 c0       	rjmp	.+36     	; 0x876 <__stack+0x377>
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
     852:	be 01       	movw	r22, r28
     854:	66 5d       	subi	r22, 0xD6	; 214
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	ae 01       	movw	r20, r28
     85a:	4a 5c       	subi	r20, 0xCA	; 202
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	29 2d       	mov	r18, r9
     860:	8e 01       	movw	r16, r28
     862:	0e 5e       	subi	r16, 0xEE	; 238
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	3e e1       	ldi	r19, 0x1E	; 30
     868:	e3 2e       	mov	r14, r19
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	0e 94 8c 08 	call	0x1118	; 0x1118 <processStringState>
     874:	03 c0       	rjmp	.+6      	; 0x87c <__stack+0x37d>
			}
			else
			{   // Now, if we're in a transitional controller mode, we'll forget that data and substitue 
				// visual cue data to show that we're changing to a specific mode
				//  The function itself can be found in processStringState.h/.c
				displayTransitionState(&data, controllerMode);
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 a3 08 	call	0x1146	; 0x1146 <displayTransitionState>
     87c:	88 24       	eor	r8, r8
		}
			    
		// Now our processing is complete, so using those button presses, we set up the 
		// button data packet. This function depends on the console and is 
		// set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
		sendData(data);
     87e:	09 85       	ldd	r16, Y+9	; 0x09
     880:	1a 85       	ldd	r17, Y+10	; 0x0a
     882:	2b 85       	ldd	r18, Y+11	; 0x0b
     884:	3c 85       	ldd	r19, Y+12	; 0x0c
     886:	4d 85       	ldd	r20, Y+13	; 0x0d
     888:	5e 85       	ldd	r21, Y+14	; 0x0e
     88a:	6f 85       	ldd	r22, Y+15	; 0x0f
     88c:	78 89       	ldd	r23, Y+16	; 0x10
     88e:	89 89       	ldd	r24, Y+17	; 0x11
     890:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sendData>
     894:	47 cd       	rjmp	.-1394   	; 0x324 <main+0xe4>
				else
				{
					// Now set up the data packet to the interface layer to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					//  The function itself can be found in processStringState.h/.c
					configSetButtonData(&data, &buttonToAssign, buttonStringPatterns, stringState, controllerMode,
     896:	b6 e3       	ldi	r27, 0x36	; 54
     898:	6b 2e       	mov	r6, r27
     89a:	71 2c       	mov	r7, r1
     89c:	6c 0e       	add	r6, r28
     89e:	7d 1e       	adc	r7, r29
     8a0:	ce 01       	movw	r24, r28
     8a2:	09 96       	adiw	r24, 0x09	; 9
     8a4:	be 01       	movw	r22, r28
     8a6:	6b 5f       	subi	r22, 0xFB	; 251
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	a3 01       	movw	r20, r6
     8ac:	9e 01       	movw	r18, r28
     8ae:	26 5d       	subi	r18, 0xD6	; 214
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	09 2d       	mov	r16, r9
     8b4:	a3 e0       	ldi	r26, 0x03	; 3
     8b6:	ea 2e       	mov	r14, r26
     8b8:	f1 2c       	mov	r15, r1
     8ba:	ec 0e       	add	r14, r28
     8bc:	fd 1e       	adc	r15, r29
     8be:	f4 e0       	ldi	r31, 0x04	; 4
     8c0:	cf 2e       	mov	r12, r31
     8c2:	d1 2c       	mov	r13, r1
     8c4:	cc 0e       	add	r12, r28
     8c6:	dd 1e       	adc	r13, r29
     8c8:	e7 e0       	ldi	r30, 0x07	; 7
     8ca:	ae 2e       	mov	r10, r30
     8cc:	b1 2c       	mov	r11, r1
     8ce:	ac 0e       	add	r10, r28
     8d0:	bd 1e       	adc	r11, r29
     8d2:	0e 94 b9 08 	call	0x1172	; 0x1172 <configSetButtonData>
											&plusLock, &previousPlusOn, &debounceTimer);
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
     8d6:	18 8a       	std	Y+16, r1	; 0x10
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	98 16       	cp	r9, r24
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__stack+0x3e1>
     8de:	29 cf       	rjmp	.-430    	; 0x732 <__stack+0x233>
     8e0:	1c cf       	rjmp	.-456    	; 0x71a <__stack+0x21b>

000008e2 <setPins>:
#include "guitarInitFunctions.h"

void setPins(void)
{
	// Set the fret pins as input pins, with internal resistor
	fret_ddr &= ~(1<<green_pin);        // input
     8e2:	21 98       	cbi	0x04, 1	; 4
	fret_port |= (1<<green_pin);		//pull-up enabled	
     8e4:	29 9a       	sbi	0x05, 1	; 5
	fret_ddr &= ~(1<<red_pin);
     8e6:	22 98       	cbi	0x04, 2	; 4
	fret_port |= (1<<red_pin);
     8e8:	2a 9a       	sbi	0x05, 2	; 5
	fret_ddr &= ~(1<<yellow_pin);
     8ea:	23 98       	cbi	0x04, 3	; 4
	fret_port |= (1<<yellow_pin);
     8ec:	2b 9a       	sbi	0x05, 3	; 5
	fret_ddr &= ~(1<<blue_pin);
     8ee:	24 98       	cbi	0x04, 4	; 4
	fret_port |= (1<<blue_pin);
     8f0:	2c 9a       	sbi	0x05, 4	; 5
	fret_ddr &= ~(1<<orange_pin);
     8f2:	25 98       	cbi	0x04, 5	; 4
	fret_port |= (1<<orange_pin);
     8f4:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	misc_ddr &= ~(1<<plus_pin);
     8f6:	38 98       	cbi	0x07, 0	; 7
	misc_port |= (1<<plus_pin);
     8f8:	40 9a       	sbi	0x08, 0	; 8
	misc_ddr &= ~(1<<minus_pin);
     8fa:	39 98       	cbi	0x07, 1	; 7
	misc_port |= (1<<minus_pin);
     8fc:	41 9a       	sbi	0x08, 1	; 8

	pick_ddr &= ~(1<<strum_pin);
     8fe:	3a 98       	cbi	0x07, 2	; 7
	pick_port |= (1<<strum_pin);
     900:	42 9a       	sbi	0x08, 2	; 8

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	string_ddr |= (1<<first_string);  //output
     902:	57 9a       	sbi	0x0a, 7	; 10
	string_port |= (1<<first_string); // set high
     904:	5f 9a       	sbi	0x0b, 7	; 11
	string_ddr |= (1<<second_string);  
     906:	56 9a       	sbi	0x0a, 6	; 10
	string_port |= (1<<second_string);
     908:	5e 9a       	sbi	0x0b, 6	; 11
	string_ddr |= (1<<third_string);  
     90a:	55 9a       	sbi	0x0a, 5	; 10
	string_port |= (1<<third_string);
     90c:	5d 9a       	sbi	0x0b, 5	; 11
	string_ddr |= (1<<fourth_string);  
     90e:	52 9a       	sbi	0x0a, 2	; 10
	string_port |= (1<<fourth_string);
     910:	5a 9a       	sbi	0x0b, 2	; 11
	string_ddr |= (1<<fifth_string);  
     912:	51 9a       	sbi	0x0a, 1	; 10
	string_port |= (1<<fifth_string);
     914:	59 9a       	sbi	0x0b, 1	; 11
	string_ddr |= (1<<sixth_string);  
     916:	50 9a       	sbi	0x0a, 0	; 10
	string_port |= (1<<sixth_string);
     918:	58 9a       	sbi	0x0b, 0	; 11
}
     91a:	08 95       	ret

0000091c <setTimer>:

void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
     91c:	e4 e6       	ldi	r30, 0x64	; 100
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	87 7f       	andi	r24, 0xF7	; 247
     924:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
     926:	e0 e8       	ldi	r30, 0x80	; 128
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 77       	andi	r24, 0x7F	; 127
     92e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  //  to the pins on the chip. Otherwise, we might
     930:	80 81       	ld	r24, Z
     932:	8f 7b       	andi	r24, 0xBF	; 191
     934:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  //  get signals coming out of some of the pins we might use
     936:	80 81       	ld	r24, Z
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     93c:	80 81       	ld	r24, Z
     93e:	8f 7e       	andi	r24, 0xEF	; 239
     940:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
     942:	80 81       	ld	r24, Z
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
     948:	80 81       	ld	r24, Z
     94a:	8e 7f       	andi	r24, 0xFE	; 254
     94c:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
     94e:	e1 e8       	ldi	r30, 0x81	; 129
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	87 7f       	andi	r24, 0xF7	; 247
     956:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
     958:	80 81       	ld	r24, Z
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
     95e:	80 81       	ld	r24, Z
     960:	84 60       	ori	r24, 0x04	; 4
     962:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
     964:	80 81       	ld	r24, Z
     966:	8d 7f       	andi	r24, 0xFD	; 253
     968:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
     96a:	80 81       	ld	r24, Z
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
     970:	08 95       	ret

00000972 <processChords>:
*/
#include "processStringState.h"

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	8c 01       	movw	r16, r24
     97c:	fb 01       	movw	r30, r22
     97e:	ea 01       	movw	r28, r20
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
				data->downOn = 1;
				data->upOn   = 0;
			}
			else
			{
				data->upOn   = 1;
     984:	41 e0       	ldi	r20, 0x01	; 1
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
	{
		if (stringState[guitarString] & 1)
     986:	db 01       	movw	r26, r22
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	80 ff       	sbrs	r24, 0
     990:	13 c0       	rjmp	.+38     	; 0x9b8 <processChords+0x46>
		{
			stringState[guitarString] &= ~1; //Set the last bit to zero
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	8d 93       	st	X+, r24
     996:	9c 93       	st	X, r25
			if (guitarString < 3)
     998:	23 30       	cpi	r18, 0x03	; 3
     99a:	31 05       	cpc	r19, r1
     99c:	3c f4       	brge	.+14     	; 0x9ac <processChords+0x3a>
			{
				data->downOn = 1;
     99e:	d8 01       	movw	r26, r16
     9a0:	16 96       	adiw	r26, 0x06	; 6
     9a2:	4c 93       	st	X, r20
     9a4:	16 97       	sbiw	r26, 0x06	; 6
				data->upOn   = 0;
     9a6:	15 96       	adiw	r26, 0x05	; 5
     9a8:	1c 92       	st	X, r1
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <processChords+0x46>
			}
			else
			{
				data->upOn   = 1;
     9ac:	d8 01       	movw	r26, r16
     9ae:	15 96       	adiw	r26, 0x05	; 5
     9b0:	4c 93       	st	X, r20
     9b2:	15 97       	sbiw	r26, 0x05	; 5
				data->downOn = 0;
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	1c 92       	st	X, r1

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	6e 5f       	subi	r22, 0xFE	; 254
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	26 30       	cpi	r18, 0x06	; 6
     9c2:	31 05       	cpc	r19, r1
     9c4:	01 f7       	brne	.-64     	; 0x986 <processChords+0x14>
			}
		}
	}

	// First, save us some trouble and see if we're not pressing anything at all..
	if ((stringState[0] == 0b00000000) &&
     9c6:	40 81       	ld	r20, Z
     9c8:	51 81       	ldd	r21, Z+1	; 0x01
     9ca:	41 15       	cp	r20, r1
     9cc:	51 05       	cpc	r21, r1
     9ce:	a9 f4       	brne	.+42     	; 0x9fa <processChords+0x88>
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	89 2b       	or	r24, r25
     9d6:	89 f4       	brne	.+34     	; 0x9fa <processChords+0x88>
     9d8:	84 81       	ldd	r24, Z+4	; 0x04
     9da:	95 81       	ldd	r25, Z+5	; 0x05
     9dc:	89 2b       	or	r24, r25
     9de:	69 f4       	brne	.+26     	; 0x9fa <processChords+0x88>
     9e0:	86 81       	ldd	r24, Z+6	; 0x06
     9e2:	97 81       	ldd	r25, Z+7	; 0x07
     9e4:	89 2b       	or	r24, r25
     9e6:	49 f4       	brne	.+18     	; 0x9fa <processChords+0x88>
     9e8:	80 85       	ldd	r24, Z+8	; 0x08
     9ea:	91 85       	ldd	r25, Z+9	; 0x09
     9ec:	89 2b       	or	r24, r25
     9ee:	29 f4       	brne	.+10     	; 0x9fa <processChords+0x88>
     9f0:	82 85       	ldd	r24, Z+10	; 0x0a
     9f2:	93 85       	ldd	r25, Z+11	; 0x0b
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f4       	brne	.+2      	; 0x9fa <processChords+0x88>
     9f8:	31 c2       	rjmp	.+1122   	; 0xe5c <processChords+0x4ea>
		return;

	// Now see if what's being played on the fretboard matches any of the button patterns in
	//  buttonStringPatterns
	// green
	if(stringState[0] == buttonStringPatterns[0][0] &&
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	48 17       	cp	r20, r24
     a00:	59 07       	cpc	r21, r25
     a02:	39 f5       	brne	.+78     	; 0xa52 <processChords+0xe0>
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	33 81       	ldd	r19, Z+3	; 0x03
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	9b 81       	ldd	r25, Y+3	; 0x03
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	01 f5       	brne	.+64     	; 0xa52 <processChords+0xe0>
     a12:	24 81       	ldd	r18, Z+4	; 0x04
     a14:	35 81       	ldd	r19, Z+5	; 0x05
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	9d 81       	ldd	r25, Y+5	; 0x05
     a1a:	28 17       	cp	r18, r24
     a1c:	39 07       	cpc	r19, r25
     a1e:	c9 f4       	brne	.+50     	; 0xa52 <processChords+0xe0>
     a20:	26 81       	ldd	r18, Z+6	; 0x06
     a22:	37 81       	ldd	r19, Z+7	; 0x07
     a24:	8e 81       	ldd	r24, Y+6	; 0x06
     a26:	9f 81       	ldd	r25, Y+7	; 0x07
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	91 f4       	brne	.+36     	; 0xa52 <processChords+0xe0>
     a2e:	20 85       	ldd	r18, Z+8	; 0x08
     a30:	31 85       	ldd	r19, Z+9	; 0x09
     a32:	88 85       	ldd	r24, Y+8	; 0x08
     a34:	99 85       	ldd	r25, Y+9	; 0x09
     a36:	28 17       	cp	r18, r24
     a38:	39 07       	cpc	r19, r25
     a3a:	59 f4       	brne	.+22     	; 0xa52 <processChords+0xe0>
     a3c:	22 85       	ldd	r18, Z+10	; 0x0a
     a3e:	33 85       	ldd	r19, Z+11	; 0x0b
     a40:	8a 85       	ldd	r24, Y+10	; 0x0a
     a42:	9b 85       	ldd	r25, Y+11	; 0x0b
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	21 f4       	brne	.+8      	; 0xa52 <processChords+0xe0>
	   stringState[2] == buttonStringPatterns[0][2] &&
	   stringState[3] == buttonStringPatterns[0][3] &&
	   stringState[4] == buttonStringPatterns[0][4] &&
	   stringState[5] == buttonStringPatterns[0][5]  ) 
		{
			data->greenOn = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	f8 01       	movw	r30, r16
     a4e:	80 83       	st	Z, r24
     a50:	05 c2       	rjmp	.+1034   	; 0xe5c <processChords+0x4ea>
  		}
	// red
	else if(stringState[0] == buttonStringPatterns[1][0] &&
     a52:	de 01       	movw	r26, r28
     a54:	1c 96       	adiw	r26, 0x0c	; 12
     a56:	8c 85       	ldd	r24, Y+12	; 0x0c
     a58:	9d 85       	ldd	r25, Y+13	; 0x0d
     a5a:	48 17       	cp	r20, r24
     a5c:	59 07       	cpc	r21, r25
     a5e:	81 f5       	brne	.+96     	; 0xac0 <processChords+0x14e>
     a60:	22 81       	ldd	r18, Z+2	; 0x02
     a62:	33 81       	ldd	r19, Z+3	; 0x03
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	8d 91       	ld	r24, X+
     a68:	9c 91       	ld	r25, X
     a6a:	13 97       	sbiw	r26, 0x03	; 3
     a6c:	28 17       	cp	r18, r24
     a6e:	39 07       	cpc	r19, r25
     a70:	39 f5       	brne	.+78     	; 0xac0 <processChords+0x14e>
     a72:	24 81       	ldd	r18, Z+4	; 0x04
     a74:	35 81       	ldd	r19, Z+5	; 0x05
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	8d 91       	ld	r24, X+
     a7a:	9c 91       	ld	r25, X
     a7c:	15 97       	sbiw	r26, 0x05	; 5
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	f1 f4       	brne	.+60     	; 0xac0 <processChords+0x14e>
     a84:	26 81       	ldd	r18, Z+6	; 0x06
     a86:	37 81       	ldd	r19, Z+7	; 0x07
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	a9 f4       	brne	.+42     	; 0xac0 <processChords+0x14e>
     a96:	20 85       	ldd	r18, Z+8	; 0x08
     a98:	31 85       	ldd	r19, Z+9	; 0x09
     a9a:	18 96       	adiw	r26, 0x08	; 8
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	19 97       	sbiw	r26, 0x09	; 9
     aa2:	28 17       	cp	r18, r24
     aa4:	39 07       	cpc	r19, r25
     aa6:	61 f4       	brne	.+24     	; 0xac0 <processChords+0x14e>
     aa8:	22 85       	ldd	r18, Z+10	; 0x0a
     aaa:	33 85       	ldd	r19, Z+11	; 0x0b
     aac:	1a 96       	adiw	r26, 0x0a	; 10
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	1b 97       	sbiw	r26, 0x0b	; 11
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	19 f4       	brne	.+6      	; 0xac0 <processChords+0x14e>
	   stringState[2] == buttonStringPatterns[1][2] &&
	   stringState[3] == buttonStringPatterns[1][3] &&
	   stringState[4] == buttonStringPatterns[1][4] &&
	   stringState[5] == buttonStringPatterns[1][5]  ) 
		{
			data->redOn = 1;
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	d8 01       	movw	r26, r16
     abe:	dd c0       	rjmp	.+442    	; 0xc7a <processChords+0x308>
  		}

	// yellow
	else if(stringState[0] == buttonStringPatterns[2][0] &&
     ac0:	de 01       	movw	r26, r28
     ac2:	58 96       	adiw	r26, 0x18	; 24
     ac4:	88 8d       	ldd	r24, Y+24	; 0x18
     ac6:	99 8d       	ldd	r25, Y+25	; 0x19
     ac8:	48 17       	cp	r20, r24
     aca:	59 07       	cpc	r21, r25
     acc:	81 f5       	brne	.+96     	; 0xb2e <processChords+0x1bc>
     ace:	22 81       	ldd	r18, Z+2	; 0x02
     ad0:	33 81       	ldd	r19, Z+3	; 0x03
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	39 f5       	brne	.+78     	; 0xb2e <processChords+0x1bc>
     ae0:	24 81       	ldd	r18, Z+4	; 0x04
     ae2:	35 81       	ldd	r19, Z+5	; 0x05
     ae4:	14 96       	adiw	r26, 0x04	; 4
     ae6:	8d 91       	ld	r24, X+
     ae8:	9c 91       	ld	r25, X
     aea:	15 97       	sbiw	r26, 0x05	; 5
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	f1 f4       	brne	.+60     	; 0xb2e <processChords+0x1bc>
     af2:	26 81       	ldd	r18, Z+6	; 0x06
     af4:	37 81       	ldd	r19, Z+7	; 0x07
     af6:	16 96       	adiw	r26, 0x06	; 6
     af8:	8d 91       	ld	r24, X+
     afa:	9c 91       	ld	r25, X
     afc:	17 97       	sbiw	r26, 0x07	; 7
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	a9 f4       	brne	.+42     	; 0xb2e <processChords+0x1bc>
     b04:	20 85       	ldd	r18, Z+8	; 0x08
     b06:	31 85       	ldd	r19, Z+9	; 0x09
     b08:	18 96       	adiw	r26, 0x08	; 8
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	19 97       	sbiw	r26, 0x09	; 9
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	61 f4       	brne	.+24     	; 0xb2e <processChords+0x1bc>
     b16:	22 85       	ldd	r18, Z+10	; 0x0a
     b18:	33 85       	ldd	r19, Z+11	; 0x0b
     b1a:	1a 96       	adiw	r26, 0x0a	; 10
     b1c:	8d 91       	ld	r24, X+
     b1e:	9c 91       	ld	r25, X
     b20:	1b 97       	sbiw	r26, 0x0b	; 11
     b22:	28 17       	cp	r18, r24
     b24:	39 07       	cpc	r19, r25
     b26:	19 f4       	brne	.+6      	; 0xb2e <processChords+0x1bc>
	   stringState[2] == buttonStringPatterns[2][2] &&
	   stringState[3] == buttonStringPatterns[2][3] &&
	   stringState[4] == buttonStringPatterns[2][4] &&
	   stringState[5] == buttonStringPatterns[2][5]  ) 
		{
			 data->yellowOn = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	f8 01       	movw	r30, r16
     b2c:	58 c1       	rjmp	.+688    	; 0xdde <processChords+0x46c>
  		}
	// blue
	else if(stringState[0] == buttonStringPatterns[3][0] &&
     b2e:	de 01       	movw	r26, r28
     b30:	94 96       	adiw	r26, 0x24	; 36
     b32:	8c a1       	ldd	r24, Y+36	; 0x24
     b34:	9d a1       	ldd	r25, Y+37	; 0x25
     b36:	48 17       	cp	r20, r24
     b38:	59 07       	cpc	r21, r25
     b3a:	81 f5       	brne	.+96     	; 0xb9c <processChords+0x22a>
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	33 81       	ldd	r19, Z+3	; 0x03
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	8d 91       	ld	r24, X+
     b44:	9c 91       	ld	r25, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	39 f5       	brne	.+78     	; 0xb9c <processChords+0x22a>
     b4e:	24 81       	ldd	r18, Z+4	; 0x04
     b50:	35 81       	ldd	r19, Z+5	; 0x05
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	8d 91       	ld	r24, X+
     b56:	9c 91       	ld	r25, X
     b58:	15 97       	sbiw	r26, 0x05	; 5
     b5a:	28 17       	cp	r18, r24
     b5c:	39 07       	cpc	r19, r25
     b5e:	f1 f4       	brne	.+60     	; 0xb9c <processChords+0x22a>
     b60:	26 81       	ldd	r18, Z+6	; 0x06
     b62:	37 81       	ldd	r19, Z+7	; 0x07
     b64:	16 96       	adiw	r26, 0x06	; 6
     b66:	8d 91       	ld	r24, X+
     b68:	9c 91       	ld	r25, X
     b6a:	17 97       	sbiw	r26, 0x07	; 7
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	a9 f4       	brne	.+42     	; 0xb9c <processChords+0x22a>
     b72:	20 85       	ldd	r18, Z+8	; 0x08
     b74:	31 85       	ldd	r19, Z+9	; 0x09
     b76:	18 96       	adiw	r26, 0x08	; 8
     b78:	8d 91       	ld	r24, X+
     b7a:	9c 91       	ld	r25, X
     b7c:	19 97       	sbiw	r26, 0x09	; 9
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	61 f4       	brne	.+24     	; 0xb9c <processChords+0x22a>
     b84:	22 85       	ldd	r18, Z+10	; 0x0a
     b86:	33 85       	ldd	r19, Z+11	; 0x0b
     b88:	1a 96       	adiw	r26, 0x0a	; 10
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	1b 97       	sbiw	r26, 0x0b	; 11
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	19 f4       	brne	.+6      	; 0xb9c <processChords+0x22a>
	   stringState[2] == buttonStringPatterns[3][2] &&
	   stringState[3] == buttonStringPatterns[3][3] &&
	   stringState[4] == buttonStringPatterns[3][4] &&
	   stringState[5] == buttonStringPatterns[3][5]  ) 
		{
			 data->blueOn = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	d8 01       	movw	r26, r16
     b9a:	5e c1       	rjmp	.+700    	; 0xe58 <processChords+0x4e6>
  		}
	// orange
	else if(stringState[0] == buttonStringPatterns[4][0] &&
     b9c:	de 01       	movw	r26, r28
     b9e:	d0 96       	adiw	r26, 0x30	; 48
     ba0:	88 a9       	ldd	r24, Y+48	; 0x30
     ba2:	99 a9       	ldd	r25, Y+49	; 0x31
     ba4:	48 17       	cp	r20, r24
     ba6:	59 07       	cpc	r21, r25
     ba8:	89 f5       	brne	.+98     	; 0xc0c <processChords+0x29a>
     baa:	22 81       	ldd	r18, Z+2	; 0x02
     bac:	33 81       	ldd	r19, Z+3	; 0x03
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	8d 91       	ld	r24, X+
     bb2:	9c 91       	ld	r25, X
     bb4:	13 97       	sbiw	r26, 0x03	; 3
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	41 f5       	brne	.+80     	; 0xc0c <processChords+0x29a>
     bbc:	24 81       	ldd	r18, Z+4	; 0x04
     bbe:	35 81       	ldd	r19, Z+5	; 0x05
     bc0:	14 96       	adiw	r26, 0x04	; 4
     bc2:	8d 91       	ld	r24, X+
     bc4:	9c 91       	ld	r25, X
     bc6:	15 97       	sbiw	r26, 0x05	; 5
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	f9 f4       	brne	.+62     	; 0xc0c <processChords+0x29a>
     bce:	26 81       	ldd	r18, Z+6	; 0x06
     bd0:	37 81       	ldd	r19, Z+7	; 0x07
     bd2:	16 96       	adiw	r26, 0x06	; 6
     bd4:	8d 91       	ld	r24, X+
     bd6:	9c 91       	ld	r25, X
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	28 17       	cp	r18, r24
     bdc:	39 07       	cpc	r19, r25
     bde:	b1 f4       	brne	.+44     	; 0xc0c <processChords+0x29a>
     be0:	20 85       	ldd	r18, Z+8	; 0x08
     be2:	31 85       	ldd	r19, Z+9	; 0x09
     be4:	18 96       	adiw	r26, 0x08	; 8
     be6:	8d 91       	ld	r24, X+
     be8:	9c 91       	ld	r25, X
     bea:	19 97       	sbiw	r26, 0x09	; 9
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	69 f4       	brne	.+26     	; 0xc0c <processChords+0x29a>
     bf2:	22 85       	ldd	r18, Z+10	; 0x0a
     bf4:	33 85       	ldd	r19, Z+11	; 0x0b
     bf6:	1a 96       	adiw	r26, 0x0a	; 10
     bf8:	8d 91       	ld	r24, X+
     bfa:	9c 91       	ld	r25, X
     bfc:	1b 97       	sbiw	r26, 0x0b	; 11
     bfe:	28 17       	cp	r18, r24
     c00:	39 07       	cpc	r19, r25
     c02:	21 f4       	brne	.+8      	; 0xc0c <processChords+0x29a>
	   stringState[2] == buttonStringPatterns[4][2] &&
	   stringState[3] == buttonStringPatterns[4][3] &&
	   stringState[4] == buttonStringPatterns[4][4] &&
	   stringState[5] == buttonStringPatterns[4][5]  ) 
		{
			 data->orangeOn = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	f8 01       	movw	r30, r16
     c08:	84 83       	std	Z+4, r24	; 0x04
     c0a:	28 c1       	rjmp	.+592    	; 0xe5c <processChords+0x4ea>
  		}
	//Green and Red
	else if(stringState[0] == buttonStringPatterns[5][0] &&
     c0c:	de 01       	movw	r26, r28
     c0e:	dc 96       	adiw	r26, 0x3c	; 60
     c10:	8c ad       	ldd	r24, Y+60	; 0x3c
     c12:	9d ad       	ldd	r25, Y+61	; 0x3d
     c14:	48 17       	cp	r20, r24
     c16:	59 07       	cpc	r21, r25
     c18:	99 f5       	brne	.+102    	; 0xc80 <processChords+0x30e>
     c1a:	22 81       	ldd	r18, Z+2	; 0x02
     c1c:	33 81       	ldd	r19, Z+3	; 0x03
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	8d 91       	ld	r24, X+
     c22:	9c 91       	ld	r25, X
     c24:	13 97       	sbiw	r26, 0x03	; 3
     c26:	28 17       	cp	r18, r24
     c28:	39 07       	cpc	r19, r25
     c2a:	51 f5       	brne	.+84     	; 0xc80 <processChords+0x30e>
     c2c:	24 81       	ldd	r18, Z+4	; 0x04
     c2e:	35 81       	ldd	r19, Z+5	; 0x05
     c30:	14 96       	adiw	r26, 0x04	; 4
     c32:	8d 91       	ld	r24, X+
     c34:	9c 91       	ld	r25, X
     c36:	15 97       	sbiw	r26, 0x05	; 5
     c38:	28 17       	cp	r18, r24
     c3a:	39 07       	cpc	r19, r25
     c3c:	09 f5       	brne	.+66     	; 0xc80 <processChords+0x30e>
     c3e:	26 81       	ldd	r18, Z+6	; 0x06
     c40:	37 81       	ldd	r19, Z+7	; 0x07
     c42:	16 96       	adiw	r26, 0x06	; 6
     c44:	8d 91       	ld	r24, X+
     c46:	9c 91       	ld	r25, X
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	28 17       	cp	r18, r24
     c4c:	39 07       	cpc	r19, r25
     c4e:	c1 f4       	brne	.+48     	; 0xc80 <processChords+0x30e>
     c50:	20 85       	ldd	r18, Z+8	; 0x08
     c52:	31 85       	ldd	r19, Z+9	; 0x09
     c54:	18 96       	adiw	r26, 0x08	; 8
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	19 97       	sbiw	r26, 0x09	; 9
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	79 f4       	brne	.+30     	; 0xc80 <processChords+0x30e>
     c62:	22 85       	ldd	r18, Z+10	; 0x0a
     c64:	33 85       	ldd	r19, Z+11	; 0x0b
     c66:	1a 96       	adiw	r26, 0x0a	; 10
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	1b 97       	sbiw	r26, 0x0b	; 11
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	31 f4       	brne	.+12     	; 0xc80 <processChords+0x30e>
	   stringState[2] == buttonStringPatterns[5][2] &&
	   stringState[3] == buttonStringPatterns[5][3] &&
	   stringState[4] == buttonStringPatterns[5][4] &&
	   stringState[5] == buttonStringPatterns[5][5]  ) 
		{
			data->greenOn = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	d8 01       	movw	r26, r16
     c78:	8c 93       	st	X, r24
			data->redOn = 1;
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	8c 93       	st	X, r24
     c7e:	ee c0       	rjmp	.+476    	; 0xe5c <processChords+0x4ea>
  		}
	//Red and Yellow
	else if(stringState[0] == buttonStringPatterns[6][0] &&
     c80:	de 01       	movw	r26, r28
     c82:	a8 5b       	subi	r26, 0xB8	; 184
     c84:	bf 4f       	sbci	r27, 0xFF	; 255
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	89 f5       	brne	.+98     	; 0xcf4 <processChords+0x382>
     c92:	22 81       	ldd	r18, Z+2	; 0x02
     c94:	33 81       	ldd	r19, Z+3	; 0x03
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	13 97       	sbiw	r26, 0x03	; 3
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	41 f5       	brne	.+80     	; 0xcf4 <processChords+0x382>
     ca4:	24 81       	ldd	r18, Z+4	; 0x04
     ca6:	35 81       	ldd	r19, Z+5	; 0x05
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	15 97       	sbiw	r26, 0x05	; 5
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	f9 f4       	brne	.+62     	; 0xcf4 <processChords+0x382>
     cb6:	26 81       	ldd	r18, Z+6	; 0x06
     cb8:	37 81       	ldd	r19, Z+7	; 0x07
     cba:	16 96       	adiw	r26, 0x06	; 6
     cbc:	8d 91       	ld	r24, X+
     cbe:	9c 91       	ld	r25, X
     cc0:	17 97       	sbiw	r26, 0x07	; 7
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	b1 f4       	brne	.+44     	; 0xcf4 <processChords+0x382>
     cc8:	20 85       	ldd	r18, Z+8	; 0x08
     cca:	31 85       	ldd	r19, Z+9	; 0x09
     ccc:	18 96       	adiw	r26, 0x08	; 8
     cce:	8d 91       	ld	r24, X+
     cd0:	9c 91       	ld	r25, X
     cd2:	19 97       	sbiw	r26, 0x09	; 9
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	69 f4       	brne	.+26     	; 0xcf4 <processChords+0x382>
     cda:	22 85       	ldd	r18, Z+10	; 0x0a
     cdc:	33 85       	ldd	r19, Z+11	; 0x0b
     cde:	1a 96       	adiw	r26, 0x0a	; 10
     ce0:	8d 91       	ld	r24, X+
     ce2:	9c 91       	ld	r25, X
     ce4:	1b 97       	sbiw	r26, 0x0b	; 11
     ce6:	28 17       	cp	r18, r24
     ce8:	39 07       	cpc	r19, r25
     cea:	21 f4       	brne	.+8      	; 0xcf4 <processChords+0x382>
	   stringState[2] == buttonStringPatterns[6][2] &&
	   stringState[3] == buttonStringPatterns[6][3] &&
	   stringState[4] == buttonStringPatterns[6][4] &&
	   stringState[5] == buttonStringPatterns[6][5]  ) 
		{
			data->redOn = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	f8 01       	movw	r30, r16
     cf0:	81 83       	std	Z+1, r24	; 0x01
     cf2:	75 c0       	rjmp	.+234    	; 0xdde <processChords+0x46c>
			data->yellowOn = 1;
  		}
	// Yellow and Blue
	else if(stringState[0] == buttonStringPatterns[7][0] &&
     cf4:	de 01       	movw	r26, r28
     cf6:	ac 5a       	subi	r26, 0xAC	; 172
     cf8:	bf 4f       	sbci	r27, 0xFF	; 255
     cfa:	8d 91       	ld	r24, X+
     cfc:	9c 91       	ld	r25, X
     cfe:	11 97       	sbiw	r26, 0x01	; 1
     d00:	48 17       	cp	r20, r24
     d02:	59 07       	cpc	r21, r25
     d04:	99 f5       	brne	.+102    	; 0xd6c <processChords+0x3fa>
     d06:	22 81       	ldd	r18, Z+2	; 0x02
     d08:	33 81       	ldd	r19, Z+3	; 0x03
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	8d 91       	ld	r24, X+
     d0e:	9c 91       	ld	r25, X
     d10:	13 97       	sbiw	r26, 0x03	; 3
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	51 f5       	brne	.+84     	; 0xd6c <processChords+0x3fa>
     d18:	24 81       	ldd	r18, Z+4	; 0x04
     d1a:	35 81       	ldd	r19, Z+5	; 0x05
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	8d 91       	ld	r24, X+
     d20:	9c 91       	ld	r25, X
     d22:	15 97       	sbiw	r26, 0x05	; 5
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	09 f5       	brne	.+66     	; 0xd6c <processChords+0x3fa>
     d2a:	26 81       	ldd	r18, Z+6	; 0x06
     d2c:	37 81       	ldd	r19, Z+7	; 0x07
     d2e:	16 96       	adiw	r26, 0x06	; 6
     d30:	8d 91       	ld	r24, X+
     d32:	9c 91       	ld	r25, X
     d34:	17 97       	sbiw	r26, 0x07	; 7
     d36:	28 17       	cp	r18, r24
     d38:	39 07       	cpc	r19, r25
     d3a:	c1 f4       	brne	.+48     	; 0xd6c <processChords+0x3fa>
     d3c:	20 85       	ldd	r18, Z+8	; 0x08
     d3e:	31 85       	ldd	r19, Z+9	; 0x09
     d40:	18 96       	adiw	r26, 0x08	; 8
     d42:	8d 91       	ld	r24, X+
     d44:	9c 91       	ld	r25, X
     d46:	19 97       	sbiw	r26, 0x09	; 9
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	79 f4       	brne	.+30     	; 0xd6c <processChords+0x3fa>
     d4e:	22 85       	ldd	r18, Z+10	; 0x0a
     d50:	33 85       	ldd	r19, Z+11	; 0x0b
     d52:	1a 96       	adiw	r26, 0x0a	; 10
     d54:	8d 91       	ld	r24, X+
     d56:	9c 91       	ld	r25, X
     d58:	1b 97       	sbiw	r26, 0x0b	; 11
     d5a:	28 17       	cp	r18, r24
     d5c:	39 07       	cpc	r19, r25
     d5e:	31 f4       	brne	.+12     	; 0xd6c <processChords+0x3fa>
	   stringState[2] == buttonStringPatterns[7][2] &&
	   stringState[3] == buttonStringPatterns[7][3] &&
	   stringState[4] == buttonStringPatterns[7][4] &&
	   stringState[5] == buttonStringPatterns[7][5]  ) 
		{
			 data->yellowOn = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	d8 01       	movw	r26, r16
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	8c 93       	st	X, r24
     d68:	12 97       	sbiw	r26, 0x02	; 2
     d6a:	76 c0       	rjmp	.+236    	; 0xe58 <processChords+0x4e6>
			 data->blueOn = 1;
  		}
	// Green and Yellow
	else if(stringState[0] == buttonStringPatterns[8][0] &&
     d6c:	de 01       	movw	r26, r28
     d6e:	a0 5a       	subi	r26, 0xA0	; 160
     d70:	bf 4f       	sbci	r27, 0xFF	; 255
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	48 17       	cp	r20, r24
     d7a:	59 07       	cpc	r21, r25
     d7c:	91 f5       	brne	.+100    	; 0xde2 <processChords+0x470>
     d7e:	22 81       	ldd	r18, Z+2	; 0x02
     d80:	33 81       	ldd	r19, Z+3	; 0x03
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	8d 91       	ld	r24, X+
     d86:	9c 91       	ld	r25, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	49 f5       	brne	.+82     	; 0xde2 <processChords+0x470>
     d90:	24 81       	ldd	r18, Z+4	; 0x04
     d92:	35 81       	ldd	r19, Z+5	; 0x05
     d94:	14 96       	adiw	r26, 0x04	; 4
     d96:	8d 91       	ld	r24, X+
     d98:	9c 91       	ld	r25, X
     d9a:	15 97       	sbiw	r26, 0x05	; 5
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	01 f5       	brne	.+64     	; 0xde2 <processChords+0x470>
     da2:	26 81       	ldd	r18, Z+6	; 0x06
     da4:	37 81       	ldd	r19, Z+7	; 0x07
     da6:	16 96       	adiw	r26, 0x06	; 6
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	17 97       	sbiw	r26, 0x07	; 7
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	b9 f4       	brne	.+46     	; 0xde2 <processChords+0x470>
     db4:	20 85       	ldd	r18, Z+8	; 0x08
     db6:	31 85       	ldd	r19, Z+9	; 0x09
     db8:	18 96       	adiw	r26, 0x08	; 8
     dba:	8d 91       	ld	r24, X+
     dbc:	9c 91       	ld	r25, X
     dbe:	19 97       	sbiw	r26, 0x09	; 9
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	71 f4       	brne	.+28     	; 0xde2 <processChords+0x470>
     dc6:	22 85       	ldd	r18, Z+10	; 0x0a
     dc8:	33 85       	ldd	r19, Z+11	; 0x0b
     dca:	1a 96       	adiw	r26, 0x0a	; 10
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	1b 97       	sbiw	r26, 0x0b	; 11
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	29 f4       	brne	.+10     	; 0xde2 <processChords+0x470>
	   stringState[2] == buttonStringPatterns[8][2] &&
	   stringState[3] == buttonStringPatterns[8][3] &&
	   stringState[4] == buttonStringPatterns[8][4] &&
	   stringState[5] == buttonStringPatterns[8][5]  ) 
		{
			 data->greenOn = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	f8 01       	movw	r30, r16
     ddc:	80 83       	st	Z, r24
			 data->yellowOn = 1;
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	3d c0       	rjmp	.+122    	; 0xe5c <processChords+0x4ea>
  		}
	// Red and Blue
	else if(stringState[0] == buttonStringPatterns[9][0] &&
     de2:	de 01       	movw	r26, r28
     de4:	a4 59       	subi	r26, 0x94	; 148
     de6:	bf 4f       	sbci	r27, 0xFF	; 255
     de8:	8d 91       	ld	r24, X+
     dea:	9c 91       	ld	r25, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	48 17       	cp	r20, r24
     df0:	59 07       	cpc	r21, r25
     df2:	a1 f5       	brne	.+104    	; 0xe5c <processChords+0x4ea>
     df4:	22 81       	ldd	r18, Z+2	; 0x02
     df6:	33 81       	ldd	r19, Z+3	; 0x03
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	28 17       	cp	r18, r24
     e02:	39 07       	cpc	r19, r25
     e04:	59 f5       	brne	.+86     	; 0xe5c <processChords+0x4ea>
     e06:	24 81       	ldd	r18, Z+4	; 0x04
     e08:	35 81       	ldd	r19, Z+5	; 0x05
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	8d 91       	ld	r24, X+
     e0e:	9c 91       	ld	r25, X
     e10:	15 97       	sbiw	r26, 0x05	; 5
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	11 f5       	brne	.+68     	; 0xe5c <processChords+0x4ea>
     e18:	26 81       	ldd	r18, Z+6	; 0x06
     e1a:	37 81       	ldd	r19, Z+7	; 0x07
     e1c:	16 96       	adiw	r26, 0x06	; 6
     e1e:	8d 91       	ld	r24, X+
     e20:	9c 91       	ld	r25, X
     e22:	17 97       	sbiw	r26, 0x07	; 7
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	c9 f4       	brne	.+50     	; 0xe5c <processChords+0x4ea>
     e2a:	20 85       	ldd	r18, Z+8	; 0x08
     e2c:	31 85       	ldd	r19, Z+9	; 0x09
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	8d 91       	ld	r24, X+
     e32:	9c 91       	ld	r25, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	81 f4       	brne	.+32     	; 0xe5c <processChords+0x4ea>
     e3c:	22 85       	ldd	r18, Z+10	; 0x0a
     e3e:	33 85       	ldd	r19, Z+11	; 0x0b
     e40:	1a 96       	adiw	r26, 0x0a	; 10
     e42:	8d 91       	ld	r24, X+
     e44:	9c 91       	ld	r25, X
     e46:	1b 97       	sbiw	r26, 0x0b	; 11
     e48:	28 17       	cp	r18, r24
     e4a:	39 07       	cpc	r19, r25
     e4c:	39 f4       	brne	.+14     	; 0xe5c <processChords+0x4ea>
	   stringState[2] == buttonStringPatterns[9][2] &&
	   stringState[3] == buttonStringPatterns[9][3] &&
	   stringState[4] == buttonStringPatterns[9][4] &&
	   stringState[5] == buttonStringPatterns[9][5]  ) 
		{
			 data->redOn = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	d8 01       	movw	r26, r16
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	8c 93       	st	X, r24
     e56:	11 97       	sbiw	r26, 0x01	; 1
			 data->blueOn = 1;
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	8c 93       	st	X, r24
  		}

	return;
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <processNotes>:

void processNotes(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	dc 01       	movw	r26, r24
     e74:	fb 01       	movw	r30, r22
	/* If we're playing with notes on a scale, then we have to figure out if the proper note is being
	   played, and also if we strummed the correct string.
	 */
	// First thing, we need to reset the strumming code, since we need to check and see if we 
	//  strummed on the correct string or not
	data->upOn = 0;
     e76:	15 96       	adiw	r26, 0x05	; 5
     e78:	1c 92       	st	X, r1
     e7a:	15 97       	sbiw	r26, 0x05	; 5
	data->downOn = 0;
     e7c:	16 96       	adiw	r26, 0x06	; 6
     e7e:	1c 92       	st	X, r1
     e80:	16 97       	sbiw	r26, 0x06	; 6
	char strumOn = -1; // This holds which string the pick is strumming
	char buttonPressed = 0;
	char strumPressed  = 0;

	//We also hardcode in a down strum on the empty 6th string, for navigation
	if (stringState[0] &= 1)
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	81 70       	andi	r24, 0x01	; 1
     e88:	90 70       	andi	r25, 0x00	; 0
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	89 2b       	or	r24, r25
     e90:	21 f0       	breq	.+8      	; 0xe9a <processNotes+0x34>
	{
		data->downOn = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	16 96       	adiw	r26, 0x06	; 6
     e96:	8c 93       	st	X, r24
     e98:	16 97       	sbiw	r26, 0x06	; 6
     e9a:	7a 01       	movw	r14, r20
     e9c:	ba 01       	movw	r22, r20
     e9e:	6c 5d       	subi	r22, 0xDC	; 220
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	4f ef       	ldi	r20, 0xFF	; 255
     ea4:	00 e0       	ldi	r16, 0x00	; 0
     ea6:	50 e0       	ldi	r21, 0x00	; 0
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
     ea8:	11 e0       	ldi	r17, 0x01	; 1
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
	{
		if (stringState[i] != 0) // Only look at strings that are being touched or strummed
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <processNotes+0x4e>
     eb2:	82 c0       	rjmp	.+260    	; 0xfb8 <processNotes+0x152>
		{
			// Check for open strings being strummed first
			if (stringState[i] == 1) // This means we're strumming an open string
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	c1 f5       	brne	.+112    	; 0xf2a <processNotes+0xc4>
			{
				if (stringState[i] == buttonStringPatterns[0][i])
     eba:	e7 01       	movw	r28, r14
     ebc:	88 81       	ld	r24, Y
     ebe:	99 81       	ldd	r25, Y+1	; 0x01
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	11 f4       	brne	.+4      	; 0xec8 <processNotes+0x62>
				{
					strumOn = i;
					data->greenOn =  1;	
     ec4:	1c 93       	st	X, r17
     ec6:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[1][i])
     ec8:	20 81       	ld	r18, Z
     eca:	31 81       	ldd	r19, Z+1	; 0x01
     ecc:	e7 01       	movw	r28, r14
     ece:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed2:	28 17       	cp	r18, r24
     ed4:	39 07       	cpc	r19, r25
     ed6:	21 f4       	brne	.+8      	; 0xee0 <processNotes+0x7a>
				{
					strumOn = i;
					data->redOn =  1;	
     ed8:	11 96       	adiw	r26, 0x01	; 1
     eda:	1c 93       	st	X, r17
     edc:	11 97       	sbiw	r26, 0x01	; 1
     ede:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[2][i])
     ee0:	20 81       	ld	r18, Z
     ee2:	31 81       	ldd	r19, Z+1	; 0x01
     ee4:	e7 01       	movw	r28, r14
     ee6:	88 8d       	ldd	r24, Y+24	; 0x18
     ee8:	99 8d       	ldd	r25, Y+25	; 0x19
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	21 f4       	brne	.+8      	; 0xef8 <processNotes+0x92>
				{
					strumOn = i;
					data->yellowOn =  1;
     ef0:	12 96       	adiw	r26, 0x02	; 2
     ef2:	1c 93       	st	X, r17
     ef4:	12 97       	sbiw	r26, 0x02	; 2
     ef6:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[3][i])
     ef8:	20 81       	ld	r18, Z
     efa:	31 81       	ldd	r19, Z+1	; 0x01
     efc:	eb 01       	movw	r28, r22
     efe:	88 81       	ld	r24, Y
     f00:	99 81       	ldd	r25, Y+1	; 0x01
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	21 f4       	brne	.+8      	; 0xf10 <processNotes+0xaa>
				{
					strumOn = i;
					data->blueOn =  1;
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	1c 93       	st	X, r17
     f0c:	13 97       	sbiw	r26, 0x03	; 3
     f0e:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[4][i])
     f10:	20 81       	ld	r18, Z
     f12:	31 81       	ldd	r19, Z+1	; 0x01
     f14:	eb 01       	movw	r28, r22
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1a:	28 17       	cp	r18, r24
     f1c:	39 07       	cpc	r19, r25
     f1e:	39 f4       	brne	.+14     	; 0xf2e <processNotes+0xc8>
				{
					strumOn = i;
					data->orangeOn =  1;				
     f20:	14 96       	adiw	r26, 0x04	; 4
     f22:	1c 93       	st	X, r17
     f24:	14 97       	sbiw	r26, 0x04	; 4
     f26:	45 2f       	mov	r20, r21
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <processNotes+0xc8>
			}
			 // Now we have checked for strummed notes, we need to check for pressed notes
			 //  so that we can display them for reference as well as use them when strummed
			else
				// First see if we're strumming or not
				strumPressed = stringState[i] & 1;
     f2a:	08 2f       	mov	r16, r24
     f2c:	01 70       	andi	r16, 0x01	; 1
				// Now ensure the strum bit is zero
				stringState[i] &= (~1);
     f2e:	20 81       	ld	r18, Z
     f30:	31 81       	ldd	r19, Z+1	; 0x01
     f32:	2e 7f       	andi	r18, 0xFE	; 254
     f34:	31 83       	std	Z+1, r19	; 0x01
     f36:	20 83       	st	Z, r18
				// Take care of displaying closed notes
				if (stringState[i] == buttonStringPatterns[0][i]&& 
     f38:	e7 01       	movw	r28, r14
     f3a:	88 81       	ld	r24, Y
     f3c:	99 81       	ldd	r25, Y+1	; 0x01
     f3e:	28 17       	cp	r18, r24
     f40:	39 07       	cpc	r19, r25
     f42:	19 f4       	brne	.+6      	; 0xf4a <processNotes+0xe4>
     f44:	23 2b       	or	r18, r19
     f46:	09 f0       	breq	.+2      	; 0xf4a <processNotes+0xe4>
										buttonStringPatterns[0][i] != 0)
				{
					data->greenOn =  1;	
     f48:	1c 93       	st	X, r17
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[1][i] && 
     f4a:	20 81       	ld	r18, Z
     f4c:	31 81       	ldd	r19, Z+1	; 0x01
     f4e:	e7 01       	movw	r28, r14
     f50:	8c 85       	ldd	r24, Y+12	; 0x0c
     f52:	9d 85       	ldd	r25, Y+13	; 0x0d
     f54:	28 17       	cp	r18, r24
     f56:	39 07       	cpc	r19, r25
     f58:	29 f4       	brne	.+10     	; 0xf64 <processNotes+0xfe>
     f5a:	23 2b       	or	r18, r19
     f5c:	19 f0       	breq	.+6      	; 0xf64 <processNotes+0xfe>
										buttonStringPatterns[1][i] != 0)
				{
					data->redOn =  1;	
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	1c 93       	st	X, r17
     f62:	11 97       	sbiw	r26, 0x01	; 1
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[2][i] && 
     f64:	20 81       	ld	r18, Z
     f66:	31 81       	ldd	r19, Z+1	; 0x01
     f68:	e7 01       	movw	r28, r14
     f6a:	88 8d       	ldd	r24, Y+24	; 0x18
     f6c:	99 8d       	ldd	r25, Y+25	; 0x19
     f6e:	28 17       	cp	r18, r24
     f70:	39 07       	cpc	r19, r25
     f72:	29 f4       	brne	.+10     	; 0xf7e <processNotes+0x118>
     f74:	23 2b       	or	r18, r19
     f76:	19 f0       	breq	.+6      	; 0xf7e <processNotes+0x118>
										buttonStringPatterns[2][i] != 0)
					{
					data->yellowOn =  1;
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	1c 93       	st	X, r17
     f7c:	12 97       	sbiw	r26, 0x02	; 2
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[3][i] && 
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	eb 01       	movw	r28, r22
     f84:	88 81       	ld	r24, Y
     f86:	99 81       	ldd	r25, Y+1	; 0x01
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	29 f4       	brne	.+10     	; 0xf98 <processNotes+0x132>
     f8e:	23 2b       	or	r18, r19
     f90:	19 f0       	breq	.+6      	; 0xf98 <processNotes+0x132>
										buttonStringPatterns[3][i] != 0)
				{
					data->blueOn =  1;
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	1c 93       	st	X, r17
     f96:	13 97       	sbiw	r26, 0x03	; 3
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
     f98:	20 81       	ld	r18, Z
     f9a:	31 81       	ldd	r19, Z+1	; 0x01
     f9c:	eb 01       	movw	r28, r22
     f9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     fa0:	9d 85       	ldd	r25, Y+13	; 0x0d
     fa2:	28 17       	cp	r18, r24
     fa4:	39 07       	cpc	r19, r25
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <processNotes+0x14c>
     fa8:	23 2b       	or	r18, r19
     faa:	19 f0       	breq	.+6      	; 0xfb2 <processNotes+0x14c>
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
     fac:	14 96       	adiw	r26, 0x04	; 4
     fae:	1c 93       	st	X, r17
     fb0:	14 97       	sbiw	r26, 0x04	; 4
					buttonPressed = 1;									
				}
					// Now deal with strumming
				if ((buttonPressed = 1) && (strumPressed == 1))
     fb2:	01 30       	cpi	r16, 0x01	; 1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <processNotes+0x152>
     fb6:	45 2f       	mov	r20, r21
     fb8:	32 96       	adiw	r30, 0x02	; 2
     fba:	5f 5f       	subi	r21, 0xFF	; 255
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	e8 0e       	add	r14, r24
     fc2:	f9 1e       	adc	r15, r25
     fc4:	6e 5f       	subi	r22, 0xFE	; 254
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
	if (stringState[0] &= 1)
	{
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
     fc8:	56 30       	cpi	r21, 0x06	; 6
     fca:	09 f0       	breq	.+2      	; 0xfce <processNotes+0x168>
     fcc:	6e cf       	rjmp	.-292    	; 0xeaa <processNotes+0x44>
				}
			}
	}

	//Now set the strum buttons properly, so we can have both up and down if we're in this mode
	if ((strumOn >= 0) && (strumOn < 3))
     fce:	43 30       	cpi	r20, 0x03	; 3
     fd0:	20 f4       	brcc	.+8      	; 0xfda <processNotes+0x174>
	{
		data->downOn = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	16 96       	adiw	r26, 0x06	; 6
     fd6:	8c 93       	st	X, r24
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <processNotes+0x18a>
	}
	else if ((strumOn >= 3) && (strumOn < 6 ) && (data->downOn != 1))
     fda:	43 50       	subi	r20, 0x03	; 3
     fdc:	43 30       	cpi	r20, 0x03	; 3
     fde:	40 f4       	brcc	.+16     	; 0xff0 <processNotes+0x18a>
     fe0:	16 96       	adiw	r26, 0x06	; 6
     fe2:	8c 91       	ld	r24, X
     fe4:	16 97       	sbiw	r26, 0x06	; 6
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	19 f0       	breq	.+6      	; 0xff0 <processNotes+0x18a>
	{
		data->upOn = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	15 96       	adiw	r26, 0x05	; 5
     fee:	8c 93       	st	X, r24
	}

	return;
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <processFrets>:

void processFrets(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	fc 01       	movw	r30, r24
    1012:	5b 01       	movw	r10, r22
    1014:	d8 01       	movw	r26, r16
    1016:	89 01       	movw	r16, r18
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	70 e0       	ldi	r23, 0x00	; 0
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
		    	{
		        	data->greenOn = 1;
    101c:	ff 24       	eor	r15, r15
    101e:	f3 94       	inc	r15
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
		      triedGreen[guitarString] = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	c8 2e       	mov	r12, r24
    1024:	d1 2c       	mov	r13, r1
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
	{
		// find the proper value by masking the stringState variable for each fret
		char orange = (stringState[guitarString] & (1<<5));
    1026:	e5 01       	movw	r28, r10
    1028:	88 81       	ld	r24, Y
		char blue   = (stringState[guitarString] & (1<<4));
    102a:	98 2f       	mov	r25, r24
    102c:	90 71       	andi	r25, 0x10	; 16
		char yellow = (stringState[guitarString] & (1<<3));
    102e:	28 2f       	mov	r18, r24
    1030:	28 70       	andi	r18, 0x08	; 8
		char red    = (stringState[guitarString] & (1<<2));
    1032:	38 2f       	mov	r19, r24
    1034:	34 70       	andi	r19, 0x04	; 4
		char green  = (stringState[guitarString] & (1<<1));
    1036:	48 2f       	mov	r20, r24
    1038:	42 70       	andi	r20, 0x02	; 2
		if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    103a:	85 ff       	sbrs	r24, 5
    103c:	07 c0       	rjmp	.+14     	; 0x104c <processFrets+0x4e>
    103e:	99 23       	and	r25, r25
    1040:	71 f0       	breq	.+28     	; 0x105e <processFrets+0x60>
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	88 23       	and	r24, r24
    1046:	21 f4       	brne	.+8      	; 0x1050 <processFrets+0x52>
		{    
		    data->orangeOn = 1;
    1048:	f4 82       	std	Z+4, r15	; 0x04
    104a:	40 c0       	rjmp	.+128    	; 0x10cc <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    104c:	99 23       	and	r25, r25
    104e:	39 f0       	breq	.+14     	; 0x105e <processFrets+0x60>
    1050:	22 23       	and	r18, r18
    1052:	71 f0       	breq	.+28     	; 0x1070 <processFrets+0x72>
    1054:	83 81       	ldd	r24, Z+3	; 0x03
    1056:	88 23       	and	r24, r24
    1058:	21 f4       	brne	.+8      	; 0x1062 <processFrets+0x64>
		{
		    data->blueOn = 1;
    105a:	f3 82       	std	Z+3, r15	; 0x03
    105c:	37 c0       	rjmp	.+110    	; 0x10cc <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    105e:	22 23       	and	r18, r18
    1060:	39 f0       	breq	.+14     	; 0x1070 <processFrets+0x72>
    1062:	33 23       	and	r19, r19
    1064:	71 f0       	breq	.+28     	; 0x1082 <processFrets+0x84>
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	88 23       	and	r24, r24
    106a:	21 f4       	brne	.+8      	; 0x1074 <processFrets+0x76>
		{
		    data->yellowOn = 1;
    106c:	f2 82       	std	Z+2, r15	; 0x02
    106e:	2e c0       	rjmp	.+92     	; 0x10cc <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((red != 0) && (green != 0) && (data->redOn == 0))
    1070:	33 23       	and	r19, r19
    1072:	39 f0       	breq	.+14     	; 0x1082 <processFrets+0x84>
    1074:	44 23       	and	r20, r20
    1076:	51 f1       	breq	.+84     	; 0x10cc <processFrets+0xce>
    1078:	81 81       	ldd	r24, Z+1	; 0x01
    107a:	88 23       	and	r24, r24
    107c:	21 f4       	brne	.+8      	; 0x1086 <processFrets+0x88>
		{
		    data->redOn = 1;
    107e:	f1 82       	std	Z+1, r15	; 0x01
    1080:	25 c0       	rjmp	.+74     	; 0x10cc <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if (green != 0)
    1082:	44 23       	and	r20, r20
    1084:	19 f1       	breq	.+70     	; 0x10cc <processFrets+0xce>
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    1086:	8d 91       	ld	r24, X+
    1088:	9c 91       	ld	r25, X
    108a:	11 97       	sbiw	r26, 0x01	; 1
    108c:	89 2b       	or	r24, r25
    108e:	59 f4       	brne	.+22     	; 0x10a6 <processFrets+0xa8>
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
    1090:	80 91 84 00 	lds	r24, 0x0084
    1094:	90 91 85 00 	lds	r25, 0x0085
    1098:	e8 01       	movw	r28, r16
    109a:	99 83       	std	Y+1, r25	; 0x01
    109c:	88 83       	st	Y, r24
		      triedGreen[guitarString] = 1;
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	dc 92       	st	X, r13
    10a2:	ce 92       	st	-X, r12
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <processFrets+0xd4>
		    }
		    else //triedGreen == true
		    {
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
    10a6:	20 91 84 00 	lds	r18, 0x0084
    10aa:	30 91 85 00 	lds	r19, 0x0085
    10ae:	e8 01       	movw	r28, r16
    10b0:	48 81       	ld	r20, Y
    10b2:	59 81       	ldd	r21, Y+1	; 0x01
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    10b4:	80 81       	ld	r24, Z
    10b6:	88 23       	and	r24, r24
    10b8:	61 f4       	brne	.+24     	; 0x10d2 <processFrets+0xd4>
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	24 1b       	sub	r18, r20
    10c0:	35 0b       	sbc	r19, r21
    10c2:	24 36       	cpi	r18, 0x64	; 100
    10c4:	31 05       	cpc	r19, r1
    10c6:	28 f0       	brcs	.+10     	; 0x10d2 <processFrets+0xd4>
		    	{
		        	data->greenOn = 1;
    10c8:	f0 82       	st	Z, r15
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <processFrets+0xd4>
		    	}
		    }
		}
	    else  //no buttons pressed
	    {
	        triedGreen[guitarString] = 0;
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	1c 92       	st	X, r1
    10d0:	1e 92       	st	-X, r1
		the strum has a direction, so if you strum the
		top 3 strings, you strum down, and if you strum
		the bottom 3 strings, you're strumming up.
	*/
		// Check for strumming
		if (stringState[guitarString] & 1)
    10d2:	e5 01       	movw	r28, r10
    10d4:	88 81       	ld	r24, Y
    10d6:	80 ff       	sbrs	r24, 0
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <processFrets+0xec>
		{
			if (guitarString < 3)
    10da:	63 30       	cpi	r22, 0x03	; 3
    10dc:	71 05       	cpc	r23, r1
    10de:	1c f4       	brge	.+6      	; 0x10e6 <processFrets+0xe8>
			{
				data->downOn = 1;
    10e0:	f6 82       	std	Z+6, r15	; 0x06
				data->upOn   = 0;
    10e2:	15 82       	std	Z+5, r1	; 0x05
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <processFrets+0xec>
			}
			else
			{
				data->upOn   = 1;
    10e6:	f5 82       	std	Z+5, r15	; 0x05
				data->downOn = 0;
    10e8:	16 82       	std	Z+6, r1	; 0x06
		you don't want that to register as a green button press.  So we do some
		timing on that one, so when you press just green, it starts counting
		instead of turing greenOn on, so if the red fret is turned on before it
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a8 0e       	add	r10, r24
    10f4:	b9 1e       	adc	r11, r25
    10f6:	12 96       	adiw	r26, 0x02	; 2
    10f8:	0e 5f       	subi	r16, 0xFE	; 254
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	66 30       	cpi	r22, 0x06	; 6
    10fe:	71 05       	cpc	r23, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <processFrets+0x106>
    1102:	91 cf       	rjmp	.-222    	; 0x1026 <processFrets+0x28>
				data->downOn = 0;
			}
		}
	}	// end of for loop
	return;
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	08 95       	ret

00001118 <processStringState>:

void processStringState(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], char controllerMode, 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
	if (controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    1120:	24 30       	cpi	r18, 0x04	; 4
    1122:	19 f4       	brne	.+6      	; 0x112a <processStringState+0x12>
		processChords(data, stringState, buttonStringPatterns);
    1124:	0e 94 b9 04 	call	0x972	; 0x972 <processChords>
    1128:	09 c0       	rjmp	.+18     	; 0x113c <processStringState+0x24>

	else if (controllerMode == NOTES) // We're playing with notes
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	19 f4       	brne	.+6      	; 0x1134 <processStringState+0x1c>
		processNotes(data, stringState, buttonStringPatterns);
    112e:	0e 94 33 07 	call	0xe66	; 0xe66 <processNotes>
    1132:	04 c0       	rjmp	.+8      	; 0x113c <processStringState+0x24>
	
	else // We're playing with frets
		processFrets(data, stringState,	buttonStringPatterns, greenTimers, triedGreen);
    1134:	98 01       	movw	r18, r16
    1136:	87 01       	movw	r16, r14
    1138:	0e 94 ff 07 	call	0xffe	; 0xffe <processFrets>

	return;	
}
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	08 95       	ret

00001146 <displayTransitionState>:

// This simple function takes in the controller mode and sets the
//  data struct to certain patterns to give the user feedback
//  as to what state is being pressed
void displayTransitionState(dataForController* data, int controllerMode)
{
    1146:	fc 01       	movw	r30, r24
	if (controllerMode == FRETS_TO_NOTES)
    1148:	61 30       	cpi	r22, 0x01	; 1
    114a:	71 05       	cpc	r23, r1
    114c:	21 f4       	brne	.+8      	; 0x1156 <displayTransitionState+0x10>
	{
		data->blueOn = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	83 83       	std	Z+3, r24	; 0x03
		data->yellowOn = 1;
    1152:	82 83       	std	Z+2, r24	; 0x02
    1154:	08 95       	ret
	}
	else if (controllerMode == NOTES_TO_CHORDS)
    1156:	63 30       	cpi	r22, 0x03	; 3
    1158:	71 05       	cpc	r23, r1
    115a:	21 f4       	brne	.+8      	; 0x1164 <displayTransitionState+0x1e>
	{
		data->blueOn = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	83 83       	std	Z+3, r24	; 0x03
		data->orangeOn = 1;
    1160:	84 83       	std	Z+4, r24	; 0x04
    1162:	08 95       	ret
	}
	else if (controllerMode == CHORDS_TO_FRETS)
    1164:	65 30       	cpi	r22, 0x05	; 5
    1166:	71 05       	cpc	r23, r1
    1168:	19 f4       	brne	.+6      	; 0x1170 <displayTransitionState+0x2a>
	{
		data->yellowOn = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	82 83       	std	Z+2, r24	; 0x02
		data->orangeOn = 1;
    116e:	84 83       	std	Z+4, r24	; 0x04
    1170:	08 95       	ret

00001172 <configSetButtonData>:
/* This function sets up the data struct when we're in config mode so that it shows
 *  the user which colors are currently being programmed.
 */
void configSetButtonData(dataForController* data, int* buttonToAssign, int buttonStringPatterns[][6], 
						int stringState[], char controllerMode, char* plusLock, char* previousPlusOn, int* debounceTimer)
{
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	fc 01       	movw	r30, r24
    1186:	db 01       	movw	r26, r22
    1188:	b9 01       	movw	r22, r18
    118a:	95 01       	movw	r18, r10
	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    118c:	8d 91       	ld	r24, X+
    118e:	9c 91       	ld	r25, X
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	19 f4       	brne	.+6      	; 0x119c <configSetButtonData+0x2a>
		data->greenOn = 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 83       	st	Z, r24
    119a:	34 c0       	rjmp	.+104    	; 0x1204 <configSetButtonData+0x92>
	else if(*buttonToAssign == 1)
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	91 05       	cpc	r25, r1
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <configSetButtonData+0x34>
		data->redOn = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	15 c0       	rjmp	.+42     	; 0x11d0 <configSetButtonData+0x5e>
	else if(*buttonToAssign == 2)
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	91 05       	cpc	r25, r1
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <configSetButtonData+0x3e>
		data->yellowOn = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	23 c0       	rjmp	.+70     	; 0x11f6 <configSetButtonData+0x84>
	else if(*buttonToAssign == 3)
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	11 f4       	brne	.+4      	; 0x11ba <configSetButtonData+0x48>
		data->blueOn = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	24 c0       	rjmp	.+72     	; 0x1202 <configSetButtonData+0x90>
	else if(*buttonToAssign == 4)
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	91 05       	cpc	r25, r1
    11be:	19 f4       	brne	.+6      	; 0x11c6 <configSetButtonData+0x54>
		data->orangeOn = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	84 83       	std	Z+4, r24	; 0x04
    11c4:	1f c0       	rjmp	.+62     	; 0x1204 <configSetButtonData+0x92>
	else if(*buttonToAssign == 5)
    11c6:	85 30       	cpi	r24, 0x05	; 5
    11c8:	91 05       	cpc	r25, r1
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <configSetButtonData+0x62>
	{
		data->greenOn = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
		data->redOn = 1;
    11d0:	81 83       	std	Z+1, r24	; 0x01
    11d2:	18 c0       	rjmp	.+48     	; 0x1204 <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 6)
    11d4:	86 30       	cpi	r24, 0x06	; 6
    11d6:	91 05       	cpc	r25, r1
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <configSetButtonData+0x6e>
	{
		data->redOn = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	81 83       	std	Z+1, r24	; 0x01
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <configSetButtonData+0x84>
		data->yellowOn = 1;
	}
	else if(*buttonToAssign == 7)
    11e0:	87 30       	cpi	r24, 0x07	; 7
    11e2:	91 05       	cpc	r25, r1
    11e4:	19 f4       	brne	.+6      	; 0x11ec <configSetButtonData+0x7a>
	{
		data->yellowOn = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	82 83       	std	Z+2, r24	; 0x02
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <configSetButtonData+0x90>
		data->blueOn = 1;
	}
	else if(*buttonToAssign == 8)
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	91 05       	cpc	r25, r1
    11f0:	21 f4       	brne	.+8      	; 0x11fa <configSetButtonData+0x88>
	{
		data->greenOn = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24
		data->yellowOn = 1;
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 9)
    11fa:	09 97       	sbiw	r24, 0x09	; 9
    11fc:	19 f4       	brne	.+6      	; 0x1204 <configSetButtonData+0x92>
	{
		data->redOn = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	81 83       	std	Z+1, r24	; 0x01
		data->blueOn = 1;
    1202:	83 83       	std	Z+3, r24	; 0x03
	}



	// Code to debounce our plus button, the current state of plusOn to it's recent history
	if (data->plusOn != 0)  // So we're pressing plus
    1204:	87 81       	ldd	r24, Z+7	; 0x07
    1206:	88 23       	and	r24, r24
    1208:	09 f1       	breq	.+66     	; 0x124c <configSetButtonData+0xda>
	{ 
		if (*previousPlusOn == 0)  // If we weren't pressing plus last time through the main loop
    120a:	e6 01       	movw	r28, r12
    120c:	88 81       	ld	r24, Y
    120e:	88 23       	and	r24, r24
    1210:	59 f4       	brne	.+22     	; 0x1228 <configSetButtonData+0xb6>
		{ 
			*debounceTimer = TCNT1;  // Set up a timer
    1212:	80 91 84 00 	lds	r24, 0x0084
    1216:	90 91 85 00 	lds	r25, 0x0085
    121a:	e9 01       	movw	r28, r18
    121c:	99 83       	std	Y+1, r25	; 0x01
    121e:	88 83       	st	Y, r24
			*previousPlusOn = 1;     // remember plus was pressed for the next iteration
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	e6 01       	movw	r28, r12
    1224:	88 83       	st	Y, r24
    1226:	10 c0       	rjmp	.+32     	; 0x1248 <configSetButtonData+0xd6>
			data->plusOn = 0;        // but for now, consider plus not pressed.
		}
		else if ( (TCNT1 - *debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - *debounceTimer >= 0))
    1228:	80 91 84 00 	lds	r24, 0x0084
    122c:	90 91 85 00 	lds	r25, 0x0085
    1230:	e9 01       	movw	r28, r18
    1232:	28 81       	ld	r18, Y
    1234:	39 81       	ldd	r19, Y+1	; 0x01
    1236:	82 1b       	sub	r24, r18
    1238:	93 0b       	sbc	r25, r19
    123a:	88 5e       	subi	r24, 0xE8	; 232
    123c:	93 40       	sbci	r25, 0x03	; 3
    123e:	40 f4       	brcc	.+16     	; 0x1250 <configSetButtonData+0xde>
    1240:	80 91 84 00 	lds	r24, 0x0084
    1244:	90 91 85 00 	lds	r25, 0x0085
		{
			data->plusOn = 0;  // This keeps telling us plus wasn't pressed until it's been held long enough
    1248:	17 82       	std	Z+7, r1	; 0x07
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <configSetButtonData+0xde>
		}		
	}
	else
	{
		*previousPlusOn = 0; // and if plus wasn't pressed, remember that for next time
    124c:	e6 01       	movw	r28, r12
    124e:	18 82       	st	Y, r1
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((data->plusOn) && (*plusLock == 0))
    1250:	87 81       	ldd	r24, Z+7	; 0x07
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <configSetButtonData+0xe6>
    1256:	f7 c0       	rjmp	.+494    	; 0x1446 <configSetButtonData+0x2d4>
    1258:	f7 01       	movw	r30, r14
    125a:	80 81       	ld	r24, Z
    125c:	88 23       	and	r24, r24
    125e:	09 f0       	breq	.+2      	; 0x1262 <configSetButtonData+0xf0>
    1260:	f4 c0       	rjmp	.+488    	; 0x144a <configSetButtonData+0x2d8>
	{

		if (controllerMode == CHORDS) 
    1262:	04 30       	cpi	r16, 0x04	; 4
    1264:	09 f0       	breq	.+2      	; 0x1268 <configSetButtonData+0xf6>
    1266:	60 c0       	rjmp	.+192    	; 0x1328 <configSetButtonData+0x1b6>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
    1268:	8d 91       	ld	r24, X+
    126a:	9c 91       	ld	r25, X
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	fc 01       	movw	r30, r24
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e8 0f       	add	r30, r24
    1276:	f9 1f       	adc	r31, r25
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	e4 0f       	add	r30, r20
    1282:	f5 1f       	adc	r31, r21
    1284:	11 82       	std	Z+1, r1	; 0x01
    1286:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
    1288:	8d 91       	ld	r24, X+
    128a:	9c 91       	ld	r25, X
    128c:	11 97       	sbiw	r26, 0x01	; 1
    128e:	fc 01       	movw	r30, r24
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e8 0f       	add	r30, r24
    1296:	f9 1f       	adc	r31, r25
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	e4 0f       	add	r30, r20
    12a2:	f5 1f       	adc	r31, r21
    12a4:	13 82       	std	Z+3, r1	; 0x03
    12a6:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
    12a8:	8d 91       	ld	r24, X+
    12aa:	9c 91       	ld	r25, X
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	fc 01       	movw	r30, r24
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	e8 0f       	add	r30, r24
    12b6:	f9 1f       	adc	r31, r25
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e4 0f       	add	r30, r20
    12c2:	f5 1f       	adc	r31, r21
    12c4:	15 82       	std	Z+5, r1	; 0x05
    12c6:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
    12c8:	8d 91       	ld	r24, X+
    12ca:	9c 91       	ld	r25, X
    12cc:	11 97       	sbiw	r26, 0x01	; 1
    12ce:	fc 01       	movw	r30, r24
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	e8 0f       	add	r30, r24
    12d6:	f9 1f       	adc	r31, r25
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e4 0f       	add	r30, r20
    12e2:	f5 1f       	adc	r31, r21
    12e4:	17 82       	std	Z+7, r1	; 0x07
    12e6:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	11 97       	sbiw	r26, 0x01	; 1
    12ee:	fc 01       	movw	r30, r24
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e8 0f       	add	r30, r24
    12f6:	f9 1f       	adc	r31, r25
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	e4 0f       	add	r30, r20
    1302:	f5 1f       	adc	r31, r21
    1304:	11 86       	std	Z+9, r1	; 0x09
    1306:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	11 97       	sbiw	r26, 0x01	; 1
    130e:	fc 01       	movw	r30, r24
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	e8 0f       	add	r30, r24
    1316:	f9 1f       	adc	r31, r25
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e4 0f       	add	r30, r20
    1322:	f5 1f       	adc	r31, r21
    1324:	13 86       	std	Z+11, r1	; 0x0b
    1326:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
    1328:	8d 91       	ld	r24, X+
    132a:	9c 91       	ld	r25, X
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	fc 01       	movw	r30, r24
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e8 0f       	add	r30, r24
    1336:	f9 1f       	adc	r31, r25
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	e4 0f       	add	r30, r20
    1342:	f5 1f       	adc	r31, r21
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	eb 01       	movw	r28, r22
    134a:	28 81       	ld	r18, Y
    134c:	39 81       	ldd	r19, Y+1	; 0x01
    134e:	82 2b       	or	r24, r18
    1350:	93 2b       	or	r25, r19
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
    1356:	8d 91       	ld	r24, X+
    1358:	9c 91       	ld	r25, X
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	fc 01       	movw	r30, r24
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	e8 0f       	add	r30, r24
    1364:	f9 1f       	adc	r31, r25
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	e4 0f       	add	r30, r20
    1370:	f5 1f       	adc	r31, r21
    1372:	82 81       	ldd	r24, Z+2	; 0x02
    1374:	93 81       	ldd	r25, Z+3	; 0x03
    1376:	2a 81       	ldd	r18, Y+2	; 0x02
    1378:	3b 81       	ldd	r19, Y+3	; 0x03
    137a:	82 2b       	or	r24, r18
    137c:	93 2b       	or	r25, r19
    137e:	93 83       	std	Z+3, r25	; 0x03
    1380:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
    1382:	8d 91       	ld	r24, X+
    1384:	9c 91       	ld	r25, X
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	fc 01       	movw	r30, r24
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e4 0f       	add	r30, r20
    139c:	f5 1f       	adc	r31, r21
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	95 81       	ldd	r25, Z+5	; 0x05
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	82 2b       	or	r24, r18
    13a8:	93 2b       	or	r25, r19
    13aa:	95 83       	std	Z+5, r25	; 0x05
    13ac:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	fc 01       	movw	r30, r24
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	e8 0f       	add	r30, r24
    13bc:	f9 1f       	adc	r31, r25
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e4 0f       	add	r30, r20
    13c8:	f5 1f       	adc	r31, r21
    13ca:	86 81       	ldd	r24, Z+6	; 0x06
    13cc:	97 81       	ldd	r25, Z+7	; 0x07
    13ce:	2e 81       	ldd	r18, Y+6	; 0x06
    13d0:	3f 81       	ldd	r19, Y+7	; 0x07
    13d2:	82 2b       	or	r24, r18
    13d4:	93 2b       	or	r25, r19
    13d6:	97 83       	std	Z+7, r25	; 0x07
    13d8:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	11 97       	sbiw	r26, 0x01	; 1
    13e0:	fc 01       	movw	r30, r24
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	e8 0f       	add	r30, r24
    13e8:	f9 1f       	adc	r31, r25
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	e4 0f       	add	r30, r20
    13f4:	f5 1f       	adc	r31, r21
    13f6:	80 85       	ldd	r24, Z+8	; 0x08
    13f8:	91 85       	ldd	r25, Z+9	; 0x09
    13fa:	28 85       	ldd	r18, Y+8	; 0x08
    13fc:	39 85       	ldd	r19, Y+9	; 0x09
    13fe:	82 2b       	or	r24, r18
    1400:	93 2b       	or	r25, r19
    1402:	91 87       	std	Z+9, r25	; 0x09
    1404:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
    1406:	8d 91       	ld	r24, X+
    1408:	9c 91       	ld	r25, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	fc 01       	movw	r30, r24
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	e8 0f       	add	r30, r24
    1414:	f9 1f       	adc	r31, r25
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	e4 0f       	add	r30, r20
    1420:	f5 1f       	adc	r31, r21
    1422:	82 85       	ldd	r24, Z+10	; 0x0a
    1424:	93 85       	ldd	r25, Z+11	; 0x0b
    1426:	2a 85       	ldd	r18, Y+10	; 0x0a
    1428:	3b 85       	ldd	r19, Y+11	; 0x0b
    142a:	82 2b       	or	r24, r18
    142c:	93 2b       	or	r25, r19
    142e:	93 87       	std	Z+11, r25	; 0x0b
    1430:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;  // we set up a lock, so we don't assign all the buttons at once
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	f7 01       	movw	r30, r14
    1436:	80 83       	st	Z, r24
		*buttonToAssign += 1;
    1438:	8d 91       	ld	r24, X+
    143a:	9c 91       	ld	r25, X
    143c:	11 97       	sbiw	r26, 0x01	; 1
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	8d 93       	st	X+, r24
    1442:	9c 93       	st	X, r25
    1444:	02 c0       	rjmp	.+4      	; 0x144a <configSetButtonData+0x2d8>
	}
	else if(data->plusOn == 0)
	{
		*plusLock = 0;
    1446:	e7 01       	movw	r28, r14
    1448:	18 82       	st	Y, r1
	}
	return;
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	08 95       	ret

0000145e <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
    145e:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
    1460:	80 81       	ld	r24, Z
    1462:	80 76       	andi	r24, 0x60	; 96
    1464:	80 32       	cpi	r24, 0x20	; 32
    1466:	e1 f4       	brne	.+56     	; 0x14a0 <usbFunctionSetup+0x42>
        //DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
    1468:	81 81       	ldd	r24, Z+1	; 0x01
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	41 f4       	brne	.+16     	; 0x147e <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	90 93 26 01 	sts	0x0126, r25
    1476:	80 93 25 01 	sts	0x0125, r24
    147a:	87 e0       	ldi	r24, 0x07	; 7
    147c:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	41 f4       	brne	.+16     	; 0x1492 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	90 93 26 01 	sts	0x0126, r25
    148a:	80 93 25 01 	sts	0x0125, r24
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
    1492:	8a 30       	cpi	r24, 0x0A	; 10
    1494:	29 f4       	brne	.+10     	; 0x14a0 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
    1496:	83 81       	ldd	r24, Z+3	; 0x03
    1498:	80 93 02 01 	sts	0x0102, r24
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	08 95       	ret
    14a0:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
    14a2:	08 95       	ret

000014a4 <sendData>:
	usbPoll();
}


void sendData(dataForController data)
{
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	29 97       	sbiw	r28, 0x09	; 9
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	90 2f       	mov	r25, r16
    14be:	09 83       	std	Y+1, r16	; 0x01
    14c0:	f1 2f       	mov	r31, r17
    14c2:	1a 83       	std	Y+2, r17	; 0x02
    14c4:	e2 2f       	mov	r30, r18
    14c6:	2b 83       	std	Y+3, r18	; 0x03
    14c8:	a3 2f       	mov	r26, r19
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	34 2f       	mov	r19, r20
    14ce:	4d 83       	std	Y+5, r20	; 0x05
    14d0:	b5 2f       	mov	r27, r21
    14d2:	5e 83       	std	Y+6, r21	; 0x06
    14d4:	46 2f       	mov	r20, r22
    14d6:	6f 83       	std	Y+7, r22	; 0x07
    14d8:	27 2f       	mov	r18, r23
    14da:	78 87       	std	Y+8, r23	; 0x08
    14dc:	89 87       	std	Y+9, r24	; 0x09
    14de:	58 2f       	mov	r21, r24

       //set the buttons to all at default positions
        reportBuffer[0] = 0b00000000;
        reportBuffer[1] = 0b00000000;
    14e0:	10 92 05 01 	sts	0x0105, r1
        reportBuffer[2] = 0b00001000;
    14e4:	88 e0       	ldi	r24, 0x08	; 8
    14e6:	80 93 06 01 	sts	0x0106, r24
        reportBuffer[3] = 0b10000000;
    14ea:	80 e8       	ldi	r24, 0x80	; 128
    14ec:	80 93 07 01 	sts	0x0107, r24
        reportBuffer[4] = 0b10000000;
    14f0:	80 93 08 01 	sts	0x0108, r24
        reportBuffer[5] = 0b10000000;
    14f4:	80 93 09 01 	sts	0x0109, r24
        reportBuffer[6] = 0b00000000;
    14f8:	10 92 0a 01 	sts	0x010A, r1


        // Since 'colorOn' is 1 when a fret is pressed, we shift it to the proper place and | it to set the
        // corresponding button bit to one, which corresponds to a button press.
        reportBuffer[0] |= (data.orangeOn << ORANGE_BIT);
        reportBuffer[0] |= (data.blueOn << BLUE_BIT);
    14fc:	32 95       	swap	r19
    14fe:	30 7f       	andi	r19, 0xF0	; 240
    1500:	3a 2b       	or	r19, r26
        reportBuffer[0] |= (data.yellowOn << YELLOW_BIT);
        reportBuffer[0] |= (data.redOn << RED_BIT);
        reportBuffer[0] |= (data.greenOn << GREEN_BIT);
    1502:	ff 0f       	add	r31, r31
    1504:	ff 0f       	add	r31, r31
    1506:	ee 0f       	add	r30, r30
    1508:	ee 0f       	add	r30, r30
    150a:	ee 0f       	add	r30, r30
    150c:	ef 2b       	or	r30, r31
    150e:	99 0f       	add	r25, r25
    1510:	9e 2b       	or	r25, r30
    1512:	93 2b       	or	r25, r19
    1514:	90 93 04 01 	sts	0x0104, r25

        // On the PS3, the strumming shows up as a hat switch, so we have to use conditionals for this..
        if (data.upOn)
    1518:	bb 23       	and	r27, r27
    151a:	11 f0       	breq	.+4      	; 0x1520 <sendData+0x7c>
                reportBuffer[2] = 0b00000000;
    151c:	10 92 06 01 	sts	0x0106, r1
        if (data.downOn)
    1520:	44 23       	and	r20, r20
    1522:	19 f0       	breq	.+6      	; 0x152a <sendData+0x86>
                reportBuffer[2] = 0b00000100;
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	80 93 06 01 	sts	0x0106, r24

        reportBuffer[1] |= (data.plusOn << PLUS_BIT);
    152a:	22 0f       	add	r18, r18
    152c:	80 91 05 01 	lds	r24, 0x0105
    1530:	82 2b       	or	r24, r18
    1532:	80 93 05 01 	sts	0x0105, r24
        reportBuffer[0] |= (data.minusOn << MINUS_BIT);
    1536:	52 95       	swap	r21
    1538:	55 0f       	add	r21, r21
    153a:	50 7e       	andi	r21, 0xE0	; 224
    153c:	80 91 04 01 	lds	r24, 0x0104
    1540:	85 2b       	or	r24, r21
    1542:	80 93 04 01 	sts	0x0104, r24

        //Then we finish off some USB stuff.
        wdt_reset();  //Reset the watchdog timer
    1546:	a8 95       	wdr
        usbPoll();    //USB poll - must be called at least once per 10ms
    1548:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <usbPoll>

        // Now, regardless of mode, we have to send the data to the 
        // USB controlling library from the buffer we've been building
        if(usbInterruptIsReady())
    154c:	80 91 16 01 	lds	r24, 0x0116
    1550:	84 ff       	sbrs	r24, 4
    1552:	05 c0       	rjmp	.+10     	; 0x155e <sendData+0xba>
        {
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	67 e0       	ldi	r22, 0x07	; 7
    155a:	0e 94 16 0c 	call	0x182c	; 0x182c <usbSetInterrupt>
        }
                

}
    155e:	29 96       	adiw	r28, 0x09	; 9
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <startCommunication>:
	reportBuffer[5] = 0b10000000;
	reportBuffer[6] = 0b00000000;
*/

    // First, set up all the USB communication stuff
    wdt_enable(WDTO_1S);
    1574:	2e e0       	ldi	r18, 0x0E	; 14
    1576:	88 e1       	ldi	r24, 0x18	; 24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	a8 95       	wdr
    1580:	80 93 60 00 	sts	0x0060, r24
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	20 93 60 00 	sts	0x0060, r18
     * RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

    usbInit();
    158a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    158e:	54 9a       	sbi	0x0a, 4	; 10
    1590:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1592:	40 ea       	ldi	r20, 0xA0	; 160
    1594:	5f e0       	ldi	r21, 0x0F	; 15
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <startCommunication+0x2c>
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
    1598:	a8 95       	wdr
    159a:	ca 01       	movw	r24, r20
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <startCommunication+0x28>
     */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
    15a0:	21 50       	subi	r18, 0x01	; 1
    15a2:	d1 f7       	brne	.-12     	; 0x1598 <startCommunication+0x24>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
    15a4:	54 98       	cbi	0x0a, 4	; 10
    sei();
    15a6:	78 94       	sei
	usbPoll();
    15a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <usbPoll>
}
    15ac:	08 95       	ret

000015ae <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    15ae:	e9 e6       	ldi	r30, 0x69	; 105
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8c 60       	ori	r24, 0x0C	; 12
    15b6:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    15b8:	e9 9a       	sbi	0x1d, 1	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    15ba:	8b e4       	ldi	r24, 0x4B	; 75
    15bc:	80 93 17 01 	sts	0x0117, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    15c0:	80 93 42 01 	sts	0x0142, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    15c4:	8a e5       	ldi	r24, 0x5A	; 90
    15c6:	80 93 16 01 	sts	0x0116, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
    15ca:	80 93 41 01 	sts	0x0141, r24
#endif
#endif
}
    15ce:	08 95       	ret

000015d0 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    15d6:	90 91 27 01 	lds	r25, 0x0127
    15da:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
    15dc:	97 fd       	sbrc	r25, 7
    15de:	a8 c0       	rjmp	.+336    	; 0x1730 <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    15e0:	20 91 24 01 	lds	r18, 0x0124
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    15e4:	80 91 23 01 	lds	r24, 0x0123
    15e8:	8d 32       	cpi	r24, 0x2D	; 45
    15ea:	09 f0       	breq	.+2      	; 0x15ee <usbPoll+0x1e>
    15ec:	9f c0       	rjmp	.+318    	; 0x172c <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    15ee:	98 30       	cpi	r25, 0x08	; 8
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <usbPoll+0x24>
    15f2:	9c c0       	rjmp	.+312    	; 0x172c <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    15f4:	cc e0       	ldi	r28, 0x0C	; 12
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	c2 1b       	sub	r28, r18
    15fa:	d1 09       	sbc	r29, r1
    15fc:	c5 5d       	subi	r28, 0xD5	; 213
    15fe:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    1600:	83 ec       	ldi	r24, 0xC3	; 195
    1602:	80 93 0b 01 	sts	0x010B, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    1606:	8a e5       	ldi	r24, 0x5A	; 90
    1608:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
    160c:	10 92 03 01 	sts	0x0103, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    1610:	88 81       	ld	r24, Y
    1612:	80 76       	andi	r24, 0x60	; 96
    1614:	29 f0       	breq	.+10     	; 0x1620 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    1616:	ce 01       	movw	r24, r28
    1618:	0e 94 2f 0a 	call	0x145e	; 0x145e <usbFunctionSetup>
    161c:	28 2f       	mov	r18, r24
    161e:	7d c0       	rjmp	.+250    	; 0x171a <usbPoll+0x14a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    1622:	10 92 14 01 	sts	0x0114, r1
    SWITCH_START(rq->bRequest)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    1628:	88 23       	and	r24, r24
    162a:	21 f4       	brne	.+8      	; 0x1634 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    162c:	10 92 15 01 	sts	0x0115, r1
    1630:	22 e0       	ldi	r18, 0x02	; 2
    1632:	6d c0       	rjmp	.+218    	; 0x170e <usbPoll+0x13e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    1634:	85 30       	cpi	r24, 0x05	; 5
    1636:	19 f4       	brne	.+6      	; 0x163e <usbPoll+0x6e>
        usbNewDeviceAddr = value;
    1638:	90 93 28 01 	sts	0x0128, r25
    163c:	67 c0       	rjmp	.+206    	; 0x170c <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    163e:	86 30       	cpi	r24, 0x06	; 6
    1640:	09 f0       	breq	.+2      	; 0x1644 <usbPoll+0x74>
    1642:	4e c0       	rjmp	.+156    	; 0x16e0 <usbPoll+0x110>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	41 f4       	brne	.+16     	; 0x165a <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    164a:	86 ee       	ldi	r24, 0xE6	; 230
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	90 93 26 01 	sts	0x0126, r25
    1652:	80 93 25 01 	sts	0x0125, r24
    1656:	22 e1       	ldi	r18, 0x12	; 18
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	41 f4       	brne	.+16     	; 0x166e <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    165e:	88 ef       	ldi	r24, 0xF8	; 248
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	90 93 26 01 	sts	0x0126, r25
    1666:	80 93 25 01 	sts	0x0125, r24
    166a:	29 e2       	ldi	r18, 0x29	; 41
    166c:	35 c0       	rjmp	.+106    	; 0x16d8 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	f1 f4       	brne	.+60     	; 0x16ae <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    1672:	99 23       	and	r25, r25
    1674:	41 f4       	brne	.+16     	; 0x1686 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    1676:	82 eb       	ldi	r24, 0xB2	; 178
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	90 93 26 01 	sts	0x0126, r25
    167e:	80 93 25 01 	sts	0x0125, r24
    1682:	24 e0       	ldi	r18, 0x04	; 4
    1684:	29 c0       	rjmp	.+82     	; 0x16d8 <usbPoll+0x108>
        SWITCH_CASE(1)
    1686:	91 30       	cpi	r25, 0x01	; 1
    1688:	41 f4       	brne	.+16     	; 0x169a <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    168a:	86 eb       	ldi	r24, 0xB6	; 182
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 93 26 01 	sts	0x0126, r25
    1692:	80 93 25 01 	sts	0x0125, r24
    1696:	2c e1       	ldi	r18, 0x1C	; 28
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <usbPoll+0x108>
        SWITCH_CASE(2)
    169a:	92 30       	cpi	r25, 0x02	; 2
    169c:	e1 f4       	brne	.+56     	; 0x16d6 <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    169e:	82 ed       	ldi	r24, 0xD2	; 210
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	90 93 26 01 	sts	0x0126, r25
    16a6:	80 93 25 01 	sts	0x0125, r24
    16aa:	24 e1       	ldi	r18, 0x14	; 20
    16ac:	15 c0       	rjmp	.+42     	; 0x16d8 <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    16ae:	81 32       	cpi	r24, 0x21	; 33
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	90 93 26 01 	sts	0x0126, r25
    16ba:	80 93 25 01 	sts	0x0125, r24
    16be:	29 e0       	ldi	r18, 0x09	; 9
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    16c2:	82 32       	cpi	r24, 0x22	; 34
    16c4:	41 f4       	brne	.+16     	; 0x16d6 <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    16c6:	88 e6       	ldi	r24, 0x68	; 104
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	90 93 26 01 	sts	0x0126, r25
    16ce:	80 93 25 01 	sts	0x0125, r24
    16d2:	2a e4       	ldi	r18, 0x4A	; 74
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <usbPoll+0x108>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    16d8:	80 e4       	ldi	r24, 0x40	; 64
    16da:	80 93 03 01 	sts	0x0103, r24
    16de:	1d c0       	rjmp	.+58     	; 0x171a <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    16e0:	88 30       	cpi	r24, 0x08	; 8
    16e2:	21 f4       	brne	.+8      	; 0x16ec <usbPoll+0x11c>
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	8a e2       	ldi	r24, 0x2A	; 42
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    16ec:	89 30       	cpi	r24, 0x09	; 9
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <usbPoll+0x126>
        usbConfiguration = value;
    16f0:	90 93 2a 01 	sts	0x012A, r25
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    16f6:	8a 30       	cpi	r24, 0x0A	; 10
    16f8:	11 f4       	brne	.+4      	; 0x16fe <usbPoll+0x12e>
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <usbPoll+0x13e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    16fe:	8b 30       	cpi	r24, 0x0B	; 11
    1700:	29 f4       	brne	.+10     	; 0x170c <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1702:	8b e4       	ldi	r24, 0x4B	; 75
    1704:	80 93 17 01 	sts	0x0117, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1708:	80 93 42 01 	sts	0x0142, r24
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	84 e1       	ldi	r24, 0x14	; 20
    1710:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    1712:	90 93 26 01 	sts	0x0126, r25
    1716:	80 93 25 01 	sts	0x0125, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	88 23       	and	r24, r24
    171e:	21 f4       	brne	.+8      	; 0x1728 <usbPoll+0x158>
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	82 17       	cp	r24, r18
    1724:	08 f4       	brcc	.+2      	; 0x1728 <usbPoll+0x158>
    1726:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    1728:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    172c:	10 92 27 01 	sts	0x0127, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    1730:	80 91 00 01 	lds	r24, 0x0100
    1734:	84 ff       	sbrs	r24, 4
    1736:	4a c0       	rjmp	.+148    	; 0x17cc <usbPoll+0x1fc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    1738:	80 91 01 01 	lds	r24, 0x0101
    173c:	8f 3f       	cpi	r24, 0xFF	; 255
    173e:	09 f4       	brne	.+2      	; 0x1742 <usbPoll+0x172>
    1740:	45 c0       	rjmp	.+138    	; 0x17cc <usbPoll+0x1fc>
    1742:	18 2f       	mov	r17, r24
    1744:	89 30       	cpi	r24, 0x09	; 9
    1746:	08 f0       	brcs	.+2      	; 0x174a <usbPoll+0x17a>
    1748:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    174a:	81 1b       	sub	r24, r17
    174c:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    1750:	80 91 0b 01 	lds	r24, 0x010B
    1754:	98 e8       	ldi	r25, 0x88	; 136
    1756:	89 27       	eor	r24, r25
    1758:	80 93 0b 01 	sts	0x010B, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    175c:	11 23       	and	r17, r17
    175e:	41 f1       	breq	.+80     	; 0x17b0 <usbPoll+0x1e0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    1760:	20 91 25 01 	lds	r18, 0x0125
    1764:	30 91 26 01 	lds	r19, 0x0126
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1768:	80 91 03 01 	lds	r24, 0x0103
    176c:	86 ff       	sbrs	r24, 6
    176e:	0d c0       	rjmp	.+26     	; 0x178a <usbPoll+0x1ba>
    1770:	ac e0       	ldi	r26, 0x0C	; 12
    1772:	b1 e0       	ldi	r27, 0x01	; 1
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    1778:	f9 01       	movw	r30, r18
    177a:	e8 0f       	add	r30, r24
    177c:	f9 1f       	adc	r31, r25
    177e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    1780:	ed 93       	st	X+, r30
    1782:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    1784:	18 17       	cp	r17, r24
    1786:	c1 f7       	brne	.-16     	; 0x1778 <usbPoll+0x1a8>
    1788:	08 c0       	rjmp	.+16     	; 0x179a <usbPoll+0x1ca>
    178a:	91 2f       	mov	r25, r17
    178c:	d9 01       	movw	r26, r18
    178e:	ec e0       	ldi	r30, 0x0C	; 12
    1790:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    1792:	8d 91       	ld	r24, X+
    1794:	81 93       	st	Z+, r24
                }while(--i);
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	e1 f7       	brne	.-8      	; 0x1792 <usbPoll+0x1c2>
    179a:	11 50       	subi	r17, 0x01	; 1
    179c:	81 2f       	mov	r24, r17
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	1f 5f       	subi	r17, 0xFF	; 255
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    17a8:	90 93 26 01 	sts	0x0126, r25
    17ac:	80 93 25 01 	sts	0x0125, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    17b0:	8c e0       	ldi	r24, 0x0C	; 12
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	61 2f       	mov	r22, r17
    17b6:	0e 94 4d 0c 	call	0x189a	; 0x189a <usbCrc16Append>
        len += 4;           /* length including sync byte */
    17ba:	61 2f       	mov	r22, r17
    17bc:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    17be:	6c 30       	cpi	r22, 0x0C	; 12
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <usbPoll+0x1f8>
            usbMsgLen = USB_NO_MSG;
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    17c8:	60 93 00 01 	sts	0x0100, r22
    17cc:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    17ce:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    17d0:	88 71       	andi	r24, 0x18	; 24
    17d2:	31 f4       	brne	.+12     	; 0x17e0 <usbPoll+0x210>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	d9 f7       	brne	.-10     	; 0x17ce <usbPoll+0x1fe>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    17d8:	10 92 28 01 	sts	0x0128, r1
    usbDeviceAddr = 0;
    17dc:	10 92 22 01 	sts	0x0122, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	08 95       	ret

000017e8 <usbSetInterrupt3>:
}
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    17e8:	1f 93       	push	r17
    17ea:	dc 01       	movw	r26, r24
    17ec:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    17ee:	80 91 41 01 	lds	r24, 0x0141
    17f2:	84 ff       	sbrs	r24, 4
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <usbSetInterrupt3+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    17f6:	80 91 42 01 	lds	r24, 0x0142
    17fa:	98 e8       	ldi	r25, 0x88	; 136
    17fc:	89 27       	eor	r24, r25
    17fe:	80 93 42 01 	sts	0x0142, r24
    1802:	03 c0       	rjmp	.+6      	; 0x180a <usbSetInterrupt3+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    1804:	8a e5       	ldi	r24, 0x5A	; 90
    1806:	80 93 41 01 	sts	0x0141, r24
    180a:	91 2f       	mov	r25, r17
    180c:	e3 e4       	ldi	r30, 0x43	; 67
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    1810:	8d 91       	ld	r24, X+
    1812:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	e1 f7       	brne	.-8      	; 0x1810 <usbSetInterrupt3+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    1818:	83 e4       	ldi	r24, 0x43	; 67
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	61 2f       	mov	r22, r17
    181e:	0e 94 4d 0c 	call	0x189a	; 0x189a <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    1822:	1c 5f       	subi	r17, 0xFC	; 252
    1824:	10 93 41 01 	sts	0x0141, r17

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
}
    1828:	1f 91       	pop	r17
    182a:	08 95       	ret

0000182c <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    182c:	1f 93       	push	r17
    182e:	dc 01       	movw	r26, r24
    1830:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    1832:	80 91 16 01 	lds	r24, 0x0116
    1836:	84 ff       	sbrs	r24, 4
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    183a:	80 91 17 01 	lds	r24, 0x0117
    183e:	98 e8       	ldi	r25, 0x88	; 136
    1840:	89 27       	eor	r24, r25
    1842:	80 93 17 01 	sts	0x0117, r24
    1846:	03 c0       	rjmp	.+6      	; 0x184e <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    1848:	8a e5       	ldi	r24, 0x5A	; 90
    184a:	80 93 16 01 	sts	0x0116, r24
    184e:	91 2f       	mov	r25, r17
    1850:	e8 e1       	ldi	r30, 0x18	; 24
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    1854:	8d 91       	ld	r24, X+
    1856:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    1858:	91 50       	subi	r25, 0x01	; 1
    185a:	e1 f7       	brne	.-8      	; 0x1854 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    185c:	88 e1       	ldi	r24, 0x18	; 24
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	61 2f       	mov	r22, r17
    1862:	0e 94 4d 0c 	call	0x189a	; 0x189a <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    1866:	1c 5f       	subi	r17, 0xFC	; 252
    1868:	10 93 16 01 	sts	0x0116, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    186c:	1f 91       	pop	r17
    186e:	08 95       	ret

00001870 <usbCrc16>:
    1870:	a8 2f       	mov	r26, r24
    1872:	b9 2f       	mov	r27, r25
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	50 ea       	ldi	r21, 0xA0	; 160
    187c:	60 95       	com	r22
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <usbCrcLoopEntry>

00001882 <usbCrcByteLoop>:
    1882:	2d 91       	ld	r18, X+
    1884:	82 27       	eor	r24, r18

00001886 <usbCrcBitLoop>:
    1886:	97 95       	ror	r25
    1888:	87 95       	ror	r24
    188a:	10 f0       	brcs	.+4      	; 0x1890 <usbCrcNoXor>
    188c:	84 27       	eor	r24, r20
    188e:	95 27       	eor	r25, r21

00001890 <usbCrcNoXor>:
    1890:	30 5e       	subi	r19, 0xE0	; 224
    1892:	c8 f3       	brcs	.-14     	; 0x1886 <usbCrcBitLoop>

00001894 <usbCrcLoopEntry>:
    1894:	6f 5f       	subi	r22, 0xFF	; 255
    1896:	a8 f3       	brcs	.-22     	; 0x1882 <usbCrcByteLoop>

00001898 <usbCrcReady>:
    1898:	08 95       	ret

0000189a <usbCrc16Append>:
    189a:	ea df       	rcall	.-44     	; 0x1870 <usbCrc16>
    189c:	8d 93       	st	X+, r24
    189e:	9d 93       	st	X+, r25
    18a0:	08 95       	ret

000018a2 <__vector_2>:
    18a2:	cf 93       	push	r28
    18a4:	cf b7       	in	r28, 0x3f	; 63
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29

000018aa <waitForJ>:
    18aa:	c3 95       	inc	r28
    18ac:	4c 9b       	sbis	0x09, 4	; 9
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <waitForJ>

000018b0 <waitForK>:
    18b0:	4c 9b       	sbis	0x09, 4	; 9
    18b2:	0b c0       	rjmp	.+22     	; 0x18ca <foundK>
    18b4:	4c 9b       	sbis	0x09, 4	; 9
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <foundK>
    18b8:	4c 9b       	sbis	0x09, 4	; 9
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <foundK>
    18bc:	4c 9b       	sbis	0x09, 4	; 9
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <foundK>
    18c0:	4c 9b       	sbis	0x09, 4	; 9
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <foundK>
    18c4:	4c 9b       	sbis	0x09, 4	; 9
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <foundK>
    18c8:	8b c0       	rjmp	.+278    	; 0x19e0 <sofError>

000018ca <foundK>:
    18ca:	6f 93       	push	r22
    18cc:	c0 91 24 01 	lds	r28, 0x0124
    18d0:	dd 27       	eor	r29, r29
    18d2:	c5 5d       	subi	r28, 0xD5	; 213
    18d4:	de 4f       	sbci	r29, 0xFE	; 254
    18d6:	2f 93       	push	r18
    18d8:	65 e5       	ldi	r22, 0x55	; 85
    18da:	4c 9b       	sbis	0x09, 4	; 9
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <haveTwoBitsK>
    18de:	2f 91       	pop	r18
    18e0:	6f 91       	pop	r22
    18e2:	e6 cf       	rjmp	.-52     	; 0x18b0 <waitForK>

000018e4 <haveTwoBitsK>:
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	4f 93       	push	r20
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	40 e1       	ldi	r20, 0x10	; 16
    18ee:	5f 93       	push	r21
    18f0:	09 b1       	in	r16, 0x09	; 9
    18f2:	08 71       	andi	r16, 0x18	; 24
    18f4:	04 fb       	bst	r16, 4
    18f6:	27 f9       	bld	r18, 7
    18f8:	3f 93       	push	r19
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	3b e0       	ldi	r19, 0x0B	; 11
    18fe:	39 c0       	rjmp	.+114    	; 0x1972 <rxbit1>

00001900 <unstuff6>:
    1900:	18 71       	andi	r17, 0x18	; 24
    1902:	40 64       	ori	r20, 0x40	; 64
    1904:	2f 77       	andi	r18, 0x7F	; 127
    1906:	01 2f       	mov	r16, r17
    1908:	5f 5f       	subi	r21, 0xFF	; 255
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <didUnstuff6>

0000190c <unstuff7>:
    190c:	40 68       	ori	r20, 0x80	; 128
    190e:	19 b1       	in	r17, 0x09	; 9
    1910:	18 71       	andi	r17, 0x18	; 24
    1912:	2f 77       	andi	r18, 0x7F	; 127
    1914:	52 50       	subi	r21, 0x02	; 2
    1916:	1f c0       	rjmp	.+62     	; 0x1956 <didUnstuff7>

00001918 <unstuffEven>:
    1918:	40 64       	ori	r20, 0x40	; 64
    191a:	09 b1       	in	r16, 0x09	; 9
    191c:	2f 77       	andi	r18, 0x7F	; 127
    191e:	08 71       	andi	r16, 0x18	; 24
    1920:	d1 f1       	breq	.+116    	; 0x1996 <se0>
    1922:	5f 5f       	subi	r21, 0xFF	; 255
    1924:	00 c0       	rjmp	.+0      	; 0x1926 <unstuffEven+0xe>
    1926:	23 c0       	rjmp	.+70     	; 0x196e <didUnstuffE>

00001928 <unstuffOdd>:
    1928:	40 62       	ori	r20, 0x20	; 32
    192a:	19 b1       	in	r17, 0x09	; 9
    192c:	2f 77       	andi	r18, 0x7F	; 127
    192e:	18 71       	andi	r17, 0x18	; 24
    1930:	91 f1       	breq	.+100    	; 0x1996 <se0>
    1932:	5f 5f       	subi	r21, 0xFF	; 255
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <unstuffOdd+0xe>
    1936:	25 c0       	rjmp	.+74     	; 0x1982 <didUnstuffO>

00001938 <rxByteLoop>:
    1938:	08 71       	andi	r16, 0x18	; 24
    193a:	10 27       	eor	r17, r16
    193c:	51 50       	subi	r21, 0x01	; 1
    193e:	12 f4       	brpl	.+4      	; 0x1944 <skipLeap>
    1940:	5d 5f       	subi	r21, 0xFD	; 253
	...

00001944 <skipLeap>:
    1944:	11 50       	subi	r17, 0x01	; 1
    1946:	27 95       	ror	r18

00001948 <didUnstuff6>:
    1948:	2c 3f       	cpi	r18, 0xFC	; 252
    194a:	19 b1       	in	r17, 0x09	; 9
    194c:	c8 f6       	brcc	.-78     	; 0x1900 <unstuff6>
    194e:	18 71       	andi	r17, 0x18	; 24
    1950:	01 27       	eor	r16, r17
    1952:	01 50       	subi	r16, 0x01	; 1
    1954:	27 95       	ror	r18

00001956 <didUnstuff7>:
    1956:	2c 3f       	cpi	r18, 0xFC	; 252
    1958:	c8 f6       	brcc	.-78     	; 0x190c <unstuff7>
    195a:	42 27       	eor	r20, r18
    195c:	49 93       	st	Y+, r20

0000195e <rxBitLoop>:
    195e:	09 b1       	in	r16, 0x09	; 9
    1960:	08 71       	andi	r16, 0x18	; 24
    1962:	10 27       	eor	r17, r16
    1964:	4f 73       	andi	r20, 0x3F	; 63
    1966:	11 50       	subi	r17, 0x01	; 1
    1968:	27 95       	ror	r18
    196a:	2c 3f       	cpi	r18, 0xFC	; 252
    196c:	a8 f6       	brcc	.-86     	; 0x1918 <unstuffEven>

0000196e <didUnstuffE>:
    196e:	46 95       	lsr	r20
    1970:	46 95       	lsr	r20

00001972 <rxbit1>:
    1972:	19 b1       	in	r17, 0x09	; 9
    1974:	18 71       	andi	r17, 0x18	; 24
    1976:	79 f0       	breq	.+30     	; 0x1996 <se0>
    1978:	01 27       	eor	r16, r17
    197a:	01 50       	subi	r16, 0x01	; 1
    197c:	27 95       	ror	r18
    197e:	2c 3f       	cpi	r18, 0xFC	; 252
    1980:	98 f6       	brcc	.-90     	; 0x1928 <unstuffOdd>

00001982 <didUnstuffO>:
    1982:	6b 5a       	subi	r22, 0xAB	; 171
    1984:	60 f3       	brcs	.-40     	; 0x195e <rxBitLoop>
    1986:	31 50       	subi	r19, 0x01	; 1
    1988:	09 b1       	in	r16, 0x09	; 9
    198a:	b0 f6       	brcc	.-84     	; 0x1938 <rxByteLoop>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <overflow>

0000198e <overflow>:
    198e:	12 e0       	ldi	r17, 0x02	; 2
    1990:	1c bb       	out	0x1c, r17	; 28

00001992 <ignorePacket>:
    1992:	00 27       	eor	r16, r16
    1994:	19 c0       	rjmp	.+50     	; 0x19c8 <handleSetupOrOut>

00001996 <se0>:
    1996:	3b 50       	subi	r19, 0x0B	; 11
    1998:	31 95       	neg	r19
    199a:	c3 1b       	sub	r28, r19
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	12 e0       	ldi	r17, 0x02	; 2
    19a0:	1c bb       	out	0x1c, r17	; 28
    19a2:	08 81       	ld	r16, Y
    19a4:	03 3c       	cpi	r16, 0xC3	; 195
    19a6:	09 f1       	breq	.+66     	; 0x19ea <handleData>
    19a8:	0b 34       	cpi	r16, 0x4B	; 75
    19aa:	f9 f0       	breq	.+62     	; 0x19ea <handleData>
    19ac:	20 91 22 01 	lds	r18, 0x0122
    19b0:	19 81       	ldd	r17, Y+1	; 0x01
    19b2:	11 0f       	add	r17, r17
    19b4:	12 13       	cpse	r17, r18
    19b6:	ed cf       	rjmp	.-38     	; 0x1992 <ignorePacket>
    19b8:	4a 81       	ldd	r20, Y+2	; 0x02
    19ba:	44 1f       	adc	r20, r20
    19bc:	09 36       	cpi	r16, 0x69	; 105
    19be:	51 f1       	breq	.+84     	; 0x1a14 <handleIn>
    19c0:	0d 32       	cpi	r16, 0x2D	; 45
    19c2:	11 f0       	breq	.+4      	; 0x19c8 <handleSetupOrOut>
    19c4:	01 3e       	cpi	r16, 0xE1	; 225
    19c6:	29 f7       	brne	.-54     	; 0x1992 <ignorePacket>

000019c8 <handleSetupOrOut>:
    19c8:	00 93 29 01 	sts	0x0129, r16

000019cc <doReturn>:
    19cc:	3f 91       	pop	r19
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	2f 91       	pop	r18
    19d8:	6f 91       	pop	r22
    19da:	cc b3       	in	r28, 0x1c	; 28
    19dc:	c1 fd       	sbrc	r28, 1
    19de:	65 cf       	rjmp	.-310    	; 0x18aa <waitForJ>

000019e0 <sofError>:
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	cf bf       	out	0x3f, r28	; 63
    19e6:	cf 91       	pop	r28
    19e8:	18 95       	reti

000019ea <handleData>:
    19ea:	20 91 29 01 	lds	r18, 0x0129
    19ee:	22 23       	and	r18, r18
    19f0:	69 f3       	breq	.-38     	; 0x19cc <doReturn>
    19f2:	10 91 27 01 	lds	r17, 0x0127
    19f6:	11 23       	and	r17, r17
    19f8:	e9 f5       	brne	.+122    	; 0x1a74 <sendNakAndReti>
    19fa:	34 30       	cpi	r19, 0x04	; 4
    19fc:	ea f1       	brmi	.+122    	; 0x1a78 <sendAckAndReti>
    19fe:	30 93 27 01 	sts	0x0127, r19
    1a02:	20 93 23 01 	sts	0x0123, r18
    1a06:	10 91 24 01 	lds	r17, 0x0124
    1a0a:	3b e0       	ldi	r19, 0x0B	; 11
    1a0c:	31 1b       	sub	r19, r17
    1a0e:	30 93 24 01 	sts	0x0124, r19
    1a12:	32 c0       	rjmp	.+100    	; 0x1a78 <sendAckAndReti>

00001a14 <handleIn>:
    1a14:	00 91 27 01 	lds	r16, 0x0127
    1a18:	01 30       	cpi	r16, 0x01	; 1
    1a1a:	64 f5       	brge	.+88     	; 0x1a74 <sendNakAndReti>
    1a1c:	0a e5       	ldi	r16, 0x5A	; 90
    1a1e:	4f 70       	andi	r20, 0x0F	; 15
    1a20:	49 f4       	brne	.+18     	; 0x1a34 <handleIn1>
    1a22:	30 91 00 01 	lds	r19, 0x0100
    1a26:	34 fd       	sbrc	r19, 4
    1a28:	28 c0       	rjmp	.+80     	; 0x1a7a <sendCntAndReti>
    1a2a:	00 93 00 01 	sts	0x0100, r16
    1a2e:	cb e0       	ldi	r28, 0x0B	; 11
    1a30:	d1 e0       	ldi	r29, 0x01	; 1
    1a32:	27 c0       	rjmp	.+78     	; 0x1a82 <usbSendAndReti>

00001a34 <handleIn1>:
    1a34:	41 35       	cpi	r20, 0x51	; 81
    1a36:	49 f0       	breq	.+18     	; 0x1a4a <handleIn3>
    1a38:	30 91 16 01 	lds	r19, 0x0116
    1a3c:	34 fd       	sbrc	r19, 4
    1a3e:	1d c0       	rjmp	.+58     	; 0x1a7a <sendCntAndReti>
    1a40:	00 93 16 01 	sts	0x0116, r16
    1a44:	c7 e1       	ldi	r28, 0x17	; 23
    1a46:	d1 e0       	ldi	r29, 0x01	; 1
    1a48:	1c c0       	rjmp	.+56     	; 0x1a82 <usbSendAndReti>

00001a4a <handleIn3>:
    1a4a:	30 91 41 01 	lds	r19, 0x0141
    1a4e:	34 fd       	sbrc	r19, 4
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <sendCntAndReti>
    1a52:	00 93 41 01 	sts	0x0141, r16
    1a56:	c2 e4       	ldi	r28, 0x42	; 66
    1a58:	d1 e0       	ldi	r29, 0x01	; 1
    1a5a:	13 c0       	rjmp	.+38     	; 0x1a82 <usbSendAndReti>

00001a5c <bitstuffN>:
    1a5c:	05 27       	eor	r16, r21
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	00 c0       	rjmp	.+0      	; 0x1a62 <bitstuffN+0x6>
    1a62:	00 00       	nop
    1a64:	0b b9       	out	0x0b, r16	; 11
    1a66:	1a c0       	rjmp	.+52     	; 0x1a9c <didStuffN>

00001a68 <bitstuff6>:
    1a68:	05 27       	eor	r16, r21
    1a6a:	10 e0       	ldi	r17, 0x00	; 0
    1a6c:	22 1f       	adc	r18, r18
    1a6e:	1d c0       	rjmp	.+58     	; 0x1aaa <didStuff6>

00001a70 <bitstuff7>:
    1a70:	10 e0       	ldi	r17, 0x00	; 0
    1a72:	21 c0       	rjmp	.+66     	; 0x1ab6 <didStuff7>

00001a74 <sendNakAndReti>:
    1a74:	4a e5       	ldi	r20, 0x5A	; 90
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <sendX3AndReti>

00001a78 <sendAckAndReti>:
    1a78:	32 ed       	ldi	r19, 0xD2	; 210

00001a7a <sendCntAndReti>:
    1a7a:	43 2f       	mov	r20, r19

00001a7c <sendX3AndReti>:
    1a7c:	c4 e1       	ldi	r28, 0x14	; 20
    1a7e:	d0 e0       	ldi	r29, 0x00	; 0
    1a80:	32 e0       	ldi	r19, 0x02	; 2

00001a82 <usbSendAndReti>:
    1a82:	1a b1       	in	r17, 0x0a	; 10
    1a84:	18 61       	ori	r17, 0x18	; 24
    1a86:	5c 9a       	sbi	0x0b, 4	; 11
    1a88:	0b b1       	in	r16, 0x0b	; 11
    1a8a:	1a b9       	out	0x0a, r17	; 10
    1a8c:	58 e1       	ldi	r21, 0x18	; 24
    1a8e:	20 e8       	ldi	r18, 0x80	; 128

00001a90 <txByteLoop>:
    1a90:	65 e3       	ldi	r22, 0x35	; 53

00001a92 <txBitLoop>:
    1a92:	20 ff       	sbrs	r18, 0
    1a94:	05 27       	eor	r16, r21
    1a96:	0b b9       	out	0x0b, r16	; 11
    1a98:	27 95       	ror	r18
    1a9a:	17 95       	ror	r17

00001a9c <didStuffN>:
    1a9c:	1c 3f       	cpi	r17, 0xFC	; 252
    1a9e:	f0 f6       	brcc	.-68     	; 0x1a5c <bitstuffN>
    1aa0:	66 95       	lsr	r22
    1aa2:	b8 f7       	brcc	.-18     	; 0x1a92 <txBitLoop>
    1aa4:	b1 f7       	brne	.-20     	; 0x1a92 <txBitLoop>
    1aa6:	20 ff       	sbrs	r18, 0
    1aa8:	05 27       	eor	r16, r21

00001aaa <didStuff6>:
    1aaa:	0b b9       	out	0x0b, r16	; 11
    1aac:	27 95       	ror	r18
    1aae:	17 95       	ror	r17
    1ab0:	1c 3f       	cpi	r17, 0xFC	; 252
    1ab2:	d0 f6       	brcc	.-76     	; 0x1a68 <bitstuff6>
    1ab4:	27 95       	ror	r18

00001ab6 <didStuff7>:
    1ab6:	17 95       	ror	r17
    1ab8:	17 ff       	sbrs	r17, 7
    1aba:	05 27       	eor	r16, r21
    1abc:	00 00       	nop
    1abe:	1c 3f       	cpi	r17, 0xFC	; 252
    1ac0:	0b b9       	out	0x0b, r16	; 11
    1ac2:	b0 f6       	brcc	.-84     	; 0x1a70 <bitstuff7>
    1ac4:	29 91       	ld	r18, Y+
    1ac6:	3a 95       	dec	r19
    1ac8:	19 f7       	brne	.-58     	; 0x1a90 <txByteLoop>
    1aca:	07 7e       	andi	r16, 0xE7	; 231
    1acc:	10 91 28 01 	lds	r17, 0x0128
    1ad0:	11 0f       	add	r17, r17
    1ad2:	c6 51       	subi	r28, 0x16	; 22
    1ad4:	d0 40       	sbci	r29, 0x00	; 0
    1ad6:	0b b9       	out	0x0b, r16	; 11
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <skipAddrAssign>
    1ada:	10 93 22 01 	sts	0x0122, r17

00001ade <skipAddrAssign>:
    1ade:	12 e0       	ldi	r17, 0x02	; 2
    1ae0:	1c bb       	out	0x1c, r17	; 28
    1ae2:	00 61       	ori	r16, 0x10	; 16
    1ae4:	1a b1       	in	r17, 0x0a	; 10
    1ae6:	17 7e       	andi	r17, 0xE7	; 231
    1ae8:	40 2f       	mov	r20, r16
    1aea:	47 7e       	andi	r20, 0xE7	; 231
    1aec:	54 e0       	ldi	r21, 0x04	; 4

00001aee <se0Delay>:
    1aee:	5a 95       	dec	r21
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <se0Delay>
    1af2:	0b b9       	out	0x0b, r16	; 11
    1af4:	1a b9       	out	0x0a, r17	; 10
    1af6:	4b b9       	out	0x0b, r20	; 11
    1af8:	69 cf       	rjmp	.-302    	; 0x19cc <doReturn>

00001afa <__eerd_block>:
    1afa:	a0 e0       	ldi	r26, 0x00	; 0
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e3 e8       	ldi	r30, 0x83	; 131
    1b00:	fd e0       	ldi	r31, 0x0D	; 13
    1b02:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__prologue_saves__+0x14>
    1b06:	7c 01       	movw	r14, r24
    1b08:	eb 01       	movw	r28, r22
    1b0a:	8a 01       	movw	r16, r20
    1b0c:	69 01       	movw	r12, r18
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <__eerd_block+0x28>
    1b10:	ce 01       	movw	r24, r28
    1b12:	21 96       	adiw	r28, 0x01	; 1
    1b14:	f6 01       	movw	r30, r12
    1b16:	09 95       	icall
    1b18:	f7 01       	movw	r30, r14
    1b1a:	81 93       	st	Z+, r24
    1b1c:	7f 01       	movw	r14, r30
    1b1e:	01 50       	subi	r16, 0x01	; 1
    1b20:	10 40       	sbci	r17, 0x00	; 0
    1b22:	01 15       	cp	r16, r1
    1b24:	11 05       	cpc	r17, r1
    1b26:	a1 f7       	brne	.-24     	; 0x1b10 <__eerd_block+0x16>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	e8 e0       	ldi	r30, 0x08	; 8
    1b2e:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__epilogue_restores__+0x14>

00001b32 <__eewr_block>:
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ef e9       	ldi	r30, 0x9F	; 159
    1b38:	fd e0       	ldi	r31, 0x0D	; 13
    1b3a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__prologue_saves__+0x14>
    1b3e:	ec 01       	movw	r28, r24
    1b40:	7b 01       	movw	r14, r22
    1b42:	8a 01       	movw	r16, r20
    1b44:	69 01       	movw	r12, r18
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <__eewr_block+0x28>
    1b48:	ce 01       	movw	r24, r28
    1b4a:	21 96       	adiw	r28, 0x01	; 1
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	61 91       	ld	r22, Z+
    1b50:	7f 01       	movw	r14, r30
    1b52:	f6 01       	movw	r30, r12
    1b54:	09 95       	icall
    1b56:	01 50       	subi	r16, 0x01	; 1
    1b58:	10 40       	sbci	r17, 0x00	; 0
    1b5a:	01 15       	cp	r16, r1
    1b5c:	11 05       	cpc	r17, r1
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <__eewr_block+0x16>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	e8 e0       	ldi	r30, 0x08	; 8
    1b66:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__epilogue_restores__+0x14>

00001b6a <__prologue_saves__>:
    1b6a:	2f 92       	push	r2
    1b6c:	3f 92       	push	r3
    1b6e:	4f 92       	push	r4
    1b70:	5f 92       	push	r5
    1b72:	6f 92       	push	r6
    1b74:	7f 92       	push	r7
    1b76:	8f 92       	push	r8
    1b78:	9f 92       	push	r9
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	ca 1b       	sub	r28, r26
    1b94:	db 0b       	sbc	r29, r27
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	09 94       	ijmp

00001ba2 <__epilogue_restores__>:
    1ba2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ba4:	39 88       	ldd	r3, Y+17	; 0x11
    1ba6:	48 88       	ldd	r4, Y+16	; 0x10
    1ba8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1baa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bac:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bae:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bb4:	b9 84       	ldd	r11, Y+9	; 0x09
    1bb6:	c8 84       	ldd	r12, Y+8	; 0x08
    1bb8:	df 80       	ldd	r13, Y+7	; 0x07
    1bba:	ee 80       	ldd	r14, Y+6	; 0x06
    1bbc:	fd 80       	ldd	r15, Y+5	; 0x05
    1bbe:	0c 81       	ldd	r16, Y+4	; 0x04
    1bc0:	1b 81       	ldd	r17, Y+3	; 0x03
    1bc2:	aa 81       	ldd	r26, Y+2	; 0x02
    1bc4:	b9 81       	ldd	r27, Y+1	; 0x01
    1bc6:	ce 0f       	add	r28, r30
    1bc8:	d1 1d       	adc	r29, r1
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	ed 01       	movw	r28, r26
    1bd6:	08 95       	ret

00001bd8 <_exit>:
    1bd8:	f8 94       	cli

00001bda <__stop_program>:
    1bda:	ff cf       	rjmp	.-2      	; 0x1bda <__stop_program>
