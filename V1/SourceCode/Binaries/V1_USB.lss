
V1_USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001c84  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c84  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800102  00800102  00001d3a  2**0
                  ALLOC
  3 .eeprom       00000168  00810000  00810000  00001d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000349  00000000  00000000  00001f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a9  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a3  00000000  00000000  00003c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001600  00000000  00000000  000044d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00005ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000830  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af8  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_2>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
      68:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
      78:	95 0d 05 09 19 01 29 0d 81 02 95 03 81 01 05 01     ......).........
      88:	25 07 46 3b 01 75 04 95 01 65 14 09 39 81 42 65     %.F;.u...e..9.Be
      98:	00 95 01 81 01 26 ff 00 46 ff 00 09 30 09 31 09     .....&..F...0.1.
      a8:	32 09 35 75 08 95 04 81 02 c0                       2.5u......

000000b2 <usbDescriptorString0>:
      b2:	04 03 09 04                                         ....

000000b6 <usbDescriptorStringVendor>:
      b6:	1c 03 4f 00 70 00 65 00 6e 00 43 00 68 00 6f 00     ..O.p.e.n.C.h.o.
      c6:	72 00 64 00 2e 00 6f 00 72 00 67 00                 r.d...o.r.g.

000000d2 <usbDescriptorStringDevice>:
      d2:	14 03 56 00 31 00 20 00 47 00 75 00 69 00 74 00     ..V.1. .G.u.i.t.
      e2:	61 00 72 00                                         a.r.

000000e6 <usbDescriptorDevice>:
      e6:	12 01 10 01 00 00 00 08 ba 12 00 02 00 01 01 02     ................
      f6:	00 01                                               ..

000000f8 <usbDescriptorConfiguration>:
      f8:	09 02 29 00 01 01 00 80 32 09 04 00 00 02 03 00     ..).....2.......
     108:	00 00 09 21 01 01 00 01 22 4a 00 07 05 81 03 08     ...!...."J......
     118:	00 0a 07 05 83 03 08 00 0a 00                       ..........

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d4 e0       	ldi	r29, 0x04	; 4
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e4 e8       	ldi	r30, 0x84	; 132
     136:	fc e1       	ldi	r31, 0x1C	; 28
     138:	02 c0       	rjmp	.+4      	; 0x13e <.do_copy_data_start>

0000013a <.do_copy_data_loop>:
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0

0000013e <.do_copy_data_start>:
     13e:	a2 30       	cpi	r26, 0x02	; 2
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <.do_copy_data_loop>

00000144 <__do_clear_bss>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a2 e0       	ldi	r26, 0x02	; 2
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	ad 34       	cpi	r26, 0x4D	; 77
     150:	b1 07       	cpc	r27, r17
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 06 01 	call	0x20c	; 0x20c <main>
     158:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     160:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     162:	f9 99       	sbic	0x1f, 1	; 31
     164:	fe cf       	rjmp	.-4      	; 0x162 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     166:	32 bd       	out	0x22, r19	; 34
     168:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     16a:	f8 9a       	sbi	0x1f, 0	; 31
     16c:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
     16e:	08 95       	ret

00000170 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
     170:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     172:	f9 99       	sbic	0x1f, 1	; 31
     174:	fe cf       	rjmp	.-4      	; 0x172 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     176:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     178:	32 bd       	out	0x22, r19	; 34
     17a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     17c:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	fa 9a       	sbi	0x1f, 2	; 31
     184:	f9 9a       	sbi	0x1f, 1	; 31
     186:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
     188:	08 95       	ret

0000018a <readFrets>:
};

//readF reads the frets for a single string, and returns an int acting as a boolean array
//  telling which frets are being touched by the string.
int readFrets(int guitarString, char stringPort)
{
     18a:	84 e1       	ldi	r24, 0x14	; 20
     18c:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
     18e:	00 00       	nop
			x--;
     190:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	8f 3f       	cpi	r24, 0xFF	; 255
     196:	92 07       	cpc	r25, r18
     198:	d1 f7       	brne	.-12     	; 0x18e <readFrets+0x4>
	// Next, since the fret pin is zero if the a fret is grounded, we do a mask to isolate each pin from 
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(FRET_1_PIN & (1<<FRET_1_PIN_NUM))) << 1); //green fret
     19a:	19 9b       	sbis	0x03, 1	; 3
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <readFrets+0x1a>
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <readFrets+0x1e>
     1a4:	a2 e0       	ldi	r26, 0x02	; 2
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
 	stringState |= ( (!(FRET_2_PIN & (1<<FRET_2_PIN_NUM))) << 2); //red fret
     1a8:	1a 9b       	sbis	0x03, 2	; 3
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <readFrets+0x28>
     1ac:	e0 e0       	ldi	r30, 0x00	; 0
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <readFrets+0x2c>
     1b2:	e4 e0       	ldi	r30, 0x04	; 4
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
 	stringState |= ( (!(FRET_3_PIN & (1<<FRET_3_PIN_NUM))) << 3); //yellow fret
     1b6:	1b 9b       	sbis	0x03, 3	; 3
     1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <readFrets+0x36>
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <readFrets+0x3a>
     1c0:	68 e0       	ldi	r22, 0x08	; 8
     1c2:	70 e0       	ldi	r23, 0x00	; 0
 	stringState |= ( (!(FRET_4_PIN & (1<<FRET_4_PIN_NUM))) << 4); //blue fret
     1c4:	1c 9b       	sbis	0x03, 4	; 3
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <readFrets+0x44>
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <readFrets+0x48>
     1ce:	40 e1       	ldi	r20, 0x10	; 16
     1d0:	50 e0       	ldi	r21, 0x00	; 0
 	stringState |= ( (!(FRET_5_PIN & (1<<FRET_5_PIN_NUM))) << 5); //orange fret
     1d2:	1d 9b       	sbis	0x03, 5	; 3
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <readFrets+0x52>
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <readFrets+0x56>
     1dc:	80 e2       	ldi	r24, 0x20	; 32
     1de:	90 e0       	ldi	r25, 0x00	; 0

	// Also, if we strummed a string, hold that in the 'zeroth' fret
 	stringState |= ( (!(PICK_PIN & (1<<PICK_PIN_NUM))) << 0); //pick touching the string
     1e0:	26 b1       	in	r18, 0x06	; 6
	//  the port, which will return a zero if pressed and non-zero if unpressed. So we ! that to get a 1 if
	//  the string touches that fret and a zero if it doesn't touch, which we then load into our storage 
	//  integer.

 	stringState |= ( (!(FRET_1_PIN & (1<<FRET_1_PIN_NUM))) << 1); //green fret
 	stringState |= ( (!(FRET_2_PIN & (1<<FRET_2_PIN_NUM))) << 2); //red fret
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	36 95       	lsr	r19
     1e6:	27 95       	ror	r18
     1e8:	36 95       	lsr	r19
     1ea:	27 95       	ror	r18
     1ec:	20 95       	com	r18
     1ee:	30 95       	com	r19
     1f0:	21 70       	andi	r18, 0x01	; 1
     1f2:	30 70       	andi	r19, 0x00	; 0
     1f4:	2a 2b       	or	r18, r26
     1f6:	3b 2b       	or	r19, r27
 	stringState |= ( (!(FRET_3_PIN & (1<<FRET_3_PIN_NUM))) << 3); //yellow fret
     1f8:	2e 2b       	or	r18, r30
     1fa:	3f 2b       	or	r19, r31
 	stringState |= ( (!(FRET_4_PIN & (1<<FRET_4_PIN_NUM))) << 4); //blue fret
     1fc:	26 2b       	or	r18, r22
     1fe:	37 2b       	or	r19, r23
 	stringState |= ( (!(FRET_5_PIN & (1<<FRET_5_PIN_NUM))) << 5); //orange fret
     200:	24 2b       	or	r18, r20
     202:	35 2b       	or	r19, r21
     204:	28 2b       	or	r18, r24
     206:	39 2b       	or	r19, r25
 	stringState |= ( (!(PICK_PIN & (1<<PICK_PIN_NUM))) << 0); //pick touching the string

	//Turn the string back HIGH and return
	stringPort |= (1<<guitarString); 
	return stringState;
}
     208:	c9 01       	movw	r24, r18
     20a:	08 95       	ret

0000020c <main>:
	 -Under config mode, the loop reads in the values of the strings and frets, assigns that current
	  string-fret combination to correspond to a button press, then locks that combination in when 
	  'Plus' is pressed and moves on to changing the next button.  It also sets the button data structure
	  to display the current controller button being programmed, and then sends that data to the controller.
*/ 
{
     20c:	2f 92       	push	r2
     20e:	3f 92       	push	r3
     210:	4f 92       	push	r4
     212:	5f 92       	push	r5
     214:	6f 92       	push	r6
     216:	7f 92       	push	r7
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	cf 92       	push	r12
     222:	df 92       	push	r13
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	df 93       	push	r29
     22e:	cf 93       	push	r28
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	c5 54       	subi	r28, 0x45	; 69
     236:	d1 40       	sbci	r29, 0x01	; 1
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
    // Now set up all the communication stuff - initialization routines
    //  set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
    startCommunication();
     242:	0e 94 0e 0b 	call	0x161c	; 0x161c <startCommunication>

	// First, set up the guitar stuff - These functions are stored in guitarInitFunctions.h/.c
	setPins();
     246:	0e 94 ca 04 	call	0x994	; 0x994 <setPins>
	setTimer();	
     24a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <setTimer>

    // Declaration of variables used in Main()
	int greenTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0}; //These give timing to properly read green buttons on each string.
     24e:	8c e0       	ldi	r24, 0x0C	; 12
     250:	de 01       	movw	r26, r28
     252:	50 96       	adiw	r26, 0x10	; 16
     254:	fd 01       	movw	r30, r26
     256:	28 2f       	mov	r18, r24
     258:	11 92       	st	Z+, r1
     25a:	2a 95       	dec	r18
     25c:	e9 f7       	brne	.-6      	; 0x258 <main+0x4c>
	int triedGreen[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};  // Also used for the green button timing thing
     25e:	9e 01       	movw	r18, r28
     260:	24 5e       	subi	r18, 0xE4	; 228
     262:	3f 4f       	sbci	r19, 0xFF	; 255
     264:	f9 01       	movw	r30, r18
     266:	98 2f       	mov	r25, r24
     268:	11 92       	st	Z+, r1
     26a:	9a 95       	dec	r25
     26c:	e9 f7       	brne	.-6      	; 0x268 <main+0x5c>
										// telling which frets a string is connected to,
										// with the 0th bit being if a string is being strummed
	int tempStringState[NUMBER_OF_STRINGS]; // Temporary place to record how the strings are
											// being pressed, for debouncing purposes

	int stringStateTimers[NUMBER_OF_STRINGS] = {0,0,0,0,0,0};
     26e:	ae 01       	movw	r20, r28
     270:	40 5c       	subi	r20, 0xC0	; 192
     272:	5f 4f       	sbci	r21, 0xFF	; 255
     274:	fa 01       	movw	r30, r20
     276:	11 92       	st	Z+, r1
     278:	8a 95       	dec	r24
     27a:	e9 f7       	brne	.-6      	; 0x276 <main+0x6a>
																	 // controller compares the string presses
																	 // to in order to judge if a button is being
																	 // pressed. It's the size of all the chord combinations,
																	 // but in Note Mode, only the first 5 blocks get looked at. 
	char configMode = 0; // Start in normal mode
	int buttonToAssign = 0; // declare some variables
     27c:	1c 82       	std	Y+4, r1	; 0x04
     27e:	1b 82       	std	Y+3, r1	; 0x03
	char plusLock = 0;
     280:	19 82       	std	Y+1, r1	; 0x01
	char previousPlusOn = 0; // This is used as a lock so we don't program all the buttons at once
     282:	1a 82       	std	Y+2, r1	; 0x02
	int debounceTimer = 0; // This is used as a global timer for debouncing buttons
     284:	1e 82       	std	Y+6, r1	; 0x06
     286:	1d 82       	std	Y+5, r1	; 0x05
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     288:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
     28a:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
     28c:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
     28e:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
     290:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
     292:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
     294:	1d 86       	std	Y+13, r1	; 0x0d
		data->plusOn   = 0;
     296:	1e 86       	std	Y+14, r1	; 0x0e
		data->minusOn  = 0;
     298:	1f 86       	std	Y+15, r1	; 0x0f
     29a:	44 24       	eor	r4, r4
     29c:	55 24       	eor	r5, r5
		// Allow some time for pins to restabilize
		doXnops(20);

		// Check the pick - it should have been pulled back up by now.  If it's
		// still grounded, then it's actually the hand grounding it
		if (!(PICK_PIN & (1 << PICK_PIN_NUM)))
     29e:	94 e3       	ldi	r25, 0x34	; 52
     2a0:	29 2e       	mov	r2, r25
     2a2:	31 2c       	mov	r3, r1
     2a4:	2c 0e       	add	r2, r28
     2a6:	3d 1e       	adc	r3, r29
		{
			for (int i = 0; i < NUMBER_OF_STRINGS; i++)
     2a8:	c1 01       	movw	r24, r2
     2aa:	0c 96       	adiw	r24, 0x0c	; 12
     2ac:	c4 5c       	subi	r28, 0xC4	; 196
     2ae:	de 4f       	sbci	r29, 0xFE	; 254
     2b0:	99 83       	std	Y+1, r25	; 0x01
     2b2:	88 83       	st	Y, r24
     2b4:	cc 53       	subi	r28, 0x3C	; 60
     2b6:	d1 40       	sbci	r29, 0x01	; 1
     2b8:	fa 01       	movw	r30, r20
     2ba:	c0 5c       	subi	r28, 0xC0	; 192
     2bc:	de 4f       	sbci	r29, 0xFE	; 254
     2be:	48 83       	st	Y, r20
     2c0:	c0 54       	subi	r28, 0x40	; 64
     2c2:	d1 40       	sbci	r29, 0x01	; 1
     2c4:	cf 5b       	subi	r28, 0xBF	; 191
     2c6:	de 4f       	sbci	r29, 0xFE	; 254
     2c8:	f8 83       	st	Y, r31
     2ca:	c1 54       	subi	r28, 0x41	; 65
     2cc:	d1 40       	sbci	r29, 0x01	; 1
			}
		}

		// Debounce the strings by making sure what is being fretted
		// remains for a certain number of cycles through the main loop
		for (int i = 0; i <= 6; i++)
     2ce:	f1 01       	movw	r30, r2
     2d0:	3e 96       	adiw	r30, 0x0e	; 14
     2d2:	c2 5c       	subi	r28, 0xC2	; 194
     2d4:	de 4f       	sbci	r29, 0xFE	; 254
     2d6:	f9 83       	std	Y+1, r31	; 0x01
     2d8:	e8 83       	st	Y, r30
     2da:	ce 53       	subi	r28, 0x3E	; 62
     2dc:	d1 40       	sbci	r29, 0x01	; 1
			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
     2de:	8c e4       	ldi	r24, 0x4C	; 76
     2e0:	68 2e       	mov	r6, r24
     2e2:	71 2c       	mov	r7, r1
     2e4:	6c 0e       	add	r6, r28
     2e6:	7d 1e       	adc	r7, r29
     2e8:	ce 5b       	subi	r28, 0xBE	; 190
     2ea:	de 4f       	sbci	r29, 0xFE	; 254
     2ec:	a8 83       	st	Y, r26
     2ee:	c2 54       	subi	r28, 0x42	; 66
     2f0:	d1 40       	sbci	r29, 0x01	; 1
     2f2:	cd 5b       	subi	r28, 0xBD	; 189
     2f4:	de 4f       	sbci	r29, 0xFE	; 254
     2f6:	b8 83       	st	Y, r27
     2f8:	c3 54       	subi	r28, 0x43	; 67
     2fa:	d1 40       	sbci	r29, 0x01	; 1
     2fc:	cc 5b       	subi	r28, 0xBC	; 188
     2fe:	de 4f       	sbci	r29, 0xFE	; 254
     300:	28 83       	st	Y, r18
     302:	c4 54       	subi	r28, 0x44	; 68
     304:	d1 40       	sbci	r29, 0x01	; 1
     306:	cb 5b       	subi	r28, 0xBB	; 187
     308:	de 4f       	sbci	r29, 0xFE	; 254
     30a:	38 83       	st	Y, r19
     30c:	c5 54       	subi	r28, 0x45	; 69
     30e:	d1 40       	sbci	r29, 0x01	; 1
	// array as something big enough for all 21 chord mode combinations, but we
	// only write the first 5 patterns when we write these ones to EEPROM
	int buttonStringPatterns[NUM_CHORDS_BUTTONS][NUMBER_OF_STRINGS];

    buttonStringPatterns[0][0] = 0b0000000; // [0][0] through [0][5] - green button
    buttonStringPatterns[0][0] = 0x0000000; // [0][0] through [0][5] - green button
     310:	04 ec       	ldi	r16, 0xC4	; 196
     312:	80 2e       	mov	r8, r16
     314:	91 2c       	mov	r9, r1
     316:	8c 0e       	add	r8, r28
     318:	9d 1e       	adc	r9, r29
    while(1){  
	              /* main event loop */

		// We first read all the strings for button hits and store them into
		//  our tempStringState array.  Strum processing is also handled here for now.
		tempStringState[0] = readFrets(STRING_1_PIN_NUM, STRING_1_PORT);
     31a:	6b b1       	in	r22, 0x0b	; 11
     31c:	87 e0       	ldi	r24, 0x07	; 7
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     324:	9d ab       	std	Y+53, r25	; 0x35
     326:	8c ab       	std	Y+52, r24	; 0x34
		tempStringState[1] = readFrets(STRING_2_PIN_NUM, STRING_2_PORT);
     328:	6b b1       	in	r22, 0x0b	; 11
     32a:	86 e0       	ldi	r24, 0x06	; 6
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     332:	9f ab       	std	Y+55, r25	; 0x37
     334:	8e ab       	std	Y+54, r24	; 0x36
		tempStringState[2] = readFrets(STRING_3_PIN_NUM, STRING_3_PORT);
     336:	6b b1       	in	r22, 0x0b	; 11
     338:	85 e0       	ldi	r24, 0x05	; 5
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     340:	99 af       	std	Y+57, r25	; 0x39
     342:	88 af       	std	Y+56, r24	; 0x38
		tempStringState[3] = readFrets(STRING_4_PIN_NUM, STRING_4_PORT);
     344:	6b b1       	in	r22, 0x0b	; 11
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     34e:	9b af       	std	Y+59, r25	; 0x3b
     350:	8a af       	std	Y+58, r24	; 0x3a
		tempStringState[4] = readFrets(STRING_5_PIN_NUM, STRING_5_PORT);
     352:	6b b1       	in	r22, 0x0b	; 11
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     35c:	9d af       	std	Y+61, r25	; 0x3d
     35e:	8c af       	std	Y+60, r24	; 0x3c
		tempStringState[5] = readFrets(STRING_6_PIN_NUM, STRING_6_PORT);
     360:	6b b1       	in	r22, 0x0b	; 11
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 c5 00 	call	0x18a	; 0x18a <readFrets>
     36a:	9f af       	std	Y+63, r25	; 0x3f
     36c:	8e af       	std	Y+62, r24	; 0x3e
     36e:	84 e1       	ldi	r24, 0x14	; 20
     370:	90 e0       	ldi	r25, 0x00	; 0
	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
		{
			nop();
     372:	00 00       	nop
			x--;
     374:	01 97       	sbiw	r24, 0x01	; 1
	#define nop() asm volatile("nop")

	// Macro to as many NOPs as we want
	inline void doXnops(int x)
	{
		while (x >= 0)
     376:	ff ef       	ldi	r31, 0xFF	; 255
     378:	8f 3f       	cpi	r24, 0xFF	; 255
     37a:	9f 07       	cpc	r25, r31
     37c:	d1 f7       	brne	.-12     	; 0x372 <main+0x166>
		// Allow some time for pins to restabilize
		doXnops(20);

		// Check the pick - it should have been pulled back up by now.  If it's
		// still grounded, then it's actually the hand grounding it
		if (!(PICK_PIN & (1 << PICK_PIN_NUM)))
     37e:	32 99       	sbic	0x06, 2	; 6
     380:	0f c0       	rjmp	.+30     	; 0x3a0 <main+0x194>
     382:	f1 01       	movw	r30, r2
		{
			for (int i = 0; i < NUMBER_OF_STRINGS; i++)
			{
				tempStringState[i] &= ~1;
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	8e 7f       	andi	r24, 0xFE	; 254
     38a:	81 93       	st	Z+, r24
     38c:	91 93       	st	Z+, r25

		// Check the pick - it should have been pulled back up by now.  If it's
		// still grounded, then it's actually the hand grounding it
		if (!(PICK_PIN & (1 << PICK_PIN_NUM)))
		{
			for (int i = 0; i < NUMBER_OF_STRINGS; i++)
     38e:	c4 5c       	subi	r28, 0xC4	; 196
     390:	de 4f       	sbci	r29, 0xFE	; 254
     392:	88 81       	ld	r24, Y
     394:	99 81       	ldd	r25, Y+1	; 0x01
     396:	cc 53       	subi	r28, 0x3C	; 60
     398:	d1 40       	sbci	r29, 0x01	; 1
     39a:	e8 17       	cp	r30, r24
     39c:	f9 07       	cpc	r31, r25
     39e:	91 f7       	brne	.-28     	; 0x384 <main+0x178>
     3a0:	91 01       	movw	r18, r2
     3a2:	be 01       	movw	r22, r28
     3a4:	68 5d       	subi	r22, 0xD8	; 216
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	c0 5c       	subi	r28, 0xC0	; 192
     3aa:	de 4f       	sbci	r29, 0xFE	; 254
     3ac:	88 81       	ld	r24, Y
     3ae:	c0 54       	subi	r28, 0x40	; 64
     3b0:	d1 40       	sbci	r29, 0x01	; 1
     3b2:	cf 5b       	subi	r28, 0xBF	; 191
     3b4:	de 4f       	sbci	r29, 0xFE	; 254
     3b6:	98 81       	ld	r25, Y
     3b8:	c1 54       	subi	r28, 0x41	; 65
     3ba:	d1 40       	sbci	r29, 0x01	; 1
     3bc:	fc 01       	movw	r30, r24

		// Debounce the strings by making sure what is being fretted
		// remains for a certain number of cycles through the main loop
		for (int i = 0; i <= 6; i++)
		{
			if (tempStringState[i] == stringState[i])
     3be:	d9 01       	movw	r26, r18
     3c0:	4d 91       	ld	r20, X+
     3c2:	5c 91       	ld	r21, X
     3c4:	db 01       	movw	r26, r22
     3c6:	8d 91       	ld	r24, X+
     3c8:	9c 91       	ld	r25, X
     3ca:	48 17       	cp	r20, r24
     3cc:	59 07       	cpc	r21, r25
     3ce:	19 f4       	brne	.+6      	; 0x3d6 <main+0x1ca>
				stringStateTimers[i] = 0;
     3d0:	11 82       	std	Z+1, r1	; 0x01
     3d2:	10 82       	st	Z, r1
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <main+0x1d4>
			else
				stringStateTimers[i] += 1;
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	91 83       	std	Z+1, r25	; 0x01
     3de:	80 83       	st	Z, r24
			// If we've seen enough cycles of a new string state, update stringState 
			if (stringStateTimers[i] >= STRING_DEBOUNCE_DELAY)
     3e0:	80 81       	ld	r24, Z
     3e2:	91 81       	ldd	r25, Z+1	; 0x01
     3e4:	44 97       	sbiw	r24, 0x14	; 20
     3e6:	2c f0       	brlt	.+10     	; 0x3f2 <main+0x1e6>
			{
				stringState[i] = tempStringState[i];
     3e8:	db 01       	movw	r26, r22
     3ea:	4d 93       	st	X+, r20
     3ec:	5c 93       	st	X, r21
				stringStateTimers[i] = 0;
     3ee:	11 82       	std	Z+1, r1	; 0x01
     3f0:	10 82       	st	Z, r1
     3f2:	2e 5f       	subi	r18, 0xFE	; 254
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	6e 5f       	subi	r22, 0xFE	; 254
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	32 96       	adiw	r30, 0x02	; 2
			}
		}

		// Debounce the strings by making sure what is being fretted
		// remains for a certain number of cycles through the main loop
		for (int i = 0; i <= 6; i++)
     3fc:	c2 5c       	subi	r28, 0xC2	; 194
     3fe:	de 4f       	sbci	r29, 0xFE	; 254
     400:	88 81       	ld	r24, Y
     402:	99 81       	ldd	r25, Y+1	; 0x01
     404:	ce 53       	subi	r28, 0x3E	; 62
     406:	d1 40       	sbci	r29, 0x01	; 1
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	c1 f6       	brne	.-80     	; 0x3be <main+0x1b2>
		char minusOn;
	} dataForController;

	inline void clearData(dataForController* data)
	{
		data->orangeOn = 0;
     40e:	1b 86       	std	Y+11, r1	; 0x0b
		data->blueOn   = 0;
     410:	1a 86       	std	Y+10, r1	; 0x0a
		data->yellowOn = 0;
     412:	19 86       	std	Y+9, r1	; 0x09
		data->redOn    = 0;
     414:	18 86       	std	Y+8, r1	; 0x08
		data->greenOn  = 0;
     416:	1f 82       	std	Y+7, r1	; 0x07
		data->upOn     = 0;
     418:	1c 86       	std	Y+12, r1	; 0x0c
		data->downOn   = 0;
     41a:	1d 86       	std	Y+13, r1	; 0x0d

// This function just reads our plus and minus buttons and sets the data struct accordingly
inline void readOtherButtons(dataForController* data)
{
	// read our plus and minus buttons
	int i = PLUS_PIN; // check for plus and minus
     41c:	86 b1       	in	r24, 0x06	; 6
	data->plusOn = !(i & (1<<PLUS_PIN_NUM)); //Plus and minus are held high normally, but pressing it drops it low
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	84 27       	eor	r24, r20
     424:	81 70       	andi	r24, 0x01	; 1
     426:	8e 87       	std	Y+14, r24	; 0x0e
	i = MINUS_PIN;
     428:	86 b1       	in	r24, 0x06	; 6
	data->minusOn = !(i & (1<<MINUS_PIN_NUM));
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	96 95       	lsr	r25
     42e:	87 95       	ror	r24
     430:	84 27       	eor	r24, r20
     432:	95 27       	eor	r25, r21
     434:	81 70       	andi	r24, 0x01	; 1
     436:	8f 87       	std	Y+15, r24	; 0x0f
		return 0;
}

inline int testForResetButtonPatterns(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     438:	88 a5       	ldd	r24, Y+40	; 0x28
     43a:	99 a5       	ldd	r25, Y+41	; 0x29
     43c:	80 97       	sbiw	r24, 0x20	; 32
     43e:	09 f0       	breq	.+2      	; 0x442 <main+0x236>
     440:	ea c0       	rjmp	.+468    	; 0x616 <__stack+0x117>
     442:	8a a5       	ldd	r24, Y+42	; 0x2a
     444:	9b a5       	ldd	r25, Y+43	; 0x2b
     446:	89 2b       	or	r24, r25
     448:	09 f0       	breq	.+2      	; 0x44c <main+0x240>
     44a:	e5 c0       	rjmp	.+458    	; 0x616 <__stack+0x117>
     44c:	8c a5       	ldd	r24, Y+44	; 0x2c
     44e:	9d a5       	ldd	r25, Y+45	; 0x2d
     450:	80 97       	sbiw	r24, 0x20	; 32
     452:	09 f0       	breq	.+2      	; 0x456 <main+0x24a>
     454:	e0 c0       	rjmp	.+448    	; 0x616 <__stack+0x117>
     456:	8e a5       	ldd	r24, Y+46	; 0x2e
     458:	9f a5       	ldd	r25, Y+47	; 0x2f
     45a:	89 2b       	or	r24, r25
     45c:	09 f0       	breq	.+2      	; 0x460 <main+0x254>
     45e:	db c0       	rjmp	.+438    	; 0x616 <__stack+0x117>
     460:	88 a9       	ldd	r24, Y+48	; 0x30
     462:	99 a9       	ldd	r25, Y+49	; 0x31
     464:	80 97       	sbiw	r24, 0x20	; 32
     466:	09 f0       	breq	.+2      	; 0x46a <main+0x25e>
     468:	d6 c0       	rjmp	.+428    	; 0x616 <__stack+0x117>
     46a:	8a a9       	ldd	r24, Y+50	; 0x32
     46c:	9b a9       	ldd	r25, Y+51	; 0x33
     46e:	89 2b       	or	r24, r25
     470:	09 f0       	breq	.+2      	; 0x474 <main+0x268>
     472:	d1 c0       	rjmp	.+418    	; 0x616 <__stack+0x117>
     474:	d4 01       	movw	r26, r8
     476:	11 96       	adiw	r26, 0x01	; 1
     478:	1c 92       	st	X, r1
     47a:	1e 92       	st	-X, r1
	buttonStringPatterns[0][1] = 0b0001100; 
     47c:	2c e0       	ldi	r18, 0x0C	; 12
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	13 96       	adiw	r26, 0x03	; 3
     482:	3c 93       	st	X, r19
     484:	2e 93       	st	-X, r18
     486:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0b0000000;	
     488:	15 96       	adiw	r26, 0x05	; 5
     48a:	1c 92       	st	X, r1
     48c:	1e 92       	st	-X, r1
     48e:	14 97       	sbiw	r26, 0x04	; 4
	buttonStringPatterns[0][3] = 0b0000110;
     490:	06 e0       	ldi	r16, 0x06	; 6
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	17 96       	adiw	r26, 0x07	; 7
     496:	1c 93       	st	X, r17
     498:	0e 93       	st	-X, r16
     49a:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0b0000000;
     49c:	19 96       	adiw	r26, 0x09	; 9
     49e:	1c 92       	st	X, r1
     4a0:	1e 92       	st	-X, r1
     4a2:	18 97       	sbiw	r26, 0x08	; 8
	buttonStringPatterns[0][5] = 0b0000010;
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	1b 96       	adiw	r26, 0x0b	; 11
     4aa:	9c 93       	st	X, r25
     4ac:	8e 93       	st	-X, r24
     4ae:	1a 97       	sbiw	r26, 0x0a	; 10

	buttonStringPatterns[1][0] = 0b0000010; // [1][0] through [1][5] - red button
     4b0:	1d 96       	adiw	r26, 0x0d	; 13
     4b2:	9c 93       	st	X, r25
     4b4:	8e 93       	st	-X, r24
     4b6:	1c 97       	sbiw	r26, 0x0c	; 12
	buttonStringPatterns[1][1] = 0b0000000; 
     4b8:	1f 96       	adiw	r26, 0x0f	; 15
     4ba:	1c 92       	st	X, r1
     4bc:	1e 92       	st	-X, r1
     4be:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0b0000001;
     4c0:	51 96       	adiw	r26, 0x11	; 17
     4c2:	5c 93       	st	X, r21
     4c4:	4e 93       	st	-X, r20
     4c6:	50 97       	sbiw	r26, 0x10	; 16
	buttonStringPatterns[1][3] = 0b0000000;
     4c8:	53 96       	adiw	r26, 0x13	; 19
     4ca:	1c 92       	st	X, r1
     4cc:	1e 92       	st	-X, r1
     4ce:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0b0000001;
     4d0:	55 96       	adiw	r26, 0x15	; 21
     4d2:	5c 93       	st	X, r21
     4d4:	4e 93       	st	-X, r20
     4d6:	54 97       	sbiw	r26, 0x14	; 20
	buttonStringPatterns[1][5] = 0b0001100;
     4d8:	57 96       	adiw	r26, 0x17	; 23
     4da:	3c 93       	st	X, r19
     4dc:	2e 93       	st	-X, r18
     4de:	56 97       	sbiw	r26, 0x16	; 22

	buttonStringPatterns[2][0] = 0b0001100; // [2][0] through [2][5] - yellow button
     4e0:	59 96       	adiw	r26, 0x19	; 25
     4e2:	3c 93       	st	X, r19
     4e4:	2e 93       	st	-X, r18
     4e6:	58 97       	sbiw	r26, 0x18	; 24
	buttonStringPatterns[2][1] = 0b0000000; // This is an A chord.
     4e8:	5b 96       	adiw	r26, 0x1b	; 27
     4ea:	1c 92       	st	X, r1
     4ec:	1e 92       	st	-X, r1
     4ee:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0b0000110;
     4f0:	5d 96       	adiw	r26, 0x1d	; 29
     4f2:	1c 93       	st	X, r17
     4f4:	0e 93       	st	-X, r16
     4f6:	5c 97       	sbiw	r26, 0x1c	; 28
	buttonStringPatterns[2][3] = 0b0000000;
     4f8:	5f 96       	adiw	r26, 0x1f	; 31
     4fa:	1c 92       	st	X, r1
     4fc:	1e 92       	st	-X, r1
     4fe:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0b0000010;
     500:	91 96       	adiw	r26, 0x21	; 33
     502:	9c 93       	st	X, r25
     504:	8e 93       	st	-X, r24
     506:	90 97       	sbiw	r26, 0x20	; 32
	buttonStringPatterns[2][5] = 0b0000000;
     508:	93 96       	adiw	r26, 0x23	; 35
     50a:	1c 92       	st	X, r1
     50c:	1e 92       	st	-X, r1
     50e:	92 97       	sbiw	r26, 0x22	; 34
							  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     510:	95 96       	adiw	r26, 0x25	; 37
     512:	1c 92       	st	X, r1
     514:	1e 92       	st	-X, r1
     516:	94 97       	sbiw	r26, 0x24	; 36
	buttonStringPatterns[3][1] = 0b0000001; 
     518:	97 96       	adiw	r26, 0x27	; 39
     51a:	5c 93       	st	X, r21
     51c:	4e 93       	st	-X, r20
     51e:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0b0001100;
     520:	99 96       	adiw	r26, 0x29	; 41
     522:	3c 93       	st	X, r19
     524:	2e 93       	st	-X, r18
     526:	98 97       	sbiw	r26, 0x28	; 40
	buttonStringPatterns[3][3] = 0b0000000;
     528:	9b 96       	adiw	r26, 0x2b	; 43
     52a:	1c 92       	st	X, r1
     52c:	1e 92       	st	-X, r1
     52e:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0b0001100;
     530:	9d 96       	adiw	r26, 0x2d	; 45
     532:	3c 93       	st	X, r19
     534:	2e 93       	st	-X, r18
     536:	9c 97       	sbiw	r26, 0x2c	; 44
	buttonStringPatterns[3][5] = 0b0000000;
     538:	9f 96       	adiw	r26, 0x2f	; 47
     53a:	1c 92       	st	X, r1
     53c:	1e 92       	st	-X, r1
     53e:	9e 97       	sbiw	r26, 0x2e	; 46

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - orange button
     540:	d1 96       	adiw	r26, 0x31	; 49
     542:	1c 92       	st	X, r1
     544:	1e 92       	st	-X, r1
     546:	d0 97       	sbiw	r26, 0x30	; 48
	buttonStringPatterns[4][1] = 0b0000110; 
     548:	d3 96       	adiw	r26, 0x33	; 51
     54a:	1c 93       	st	X, r17
     54c:	0e 93       	st	-X, r16
     54e:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0b0000000;
     550:	d5 96       	adiw	r26, 0x35	; 53
     552:	1c 92       	st	X, r1
     554:	1e 92       	st	-X, r1
     556:	d4 97       	sbiw	r26, 0x34	; 52
	buttonStringPatterns[4][3] = 0b0000001;
     558:	d7 96       	adiw	r26, 0x37	; 55
     55a:	5c 93       	st	X, r21
     55c:	4e 93       	st	-X, r20
     55e:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0b0000000;
     560:	d9 96       	adiw	r26, 0x39	; 57
     562:	1c 92       	st	X, r1
     564:	1e 92       	st	-X, r1
     566:	d8 97       	sbiw	r26, 0x38	; 56
	buttonStringPatterns[4][5] = 0b0000001;
     568:	db 96       	adiw	r26, 0x3b	; 59
     56a:	5c 93       	st	X, r21
     56c:	4e 93       	st	-X, r20
     56e:	da 97       	sbiw	r26, 0x3a	; 58
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	b4 01       	movw	r22, r8
     576:	4c e3       	ldi	r20, 0x3C	; 60
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	28 eb       	ldi	r18, 0xB8	; 184
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__eewr_block>

	eeprom_write_block( (void*)&buttonStringPatterns, notesAddress, EEPROM_NOTES_BLOCK_SIZE);


	// Now write the default chord mapping
	buttonStringPatterns[0][0] = 0b0001110; // [0][0] through [0][5] - green button
     582:	8e e0       	ldi	r24, 0x0E	; 14
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	f4 01       	movw	r30, r8
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
	buttonStringPatterns[0][1] = 0b0001110; // This is a G Chord
     58c:	93 83       	std	Z+3, r25	; 0x03
     58e:	82 83       	std	Z+2, r24	; 0x02
	buttonStringPatterns[0][2] = 0b0000000;	
     590:	15 82       	std	Z+5, r1	; 0x05
     592:	14 82       	std	Z+4, r1	; 0x04
	buttonStringPatterns[0][3] = 0b0000000;
     594:	17 82       	std	Z+7, r1	; 0x07
     596:	16 82       	std	Z+6, r1	; 0x06
	buttonStringPatterns[0][4] = 0b0000000;
     598:	11 86       	std	Z+9, r1	; 0x09
     59a:	10 86       	std	Z+8, r1	; 0x08
	buttonStringPatterns[0][5] = 0b0001110;
     59c:	93 87       	std	Z+11, r25	; 0x0b
     59e:	82 87       	std	Z+10, r24	; 0x0a

	buttonStringPatterns[1][0] = 0b0000000; // [1][0] through [1][5] - red button
     5a0:	15 86       	std	Z+13, r1	; 0x0d
     5a2:	14 86       	std	Z+12, r1	; 0x0c
	buttonStringPatterns[1][1] = 0b0001110; // This is a C chord
     5a4:	97 87       	std	Z+15, r25	; 0x0f
     5a6:	86 87       	std	Z+14, r24	; 0x0e
	buttonStringPatterns[1][2] = 0b0001110;
     5a8:	91 8b       	std	Z+17, r25	; 0x11
     5aa:	80 8b       	std	Z+16, r24	; 0x10
	buttonStringPatterns[1][3] = 0b0000000;
     5ac:	13 8a       	std	Z+19, r1	; 0x13
     5ae:	12 8a       	std	Z+18, r1	; 0x12
	buttonStringPatterns[1][4] = 0b0001110;
     5b0:	95 8b       	std	Z+21, r25	; 0x15
     5b2:	84 8b       	std	Z+20, r24	; 0x14
	buttonStringPatterns[1][5] = 0b0000000;
     5b4:	17 8a       	std	Z+23, r1	; 0x17
     5b6:	16 8a       	std	Z+22, r1	; 0x16

	buttonStringPatterns[2][0] = 0b0000000; // [2][0] through [2][5] - yellow button
     5b8:	11 8e       	std	Z+25, r1	; 0x19
     5ba:	10 8e       	std	Z+24, r1	; 0x18
	buttonStringPatterns[2][1] = 0b0000110; // This is an E chord.
     5bc:	13 8f       	std	Z+27, r17	; 0x1b
     5be:	02 8f       	std	Z+26, r16	; 0x1a
	buttonStringPatterns[2][2] = 0b0000110;
     5c0:	15 8f       	std	Z+29, r17	; 0x1d
     5c2:	04 8f       	std	Z+28, r16	; 0x1c
	buttonStringPatterns[2][3] = 0b0000110;
     5c4:	17 8f       	std	Z+31, r17	; 0x1f
     5c6:	06 8f       	std	Z+30, r16	; 0x1e
	buttonStringPatterns[2][4] = 0b0000000;
     5c8:	11 a2       	std	Z+33, r1	; 0x21
     5ca:	10 a2       	std	Z+32, r1	; 0x20
	buttonStringPatterns[2][5] = 0b0000000;
     5cc:	13 a2       	std	Z+35, r1	; 0x23
     5ce:	12 a2       	std	Z+34, r1	; 0x22
									  
	buttonStringPatterns[3][0] = 0b0000000; // [3][0] through [3][5] - blue button
     5d0:	15 a2       	std	Z+37, r1	; 0x25
     5d2:	14 a2       	std	Z+36, r1	; 0x24
	buttonStringPatterns[3][1] = 0b0000000; // This an A chord
     5d4:	17 a2       	std	Z+39, r1	; 0x27
     5d6:	16 a2       	std	Z+38, r1	; 0x26
	buttonStringPatterns[3][2] = 0b0000110;
     5d8:	11 a7       	std	Z+41, r17	; 0x29
     5da:	00 a7       	std	Z+40, r16	; 0x28
	buttonStringPatterns[3][3] = 0b0000110;
     5dc:	13 a7       	std	Z+43, r17	; 0x2b
     5de:	02 a7       	std	Z+42, r16	; 0x2a
	buttonStringPatterns[3][4] = 0b0000110;
     5e0:	15 a7       	std	Z+45, r17	; 0x2d
     5e2:	04 a7       	std	Z+44, r16	; 0x2c
	buttonStringPatterns[3][5] = 0b0000000;
     5e4:	17 a6       	std	Z+47, r1	; 0x2f
     5e6:	16 a6       	std	Z+46, r1	; 0x2e

	buttonStringPatterns[4][0] = 0b0000000; // [4][0] through [4][5] - blue button
     5e8:	11 aa       	std	Z+49, r1	; 0x31
     5ea:	10 aa       	std	Z+48, r1	; 0x30
	buttonStringPatterns[4][1] = 0b0000000;	// This is a D chord 
     5ec:	13 aa       	std	Z+51, r1	; 0x33
     5ee:	12 aa       	std	Z+50, r1	; 0x32
	buttonStringPatterns[4][2] = 0b0000000;
     5f0:	15 aa       	std	Z+53, r1	; 0x35
     5f2:	14 aa       	std	Z+52, r1	; 0x34
	buttonStringPatterns[4][3] = 0b0001110;
     5f4:	97 ab       	std	Z+55, r25	; 0x37
     5f6:	86 ab       	std	Z+54, r24	; 0x36
	buttonStringPatterns[4][4] = 0b0001110;
     5f8:	91 af       	std	Z+57, r25	; 0x39
     5fa:	80 af       	std	Z+56, r24	; 0x38
	buttonStringPatterns[4][5] = 0b0001110;
     5fc:	93 af       	std	Z+59, r25	; 0x3b
     5fe:	82 af       	std	Z+58, r24	; 0x3a
     600:	88 e7       	ldi	r24, 0x78	; 120
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	b4 01       	movw	r22, r8
     606:	48 e7       	ldi	r20, 0x78	; 120
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	28 eb       	ldi	r18, 0xB8	; 184
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__eewr_block>
     612:	55 24       	eor	r5, r5
     614:	fb c0       	rjmp	.+502    	; 0x80c <__stack+0x30d>
			//if so, reset the button mappings to default and the play mode to chords.
			controllerMode = FRETS;
			setEepromToDefault(&notesModeButtonPatterns, &chordModeButtonPatterns); // Stored in buttonStringPatterns.h
		}

		if ((controllerMode == NOTES) || (controllerMode == CHORDS))
     616:	f2 e0       	ldi	r31, 0x02	; 2
     618:	5f 16       	cp	r5, r31
     61a:	21 f0       	breq	.+8      	; 0x624 <__stack+0x125>
     61c:	24 e0       	ldi	r18, 0x04	; 4
     61e:	52 16       	cp	r5, r18
     620:	09 f0       	breq	.+2      	; 0x624 <__stack+0x125>
     622:	f4 c0       	rjmp	.+488    	; 0x80c <__stack+0x30d>
		{
			// Check to see if we're trying to enter Config Mode; disabled if we're playing with frets
			if (configMode == 0)
     624:	44 20       	and	r4, r4
     626:	09 f0       	breq	.+2      	; 0x62a <__stack+0x12b>
     628:	9f c0       	rjmp	.+318    	; 0x768 <__stack+0x269>

// This function tests to see if you're pressing the top 4 strings on the orange fret,
//  thereby activating config mode. Works with both chords and scales.
inline char testForConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00100000) &&
     62a:	88 a5       	ldd	r24, Y+40	; 0x28
     62c:	99 a5       	ldd	r25, Y+41	; 0x29
     62e:	80 97       	sbiw	r24, 0x20	; 32
     630:	09 f0       	breq	.+2      	; 0x634 <__stack+0x135>
     632:	97 c0       	rjmp	.+302    	; 0x762 <__stack+0x263>
     634:	8a a5       	ldd	r24, Y+42	; 0x2a
     636:	9b a5       	ldd	r25, Y+43	; 0x2b
     638:	80 97       	sbiw	r24, 0x20	; 32
     63a:	09 f0       	breq	.+2      	; 0x63e <__stack+0x13f>
     63c:	92 c0       	rjmp	.+292    	; 0x762 <__stack+0x263>
     63e:	8c a5       	ldd	r24, Y+44	; 0x2c
     640:	9d a5       	ldd	r25, Y+45	; 0x2d
     642:	80 97       	sbiw	r24, 0x20	; 32
     644:	09 f0       	breq	.+2      	; 0x648 <__stack+0x149>
     646:	8d c0       	rjmp	.+282    	; 0x762 <__stack+0x263>
     648:	8e a5       	ldd	r24, Y+46	; 0x2e
     64a:	9f a5       	ldd	r25, Y+47	; 0x2f
     64c:	89 2b       	or	r24, r25
     64e:	09 f0       	breq	.+2      	; 0x652 <__stack+0x153>
     650:	88 c0       	rjmp	.+272    	; 0x762 <__stack+0x263>
     652:	88 a9       	ldd	r24, Y+48	; 0x30
     654:	99 a9       	ldd	r25, Y+49	; 0x31
     656:	89 2b       	or	r24, r25
     658:	09 f0       	breq	.+2      	; 0x65c <__stack+0x15d>
     65a:	83 c0       	rjmp	.+262    	; 0x762 <__stack+0x263>
     65c:	8a a9       	ldd	r24, Y+50	; 0x32
     65e:	9b a9       	ldd	r25, Y+51	; 0x33
     660:	89 2b       	or	r24, r25
     662:	09 f0       	breq	.+2      	; 0x666 <__stack+0x167>
     664:	7e c0       	rjmp	.+252    	; 0x762 <__stack+0x263>
			{
				configMode = testForConfigMode(stringState);
				
				// If we're playing with notes, when we enter config mode, we need to clear the 
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	58 16       	cp	r5, r24
     66a:	09 f0       	breq	.+2      	; 0x66e <__stack+0x16f>
     66c:	78 c0       	rjmp	.+240    	; 0x75e <__stack+0x25f>
	return stringState;
}

inline void clearButtonStringPatterns(int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	buttonStringPatterns[0][0] = 0;	buttonStringPatterns[0][1] = 0;
     66e:	d3 01       	movw	r26, r6
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	1c 92       	st	X, r1
     674:	1e 92       	st	-X, r1
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	1c 92       	st	X, r1
     67a:	1e 92       	st	-X, r1
     67c:	12 97       	sbiw	r26, 0x02	; 2
	buttonStringPatterns[0][2] = 0;	buttonStringPatterns[0][3] = 0;
     67e:	15 96       	adiw	r26, 0x05	; 5
     680:	1c 92       	st	X, r1
     682:	1e 92       	st	-X, r1
     684:	14 97       	sbiw	r26, 0x04	; 4
     686:	17 96       	adiw	r26, 0x07	; 7
     688:	1c 92       	st	X, r1
     68a:	1e 92       	st	-X, r1
     68c:	16 97       	sbiw	r26, 0x06	; 6
	buttonStringPatterns[0][4] = 0;	buttonStringPatterns[0][5] = 0;
     68e:	19 96       	adiw	r26, 0x09	; 9
     690:	1c 92       	st	X, r1
     692:	1e 92       	st	-X, r1
     694:	18 97       	sbiw	r26, 0x08	; 8
     696:	1b 96       	adiw	r26, 0x0b	; 11
     698:	1c 92       	st	X, r1
     69a:	1e 92       	st	-X, r1
     69c:	1a 97       	sbiw	r26, 0x0a	; 10
	buttonStringPatterns[1][0] = 0;	buttonStringPatterns[1][1] = 0;
     69e:	1d 96       	adiw	r26, 0x0d	; 13
     6a0:	1c 92       	st	X, r1
     6a2:	1e 92       	st	-X, r1
     6a4:	1c 97       	sbiw	r26, 0x0c	; 12
     6a6:	1f 96       	adiw	r26, 0x0f	; 15
     6a8:	1c 92       	st	X, r1
     6aa:	1e 92       	st	-X, r1
     6ac:	1e 97       	sbiw	r26, 0x0e	; 14
	buttonStringPatterns[1][2] = 0;	buttonStringPatterns[1][3] = 0;
     6ae:	51 96       	adiw	r26, 0x11	; 17
     6b0:	1c 92       	st	X, r1
     6b2:	1e 92       	st	-X, r1
     6b4:	50 97       	sbiw	r26, 0x10	; 16
     6b6:	53 96       	adiw	r26, 0x13	; 19
     6b8:	1c 92       	st	X, r1
     6ba:	1e 92       	st	-X, r1
     6bc:	52 97       	sbiw	r26, 0x12	; 18
	buttonStringPatterns[1][4] = 0;	buttonStringPatterns[1][5] = 0;
     6be:	55 96       	adiw	r26, 0x15	; 21
     6c0:	1c 92       	st	X, r1
     6c2:	1e 92       	st	-X, r1
     6c4:	54 97       	sbiw	r26, 0x14	; 20
     6c6:	57 96       	adiw	r26, 0x17	; 23
     6c8:	1c 92       	st	X, r1
     6ca:	1e 92       	st	-X, r1
     6cc:	56 97       	sbiw	r26, 0x16	; 22
	buttonStringPatterns[2][0] = 0;	buttonStringPatterns[2][1] = 0;
     6ce:	59 96       	adiw	r26, 0x19	; 25
     6d0:	1c 92       	st	X, r1
     6d2:	1e 92       	st	-X, r1
     6d4:	58 97       	sbiw	r26, 0x18	; 24
     6d6:	5b 96       	adiw	r26, 0x1b	; 27
     6d8:	1c 92       	st	X, r1
     6da:	1e 92       	st	-X, r1
     6dc:	5a 97       	sbiw	r26, 0x1a	; 26
	buttonStringPatterns[2][2] = 0;	buttonStringPatterns[2][3] = 0;
     6de:	5d 96       	adiw	r26, 0x1d	; 29
     6e0:	1c 92       	st	X, r1
     6e2:	1e 92       	st	-X, r1
     6e4:	5c 97       	sbiw	r26, 0x1c	; 28
     6e6:	5f 96       	adiw	r26, 0x1f	; 31
     6e8:	1c 92       	st	X, r1
     6ea:	1e 92       	st	-X, r1
     6ec:	5e 97       	sbiw	r26, 0x1e	; 30
	buttonStringPatterns[2][4] = 0;	buttonStringPatterns[2][5] = 0;
     6ee:	91 96       	adiw	r26, 0x21	; 33
     6f0:	1c 92       	st	X, r1
     6f2:	1e 92       	st	-X, r1
     6f4:	90 97       	sbiw	r26, 0x20	; 32
     6f6:	93 96       	adiw	r26, 0x23	; 35
     6f8:	1c 92       	st	X, r1
     6fa:	1e 92       	st	-X, r1
     6fc:	92 97       	sbiw	r26, 0x22	; 34
	buttonStringPatterns[3][0] = 0;	buttonStringPatterns[3][1] = 0;
     6fe:	95 96       	adiw	r26, 0x25	; 37
     700:	1c 92       	st	X, r1
     702:	1e 92       	st	-X, r1
     704:	94 97       	sbiw	r26, 0x24	; 36
     706:	97 96       	adiw	r26, 0x27	; 39
     708:	1c 92       	st	X, r1
     70a:	1e 92       	st	-X, r1
     70c:	96 97       	sbiw	r26, 0x26	; 38
	buttonStringPatterns[3][2] = 0;	buttonStringPatterns[3][3] = 0;
     70e:	99 96       	adiw	r26, 0x29	; 41
     710:	1c 92       	st	X, r1
     712:	1e 92       	st	-X, r1
     714:	98 97       	sbiw	r26, 0x28	; 40
     716:	9b 96       	adiw	r26, 0x2b	; 43
     718:	1c 92       	st	X, r1
     71a:	1e 92       	st	-X, r1
     71c:	9a 97       	sbiw	r26, 0x2a	; 42
	buttonStringPatterns[3][4] = 0;	buttonStringPatterns[3][5] = 0;
     71e:	9d 96       	adiw	r26, 0x2d	; 45
     720:	1c 92       	st	X, r1
     722:	1e 92       	st	-X, r1
     724:	9c 97       	sbiw	r26, 0x2c	; 44
     726:	9f 96       	adiw	r26, 0x2f	; 47
     728:	1c 92       	st	X, r1
     72a:	1e 92       	st	-X, r1
     72c:	9e 97       	sbiw	r26, 0x2e	; 46
	buttonStringPatterns[4][0] = 0;	buttonStringPatterns[4][1] = 0;
     72e:	d1 96       	adiw	r26, 0x31	; 49
     730:	1c 92       	st	X, r1
     732:	1e 92       	st	-X, r1
     734:	d0 97       	sbiw	r26, 0x30	; 48
     736:	d3 96       	adiw	r26, 0x33	; 51
     738:	1c 92       	st	X, r1
     73a:	1e 92       	st	-X, r1
     73c:	d2 97       	sbiw	r26, 0x32	; 50
	buttonStringPatterns[4][2] = 0;	buttonStringPatterns[4][3] = 0;
     73e:	d5 96       	adiw	r26, 0x35	; 53
     740:	1c 92       	st	X, r1
     742:	1e 92       	st	-X, r1
     744:	d4 97       	sbiw	r26, 0x34	; 52
     746:	d7 96       	adiw	r26, 0x37	; 55
     748:	1c 92       	st	X, r1
     74a:	1e 92       	st	-X, r1
     74c:	d6 97       	sbiw	r26, 0x36	; 54
	buttonStringPatterns[4][4] = 0;	buttonStringPatterns[4][5] = 0;
     74e:	d9 96       	adiw	r26, 0x39	; 57
     750:	1c 92       	st	X, r1
     752:	1e 92       	st	-X, r1
     754:	d8 97       	sbiw	r26, 0x38	; 56
     756:	db 96       	adiw	r26, 0x3b	; 59
     758:	1c 92       	st	X, r1
     75a:	1e 92       	st	-X, r1
     75c:	da 97       	sbiw	r26, 0x3a	; 58
     75e:	44 24       	eor	r4, r4
     760:	43 94       	inc	r4
				//  button string patterns once so we can rebuild them.
				if (configMode == 1 && controllerMode == NOTES)
				{
					clearButtonStringPatterns(buttonStringPatterns);
				}
				buttonToAssign = 0; // This variable keeps track of which button we're assigning
     762:	1c 82       	std	Y+4, r1	; 0x04
     764:	1b 82       	std	Y+3, r1	; 0x03
				plusLock = 0; // This is a tool to let us test that in the prior cycle, plus was or wasn't on
     766:	19 82       	std	Y+1, r1	; 0x01
			}

			// Config Mode operation
			if (configMode == 1) 
     768:	b1 e0       	ldi	r27, 0x01	; 1
     76a:	4b 16       	cp	r4, r27
     76c:	09 f0       	breq	.+2      	; 0x770 <__stack+0x271>
     76e:	4e c0       	rjmp	.+156    	; 0x80c <__stack+0x30d>
}

//This function tests to see if we're pressing the correct string combination to end config mode
inline char testForEndConfigMode(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     770:	88 a5       	ldd	r24, Y+40	; 0x28
     772:	99 a5       	ldd	r25, Y+41	; 0x29
     774:	89 2b       	or	r24, r25
     776:	09 f0       	breq	.+2      	; 0x77a <__stack+0x27b>
     778:	ed c0       	rjmp	.+474    	; 0x954 <__stack+0x455>
     77a:	8a a5       	ldd	r24, Y+42	; 0x2a
     77c:	9b a5       	ldd	r25, Y+43	; 0x2b
     77e:	80 97       	sbiw	r24, 0x20	; 32
     780:	09 f0       	breq	.+2      	; 0x784 <__stack+0x285>
     782:	e8 c0       	rjmp	.+464    	; 0x954 <__stack+0x455>
     784:	8c a5       	ldd	r24, Y+44	; 0x2c
     786:	9d a5       	ldd	r25, Y+45	; 0x2d
     788:	80 97       	sbiw	r24, 0x20	; 32
     78a:	09 f0       	breq	.+2      	; 0x78e <__stack+0x28f>
     78c:	e3 c0       	rjmp	.+454    	; 0x954 <__stack+0x455>
     78e:	8e a5       	ldd	r24, Y+46	; 0x2e
     790:	9f a5       	ldd	r25, Y+47	; 0x2f
     792:	80 97       	sbiw	r24, 0x20	; 32
     794:	09 f0       	breq	.+2      	; 0x798 <__stack+0x299>
     796:	de c0       	rjmp	.+444    	; 0x954 <__stack+0x455>
     798:	88 a9       	ldd	r24, Y+48	; 0x30
     79a:	99 a9       	ldd	r25, Y+49	; 0x31
     79c:	89 2b       	or	r24, r25
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__stack+0x2a3>
     7a0:	d9 c0       	rjmp	.+434    	; 0x954 <__stack+0x455>
     7a2:	8a a9       	ldd	r24, Y+50	; 0x32
     7a4:	9b a9       	ldd	r25, Y+51	; 0x33
     7a6:	89 2b       	or	r24, r25
     7a8:	09 f0       	breq	.+2      	; 0x7ac <__stack+0x2ad>
     7aa:	d4 c0       	rjmp	.+424    	; 0x954 <__stack+0x455>
				if (testForEndConfigMode(stringState))
					{
						// Now save this new button mapping to the EEPROM 
						// Since we're already passing in buttonsStringPatterns
						// as a pointer, we don't use the '&' operator
						if (controllerMode == NOTES)
     7ac:	e2 e0       	ldi	r30, 0x02	; 2
     7ae:	5e 16       	cp	r5, r30
     7b0:	31 f4       	brne	.+12     	; 0x7be <__stack+0x2bf>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	b3 01       	movw	r22, r6
     7b8:	4c e3       	ldi	r20, 0x3C	; 60
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	22 c0       	rjmp	.+68     	; 0x802 <__stack+0x303>
							eeprom_write_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
						else if (controllerMode == CHORDS)
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	5f 16       	cp	r5, r31
     7c2:	39 f5       	brne	.+78     	; 0x812 <__stack+0x313>
     7c4:	19 c0       	rjmp	.+50     	; 0x7f8 <__stack+0x2f9>
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	05 97       	sbiw	r24, 0x05	; 5
     7cc:	0c f4       	brge	.+2      	; 0x7d0 <__stack+0x2d1>
     7ce:	b6 c0       	rjmp	.+364    	; 0x93c <__stack+0x43d>
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	88 23       	and	r24, r24
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__stack+0x2d9>
     7d6:	b2 c0       	rjmp	.+356    	; 0x93c <__stack+0x43d>
					{
						buttonToAssign = 0;
     7d8:	1c 82       	std	Y+4, r1	; 0x04
     7da:	1b 82       	std	Y+3, r1	; 0x03
     7dc:	af c0       	rjmp	.+350    	; 0x93c <__stack+0x43d>
					}
					
					// Or if we've programmed all 10 notes in Chord mode, exit programming mode
					if (controllerMode == CHORDS && buttonToAssign >= NUM_CHORDS_BUTTONS && plusLock == 0 )
     7de:	24 e0       	ldi	r18, 0x04	; 4
     7e0:	52 16       	cp	r5, r18
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <__stack+0x2e7>
     7e4:	ab c0       	rjmp	.+342    	; 0x93c <__stack+0x43d>
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	0a 97       	sbiw	r24, 0x0a	; 10
     7ec:	0c f4       	brge	.+2      	; 0x7f0 <__stack+0x2f1>
     7ee:	a6 c0       	rjmp	.+332    	; 0x93c <__stack+0x43d>
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	88 23       	and	r24, r24
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <__stack+0x2f9>
     7f6:	a2 c0       	rjmp	.+324    	; 0x93c <__stack+0x43d>
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	b3 01       	movw	r22, r6
     7fe:	48 e7       	ldi	r20, 0x78	; 120
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	28 eb       	ldi	r18, 0xB8	; 184
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__eewr_block>
     80a:	03 c0       	rjmp	.+6      	; 0x812 <__stack+0x313>
					}
		}	}	}	 // End of Config Mode code

		
		// Normal operation
		if (configMode == 0)
     80c:	44 20       	and	r4, r4
     80e:	09 f0       	breq	.+2      	; 0x812 <__stack+0x313>
     810:	95 c0       	rjmp	.+298    	; 0x93c <__stack+0x43d>
		return 0;
}

inline int testForMinusChord(int stringState[])
{
	if ((stringState[0] == 0b00011110) &&
     812:	88 a5       	ldd	r24, Y+40	; 0x28
     814:	99 a5       	ldd	r25, Y+41	; 0x29
     816:	8e 31       	cpi	r24, 0x1E	; 30
     818:	91 05       	cpc	r25, r1
     81a:	e1 f4       	brne	.+56     	; 0x854 <__stack+0x355>
     81c:	8a a5       	ldd	r24, Y+42	; 0x2a
     81e:	9b a5       	ldd	r25, Y+43	; 0x2b
     820:	4e 97       	sbiw	r24, 0x1e	; 30
     822:	09 f0       	breq	.+2      	; 0x826 <__stack+0x327>
     824:	64 c0       	rjmp	.+200    	; 0x8ee <__stack+0x3ef>
     826:	8c a5       	ldd	r24, Y+44	; 0x2c
     828:	9d a5       	ldd	r25, Y+45	; 0x2d
     82a:	4e 97       	sbiw	r24, 0x1e	; 30
     82c:	09 f0       	breq	.+2      	; 0x830 <__stack+0x331>
     82e:	5f c0       	rjmp	.+190    	; 0x8ee <__stack+0x3ef>
     830:	8e a5       	ldd	r24, Y+46	; 0x2e
     832:	9f a5       	ldd	r25, Y+47	; 0x2f
     834:	4e 97       	sbiw	r24, 0x1e	; 30
     836:	09 f0       	breq	.+2      	; 0x83a <__stack+0x33b>
     838:	5a c0       	rjmp	.+180    	; 0x8ee <__stack+0x3ef>
     83a:	88 a9       	ldd	r24, Y+48	; 0x30
     83c:	99 a9       	ldd	r25, Y+49	; 0x31
     83e:	4e 97       	sbiw	r24, 0x1e	; 30
     840:	09 f0       	breq	.+2      	; 0x844 <__stack+0x345>
     842:	55 c0       	rjmp	.+170    	; 0x8ee <__stack+0x3ef>
     844:	8a a9       	ldd	r24, Y+50	; 0x32
     846:	9b a9       	ldd	r25, Y+51	; 0x33
     848:	4e 97       	sbiw	r24, 0x1e	; 30
     84a:	09 f0       	breq	.+2      	; 0x84e <__stack+0x34f>
     84c:	50 c0       	rjmp	.+160    	; 0x8ee <__stack+0x3ef>
		{
			//Test if Minus is being played by the chord instead of the button
			// This means it won't get read in config mode, which is good.
			if(testForMinusChord(stringState))
				data.minusOn = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8f 87       	std	Y+15, r24	; 0x0f
     852:	4d c0       	rjmp	.+154    	; 0x8ee <__stack+0x3ef>
}

inline int testForSwitchModes(int stringState[])
{
	// Test for the right keypress to start the mode
	if ((stringState[0] == 0b00000000) &&
     854:	89 2b       	or	r24, r25
     856:	09 f0       	breq	.+2      	; 0x85a <__stack+0x35b>
     858:	4a c0       	rjmp	.+148    	; 0x8ee <__stack+0x3ef>
     85a:	8a a5       	ldd	r24, Y+42	; 0x2a
     85c:	9b a5       	ldd	r25, Y+43	; 0x2b
     85e:	89 2b       	or	r24, r25
     860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x365>
     862:	45 c0       	rjmp	.+138    	; 0x8ee <__stack+0x3ef>
     864:	8c a5       	ldd	r24, Y+44	; 0x2c
     866:	9d a5       	ldd	r25, Y+45	; 0x2d
     868:	80 32       	cpi	r24, 0x20	; 32
     86a:	91 05       	cpc	r25, r1
     86c:	81 f4       	brne	.+32     	; 0x88e <__stack+0x38f>
     86e:	8e a5       	ldd	r24, Y+46	; 0x2e
     870:	9f a5       	ldd	r25, Y+47	; 0x2f
     872:	80 97       	sbiw	r24, 0x20	; 32
     874:	e1 f5       	brne	.+120    	; 0x8ee <__stack+0x3ef>
     876:	88 a9       	ldd	r24, Y+48	; 0x30
     878:	99 a9       	ldd	r25, Y+49	; 0x31
     87a:	80 97       	sbiw	r24, 0x20	; 32
     87c:	c1 f5       	brne	.+112    	; 0x8ee <__stack+0x3ef>
     87e:	8a a9       	ldd	r24, Y+50	; 0x32
     880:	9b a9       	ldd	r25, Y+51	; 0x33
     882:	89 2b       	or	r24, r25
     884:	a1 f5       	brne	.+104    	; 0x8ee <__stack+0x3ef>
static inline void switchPlayModes(int stringState[], int buttonStringPatterns[][6], char* controllerMode)
{
	// Test for the right keypress to start the mode
	if (testForSwitchModes(stringState))
	{
		if (*controllerMode % 2 == 0) // This means that the mode is a full mode
     886:	50 fc       	sbrc	r5, 0
     888:	32 c0       	rjmp	.+100    	; 0x8ee <__stack+0x3ef>
			{++*controllerMode;}  //This puts it into a transitional mode
     88a:	53 94       	inc	r5
     88c:	30 c0       	rjmp	.+96     	; 0x8ee <__stack+0x3ef>
		return 0;
}

inline int testForNoStringsPressed(int stringState[])
{
	if ((stringState[0] == 0b00000000) &&
     88e:	89 2b       	or	r24, r25
     890:	71 f5       	brne	.+92     	; 0x8ee <__stack+0x3ef>
     892:	8e a5       	ldd	r24, Y+46	; 0x2e
     894:	9f a5       	ldd	r25, Y+47	; 0x2f
     896:	89 2b       	or	r24, r25
     898:	51 f5       	brne	.+84     	; 0x8ee <__stack+0x3ef>
     89a:	88 a9       	ldd	r24, Y+48	; 0x30
     89c:	99 a9       	ldd	r25, Y+49	; 0x31
     89e:	89 2b       	or	r24, r25
     8a0:	31 f5       	brne	.+76     	; 0x8ee <__stack+0x3ef>
     8a2:	8a a9       	ldd	r24, Y+50	; 0x32
     8a4:	9b a9       	ldd	r25, Y+51	; 0x33
     8a6:	89 2b       	or	r24, r25
     8a8:	11 f5       	brne	.+68     	; 0x8ee <__stack+0x3ef>
	}
	// And if we're not pressing that anymore, switch from the transitional mode to the regular mode,
	//  resetting the button patterns as necessary
	else if(testForNoStringsPressed(stringState)) 
	{
		if (*controllerMode == CHORDS_TO_FRETS) // since these modes are just numbers, we need to wrap around
     8aa:	95 e0       	ldi	r25, 0x05	; 5
     8ac:	59 16       	cp	r5, r25
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <__stack+0x3b5>
     8b0:	55 24       	eor	r5, r5
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <__stack+0x3ef>
			{*controllerMode = FRETS;}

		// Now, reset the buttonStringPattern array to be appropriate for the mode
		// For this, we'll read it from the EEPROM memory.
		else if (*controllerMode  == FRETS_TO_NOTES)
     8b4:	a1 e0       	ldi	r26, 0x01	; 1
     8b6:	5a 16       	cp	r5, r26
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <__stack+0x3d3>
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
     8ba:	c3 01       	movw	r24, r6
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	4c e3       	ldi	r20, 0x3C	; 60
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	20 eb       	ldi	r18, 0xB0	; 176
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__eerd_block>
     8cc:	b2 e0       	ldi	r27, 0x02	; 2
     8ce:	5b 2e       	mov	r5, r27
     8d0:	0e c0       	rjmp	.+28     	; 0x8ee <__stack+0x3ef>
		{
			// Notice, we're already passing in buttonStringPatterns as an address, so the EEPROM read looks a bit strange
			eeprom_read_block( (void*)buttonStringPatterns, (void*)&notesModeButtonPatterns, EEPROM_NOTES_BLOCK_SIZE);
			*controllerMode = NOTES;
		}
		else if (*controllerMode  == NOTES_TO_CHORDS)
     8d2:	b3 e0       	ldi	r27, 0x03	; 3
     8d4:	5b 16       	cp	r5, r27
     8d6:	59 f4       	brne	.+22     	; 0x8ee <__stack+0x3ef>
     8d8:	c3 01       	movw	r24, r6
     8da:	68 e7       	ldi	r22, 0x78	; 120
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	48 e7       	ldi	r20, 0x78	; 120
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	20 eb       	ldi	r18, 0xB0	; 176
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__eerd_block>
     8ea:	a4 e0       	ldi	r26, 0x04	; 4
     8ec:	5a 2e       	mov	r5, r26
			switchPlayModes(stringState, buttonStringPatterns, &controllerMode);

			// Next, using our strumState array, we process that data to figure out what sort
			//  of buttons on the controller we want to emulate pressing.
			// find out if we're in a transitional controller mode or not
			if (!(controllerMode % 2)) // Not a transitional mode
     8ee:	65 2d       	mov	r22, r5
     8f0:	50 fc       	sbrc	r5, 0
     8f2:	1e c0       	rjmp	.+60     	; 0x930 <__stack+0x431>
			{	//  This function can be found in processStringState.h/.c
				processStringState(&data, stringState, buttonStringPatterns, controllerMode, greenTimers, triedGreen);
     8f4:	ce 01       	movw	r24, r28
     8f6:	07 96       	adiw	r24, 0x07	; 7
     8f8:	be 01       	movw	r22, r28
     8fa:	68 5d       	subi	r22, 0xD8	; 216
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	a3 01       	movw	r20, r6
     900:	25 2d       	mov	r18, r5
     902:	ce 5b       	subi	r28, 0xBE	; 190
     904:	de 4f       	sbci	r29, 0xFE	; 254
     906:	08 81       	ld	r16, Y
     908:	c2 54       	subi	r28, 0x42	; 66
     90a:	d1 40       	sbci	r29, 0x01	; 1
     90c:	cd 5b       	subi	r28, 0xBD	; 189
     90e:	de 4f       	sbci	r29, 0xFE	; 254
     910:	18 81       	ld	r17, Y
     912:	c3 54       	subi	r28, 0x43	; 67
     914:	d1 40       	sbci	r29, 0x01	; 1
     916:	cc 5b       	subi	r28, 0xBC	; 188
     918:	de 4f       	sbci	r29, 0xFE	; 254
     91a:	e8 80       	ld	r14, Y
     91c:	c4 54       	subi	r28, 0x44	; 68
     91e:	d1 40       	sbci	r29, 0x01	; 1
     920:	cb 5b       	subi	r28, 0xBB	; 187
     922:	de 4f       	sbci	r29, 0xFE	; 254
     924:	f8 80       	ld	r15, Y
     926:	c5 54       	subi	r28, 0x45	; 69
     928:	d1 40       	sbci	r29, 0x01	; 1
     92a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <processStringState>
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x43b>
			}
			else
			{   // Now, if we're in a transitional controller mode, we'll forget that data and substitue 
				// visual cue data to show that we're changing to a specific mode
				//  The function itself can be found in processStringState.h/.c
				displayTransitionState(&data, controllerMode);
     930:	ce 01       	movw	r24, r28
     932:	07 96       	adiw	r24, 0x07	; 7
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 f7 08 	call	0x11ee	; 0x11ee <displayTransitionState>
     93a:	44 24       	eor	r4, r4
		}
			    
		// Now our processing is complete, so using those button presses, we set up the 
		// button data packet. This function depends on the console and is 
		// set specially in the interface functions - see ps3interface.h, wiiinterface.h, etc.
		sendData(data);
     93c:	0f 81       	ldd	r16, Y+7	; 0x07
     93e:	18 85       	ldd	r17, Y+8	; 0x08
     940:	29 85       	ldd	r18, Y+9	; 0x09
     942:	3a 85       	ldd	r19, Y+10	; 0x0a
     944:	4b 85       	ldd	r20, Y+11	; 0x0b
     946:	5c 85       	ldd	r21, Y+12	; 0x0c
     948:	6d 85       	ldd	r22, Y+13	; 0x0d
     94a:	7e 85       	ldd	r23, Y+14	; 0x0e
     94c:	8f 85       	ldd	r24, Y+15	; 0x0f
     94e:	0e 94 a6 0a 	call	0x154c	; 0x154c <sendData>
     952:	e3 cc       	rjmp	.-1594   	; 0x31a <main+0x10e>
				else
				{
					// Now set up the data packet to the interface layer to say we're pressing whatever button we're currently
					// assigning, and if we're pressing 'plus', go ahead and lock that string combination in
					//  The function itself can be found in processStringState.h/.c
					configSetButtonData(&data, &buttonToAssign, buttonStringPatterns, stringState, controllerMode,
     954:	ce 01       	movw	r24, r28
     956:	07 96       	adiw	r24, 0x07	; 7
     958:	be 01       	movw	r22, r28
     95a:	6d 5f       	subi	r22, 0xFD	; 253
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	a3 01       	movw	r20, r6
     960:	9e 01       	movw	r18, r28
     962:	28 5d       	subi	r18, 0xD8	; 216
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	05 2d       	mov	r16, r5
     968:	7e 01       	movw	r14, r28
     96a:	08 94       	sec
     96c:	e1 1c       	adc	r14, r1
     96e:	f1 1c       	adc	r15, r1
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	cf 2e       	mov	r12, r31
     974:	d1 2c       	mov	r13, r1
     976:	cc 0e       	add	r12, r28
     978:	dd 1e       	adc	r13, r29
     97a:	e5 e0       	ldi	r30, 0x05	; 5
     97c:	ae 2e       	mov	r10, r30
     97e:	b1 2c       	mov	r11, r1
     980:	ac 0e       	add	r10, r28
     982:	bd 1e       	adc	r11, r29
     984:	0e 94 0d 09 	call	0x121a	; 0x121a <configSetButtonData>
											&plusLock, &previousPlusOn, &debounceTimer);
					
					data.plusOn = 0; // Make sure we're not actually sending a "plus" signal to the controller, though.
     988:	1e 86       	std	Y+14, r1	; 0x0e
									// If we were, it would pause the game.

					// If we've assigned allcolors in Notes mode, cycle back to programming Green 
					if (controllerMode == NOTES && buttonToAssign >= NUM_NOTES_BUTTONS && plusLock == 0 )
     98a:	e2 e0       	ldi	r30, 0x02	; 2
     98c:	5e 16       	cp	r5, r30
     98e:	09 f0       	breq	.+2      	; 0x992 <__stack+0x493>
     990:	26 cf       	rjmp	.-436    	; 0x7de <__stack+0x2df>
     992:	19 cf       	rjmp	.-462    	; 0x7c6 <__stack+0x2c7>

00000994 <setPins>:
#include "guitarInitFunctions.h"

void setPins(void)
{
	// Set the fret pins as input pins, with internal resistor
	FRET_1_DDR &= ~(1<<FRET_1_PIN_NUM);        // input
     994:	21 98       	cbi	0x04, 1	; 4
	FRET_1_PORT |= (1<<FRET_1_PIN_NUM);		//pull-up enabled	
     996:	29 9a       	sbi	0x05, 1	; 5
	FRET_2_DDR &= ~(1<<FRET_2_PIN_NUM);
     998:	22 98       	cbi	0x04, 2	; 4
	FRET_2_PORT |= (1<<FRET_2_PIN_NUM);
     99a:	2a 9a       	sbi	0x05, 2	; 5
	FRET_3_DDR &= ~(1<<FRET_3_PIN_NUM);
     99c:	23 98       	cbi	0x04, 3	; 4
	FRET_3_PORT |= (1<<FRET_3_PIN_NUM);
     99e:	2b 9a       	sbi	0x05, 3	; 5
	FRET_4_DDR &= ~(1<<FRET_4_PIN_NUM);
     9a0:	24 98       	cbi	0x04, 4	; 4
	FRET_4_PORT |= (1<<FRET_4_PIN_NUM);
     9a2:	2c 9a       	sbi	0x05, 4	; 5
	FRET_5_DDR &= ~(1<<FRET_5_PIN_NUM);
     9a4:	25 98       	cbi	0x04, 5	; 4
	FRET_5_PORT |= (1<<FRET_5_PIN_NUM);
     9a6:	2d 9a       	sbi	0x05, 5	; 5

	// Set the pins on strumming and plus as inputs, with internal resistor
	PLUS_DDR &= ~(1<<PLUS_PIN_NUM);
     9a8:	38 98       	cbi	0x07, 0	; 7
	PLUS_PORT |= (1<<PLUS_PIN_NUM);
     9aa:	40 9a       	sbi	0x08, 0	; 8
	MINUS_DDR &= ~(1<<MINUS_PIN_NUM);
     9ac:	39 98       	cbi	0x07, 1	; 7
	MINUS_PORT |= (1<<MINUS_PIN_NUM);
     9ae:	41 9a       	sbi	0x08, 1	; 8

	PICK_DDR &= ~(1<<PICK_PIN_NUM);
     9b0:	3a 98       	cbi	0x07, 2	; 7
	PICK_PIN |= (1<<PICK_PIN_NUM);
     9b2:	32 9a       	sbi	0x06, 2	; 6

	// Set the string pins as output pins, outputting HIGH
	/* MAKE SURE YOU HAVE DIODES OPPOSING THIS CURRENT OUTFLOW! */
	STRING_1_DDR |= (1<<STRING_1_PIN_NUM);  //output
     9b4:	57 9a       	sbi	0x0a, 7	; 10
	STRING_1_PORT |= (1<<STRING_1_PIN_NUM); // set high
     9b6:	5f 9a       	sbi	0x0b, 7	; 11
	STRING_2_DDR |= (1<<STRING_2_PIN_NUM);  
     9b8:	56 9a       	sbi	0x0a, 6	; 10
	STRING_2_PORT |= (1<<STRING_2_PIN_NUM);
     9ba:	5e 9a       	sbi	0x0b, 6	; 11
	STRING_3_DDR |= (1<<STRING_3_PIN_NUM);  
     9bc:	55 9a       	sbi	0x0a, 5	; 10
	STRING_3_PORT |= (1<<STRING_3_PIN_NUM);
     9be:	5d 9a       	sbi	0x0b, 5	; 11
	STRING_4_DDR |= (1<<STRING_4_PIN_NUM);  
     9c0:	52 9a       	sbi	0x0a, 2	; 10
	STRING_4_PORT |= (1<<STRING_4_PIN_NUM);
     9c2:	5a 9a       	sbi	0x0b, 2	; 11
	STRING_5_DDR |= (1<<STRING_5_PIN_NUM);  
     9c4:	51 9a       	sbi	0x0a, 1	; 10
	STRING_5_PORT |= (1<<STRING_5_PIN_NUM);
     9c6:	59 9a       	sbi	0x0b, 1	; 11
	STRING_6_DDR |= (1<<STRING_6_PIN_NUM);  
     9c8:	50 9a       	sbi	0x0a, 0	; 10
	STRING_6_PORT |= (1<<STRING_6_PIN_NUM);
     9ca:	58 9a       	sbi	0x0b, 0	; 11
}
     9cc:	08 95       	ret

000009ce <setTimer>:

void setTimer(void) //This sets up a timer to handle the green button thing
{
	PRR &= ~(1<<PRTIM1);	// ensure power to Timer/Counter1
     9ce:	e4 e6       	ldi	r30, 0x64	; 100
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	87 7f       	andi	r24, 0xF7	; 247
     9d6:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<COM1A1);  // This prevents OC2A pin from doing anything
     9d8:	e0 e8       	ldi	r30, 0x80	; 128
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8f 77       	andi	r24, 0x7F	; 127
     9e0:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);  //  to the pins on the chip. Otherwise, we might
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 7b       	andi	r24, 0xBF	; 191
     9e6:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B1);  //  get signals coming out of some of the pins we might use
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 7d       	andi	r24, 0xDF	; 223
     9ec:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     9ee:	80 81       	ld	r24, Z
     9f0:	8f 7e       	andi	r24, 0xEF	; 239
     9f2:	80 83       	st	Z, r24

	TCCR1A &= ~(1<<WGM11);  // These bits set up normal mode on the Waveform Generation
     9f4:	80 81       	ld	r24, Z
     9f6:	8d 7f       	andi	r24, 0xFD	; 253
     9f8:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM10);  // This means that the counter acts like a normal timer,
     9fa:	80 81       	ld	r24, Z
     9fc:	8e 7f       	andi	r24, 0xFE	; 254
     9fe:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);  // not some sort of fancy digital-analog converter or anything
     a00:	e1 e8       	ldi	r30, 0x81	; 129
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	87 7f       	andi	r24, 0xF7	; 247
     a08:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);  // It counts up to 65536 and overflows to zero
     a0a:	80 81       	ld	r24, Z
     a0c:	8f 7e       	andi	r24, 0xEF	; 239
     a0e:	80 83       	st	Z, r24

	TCCR1B |= (1<<CS12);   // These set the clock to CPU (8MHz) / 1024 
     a10:	80 81       	ld	r24, Z
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);  // or roughly 8 kHz (7.8125 kHz)
     a16:	80 81       	ld	r24, Z
     a18:	8d 7f       	andi	r24, 0xFD	; 253
     a1a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);   // When counting from zero to 0xFFFF, it takes about 8 seconds
     a1c:	80 81       	ld	r24, Z
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	80 83       	st	Z, r24

	// The counter's value is stored in TCNT1
}
     a22:	08 95       	ret

00000a24 <processChords>:
*/
#include "processStringState.h"

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	8c 01       	movw	r16, r24
     a2e:	fb 01       	movw	r30, r22
     a30:	ea 01       	movw	r28, r20
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
				data->downOn = 1;
				data->upOn   = 0;
			}
			else
			{
				data->upOn   = 1;
     a36:	41 e0       	ldi	r20, 0x01	; 1
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
	{
		if (stringState[guitarString] & 1)
     a38:	db 01       	movw	r26, r22
     a3a:	8d 91       	ld	r24, X+
     a3c:	9c 91       	ld	r25, X
     a3e:	11 97       	sbiw	r26, 0x01	; 1
     a40:	80 ff       	sbrs	r24, 0
     a42:	13 c0       	rjmp	.+38     	; 0xa6a <processChords+0x46>
		{
			stringState[guitarString] &= ~1; //Set the last bit to zero
     a44:	8e 7f       	andi	r24, 0xFE	; 254
     a46:	8d 93       	st	X+, r24
     a48:	9c 93       	st	X, r25
			if (guitarString < 3)
     a4a:	23 30       	cpi	r18, 0x03	; 3
     a4c:	31 05       	cpc	r19, r1
     a4e:	3c f4       	brge	.+14     	; 0xa5e <processChords+0x3a>
			{
				data->downOn = 1;
     a50:	d8 01       	movw	r26, r16
     a52:	16 96       	adiw	r26, 0x06	; 6
     a54:	4c 93       	st	X, r20
     a56:	16 97       	sbiw	r26, 0x06	; 6
				data->upOn   = 0;
     a58:	15 96       	adiw	r26, 0x05	; 5
     a5a:	1c 92       	st	X, r1
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <processChords+0x46>
			}
			else
			{
				data->upOn   = 1;
     a5e:	d8 01       	movw	r26, r16
     a60:	15 96       	adiw	r26, 0x05	; 5
     a62:	4c 93       	st	X, r20
     a64:	15 97       	sbiw	r26, 0x05	; 5
				data->downOn = 0;
     a66:	16 96       	adiw	r26, 0x06	; 6
     a68:	1c 92       	st	X, r1

void processChords(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
	// First take care of registering strumming
	for (int guitarString = 0; guitarString < 6; guitarString++)
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	6e 5f       	subi	r22, 0xFE	; 254
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	26 30       	cpi	r18, 0x06	; 6
     a74:	31 05       	cpc	r19, r1
     a76:	01 f7       	brne	.-64     	; 0xa38 <processChords+0x14>
			}
		}
	}

	// First, save us some trouble and see if we're not pressing anything at all..
	if ((stringState[0] == 0b00000000) &&
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	a9 f4       	brne	.+42     	; 0xaac <processChords+0x88>
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	93 81       	ldd	r25, Z+3	; 0x03
     a86:	89 2b       	or	r24, r25
     a88:	89 f4       	brne	.+34     	; 0xaac <processChords+0x88>
     a8a:	84 81       	ldd	r24, Z+4	; 0x04
     a8c:	95 81       	ldd	r25, Z+5	; 0x05
     a8e:	89 2b       	or	r24, r25
     a90:	69 f4       	brne	.+26     	; 0xaac <processChords+0x88>
     a92:	86 81       	ldd	r24, Z+6	; 0x06
     a94:	97 81       	ldd	r25, Z+7	; 0x07
     a96:	89 2b       	or	r24, r25
     a98:	49 f4       	brne	.+18     	; 0xaac <processChords+0x88>
     a9a:	80 85       	ldd	r24, Z+8	; 0x08
     a9c:	91 85       	ldd	r25, Z+9	; 0x09
     a9e:	89 2b       	or	r24, r25
     aa0:	29 f4       	brne	.+10     	; 0xaac <processChords+0x88>
     aa2:	82 85       	ldd	r24, Z+10	; 0x0a
     aa4:	93 85       	ldd	r25, Z+11	; 0x0b
     aa6:	89 2b       	or	r24, r25
     aa8:	09 f4       	brne	.+2      	; 0xaac <processChords+0x88>
     aaa:	31 c2       	rjmp	.+1122   	; 0xf0e <processChords+0x4ea>
		return;

	// Now see if what's being played on the fretboard matches any of the button patterns in
	//  buttonStringPatterns
	// green
	if(stringState[0] == buttonStringPatterns[0][0] &&
     aac:	88 81       	ld	r24, Y
     aae:	99 81       	ldd	r25, Y+1	; 0x01
     ab0:	48 17       	cp	r20, r24
     ab2:	59 07       	cpc	r21, r25
     ab4:	39 f5       	brne	.+78     	; 0xb04 <processChords+0xe0>
     ab6:	22 81       	ldd	r18, Z+2	; 0x02
     ab8:	33 81       	ldd	r19, Z+3	; 0x03
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	9b 81       	ldd	r25, Y+3	; 0x03
     abe:	28 17       	cp	r18, r24
     ac0:	39 07       	cpc	r19, r25
     ac2:	01 f5       	brne	.+64     	; 0xb04 <processChords+0xe0>
     ac4:	24 81       	ldd	r18, Z+4	; 0x04
     ac6:	35 81       	ldd	r19, Z+5	; 0x05
     ac8:	8c 81       	ldd	r24, Y+4	; 0x04
     aca:	9d 81       	ldd	r25, Y+5	; 0x05
     acc:	28 17       	cp	r18, r24
     ace:	39 07       	cpc	r19, r25
     ad0:	c9 f4       	brne	.+50     	; 0xb04 <processChords+0xe0>
     ad2:	26 81       	ldd	r18, Z+6	; 0x06
     ad4:	37 81       	ldd	r19, Z+7	; 0x07
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	9f 81       	ldd	r25, Y+7	; 0x07
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	91 f4       	brne	.+36     	; 0xb04 <processChords+0xe0>
     ae0:	20 85       	ldd	r18, Z+8	; 0x08
     ae2:	31 85       	ldd	r19, Z+9	; 0x09
     ae4:	88 85       	ldd	r24, Y+8	; 0x08
     ae6:	99 85       	ldd	r25, Y+9	; 0x09
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	59 f4       	brne	.+22     	; 0xb04 <processChords+0xe0>
     aee:	22 85       	ldd	r18, Z+10	; 0x0a
     af0:	33 85       	ldd	r19, Z+11	; 0x0b
     af2:	8a 85       	ldd	r24, Y+10	; 0x0a
     af4:	9b 85       	ldd	r25, Y+11	; 0x0b
     af6:	28 17       	cp	r18, r24
     af8:	39 07       	cpc	r19, r25
     afa:	21 f4       	brne	.+8      	; 0xb04 <processChords+0xe0>
	   stringState[2] == buttonStringPatterns[0][2] &&
	   stringState[3] == buttonStringPatterns[0][3] &&
	   stringState[4] == buttonStringPatterns[0][4] &&
	   stringState[5] == buttonStringPatterns[0][5]  ) 
		{
			data->greenOn = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	f8 01       	movw	r30, r16
     b00:	80 83       	st	Z, r24
     b02:	05 c2       	rjmp	.+1034   	; 0xf0e <processChords+0x4ea>
  		}
	// red
	else if(stringState[0] == buttonStringPatterns[1][0] &&
     b04:	de 01       	movw	r26, r28
     b06:	1c 96       	adiw	r26, 0x0c	; 12
     b08:	8c 85       	ldd	r24, Y+12	; 0x0c
     b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b0c:	48 17       	cp	r20, r24
     b0e:	59 07       	cpc	r21, r25
     b10:	81 f5       	brne	.+96     	; 0xb72 <processChords+0x14e>
     b12:	22 81       	ldd	r18, Z+2	; 0x02
     b14:	33 81       	ldd	r19, Z+3	; 0x03
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	8d 91       	ld	r24, X+
     b1a:	9c 91       	ld	r25, X
     b1c:	13 97       	sbiw	r26, 0x03	; 3
     b1e:	28 17       	cp	r18, r24
     b20:	39 07       	cpc	r19, r25
     b22:	39 f5       	brne	.+78     	; 0xb72 <processChords+0x14e>
     b24:	24 81       	ldd	r18, Z+4	; 0x04
     b26:	35 81       	ldd	r19, Z+5	; 0x05
     b28:	14 96       	adiw	r26, 0x04	; 4
     b2a:	8d 91       	ld	r24, X+
     b2c:	9c 91       	ld	r25, X
     b2e:	15 97       	sbiw	r26, 0x05	; 5
     b30:	28 17       	cp	r18, r24
     b32:	39 07       	cpc	r19, r25
     b34:	f1 f4       	brne	.+60     	; 0xb72 <processChords+0x14e>
     b36:	26 81       	ldd	r18, Z+6	; 0x06
     b38:	37 81       	ldd	r19, Z+7	; 0x07
     b3a:	16 96       	adiw	r26, 0x06	; 6
     b3c:	8d 91       	ld	r24, X+
     b3e:	9c 91       	ld	r25, X
     b40:	17 97       	sbiw	r26, 0x07	; 7
     b42:	28 17       	cp	r18, r24
     b44:	39 07       	cpc	r19, r25
     b46:	a9 f4       	brne	.+42     	; 0xb72 <processChords+0x14e>
     b48:	20 85       	ldd	r18, Z+8	; 0x08
     b4a:	31 85       	ldd	r19, Z+9	; 0x09
     b4c:	18 96       	adiw	r26, 0x08	; 8
     b4e:	8d 91       	ld	r24, X+
     b50:	9c 91       	ld	r25, X
     b52:	19 97       	sbiw	r26, 0x09	; 9
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	61 f4       	brne	.+24     	; 0xb72 <processChords+0x14e>
     b5a:	22 85       	ldd	r18, Z+10	; 0x0a
     b5c:	33 85       	ldd	r19, Z+11	; 0x0b
     b5e:	1a 96       	adiw	r26, 0x0a	; 10
     b60:	8d 91       	ld	r24, X+
     b62:	9c 91       	ld	r25, X
     b64:	1b 97       	sbiw	r26, 0x0b	; 11
     b66:	28 17       	cp	r18, r24
     b68:	39 07       	cpc	r19, r25
     b6a:	19 f4       	brne	.+6      	; 0xb72 <processChords+0x14e>
	   stringState[2] == buttonStringPatterns[1][2] &&
	   stringState[3] == buttonStringPatterns[1][3] &&
	   stringState[4] == buttonStringPatterns[1][4] &&
	   stringState[5] == buttonStringPatterns[1][5]  ) 
		{
			data->redOn = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	d8 01       	movw	r26, r16
     b70:	dd c0       	rjmp	.+442    	; 0xd2c <processChords+0x308>
  		}

	// yellow
	else if(stringState[0] == buttonStringPatterns[2][0] &&
     b72:	de 01       	movw	r26, r28
     b74:	58 96       	adiw	r26, 0x18	; 24
     b76:	88 8d       	ldd	r24, Y+24	; 0x18
     b78:	99 8d       	ldd	r25, Y+25	; 0x19
     b7a:	48 17       	cp	r20, r24
     b7c:	59 07       	cpc	r21, r25
     b7e:	81 f5       	brne	.+96     	; 0xbe0 <processChords+0x1bc>
     b80:	22 81       	ldd	r18, Z+2	; 0x02
     b82:	33 81       	ldd	r19, Z+3	; 0x03
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	8d 91       	ld	r24, X+
     b88:	9c 91       	ld	r25, X
     b8a:	13 97       	sbiw	r26, 0x03	; 3
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	39 f5       	brne	.+78     	; 0xbe0 <processChords+0x1bc>
     b92:	24 81       	ldd	r18, Z+4	; 0x04
     b94:	35 81       	ldd	r19, Z+5	; 0x05
     b96:	14 96       	adiw	r26, 0x04	; 4
     b98:	8d 91       	ld	r24, X+
     b9a:	9c 91       	ld	r25, X
     b9c:	15 97       	sbiw	r26, 0x05	; 5
     b9e:	28 17       	cp	r18, r24
     ba0:	39 07       	cpc	r19, r25
     ba2:	f1 f4       	brne	.+60     	; 0xbe0 <processChords+0x1bc>
     ba4:	26 81       	ldd	r18, Z+6	; 0x06
     ba6:	37 81       	ldd	r19, Z+7	; 0x07
     ba8:	16 96       	adiw	r26, 0x06	; 6
     baa:	8d 91       	ld	r24, X+
     bac:	9c 91       	ld	r25, X
     bae:	17 97       	sbiw	r26, 0x07	; 7
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	a9 f4       	brne	.+42     	; 0xbe0 <processChords+0x1bc>
     bb6:	20 85       	ldd	r18, Z+8	; 0x08
     bb8:	31 85       	ldd	r19, Z+9	; 0x09
     bba:	18 96       	adiw	r26, 0x08	; 8
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	19 97       	sbiw	r26, 0x09	; 9
     bc2:	28 17       	cp	r18, r24
     bc4:	39 07       	cpc	r19, r25
     bc6:	61 f4       	brne	.+24     	; 0xbe0 <processChords+0x1bc>
     bc8:	22 85       	ldd	r18, Z+10	; 0x0a
     bca:	33 85       	ldd	r19, Z+11	; 0x0b
     bcc:	1a 96       	adiw	r26, 0x0a	; 10
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	1b 97       	sbiw	r26, 0x0b	; 11
     bd4:	28 17       	cp	r18, r24
     bd6:	39 07       	cpc	r19, r25
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <processChords+0x1bc>
	   stringState[2] == buttonStringPatterns[2][2] &&
	   stringState[3] == buttonStringPatterns[2][3] &&
	   stringState[4] == buttonStringPatterns[2][4] &&
	   stringState[5] == buttonStringPatterns[2][5]  ) 
		{
			 data->yellowOn = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	f8 01       	movw	r30, r16
     bde:	58 c1       	rjmp	.+688    	; 0xe90 <processChords+0x46c>
  		}
	// blue
	else if(stringState[0] == buttonStringPatterns[3][0] &&
     be0:	de 01       	movw	r26, r28
     be2:	94 96       	adiw	r26, 0x24	; 36
     be4:	8c a1       	ldd	r24, Y+36	; 0x24
     be6:	9d a1       	ldd	r25, Y+37	; 0x25
     be8:	48 17       	cp	r20, r24
     bea:	59 07       	cpc	r21, r25
     bec:	81 f5       	brne	.+96     	; 0xc4e <processChords+0x22a>
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	33 81       	ldd	r19, Z+3	; 0x03
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	13 97       	sbiw	r26, 0x03	; 3
     bfa:	28 17       	cp	r18, r24
     bfc:	39 07       	cpc	r19, r25
     bfe:	39 f5       	brne	.+78     	; 0xc4e <processChords+0x22a>
     c00:	24 81       	ldd	r18, Z+4	; 0x04
     c02:	35 81       	ldd	r19, Z+5	; 0x05
     c04:	14 96       	adiw	r26, 0x04	; 4
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	15 97       	sbiw	r26, 0x05	; 5
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	f1 f4       	brne	.+60     	; 0xc4e <processChords+0x22a>
     c12:	26 81       	ldd	r18, Z+6	; 0x06
     c14:	37 81       	ldd	r19, Z+7	; 0x07
     c16:	16 96       	adiw	r26, 0x06	; 6
     c18:	8d 91       	ld	r24, X+
     c1a:	9c 91       	ld	r25, X
     c1c:	17 97       	sbiw	r26, 0x07	; 7
     c1e:	28 17       	cp	r18, r24
     c20:	39 07       	cpc	r19, r25
     c22:	a9 f4       	brne	.+42     	; 0xc4e <processChords+0x22a>
     c24:	20 85       	ldd	r18, Z+8	; 0x08
     c26:	31 85       	ldd	r19, Z+9	; 0x09
     c28:	18 96       	adiw	r26, 0x08	; 8
     c2a:	8d 91       	ld	r24, X+
     c2c:	9c 91       	ld	r25, X
     c2e:	19 97       	sbiw	r26, 0x09	; 9
     c30:	28 17       	cp	r18, r24
     c32:	39 07       	cpc	r19, r25
     c34:	61 f4       	brne	.+24     	; 0xc4e <processChords+0x22a>
     c36:	22 85       	ldd	r18, Z+10	; 0x0a
     c38:	33 85       	ldd	r19, Z+11	; 0x0b
     c3a:	1a 96       	adiw	r26, 0x0a	; 10
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	1b 97       	sbiw	r26, 0x0b	; 11
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	19 f4       	brne	.+6      	; 0xc4e <processChords+0x22a>
	   stringState[2] == buttonStringPatterns[3][2] &&
	   stringState[3] == buttonStringPatterns[3][3] &&
	   stringState[4] == buttonStringPatterns[3][4] &&
	   stringState[5] == buttonStringPatterns[3][5]  ) 
		{
			 data->blueOn = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	d8 01       	movw	r26, r16
     c4c:	5e c1       	rjmp	.+700    	; 0xf0a <processChords+0x4e6>
  		}
	// orange
	else if(stringState[0] == buttonStringPatterns[4][0] &&
     c4e:	de 01       	movw	r26, r28
     c50:	d0 96       	adiw	r26, 0x30	; 48
     c52:	88 a9       	ldd	r24, Y+48	; 0x30
     c54:	99 a9       	ldd	r25, Y+49	; 0x31
     c56:	48 17       	cp	r20, r24
     c58:	59 07       	cpc	r21, r25
     c5a:	89 f5       	brne	.+98     	; 0xcbe <processChords+0x29a>
     c5c:	22 81       	ldd	r18, Z+2	; 0x02
     c5e:	33 81       	ldd	r19, Z+3	; 0x03
     c60:	12 96       	adiw	r26, 0x02	; 2
     c62:	8d 91       	ld	r24, X+
     c64:	9c 91       	ld	r25, X
     c66:	13 97       	sbiw	r26, 0x03	; 3
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	41 f5       	brne	.+80     	; 0xcbe <processChords+0x29a>
     c6e:	24 81       	ldd	r18, Z+4	; 0x04
     c70:	35 81       	ldd	r19, Z+5	; 0x05
     c72:	14 96       	adiw	r26, 0x04	; 4
     c74:	8d 91       	ld	r24, X+
     c76:	9c 91       	ld	r25, X
     c78:	15 97       	sbiw	r26, 0x05	; 5
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	f9 f4       	brne	.+62     	; 0xcbe <processChords+0x29a>
     c80:	26 81       	ldd	r18, Z+6	; 0x06
     c82:	37 81       	ldd	r19, Z+7	; 0x07
     c84:	16 96       	adiw	r26, 0x06	; 6
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	b1 f4       	brne	.+44     	; 0xcbe <processChords+0x29a>
     c92:	20 85       	ldd	r18, Z+8	; 0x08
     c94:	31 85       	ldd	r19, Z+9	; 0x09
     c96:	18 96       	adiw	r26, 0x08	; 8
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	19 97       	sbiw	r26, 0x09	; 9
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	69 f4       	brne	.+26     	; 0xcbe <processChords+0x29a>
     ca4:	22 85       	ldd	r18, Z+10	; 0x0a
     ca6:	33 85       	ldd	r19, Z+11	; 0x0b
     ca8:	1a 96       	adiw	r26, 0x0a	; 10
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	1b 97       	sbiw	r26, 0x0b	; 11
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	21 f4       	brne	.+8      	; 0xcbe <processChords+0x29a>
	   stringState[2] == buttonStringPatterns[4][2] &&
	   stringState[3] == buttonStringPatterns[4][3] &&
	   stringState[4] == buttonStringPatterns[4][4] &&
	   stringState[5] == buttonStringPatterns[4][5]  ) 
		{
			 data->orangeOn = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	f8 01       	movw	r30, r16
     cba:	84 83       	std	Z+4, r24	; 0x04
     cbc:	28 c1       	rjmp	.+592    	; 0xf0e <processChords+0x4ea>
  		}
	//Green and Red
	else if(stringState[0] == buttonStringPatterns[5][0] &&
     cbe:	de 01       	movw	r26, r28
     cc0:	dc 96       	adiw	r26, 0x3c	; 60
     cc2:	8c ad       	ldd	r24, Y+60	; 0x3c
     cc4:	9d ad       	ldd	r25, Y+61	; 0x3d
     cc6:	48 17       	cp	r20, r24
     cc8:	59 07       	cpc	r21, r25
     cca:	99 f5       	brne	.+102    	; 0xd32 <processChords+0x30e>
     ccc:	22 81       	ldd	r18, Z+2	; 0x02
     cce:	33 81       	ldd	r19, Z+3	; 0x03
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	8d 91       	ld	r24, X+
     cd4:	9c 91       	ld	r25, X
     cd6:	13 97       	sbiw	r26, 0x03	; 3
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	51 f5       	brne	.+84     	; 0xd32 <processChords+0x30e>
     cde:	24 81       	ldd	r18, Z+4	; 0x04
     ce0:	35 81       	ldd	r19, Z+5	; 0x05
     ce2:	14 96       	adiw	r26, 0x04	; 4
     ce4:	8d 91       	ld	r24, X+
     ce6:	9c 91       	ld	r25, X
     ce8:	15 97       	sbiw	r26, 0x05	; 5
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	09 f5       	brne	.+66     	; 0xd32 <processChords+0x30e>
     cf0:	26 81       	ldd	r18, Z+6	; 0x06
     cf2:	37 81       	ldd	r19, Z+7	; 0x07
     cf4:	16 96       	adiw	r26, 0x06	; 6
     cf6:	8d 91       	ld	r24, X+
     cf8:	9c 91       	ld	r25, X
     cfa:	17 97       	sbiw	r26, 0x07	; 7
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	c1 f4       	brne	.+48     	; 0xd32 <processChords+0x30e>
     d02:	20 85       	ldd	r18, Z+8	; 0x08
     d04:	31 85       	ldd	r19, Z+9	; 0x09
     d06:	18 96       	adiw	r26, 0x08	; 8
     d08:	8d 91       	ld	r24, X+
     d0a:	9c 91       	ld	r25, X
     d0c:	19 97       	sbiw	r26, 0x09	; 9
     d0e:	28 17       	cp	r18, r24
     d10:	39 07       	cpc	r19, r25
     d12:	79 f4       	brne	.+30     	; 0xd32 <processChords+0x30e>
     d14:	22 85       	ldd	r18, Z+10	; 0x0a
     d16:	33 85       	ldd	r19, Z+11	; 0x0b
     d18:	1a 96       	adiw	r26, 0x0a	; 10
     d1a:	8d 91       	ld	r24, X+
     d1c:	9c 91       	ld	r25, X
     d1e:	1b 97       	sbiw	r26, 0x0b	; 11
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	31 f4       	brne	.+12     	; 0xd32 <processChords+0x30e>
	   stringState[2] == buttonStringPatterns[5][2] &&
	   stringState[3] == buttonStringPatterns[5][3] &&
	   stringState[4] == buttonStringPatterns[5][4] &&
	   stringState[5] == buttonStringPatterns[5][5]  ) 
		{
			data->greenOn = 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	d8 01       	movw	r26, r16
     d2a:	8c 93       	st	X, r24
			data->redOn = 1;
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	8c 93       	st	X, r24
     d30:	ee c0       	rjmp	.+476    	; 0xf0e <processChords+0x4ea>
  		}
	//Red and Yellow
	else if(stringState[0] == buttonStringPatterns[6][0] &&
     d32:	de 01       	movw	r26, r28
     d34:	a8 5b       	subi	r26, 0xB8	; 184
     d36:	bf 4f       	sbci	r27, 0xFF	; 255
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	48 17       	cp	r20, r24
     d40:	59 07       	cpc	r21, r25
     d42:	89 f5       	brne	.+98     	; 0xda6 <processChords+0x382>
     d44:	22 81       	ldd	r18, Z+2	; 0x02
     d46:	33 81       	ldd	r19, Z+3	; 0x03
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	8d 91       	ld	r24, X+
     d4c:	9c 91       	ld	r25, X
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	28 17       	cp	r18, r24
     d52:	39 07       	cpc	r19, r25
     d54:	41 f5       	brne	.+80     	; 0xda6 <processChords+0x382>
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	14 96       	adiw	r26, 0x04	; 4
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	15 97       	sbiw	r26, 0x05	; 5
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	f9 f4       	brne	.+62     	; 0xda6 <processChords+0x382>
     d68:	26 81       	ldd	r18, Z+6	; 0x06
     d6a:	37 81       	ldd	r19, Z+7	; 0x07
     d6c:	16 96       	adiw	r26, 0x06	; 6
     d6e:	8d 91       	ld	r24, X+
     d70:	9c 91       	ld	r25, X
     d72:	17 97       	sbiw	r26, 0x07	; 7
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	b1 f4       	brne	.+44     	; 0xda6 <processChords+0x382>
     d7a:	20 85       	ldd	r18, Z+8	; 0x08
     d7c:	31 85       	ldd	r19, Z+9	; 0x09
     d7e:	18 96       	adiw	r26, 0x08	; 8
     d80:	8d 91       	ld	r24, X+
     d82:	9c 91       	ld	r25, X
     d84:	19 97       	sbiw	r26, 0x09	; 9
     d86:	28 17       	cp	r18, r24
     d88:	39 07       	cpc	r19, r25
     d8a:	69 f4       	brne	.+26     	; 0xda6 <processChords+0x382>
     d8c:	22 85       	ldd	r18, Z+10	; 0x0a
     d8e:	33 85       	ldd	r19, Z+11	; 0x0b
     d90:	1a 96       	adiw	r26, 0x0a	; 10
     d92:	8d 91       	ld	r24, X+
     d94:	9c 91       	ld	r25, X
     d96:	1b 97       	sbiw	r26, 0x0b	; 11
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	21 f4       	brne	.+8      	; 0xda6 <processChords+0x382>
	   stringState[2] == buttonStringPatterns[6][2] &&
	   stringState[3] == buttonStringPatterns[6][3] &&
	   stringState[4] == buttonStringPatterns[6][4] &&
	   stringState[5] == buttonStringPatterns[6][5]  ) 
		{
			data->redOn = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	f8 01       	movw	r30, r16
     da2:	81 83       	std	Z+1, r24	; 0x01
     da4:	75 c0       	rjmp	.+234    	; 0xe90 <processChords+0x46c>
			data->yellowOn = 1;
  		}
	// Yellow and Blue
	else if(stringState[0] == buttonStringPatterns[7][0] &&
     da6:	de 01       	movw	r26, r28
     da8:	ac 5a       	subi	r26, 0xAC	; 172
     daa:	bf 4f       	sbci	r27, 0xFF	; 255
     dac:	8d 91       	ld	r24, X+
     dae:	9c 91       	ld	r25, X
     db0:	11 97       	sbiw	r26, 0x01	; 1
     db2:	48 17       	cp	r20, r24
     db4:	59 07       	cpc	r21, r25
     db6:	99 f5       	brne	.+102    	; 0xe1e <processChords+0x3fa>
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	33 81       	ldd	r19, Z+3	; 0x03
     dbc:	12 96       	adiw	r26, 0x02	; 2
     dbe:	8d 91       	ld	r24, X+
     dc0:	9c 91       	ld	r25, X
     dc2:	13 97       	sbiw	r26, 0x03	; 3
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	51 f5       	brne	.+84     	; 0xe1e <processChords+0x3fa>
     dca:	24 81       	ldd	r18, Z+4	; 0x04
     dcc:	35 81       	ldd	r19, Z+5	; 0x05
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	15 97       	sbiw	r26, 0x05	; 5
     dd6:	28 17       	cp	r18, r24
     dd8:	39 07       	cpc	r19, r25
     dda:	09 f5       	brne	.+66     	; 0xe1e <processChords+0x3fa>
     ddc:	26 81       	ldd	r18, Z+6	; 0x06
     dde:	37 81       	ldd	r19, Z+7	; 0x07
     de0:	16 96       	adiw	r26, 0x06	; 6
     de2:	8d 91       	ld	r24, X+
     de4:	9c 91       	ld	r25, X
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	c1 f4       	brne	.+48     	; 0xe1e <processChords+0x3fa>
     dee:	20 85       	ldd	r18, Z+8	; 0x08
     df0:	31 85       	ldd	r19, Z+9	; 0x09
     df2:	18 96       	adiw	r26, 0x08	; 8
     df4:	8d 91       	ld	r24, X+
     df6:	9c 91       	ld	r25, X
     df8:	19 97       	sbiw	r26, 0x09	; 9
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	79 f4       	brne	.+30     	; 0xe1e <processChords+0x3fa>
     e00:	22 85       	ldd	r18, Z+10	; 0x0a
     e02:	33 85       	ldd	r19, Z+11	; 0x0b
     e04:	1a 96       	adiw	r26, 0x0a	; 10
     e06:	8d 91       	ld	r24, X+
     e08:	9c 91       	ld	r25, X
     e0a:	1b 97       	sbiw	r26, 0x0b	; 11
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	31 f4       	brne	.+12     	; 0xe1e <processChords+0x3fa>
	   stringState[2] == buttonStringPatterns[7][2] &&
	   stringState[3] == buttonStringPatterns[7][3] &&
	   stringState[4] == buttonStringPatterns[7][4] &&
	   stringState[5] == buttonStringPatterns[7][5]  ) 
		{
			 data->yellowOn = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	d8 01       	movw	r26, r16
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8c 93       	st	X, r24
     e1a:	12 97       	sbiw	r26, 0x02	; 2
     e1c:	76 c0       	rjmp	.+236    	; 0xf0a <processChords+0x4e6>
			 data->blueOn = 1;
  		}
	// Green and Yellow
	else if(stringState[0] == buttonStringPatterns[8][0] &&
     e1e:	de 01       	movw	r26, r28
     e20:	a0 5a       	subi	r26, 0xA0	; 160
     e22:	bf 4f       	sbci	r27, 0xFF	; 255
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	11 97       	sbiw	r26, 0x01	; 1
     e2a:	48 17       	cp	r20, r24
     e2c:	59 07       	cpc	r21, r25
     e2e:	91 f5       	brne	.+100    	; 0xe94 <processChords+0x470>
     e30:	22 81       	ldd	r18, Z+2	; 0x02
     e32:	33 81       	ldd	r19, Z+3	; 0x03
     e34:	12 96       	adiw	r26, 0x02	; 2
     e36:	8d 91       	ld	r24, X+
     e38:	9c 91       	ld	r25, X
     e3a:	13 97       	sbiw	r26, 0x03	; 3
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	49 f5       	brne	.+82     	; 0xe94 <processChords+0x470>
     e42:	24 81       	ldd	r18, Z+4	; 0x04
     e44:	35 81       	ldd	r19, Z+5	; 0x05
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9c 91       	ld	r25, X
     e4c:	15 97       	sbiw	r26, 0x05	; 5
     e4e:	28 17       	cp	r18, r24
     e50:	39 07       	cpc	r19, r25
     e52:	01 f5       	brne	.+64     	; 0xe94 <processChords+0x470>
     e54:	26 81       	ldd	r18, Z+6	; 0x06
     e56:	37 81       	ldd	r19, Z+7	; 0x07
     e58:	16 96       	adiw	r26, 0x06	; 6
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	17 97       	sbiw	r26, 0x07	; 7
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	b9 f4       	brne	.+46     	; 0xe94 <processChords+0x470>
     e66:	20 85       	ldd	r18, Z+8	; 0x08
     e68:	31 85       	ldd	r19, Z+9	; 0x09
     e6a:	18 96       	adiw	r26, 0x08	; 8
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	19 97       	sbiw	r26, 0x09	; 9
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	71 f4       	brne	.+28     	; 0xe94 <processChords+0x470>
     e78:	22 85       	ldd	r18, Z+10	; 0x0a
     e7a:	33 85       	ldd	r19, Z+11	; 0x0b
     e7c:	1a 96       	adiw	r26, 0x0a	; 10
     e7e:	8d 91       	ld	r24, X+
     e80:	9c 91       	ld	r25, X
     e82:	1b 97       	sbiw	r26, 0x0b	; 11
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	29 f4       	brne	.+10     	; 0xe94 <processChords+0x470>
	   stringState[2] == buttonStringPatterns[8][2] &&
	   stringState[3] == buttonStringPatterns[8][3] &&
	   stringState[4] == buttonStringPatterns[8][4] &&
	   stringState[5] == buttonStringPatterns[8][5]  ) 
		{
			 data->greenOn = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 83       	st	Z, r24
			 data->yellowOn = 1;
     e90:	82 83       	std	Z+2, r24	; 0x02
     e92:	3d c0       	rjmp	.+122    	; 0xf0e <processChords+0x4ea>
  		}
	// Red and Blue
	else if(stringState[0] == buttonStringPatterns[9][0] &&
     e94:	de 01       	movw	r26, r28
     e96:	a4 59       	subi	r26, 0x94	; 148
     e98:	bf 4f       	sbci	r27, 0xFF	; 255
     e9a:	8d 91       	ld	r24, X+
     e9c:	9c 91       	ld	r25, X
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	48 17       	cp	r20, r24
     ea2:	59 07       	cpc	r21, r25
     ea4:	a1 f5       	brne	.+104    	; 0xf0e <processChords+0x4ea>
     ea6:	22 81       	ldd	r18, Z+2	; 0x02
     ea8:	33 81       	ldd	r19, Z+3	; 0x03
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	8d 91       	ld	r24, X+
     eae:	9c 91       	ld	r25, X
     eb0:	13 97       	sbiw	r26, 0x03	; 3
     eb2:	28 17       	cp	r18, r24
     eb4:	39 07       	cpc	r19, r25
     eb6:	59 f5       	brne	.+86     	; 0xf0e <processChords+0x4ea>
     eb8:	24 81       	ldd	r18, Z+4	; 0x04
     eba:	35 81       	ldd	r19, Z+5	; 0x05
     ebc:	14 96       	adiw	r26, 0x04	; 4
     ebe:	8d 91       	ld	r24, X+
     ec0:	9c 91       	ld	r25, X
     ec2:	15 97       	sbiw	r26, 0x05	; 5
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	11 f5       	brne	.+68     	; 0xf0e <processChords+0x4ea>
     eca:	26 81       	ldd	r18, Z+6	; 0x06
     ecc:	37 81       	ldd	r19, Z+7	; 0x07
     ece:	16 96       	adiw	r26, 0x06	; 6
     ed0:	8d 91       	ld	r24, X+
     ed2:	9c 91       	ld	r25, X
     ed4:	17 97       	sbiw	r26, 0x07	; 7
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	c9 f4       	brne	.+50     	; 0xf0e <processChords+0x4ea>
     edc:	20 85       	ldd	r18, Z+8	; 0x08
     ede:	31 85       	ldd	r19, Z+9	; 0x09
     ee0:	18 96       	adiw	r26, 0x08	; 8
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	19 97       	sbiw	r26, 0x09	; 9
     ee8:	28 17       	cp	r18, r24
     eea:	39 07       	cpc	r19, r25
     eec:	81 f4       	brne	.+32     	; 0xf0e <processChords+0x4ea>
     eee:	22 85       	ldd	r18, Z+10	; 0x0a
     ef0:	33 85       	ldd	r19, Z+11	; 0x0b
     ef2:	1a 96       	adiw	r26, 0x0a	; 10
     ef4:	8d 91       	ld	r24, X+
     ef6:	9c 91       	ld	r25, X
     ef8:	1b 97       	sbiw	r26, 0x0b	; 11
     efa:	28 17       	cp	r18, r24
     efc:	39 07       	cpc	r19, r25
     efe:	39 f4       	brne	.+14     	; 0xf0e <processChords+0x4ea>
	   stringState[2] == buttonStringPatterns[9][2] &&
	   stringState[3] == buttonStringPatterns[9][3] &&
	   stringState[4] == buttonStringPatterns[9][4] &&
	   stringState[5] == buttonStringPatterns[9][5]  ) 
		{
			 data->redOn = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	d8 01       	movw	r26, r16
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	8c 93       	st	X, r24
     f08:	11 97       	sbiw	r26, 0x01	; 1
			 data->blueOn = 1;
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	8c 93       	st	X, r24
  		}

	return;
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <processNotes>:

void processNotes(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS])
{
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	dc 01       	movw	r26, r24
     f26:	fb 01       	movw	r30, r22
	/* If we're playing with notes on a scale, then we have to figure out if the proper note is being
	   played, and also if we strummed the correct string.
	 */
	// First thing, we need to reset the strumming code, since we need to check and see if we 
	//  strummed on the correct string or not
	data->upOn = 0;
     f28:	15 96       	adiw	r26, 0x05	; 5
     f2a:	1c 92       	st	X, r1
     f2c:	15 97       	sbiw	r26, 0x05	; 5
	data->downOn = 0;
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	1c 92       	st	X, r1
     f32:	16 97       	sbiw	r26, 0x06	; 6
						// are numbered 0-5
	char buttonPressed = 0;
	char strumPressed  = 0;

	//We also hardcode in a down strum on the empty 6th string, for navigation
	if (stringState[0] & 1)
     f34:	80 81       	ld	r24, Z
     f36:	80 ff       	sbrs	r24, 0
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <processNotes+0x2a>
	{
		data->downOn = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	16 96       	adiw	r26, 0x06	; 6
     f3e:	8c 93       	st	X, r24
     f40:	16 97       	sbiw	r26, 0x06	; 6
     f42:	7a 01       	movw	r14, r20
     f44:	ba 01       	movw	r22, r20
     f46:	6c 5d       	subi	r22, 0xDC	; 220
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	4f ef       	ldi	r20, 0xFF	; 255
     f4c:	00 e0       	ldi	r16, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
     f50:	11 e0       	ldi	r17, 0x01	; 1
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
	{
		if (stringState[i] != 0) // Only look at strings that are being touched or strummed
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	09 f4       	brne	.+2      	; 0xf5c <processNotes+0x44>
     f5a:	82 c0       	rjmp	.+260    	; 0x1060 <processNotes+0x148>
		{
			// Check for open strings being strummed first
			if (stringState[i] == 1) // This means we're strumming an open string
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	c1 f5       	brne	.+112    	; 0xfd2 <processNotes+0xba>
			{
				if (stringState[i] == buttonStringPatterns[0][i])
     f62:	e7 01       	movw	r28, r14
     f64:	88 81       	ld	r24, Y
     f66:	99 81       	ldd	r25, Y+1	; 0x01
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	11 f4       	brne	.+4      	; 0xf70 <processNotes+0x58>
				{
					strumOn = i;
					data->greenOn =  1;	
     f6c:	1c 93       	st	X, r17
     f6e:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[1][i])
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	e7 01       	movw	r28, r14
     f76:	8c 85       	ldd	r24, Y+12	; 0x0c
     f78:	9d 85       	ldd	r25, Y+13	; 0x0d
     f7a:	28 17       	cp	r18, r24
     f7c:	39 07       	cpc	r19, r25
     f7e:	21 f4       	brne	.+8      	; 0xf88 <processNotes+0x70>
				{
					strumOn = i;
					data->redOn =  1;	
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	1c 93       	st	X, r17
     f84:	11 97       	sbiw	r26, 0x01	; 1
     f86:	45 2f       	mov	r20, r21
				}
				if (stringState[i] == buttonStringPatterns[2][i])
     f88:	20 81       	ld	r18, Z
     f8a:	31 81       	ldd	r19, Z+1	; 0x01
     f8c:	e7 01       	movw	r28, r14
     f8e:	88 8d       	ldd	r24, Y+24	; 0x18
     f90:	99 8d       	ldd	r25, Y+25	; 0x19
     f92:	28 17       	cp	r18, r24
     f94:	39 07       	cpc	r19, r25
     f96:	21 f4       	brne	.+8      	; 0xfa0 <processNotes+0x88>
				{
					strumOn = i;
					data->yellowOn =  1;
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	1c 93       	st	X, r17
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[3][i])
     fa0:	20 81       	ld	r18, Z
     fa2:	31 81       	ldd	r19, Z+1	; 0x01
     fa4:	eb 01       	movw	r28, r22
     fa6:	88 81       	ld	r24, Y
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
     faa:	28 17       	cp	r18, r24
     fac:	39 07       	cpc	r19, r25
     fae:	21 f4       	brne	.+8      	; 0xfb8 <processNotes+0xa0>
				{
					strumOn = i;
					data->blueOn =  1;
     fb0:	13 96       	adiw	r26, 0x03	; 3
     fb2:	1c 93       	st	X, r17
     fb4:	13 97       	sbiw	r26, 0x03	; 3
     fb6:	45 2f       	mov	r20, r21
				}				
				if (stringState[i] == buttonStringPatterns[4][i])
     fb8:	20 81       	ld	r18, Z
     fba:	31 81       	ldd	r19, Z+1	; 0x01
     fbc:	eb 01       	movw	r28, r22
     fbe:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc0:	9d 85       	ldd	r25, Y+13	; 0x0d
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	39 f4       	brne	.+14     	; 0xfd6 <processNotes+0xbe>
				{
					strumOn = i;
					data->orangeOn =  1;				
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	1c 93       	st	X, r17
     fcc:	14 97       	sbiw	r26, 0x04	; 4
     fce:	45 2f       	mov	r20, r21
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <processNotes+0xbe>
			}
			 // Now we have checked for strummed notes, we need to check for pressed notes
			 //  so that we can display them for reference as well as use them when strummed
			else
				// First see if we're strumming or not
				strumPressed = stringState[i] & 1;
     fd2:	08 2f       	mov	r16, r24
     fd4:	01 70       	andi	r16, 0x01	; 1
				// Now ensure the strum bit is zero
				stringState[i] &= (~1);
     fd6:	20 81       	ld	r18, Z
     fd8:	31 81       	ldd	r19, Z+1	; 0x01
     fda:	2e 7f       	andi	r18, 0xFE	; 254
     fdc:	31 83       	std	Z+1, r19	; 0x01
     fde:	20 83       	st	Z, r18
				// Take care of displaying closed notes
				if (stringState[i] == buttonStringPatterns[0][i]&& 
     fe0:	e7 01       	movw	r28, r14
     fe2:	88 81       	ld	r24, Y
     fe4:	99 81       	ldd	r25, Y+1	; 0x01
     fe6:	28 17       	cp	r18, r24
     fe8:	39 07       	cpc	r19, r25
     fea:	19 f4       	brne	.+6      	; 0xff2 <processNotes+0xda>
     fec:	23 2b       	or	r18, r19
     fee:	09 f0       	breq	.+2      	; 0xff2 <processNotes+0xda>
										buttonStringPatterns[0][i] != 0)
				{
					data->greenOn =  1;	
     ff0:	1c 93       	st	X, r17
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[1][i] && 
     ff2:	20 81       	ld	r18, Z
     ff4:	31 81       	ldd	r19, Z+1	; 0x01
     ff6:	e7 01       	movw	r28, r14
     ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	29 f4       	brne	.+10     	; 0x100c <processNotes+0xf4>
    1002:	23 2b       	or	r18, r19
    1004:	19 f0       	breq	.+6      	; 0x100c <processNotes+0xf4>
										buttonStringPatterns[1][i] != 0)
				{
					data->redOn =  1;	
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	1c 93       	st	X, r17
    100a:	11 97       	sbiw	r26, 0x01	; 1
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[2][i] && 
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	e7 01       	movw	r28, r14
    1012:	88 8d       	ldd	r24, Y+24	; 0x18
    1014:	99 8d       	ldd	r25, Y+25	; 0x19
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	29 f4       	brne	.+10     	; 0x1026 <processNotes+0x10e>
    101c:	23 2b       	or	r18, r19
    101e:	19 f0       	breq	.+6      	; 0x1026 <processNotes+0x10e>
										buttonStringPatterns[2][i] != 0)
					{
					data->yellowOn =  1;
    1020:	12 96       	adiw	r26, 0x02	; 2
    1022:	1c 93       	st	X, r17
    1024:	12 97       	sbiw	r26, 0x02	; 2
					buttonPressed = 1;
				}
				if (stringState[i] == buttonStringPatterns[3][i] && 
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	eb 01       	movw	r28, r22
    102c:	88 81       	ld	r24, Y
    102e:	99 81       	ldd	r25, Y+1	; 0x01
    1030:	28 17       	cp	r18, r24
    1032:	39 07       	cpc	r19, r25
    1034:	29 f4       	brne	.+10     	; 0x1040 <processNotes+0x128>
    1036:	23 2b       	or	r18, r19
    1038:	19 f0       	breq	.+6      	; 0x1040 <processNotes+0x128>
										buttonStringPatterns[3][i] != 0)
				{
					data->blueOn =  1;
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	1c 93       	st	X, r17
    103e:	13 97       	sbiw	r26, 0x03	; 3
					buttonPressed = 1;
					}				
				if (stringState[i] == buttonStringPatterns[4][i] && 
    1040:	20 81       	ld	r18, Z
    1042:	31 81       	ldd	r19, Z+1	; 0x01
    1044:	eb 01       	movw	r28, r22
    1046:	8c 85       	ldd	r24, Y+12	; 0x0c
    1048:	9d 85       	ldd	r25, Y+13	; 0x0d
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	29 f4       	brne	.+10     	; 0x105a <processNotes+0x142>
    1050:	23 2b       	or	r18, r19
    1052:	19 f0       	breq	.+6      	; 0x105a <processNotes+0x142>
										buttonStringPatterns[4][i] != 0)
				{
					data->orangeOn =  1;
    1054:	14 96       	adiw	r26, 0x04	; 4
    1056:	1c 93       	st	X, r17
    1058:	14 97       	sbiw	r26, 0x04	; 4
					buttonPressed = 1;									
				}
					// Now deal with strumming
				if ((buttonPressed = 1) && (strumPressed == 1))
    105a:	01 30       	cpi	r16, 0x01	; 1
    105c:	09 f4       	brne	.+2      	; 0x1060 <processNotes+0x148>
    105e:	45 2f       	mov	r20, r21
    1060:	32 96       	adiw	r30, 0x02	; 2
    1062:	5f 5f       	subi	r21, 0xFF	; 255
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	e8 0e       	add	r14, r24
    106a:	f9 1e       	adc	r15, r25
    106c:	6e 5f       	subi	r22, 0xFE	; 254
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
	if (stringState[0] & 1)
	{
		data->downOn = 1;
	}

	for (int i = 0; i < 6; i++)
    1070:	56 30       	cpi	r21, 0x06	; 6
    1072:	09 f0       	breq	.+2      	; 0x1076 <processNotes+0x15e>
    1074:	6e cf       	rjmp	.-292    	; 0xf52 <processNotes+0x3a>
				}
			}
	}

	//Now set the strum buttons properly, so we can have both up and down if we're in this mode
	if ((strumOn >= 0) && (strumOn < 3))
    1076:	43 30       	cpi	r20, 0x03	; 3
    1078:	20 f4       	brcc	.+8      	; 0x1082 <processNotes+0x16a>
	{
		data->downOn = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	16 96       	adiw	r26, 0x06	; 6
    107e:	8c 93       	st	X, r24
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <processNotes+0x180>
	}
	else if ((strumOn >= 3) && (strumOn < 6 ) && (data->downOn != 1))
    1082:	43 50       	subi	r20, 0x03	; 3
    1084:	43 30       	cpi	r20, 0x03	; 3
    1086:	40 f4       	brcc	.+16     	; 0x1098 <processNotes+0x180>
    1088:	16 96       	adiw	r26, 0x06	; 6
    108a:	8c 91       	ld	r24, X
    108c:	16 97       	sbiw	r26, 0x06	; 6
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	19 f0       	breq	.+6      	; 0x1098 <processNotes+0x180>
	{
		data->upOn = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	15 96       	adiw	r26, 0x05	; 5
    1096:	8c 93       	st	X, r24
	}

	return;
}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	08 95       	ret

000010a6 <processFrets>:

void processFrets(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	fc 01       	movw	r30, r24
    10ba:	5b 01       	movw	r10, r22
    10bc:	d8 01       	movw	r26, r16
    10be:	89 01       	movw	r16, r18
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
		    	{
		        	data->greenOn = 1;
    10c4:	ff 24       	eor	r15, r15
    10c6:	f3 94       	inc	r15
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
		      triedGreen[guitarString] = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	c8 2e       	mov	r12, r24
    10cc:	d1 2c       	mov	r13, r1
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
	{
		// find the proper value by masking the stringState variable for each fret
		char orange = (stringState[guitarString] & (1<<5));
    10ce:	e5 01       	movw	r28, r10
    10d0:	88 81       	ld	r24, Y
		char blue   = (stringState[guitarString] & (1<<4));
    10d2:	98 2f       	mov	r25, r24
    10d4:	90 71       	andi	r25, 0x10	; 16
		char yellow = (stringState[guitarString] & (1<<3));
    10d6:	28 2f       	mov	r18, r24
    10d8:	28 70       	andi	r18, 0x08	; 8
		char red    = (stringState[guitarString] & (1<<2));
    10da:	38 2f       	mov	r19, r24
    10dc:	34 70       	andi	r19, 0x04	; 4
		char green  = (stringState[guitarString] & (1<<1));
    10de:	48 2f       	mov	r20, r24
    10e0:	42 70       	andi	r20, 0x02	; 2
		if ((orange != 0) && (blue != 0) && (data->orangeOn == 0))
    10e2:	85 ff       	sbrs	r24, 5
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <processFrets+0x4e>
    10e6:	99 23       	and	r25, r25
    10e8:	71 f0       	breq	.+28     	; 0x1106 <processFrets+0x60>
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	88 23       	and	r24, r24
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <processFrets+0x52>
		{    
		    data->orangeOn = 1;
    10f0:	f4 82       	std	Z+4, r15	; 0x04
    10f2:	40 c0       	rjmp	.+128    	; 0x1174 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((blue != 0) && (yellow != 0) && (data->blueOn == 0))
    10f4:	99 23       	and	r25, r25
    10f6:	39 f0       	breq	.+14     	; 0x1106 <processFrets+0x60>
    10f8:	22 23       	and	r18, r18
    10fa:	71 f0       	breq	.+28     	; 0x1118 <processFrets+0x72>
    10fc:	83 81       	ldd	r24, Z+3	; 0x03
    10fe:	88 23       	and	r24, r24
    1100:	21 f4       	brne	.+8      	; 0x110a <processFrets+0x64>
		{
		    data->blueOn = 1;
    1102:	f3 82       	std	Z+3, r15	; 0x03
    1104:	37 c0       	rjmp	.+110    	; 0x1174 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((yellow != 0) && (red != 0) && (data->yellowOn == 0))
    1106:	22 23       	and	r18, r18
    1108:	39 f0       	breq	.+14     	; 0x1118 <processFrets+0x72>
    110a:	33 23       	and	r19, r19
    110c:	71 f0       	breq	.+28     	; 0x112a <processFrets+0x84>
    110e:	82 81       	ldd	r24, Z+2	; 0x02
    1110:	88 23       	and	r24, r24
    1112:	21 f4       	brne	.+8      	; 0x111c <processFrets+0x76>
		{
		    data->yellowOn = 1;
    1114:	f2 82       	std	Z+2, r15	; 0x02
    1116:	2e c0       	rjmp	.+92     	; 0x1174 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if ((red != 0) && (green != 0) && (data->redOn == 0))
    1118:	33 23       	and	r19, r19
    111a:	39 f0       	breq	.+14     	; 0x112a <processFrets+0x84>
    111c:	44 23       	and	r20, r20
    111e:	51 f1       	breq	.+84     	; 0x1174 <processFrets+0xce>
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	88 23       	and	r24, r24
    1124:	21 f4       	brne	.+8      	; 0x112e <processFrets+0x88>
		{
		    data->redOn = 1;
    1126:	f1 82       	std	Z+1, r15	; 0x01
    1128:	25 c0       	rjmp	.+74     	; 0x1174 <processFrets+0xce>
		    triedGreen[guitarString] = 0;
		}
		else if (green != 0)
    112a:	44 23       	and	r20, r20
    112c:	19 f1       	breq	.+70     	; 0x1174 <processFrets+0xce>
		{
		    if (triedGreen[guitarString] == 0) // we didn't touch green last cycle
    112e:	8d 91       	ld	r24, X+
    1130:	9c 91       	ld	r25, X
    1132:	11 97       	sbiw	r26, 0x01	; 1
    1134:	89 2b       	or	r24, r25
    1136:	59 f4       	brne	.+22     	; 0x114e <processFrets+0xa8>
		    {        
				// so we start the counter and say we did touch it.
		      greenTimers[guitarString] = TCNT1;
    1138:	80 91 84 00 	lds	r24, 0x0084
    113c:	90 91 85 00 	lds	r25, 0x0085
    1140:	e8 01       	movw	r28, r16
    1142:	99 83       	std	Y+1, r25	; 0x01
    1144:	88 83       	st	Y, r24
		      triedGreen[guitarString] = 1;
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	dc 92       	st	X, r13
    114a:	ce 92       	st	-X, r12
    114c:	16 c0       	rjmp	.+44     	; 0x117a <processFrets+0xd4>
		    }
		    else //triedGreen == true
		    {
				// now we test to see if the counter has counted high enough, and
				// if it has, then we do record a green hit.
				int test = TCNT1 - greenTimers[guitarString];
    114e:	20 91 84 00 	lds	r18, 0x0084
    1152:	30 91 85 00 	lds	r19, 0x0085
    1156:	e8 01       	movw	r28, r16
    1158:	48 81       	ld	r20, Y
    115a:	59 81       	ldd	r21, Y+1	; 0x01
		    	if (  (data->greenOn == 0) && (( test > GREEN_TIMER_WAIT) || (test <= 0)) )
    115c:	80 81       	ld	r24, Z
    115e:	88 23       	and	r24, r24
    1160:	61 f4       	brne	.+24     	; 0x117a <processFrets+0xd4>
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	30 40       	sbci	r19, 0x00	; 0
    1166:	24 1b       	sub	r18, r20
    1168:	35 0b       	sbc	r19, r21
    116a:	24 36       	cpi	r18, 0x64	; 100
    116c:	31 05       	cpc	r19, r1
    116e:	28 f0       	brcs	.+10     	; 0x117a <processFrets+0xd4>
		    	{
		        	data->greenOn = 1;
    1170:	f0 82       	st	Z, r15
    1172:	03 c0       	rjmp	.+6      	; 0x117a <processFrets+0xd4>
		    	}
		    }
		}
	    else  //no buttons pressed
	    {
	        triedGreen[guitarString] = 0;
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	1c 92       	st	X, r1
    1178:	1e 92       	st	-X, r1
		the strum has a direction, so if you strum the
		top 3 strings, you strum down, and if you strum
		the bottom 3 strings, you're strumming up.
	*/
		// Check for strumming
		if (stringState[guitarString] & 1)
    117a:	e5 01       	movw	r28, r10
    117c:	88 81       	ld	r24, Y
    117e:	80 ff       	sbrs	r24, 0
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <processFrets+0xec>
		{
			if (guitarString < 3)
    1182:	63 30       	cpi	r22, 0x03	; 3
    1184:	71 05       	cpc	r23, r1
    1186:	1c f4       	brge	.+6      	; 0x118e <processFrets+0xe8>
			{
				data->downOn = 1;
    1188:	f6 82       	std	Z+6, r15	; 0x06
				data->upOn   = 0;
    118a:	15 82       	std	Z+5, r1	; 0x05
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <processFrets+0xec>
			}
			else
			{
				data->upOn   = 1;
    118e:	f5 82       	std	Z+5, r15	; 0x05
				data->downOn = 0;
    1190:	16 82       	std	Z+6, r1	; 0x06
		you don't want that to register as a green button press.  So we do some
		timing on that one, so when you press just green, it starts counting
		instead of turing greenOn on, so if the red fret is turned on before it
		counts up to the GREEN_TIMER_WAIT, red gets activated and green doesn't.
	 */
	for(int guitarString = 0; guitarString < 6; guitarString++)
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a8 0e       	add	r10, r24
    119c:	b9 1e       	adc	r11, r25
    119e:	12 96       	adiw	r26, 0x02	; 2
    11a0:	0e 5f       	subi	r16, 0xFE	; 254
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	66 30       	cpi	r22, 0x06	; 6
    11a6:	71 05       	cpc	r23, r1
    11a8:	09 f0       	breq	.+2      	; 0x11ac <processFrets+0x106>
    11aa:	91 cf       	rjmp	.-222    	; 0x10ce <processFrets+0x28>
				data->downOn = 0;
			}
		}
	}	// end of for loop
	return;
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	08 95       	ret

000011c0 <processStringState>:

void processStringState(dataForController* data, int stringState[NUMBER_OF_STRINGS],
									int buttonStringPatterns[][NUMBER_OF_STRINGS], char controllerMode, 
									int greenTimers[NUMBER_OF_STRINGS], int triedGreen[NUMBER_OF_STRINGS])
{
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
	if (controllerMode == CHORDS) // If we're playing with Chords - default is FRETS
    11c8:	24 30       	cpi	r18, 0x04	; 4
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <processStringState+0x12>
		processChords(data, stringState, buttonStringPatterns);
    11cc:	0e 94 12 05 	call	0xa24	; 0xa24 <processChords>
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <processStringState+0x24>

	else if (controllerMode == NOTES) // We're playing with notes
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	19 f4       	brne	.+6      	; 0x11dc <processStringState+0x1c>
		processNotes(data, stringState, buttonStringPatterns);
    11d6:	0e 94 8c 07 	call	0xf18	; 0xf18 <processNotes>
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <processStringState+0x24>
	
	else // We're playing with frets
		processFrets(data, stringState,	buttonStringPatterns, greenTimers, triedGreen);
    11dc:	98 01       	movw	r18, r16
    11de:	87 01       	movw	r16, r14
    11e0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <processFrets>

	return;	
}
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	08 95       	ret

000011ee <displayTransitionState>:

// This simple function takes in the controller mode and sets the
//  data struct to certain patterns to give the user feedback
//  as to what state is being pressed
void displayTransitionState(dataForController* data, int controllerMode)
{
    11ee:	fc 01       	movw	r30, r24
	if (controllerMode == FRETS_TO_NOTES)
    11f0:	61 30       	cpi	r22, 0x01	; 1
    11f2:	71 05       	cpc	r23, r1
    11f4:	21 f4       	brne	.+8      	; 0x11fe <displayTransitionState+0x10>
	{
		data->blueOn = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	83 83       	std	Z+3, r24	; 0x03
		data->yellowOn = 1;
    11fa:	82 83       	std	Z+2, r24	; 0x02
    11fc:	08 95       	ret
	}
	else if (controllerMode == NOTES_TO_CHORDS)
    11fe:	63 30       	cpi	r22, 0x03	; 3
    1200:	71 05       	cpc	r23, r1
    1202:	21 f4       	brne	.+8      	; 0x120c <displayTransitionState+0x1e>
	{
		data->blueOn = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	83 83       	std	Z+3, r24	; 0x03
		data->orangeOn = 1;
    1208:	84 83       	std	Z+4, r24	; 0x04
    120a:	08 95       	ret
	}
	else if (controllerMode == CHORDS_TO_FRETS)
    120c:	65 30       	cpi	r22, 0x05	; 5
    120e:	71 05       	cpc	r23, r1
    1210:	19 f4       	brne	.+6      	; 0x1218 <displayTransitionState+0x2a>
	{
		data->yellowOn = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	82 83       	std	Z+2, r24	; 0x02
		data->orangeOn = 1;
    1216:	84 83       	std	Z+4, r24	; 0x04
    1218:	08 95       	ret

0000121a <configSetButtonData>:
/* This function sets up the data struct when we're in config mode so that it shows
 *  the user which colors are currently being programmed.
 */
void configSetButtonData(dataForController* data, int* buttonToAssign, int buttonStringPatterns[][6], 
						int stringState[], char controllerMode, char* plusLock, char* previousPlusOn, int* debounceTimer)
{
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	fc 01       	movw	r30, r24
    122e:	db 01       	movw	r26, r22
    1230:	b9 01       	movw	r22, r18
    1232:	95 01       	movw	r18, r10
	// Since 'colorOn' is 1 when a fret is pressed, we invert, shift, invert, and & it to set the
	// corresponding button bit to zero, which corresponds to a button press.
	if (*buttonToAssign == 0)
    1234:	8d 91       	ld	r24, X+
    1236:	9c 91       	ld	r25, X
    1238:	11 97       	sbiw	r26, 0x01	; 1
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	19 f4       	brne	.+6      	; 0x1244 <configSetButtonData+0x2a>
		data->greenOn = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 83       	st	Z, r24
    1242:	34 c0       	rjmp	.+104    	; 0x12ac <configSetButtonData+0x92>
	else if(*buttonToAssign == 1)
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	11 f4       	brne	.+4      	; 0x124e <configSetButtonData+0x34>
		data->redOn = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	15 c0       	rjmp	.+42     	; 0x1278 <configSetButtonData+0x5e>
	else if(*buttonToAssign == 2)
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	11 f4       	brne	.+4      	; 0x1258 <configSetButtonData+0x3e>
		data->yellowOn = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	23 c0       	rjmp	.+70     	; 0x129e <configSetButtonData+0x84>
	else if(*buttonToAssign == 3)
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 05       	cpc	r25, r1
    125c:	11 f4       	brne	.+4      	; 0x1262 <configSetButtonData+0x48>
		data->blueOn = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	24 c0       	rjmp	.+72     	; 0x12aa <configSetButtonData+0x90>
	else if(*buttonToAssign == 4)
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	91 05       	cpc	r25, r1
    1266:	19 f4       	brne	.+6      	; 0x126e <configSetButtonData+0x54>
		data->orangeOn = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	84 83       	std	Z+4, r24	; 0x04
    126c:	1f c0       	rjmp	.+62     	; 0x12ac <configSetButtonData+0x92>
	else if(*buttonToAssign == 5)
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	91 05       	cpc	r25, r1
    1272:	21 f4       	brne	.+8      	; 0x127c <configSetButtonData+0x62>
	{
		data->greenOn = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 83       	st	Z, r24
		data->redOn = 1;
    1278:	81 83       	std	Z+1, r24	; 0x01
    127a:	18 c0       	rjmp	.+48     	; 0x12ac <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 6)
    127c:	86 30       	cpi	r24, 0x06	; 6
    127e:	91 05       	cpc	r25, r1
    1280:	19 f4       	brne	.+6      	; 0x1288 <configSetButtonData+0x6e>
	{
		data->redOn = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	81 83       	std	Z+1, r24	; 0x01
    1286:	0b c0       	rjmp	.+22     	; 0x129e <configSetButtonData+0x84>
		data->yellowOn = 1;
	}
	else if(*buttonToAssign == 7)
    1288:	87 30       	cpi	r24, 0x07	; 7
    128a:	91 05       	cpc	r25, r1
    128c:	19 f4       	brne	.+6      	; 0x1294 <configSetButtonData+0x7a>
	{
		data->yellowOn = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	82 83       	std	Z+2, r24	; 0x02
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <configSetButtonData+0x90>
		data->blueOn = 1;
	}
	else if(*buttonToAssign == 8)
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	91 05       	cpc	r25, r1
    1298:	21 f4       	brne	.+8      	; 0x12a2 <configSetButtonData+0x88>
	{
		data->greenOn = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 83       	st	Z, r24
		data->yellowOn = 1;
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <configSetButtonData+0x92>
	}
	else if(*buttonToAssign == 9)
    12a2:	09 97       	sbiw	r24, 0x09	; 9
    12a4:	19 f4       	brne	.+6      	; 0x12ac <configSetButtonData+0x92>
	{
		data->redOn = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	81 83       	std	Z+1, r24	; 0x01
		data->blueOn = 1;
    12aa:	83 83       	std	Z+3, r24	; 0x03
	}



	// Code to debounce our plus button, the current state of plusOn to it's recent history
	if (data->plusOn != 0)  // So we're pressing plus
    12ac:	87 81       	ldd	r24, Z+7	; 0x07
    12ae:	88 23       	and	r24, r24
    12b0:	09 f1       	breq	.+66     	; 0x12f4 <configSetButtonData+0xda>
	{ 
		if (*previousPlusOn == 0)  // If we weren't pressing plus last time through the main loop
    12b2:	e6 01       	movw	r28, r12
    12b4:	88 81       	ld	r24, Y
    12b6:	88 23       	and	r24, r24
    12b8:	59 f4       	brne	.+22     	; 0x12d0 <configSetButtonData+0xb6>
		{ 
			*debounceTimer = TCNT1;  // Set up a timer
    12ba:	80 91 84 00 	lds	r24, 0x0084
    12be:	90 91 85 00 	lds	r25, 0x0085
    12c2:	e9 01       	movw	r28, r18
    12c4:	99 83       	std	Y+1, r25	; 0x01
    12c6:	88 83       	st	Y, r24
			*previousPlusOn = 1;     // remember plus was pressed for the next iteration
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	e6 01       	movw	r28, r12
    12cc:	88 83       	st	Y, r24
    12ce:	10 c0       	rjmp	.+32     	; 0x12f0 <configSetButtonData+0xd6>
			data->plusOn = 0;        // but for now, consider plus not pressed.
		}
		else if ( (TCNT1 - *debounceTimer < DEBOUNCE_DELAY) && (TCNT1 - *debounceTimer >= 0))
    12d0:	80 91 84 00 	lds	r24, 0x0084
    12d4:	90 91 85 00 	lds	r25, 0x0085
    12d8:	e9 01       	movw	r28, r18
    12da:	28 81       	ld	r18, Y
    12dc:	39 81       	ldd	r19, Y+1	; 0x01
    12de:	82 1b       	sub	r24, r18
    12e0:	93 0b       	sbc	r25, r19
    12e2:	88 5e       	subi	r24, 0xE8	; 232
    12e4:	93 40       	sbci	r25, 0x03	; 3
    12e6:	40 f4       	brcc	.+16     	; 0x12f8 <configSetButtonData+0xde>
    12e8:	80 91 84 00 	lds	r24, 0x0084
    12ec:	90 91 85 00 	lds	r25, 0x0085
		{
			data->plusOn = 0;  // This keeps telling us plus wasn't pressed until it's been held long enough
    12f0:	17 82       	std	Z+7, r1	; 0x07
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <configSetButtonData+0xde>
		}		
	}
	else
	{
		*previousPlusOn = 0; // and if plus wasn't pressed, remember that for next time
    12f4:	e6 01       	movw	r28, r12
    12f6:	18 82       	st	Y, r1
	}

	// Now, if you press plus, it will lock in whatever string pattern
	// and advance to working on the next pattern.
	if((data->plusOn) && (*plusLock == 0))
    12f8:	87 81       	ldd	r24, Z+7	; 0x07
    12fa:	88 23       	and	r24, r24
    12fc:	09 f4       	brne	.+2      	; 0x1300 <configSetButtonData+0xe6>
    12fe:	f7 c0       	rjmp	.+494    	; 0x14ee <configSetButtonData+0x2d4>
    1300:	f7 01       	movw	r30, r14
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <configSetButtonData+0xf0>
    1308:	f4 c0       	rjmp	.+488    	; 0x14f2 <configSetButtonData+0x2d8>
	{

		if (controllerMode == CHORDS) 
    130a:	04 30       	cpi	r16, 0x04	; 4
    130c:	09 f0       	breq	.+2      	; 0x1310 <configSetButtonData+0xf6>
    130e:	60 c0       	rjmp	.+192    	; 0x13d0 <configSetButtonData+0x1b6>
		{   // Set the pattern to nothing pressed
			buttonStringPatterns[*buttonToAssign][0] = 0;
    1310:	8d 91       	ld	r24, X+
    1312:	9c 91       	ld	r25, X
    1314:	11 97       	sbiw	r26, 0x01	; 1
    1316:	fc 01       	movw	r30, r24
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e8 0f       	add	r30, r24
    131e:	f9 1f       	adc	r31, r25
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e4 0f       	add	r30, r20
    132a:	f5 1f       	adc	r31, r21
    132c:	11 82       	std	Z+1, r1	; 0x01
    132e:	10 82       	st	Z, r1
			buttonStringPatterns[*buttonToAssign][1] = 0;
    1330:	8d 91       	ld	r24, X+
    1332:	9c 91       	ld	r25, X
    1334:	11 97       	sbiw	r26, 0x01	; 1
    1336:	fc 01       	movw	r30, r24
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	e8 0f       	add	r30, r24
    133e:	f9 1f       	adc	r31, r25
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	e4 0f       	add	r30, r20
    134a:	f5 1f       	adc	r31, r21
    134c:	13 82       	std	Z+3, r1	; 0x03
    134e:	12 82       	std	Z+2, r1	; 0x02
			buttonStringPatterns[*buttonToAssign][2] = 0;
    1350:	8d 91       	ld	r24, X+
    1352:	9c 91       	ld	r25, X
    1354:	11 97       	sbiw	r26, 0x01	; 1
    1356:	fc 01       	movw	r30, r24
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	e8 0f       	add	r30, r24
    135e:	f9 1f       	adc	r31, r25
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	e4 0f       	add	r30, r20
    136a:	f5 1f       	adc	r31, r21
    136c:	15 82       	std	Z+5, r1	; 0x05
    136e:	14 82       	std	Z+4, r1	; 0x04
			buttonStringPatterns[*buttonToAssign][3] = 0;
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	11 97       	sbiw	r26, 0x01	; 1
    1376:	fc 01       	movw	r30, r24
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	e8 0f       	add	r30, r24
    137e:	f9 1f       	adc	r31, r25
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e4 0f       	add	r30, r20
    138a:	f5 1f       	adc	r31, r21
    138c:	17 82       	std	Z+7, r1	; 0x07
    138e:	16 82       	std	Z+6, r1	; 0x06
			buttonStringPatterns[*buttonToAssign][4] = 0;
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	fc 01       	movw	r30, r24
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	e8 0f       	add	r30, r24
    139e:	f9 1f       	adc	r31, r25
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	e4 0f       	add	r30, r20
    13aa:	f5 1f       	adc	r31, r21
    13ac:	11 86       	std	Z+9, r1	; 0x09
    13ae:	10 86       	std	Z+8, r1	; 0x08
			buttonStringPatterns[*buttonToAssign][5] = 0;
    13b0:	8d 91       	ld	r24, X+
    13b2:	9c 91       	ld	r25, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
    13b6:	fc 01       	movw	r30, r24
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e8 0f       	add	r30, r24
    13be:	f9 1f       	adc	r31, r25
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	e4 0f       	add	r30, r20
    13ca:	f5 1f       	adc	r31, r21
    13cc:	13 86       	std	Z+11, r1	; 0x0b
    13ce:	12 86       	std	Z+10, r1	; 0x0a
		}
			// Assign what's being pressed on the frets to what matches the current button press
		buttonStringPatterns[*buttonToAssign][0] |= stringState[0];
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e4 0f       	add	r30, r20
    13ea:	f5 1f       	adc	r31, r21
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	eb 01       	movw	r28, r22
    13f2:	28 81       	ld	r18, Y
    13f4:	39 81       	ldd	r19, Y+1	; 0x01
    13f6:	82 2b       	or	r24, r18
    13f8:	93 2b       	or	r25, r19
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
		buttonStringPatterns[*buttonToAssign][1] |= stringState[1];
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	11 97       	sbiw	r26, 0x01	; 1
    1404:	fc 01       	movw	r30, r24
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e4 0f       	add	r30, r20
    1418:	f5 1f       	adc	r31, r21
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	2a 81       	ldd	r18, Y+2	; 0x02
    1420:	3b 81       	ldd	r19, Y+3	; 0x03
    1422:	82 2b       	or	r24, r18
    1424:	93 2b       	or	r25, r19
    1426:	93 83       	std	Z+3, r25	; 0x03
    1428:	82 83       	std	Z+2, r24	; 0x02
		buttonStringPatterns[*buttonToAssign][2] |= stringState[2];
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	11 97       	sbiw	r26, 0x01	; 1
    1430:	fc 01       	movw	r30, r24
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e4 0f       	add	r30, r20
    1444:	f5 1f       	adc	r31, r21
    1446:	84 81       	ldd	r24, Z+4	; 0x04
    1448:	95 81       	ldd	r25, Z+5	; 0x05
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	82 2b       	or	r24, r18
    1450:	93 2b       	or	r25, r19
    1452:	95 83       	std	Z+5, r25	; 0x05
    1454:	84 83       	std	Z+4, r24	; 0x04
		buttonStringPatterns[*buttonToAssign][3] |= stringState[3];
    1456:	8d 91       	ld	r24, X+
    1458:	9c 91       	ld	r25, X
    145a:	11 97       	sbiw	r26, 0x01	; 1
    145c:	fc 01       	movw	r30, r24
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e8 0f       	add	r30, r24
    1464:	f9 1f       	adc	r31, r25
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e4 0f       	add	r30, r20
    1470:	f5 1f       	adc	r31, r21
    1472:	86 81       	ldd	r24, Z+6	; 0x06
    1474:	97 81       	ldd	r25, Z+7	; 0x07
    1476:	2e 81       	ldd	r18, Y+6	; 0x06
    1478:	3f 81       	ldd	r19, Y+7	; 0x07
    147a:	82 2b       	or	r24, r18
    147c:	93 2b       	or	r25, r19
    147e:	97 83       	std	Z+7, r25	; 0x07
    1480:	86 83       	std	Z+6, r24	; 0x06
		buttonStringPatterns[*buttonToAssign][4] |= stringState[4];
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	11 97       	sbiw	r26, 0x01	; 1
    1488:	fc 01       	movw	r30, r24
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	e8 0f       	add	r30, r24
    1490:	f9 1f       	adc	r31, r25
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	e4 0f       	add	r30, r20
    149c:	f5 1f       	adc	r31, r21
    149e:	80 85       	ldd	r24, Z+8	; 0x08
    14a0:	91 85       	ldd	r25, Z+9	; 0x09
    14a2:	28 85       	ldd	r18, Y+8	; 0x08
    14a4:	39 85       	ldd	r19, Y+9	; 0x09
    14a6:	82 2b       	or	r24, r18
    14a8:	93 2b       	or	r25, r19
    14aa:	91 87       	std	Z+9, r25	; 0x09
    14ac:	80 87       	std	Z+8, r24	; 0x08
		buttonStringPatterns[*buttonToAssign][5] |= stringState[5];
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	11 97       	sbiw	r26, 0x01	; 1
    14b4:	fc 01       	movw	r30, r24
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	e8 0f       	add	r30, r24
    14bc:	f9 1f       	adc	r31, r25
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	e4 0f       	add	r30, r20
    14c8:	f5 1f       	adc	r31, r21
    14ca:	82 85       	ldd	r24, Z+10	; 0x0a
    14cc:	93 85       	ldd	r25, Z+11	; 0x0b
    14ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    14d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    14d2:	82 2b       	or	r24, r18
    14d4:	93 2b       	or	r25, r19
    14d6:	93 87       	std	Z+11, r25	; 0x0b
    14d8:	82 87       	std	Z+10, r24	; 0x0a

		*plusLock = 1;  // we set up a lock, so we don't assign all the buttons at once
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	f7 01       	movw	r30, r14
    14de:	80 83       	st	Z, r24
		*buttonToAssign += 1;
    14e0:	8d 91       	ld	r24, X+
    14e2:	9c 91       	ld	r25, X
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	8d 93       	st	X+, r24
    14ea:	9c 93       	st	X, r25
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <configSetButtonData+0x2d8>
	}
	else if(data->plusOn == 0)
	{
		*plusLock = 0;
    14ee:	e7 01       	movw	r28, r14
    14f0:	18 82       	st	Y, r1
	}
	return;
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	08 95       	ret

00001506 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
    1506:	fc 01       	movw	r30, r24

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
    1508:	80 81       	ld	r24, Z
    150a:	80 76       	andi	r24, 0x60	; 96
    150c:	80 32       	cpi	r24, 0x20	; 32
    150e:	e1 f4       	brne	.+56     	; 0x1548 <usbFunctionSetup+0x42>
        //DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
    1510:	81 81       	ldd	r24, Z+1	; 0x01
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	41 f4       	brne	.+16     	; 0x1526 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	90 93 26 01 	sts	0x0126, r25
    151e:	80 93 25 01 	sts	0x0125, r24
    1522:	87 e0       	ldi	r24, 0x07	; 7
    1524:	08 95       	ret
            return sizeof(reportBuffer);
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	41 f4       	brne	.+16     	; 0x153a <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	90 93 26 01 	sts	0x0126, r25
    1532:	80 93 25 01 	sts	0x0125, r24
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	08 95       	ret
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
    153a:	8a 30       	cpi	r24, 0x0A	; 10
    153c:	29 f4       	brne	.+10     	; 0x1548 <usbFunctionSetup+0x42>
            idleRate = rq->wValue.bytes[1];
    153e:	83 81       	ldd	r24, Z+3	; 0x03
    1540:	80 93 02 01 	sts	0x0102, r24
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	08 95       	ret
    1548:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
}
    154a:	08 95       	ret

0000154c <sendData>:
	usbPoll();
}


void sendData(dataForController data)
{
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	29 97       	sbiw	r28, 0x09	; 9
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	90 2f       	mov	r25, r16
    1566:	09 83       	std	Y+1, r16	; 0x01
    1568:	f1 2f       	mov	r31, r17
    156a:	1a 83       	std	Y+2, r17	; 0x02
    156c:	e2 2f       	mov	r30, r18
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	a3 2f       	mov	r26, r19
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	34 2f       	mov	r19, r20
    1576:	4d 83       	std	Y+5, r20	; 0x05
    1578:	b5 2f       	mov	r27, r21
    157a:	5e 83       	std	Y+6, r21	; 0x06
    157c:	46 2f       	mov	r20, r22
    157e:	6f 83       	std	Y+7, r22	; 0x07
    1580:	27 2f       	mov	r18, r23
    1582:	78 87       	std	Y+8, r23	; 0x08
    1584:	89 87       	std	Y+9, r24	; 0x09
    1586:	58 2f       	mov	r21, r24

       //set the buttons to all at default positions
        reportBuffer[0] = 0b00000000;
        reportBuffer[1] = 0b00000000;
    1588:	10 92 05 01 	sts	0x0105, r1
        reportBuffer[2] = 0b00001000;
    158c:	88 e0       	ldi	r24, 0x08	; 8
    158e:	80 93 06 01 	sts	0x0106, r24
        reportBuffer[3] = 0b10000000;
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	80 93 07 01 	sts	0x0107, r24
        reportBuffer[4] = 0b10000000;
    1598:	80 93 08 01 	sts	0x0108, r24
        reportBuffer[5] = 0b10000000;
    159c:	80 93 09 01 	sts	0x0109, r24
        reportBuffer[6] = 0b00000000;
    15a0:	10 92 0a 01 	sts	0x010A, r1


        // Since 'colorOn' is 1 when a fret is pressed, we shift it to the proper place and | it to set the
        // corresponding button bit to one, which corresponds to a button press.
        reportBuffer[0] |= (data.orangeOn << ORANGE_BIT);
        reportBuffer[0] |= (data.blueOn << BLUE_BIT);
    15a4:	32 95       	swap	r19
    15a6:	30 7f       	andi	r19, 0xF0	; 240
    15a8:	3a 2b       	or	r19, r26
        reportBuffer[0] |= (data.yellowOn << YELLOW_BIT);
        reportBuffer[0] |= (data.redOn << RED_BIT);
        reportBuffer[0] |= (data.greenOn << GREEN_BIT);
    15aa:	ff 0f       	add	r31, r31
    15ac:	ff 0f       	add	r31, r31
    15ae:	ee 0f       	add	r30, r30
    15b0:	ee 0f       	add	r30, r30
    15b2:	ee 0f       	add	r30, r30
    15b4:	ef 2b       	or	r30, r31
    15b6:	99 0f       	add	r25, r25
    15b8:	9e 2b       	or	r25, r30
    15ba:	93 2b       	or	r25, r19
    15bc:	90 93 04 01 	sts	0x0104, r25

        // On the PS3, the strumming shows up as a hat switch, so we have to use conditionals for this..
        if (data.upOn)
    15c0:	bb 23       	and	r27, r27
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <sendData+0x7c>
                reportBuffer[2] = 0b00000000;
    15c4:	10 92 06 01 	sts	0x0106, r1
        if (data.downOn)
    15c8:	44 23       	and	r20, r20
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <sendData+0x86>
                reportBuffer[2] = 0b00000100;
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	80 93 06 01 	sts	0x0106, r24

        reportBuffer[1] |= (data.plusOn << PLUS_BIT);
    15d2:	22 0f       	add	r18, r18
    15d4:	80 91 05 01 	lds	r24, 0x0105
    15d8:	82 2b       	or	r24, r18
    15da:	80 93 05 01 	sts	0x0105, r24
        reportBuffer[0] |= (data.minusOn << MINUS_BIT);
    15de:	52 95       	swap	r21
    15e0:	55 0f       	add	r21, r21
    15e2:	50 7e       	andi	r21, 0xE0	; 224
    15e4:	80 91 04 01 	lds	r24, 0x0104
    15e8:	85 2b       	or	r24, r21
    15ea:	80 93 04 01 	sts	0x0104, r24

        //Then we finish off some USB stuff.
        wdt_reset();  //Reset the watchdog timer
    15ee:	a8 95       	wdr
        usbPoll();    //USB poll - must be called at least once per 10ms
    15f0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <usbPoll>

        // Now, regardless of mode, we have to send the data to the 
        // USB controlling library from the buffer we've been building
        if(usbInterruptIsReady())
    15f4:	80 91 16 01 	lds	r24, 0x0116
    15f8:	84 ff       	sbrs	r24, 4
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <sendData+0xba>
        {
            /* called after every poll of the interrupt endpoint */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
    15fc:	84 e0       	ldi	r24, 0x04	; 4
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	67 e0       	ldi	r22, 0x07	; 7
    1602:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <usbSetInterrupt>
        }
                

}
    1606:	29 96       	adiw	r28, 0x09	; 9
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	08 95       	ret

0000161c <startCommunication>:
	reportBuffer[5] = 0b10000000;
	reportBuffer[6] = 0b00000000;
*/

    // First, set up all the USB communication stuff
    wdt_enable(WDTO_1S);
    161c:	2e e0       	ldi	r18, 0x0E	; 14
    161e:	88 e1       	ldi	r24, 0x18	; 24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	a8 95       	wdr
    1628:	80 93 60 00 	sts	0x0060, r24
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	20 93 60 00 	sts	0x0060, r18
     * RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */

    usbInit();
    1632:	0e 94 2b 0b 	call	0x1656	; 0x1656 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    1636:	54 9a       	sbi	0x0a, 4	; 10
    1638:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    163a:	40 ea       	ldi	r20, 0xA0	; 160
    163c:	5f e0       	ldi	r21, 0x0F	; 15
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <startCommunication+0x2c>
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
    1640:	a8 95       	wdr
    1642:	ca 01       	movw	r24, r20
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <startCommunication+0x28>
     */

    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    uchar i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
    1648:	21 50       	subi	r18, 0x01	; 1
    164a:	d1 f7       	brne	.-12     	; 0x1640 <startCommunication+0x24>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
    164c:	54 98       	cbi	0x0a, 4	; 10
    sei();
    164e:	78 94       	sei
	usbPoll();
    1650:	0e 94 3c 0b 	call	0x1678	; 0x1678 <usbPoll>
}
    1654:	08 95       	ret

00001656 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    1656:	e9 e6       	ldi	r30, 0x69	; 105
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8c 60       	ori	r24, 0x0C	; 12
    165e:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    1660:	e9 9a       	sbi	0x1d, 1	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1662:	8b e4       	ldi	r24, 0x4B	; 75
    1664:	80 93 17 01 	sts	0x0117, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1668:	80 93 42 01 	sts	0x0142, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
    166c:	8a e5       	ldi	r24, 0x5A	; 90
    166e:	80 93 16 01 	sts	0x0116, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
    1672:	80 93 41 01 	sts	0x0141, r24
#endif
#endif
}
    1676:	08 95       	ret

00001678 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    167e:	90 91 27 01 	lds	r25, 0x0127
    1682:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
    1684:	97 fd       	sbrc	r25, 7
    1686:	a8 c0       	rjmp	.+336    	; 0x17d8 <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    1688:	20 91 24 01 	lds	r18, 0x0124
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    168c:	80 91 23 01 	lds	r24, 0x0123
    1690:	8d 32       	cpi	r24, 0x2D	; 45
    1692:	09 f0       	breq	.+2      	; 0x1696 <usbPoll+0x1e>
    1694:	9f c0       	rjmp	.+318    	; 0x17d4 <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    1696:	98 30       	cpi	r25, 0x08	; 8
    1698:	09 f0       	breq	.+2      	; 0x169c <usbPoll+0x24>
    169a:	9c c0       	rjmp	.+312    	; 0x17d4 <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    169c:	cc e0       	ldi	r28, 0x0C	; 12
    169e:	d0 e0       	ldi	r29, 0x00	; 0
    16a0:	c2 1b       	sub	r28, r18
    16a2:	d1 09       	sbc	r29, r1
    16a4:	c5 5d       	subi	r28, 0xD5	; 213
    16a6:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    16a8:	83 ec       	ldi	r24, 0xC3	; 195
    16aa:	80 93 0b 01 	sts	0x010B, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    16ae:	8a e5       	ldi	r24, 0x5A	; 90
    16b0:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
    16b4:	10 92 03 01 	sts	0x0103, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    16b8:	88 81       	ld	r24, Y
    16ba:	80 76       	andi	r24, 0x60	; 96
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 83 0a 	call	0x1506	; 0x1506 <usbFunctionSetup>
    16c4:	28 2f       	mov	r18, r24
    16c6:	7d c0       	rjmp	.+250    	; 0x17c2 <usbPoll+0x14a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    16ca:	10 92 14 01 	sts	0x0114, r1
    SWITCH_START(rq->bRequest)
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    16d0:	88 23       	and	r24, r24
    16d2:	21 f4       	brne	.+8      	; 0x16dc <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    16d4:	10 92 15 01 	sts	0x0115, r1
    16d8:	22 e0       	ldi	r18, 0x02	; 2
    16da:	6d c0       	rjmp	.+218    	; 0x17b6 <usbPoll+0x13e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    16dc:	85 30       	cpi	r24, 0x05	; 5
    16de:	19 f4       	brne	.+6      	; 0x16e6 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
    16e0:	90 93 28 01 	sts	0x0128, r25
    16e4:	67 c0       	rjmp	.+206    	; 0x17b4 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    16e6:	86 30       	cpi	r24, 0x06	; 6
    16e8:	09 f0       	breq	.+2      	; 0x16ec <usbPoll+0x74>
    16ea:	4e c0       	rjmp	.+156    	; 0x1788 <usbPoll+0x110>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	41 f4       	brne	.+16     	; 0x1702 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    16f2:	86 ee       	ldi	r24, 0xE6	; 230
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	90 93 26 01 	sts	0x0126, r25
    16fa:	80 93 25 01 	sts	0x0125, r24
    16fe:	22 e1       	ldi	r18, 0x12	; 18
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	41 f4       	brne	.+16     	; 0x1716 <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    1706:	88 ef       	ldi	r24, 0xF8	; 248
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	90 93 26 01 	sts	0x0126, r25
    170e:	80 93 25 01 	sts	0x0125, r24
    1712:	29 e2       	ldi	r18, 0x29	; 41
    1714:	35 c0       	rjmp	.+106    	; 0x1780 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	f1 f4       	brne	.+60     	; 0x1756 <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    171a:	99 23       	and	r25, r25
    171c:	41 f4       	brne	.+16     	; 0x172e <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    171e:	82 eb       	ldi	r24, 0xB2	; 178
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	90 93 26 01 	sts	0x0126, r25
    1726:	80 93 25 01 	sts	0x0125, r24
    172a:	24 e0       	ldi	r18, 0x04	; 4
    172c:	29 c0       	rjmp	.+82     	; 0x1780 <usbPoll+0x108>
        SWITCH_CASE(1)
    172e:	91 30       	cpi	r25, 0x01	; 1
    1730:	41 f4       	brne	.+16     	; 0x1742 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    1732:	86 eb       	ldi	r24, 0xB6	; 182
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	90 93 26 01 	sts	0x0126, r25
    173a:	80 93 25 01 	sts	0x0125, r24
    173e:	2c e1       	ldi	r18, 0x1C	; 28
    1740:	1f c0       	rjmp	.+62     	; 0x1780 <usbPoll+0x108>
        SWITCH_CASE(2)
    1742:	92 30       	cpi	r25, 0x02	; 2
    1744:	e1 f4       	brne	.+56     	; 0x177e <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    1746:	82 ed       	ldi	r24, 0xD2	; 210
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	90 93 26 01 	sts	0x0126, r25
    174e:	80 93 25 01 	sts	0x0125, r24
    1752:	24 e1       	ldi	r18, 0x14	; 20
    1754:	15 c0       	rjmp	.+42     	; 0x1780 <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    1756:	81 32       	cpi	r24, 0x21	; 33
    1758:	41 f4       	brne	.+16     	; 0x176a <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    175a:	8a e0       	ldi	r24, 0x0A	; 10
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	90 93 26 01 	sts	0x0126, r25
    1762:	80 93 25 01 	sts	0x0125, r24
    1766:	29 e0       	ldi	r18, 0x09	; 9
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    176a:	82 32       	cpi	r24, 0x22	; 34
    176c:	41 f4       	brne	.+16     	; 0x177e <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    176e:	88 e6       	ldi	r24, 0x68	; 104
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	90 93 26 01 	sts	0x0126, r25
    1776:	80 93 25 01 	sts	0x0125, r24
    177a:	2a e4       	ldi	r18, 0x4A	; 74
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <usbPoll+0x108>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    1780:	80 e4       	ldi	r24, 0x40	; 64
    1782:	80 93 03 01 	sts	0x0103, r24
    1786:	1d c0       	rjmp	.+58     	; 0x17c2 <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    1788:	88 30       	cpi	r24, 0x08	; 8
    178a:	21 f4       	brne	.+8      	; 0x1794 <usbPoll+0x11c>
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	8a e2       	ldi	r24, 0x2A	; 42
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	13 c0       	rjmp	.+38     	; 0x17ba <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    1794:	89 30       	cpi	r24, 0x09	; 9
    1796:	19 f4       	brne	.+6      	; 0x179e <usbPoll+0x126>
        usbConfiguration = value;
    1798:	90 93 2a 01 	sts	0x012A, r25
    179c:	0b c0       	rjmp	.+22     	; 0x17b4 <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    179e:	8a 30       	cpi	r24, 0x0A	; 10
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <usbPoll+0x12e>
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <usbPoll+0x13e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    17a6:	8b 30       	cpi	r24, 0x0B	; 11
    17a8:	29 f4       	brne	.+10     	; 0x17b4 <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    17aa:	8b e4       	ldi	r24, 0x4B	; 75
    17ac:	80 93 17 01 	sts	0x0117, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    17b0:	80 93 42 01 	sts	0x0142, r24
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	84 e1       	ldi	r24, 0x14	; 20
    17b8:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    17ba:	90 93 26 01 	sts	0x0126, r25
    17be:	80 93 25 01 	sts	0x0125, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    17c2:	8f 81       	ldd	r24, Y+7	; 0x07
    17c4:	88 23       	and	r24, r24
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <usbPoll+0x158>
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	82 17       	cp	r24, r18
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <usbPoll+0x158>
    17ce:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    17d0:	20 93 01 01 	sts	0x0101, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    17d4:	10 92 27 01 	sts	0x0127, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    17d8:	80 91 00 01 	lds	r24, 0x0100
    17dc:	84 ff       	sbrs	r24, 4
    17de:	4a c0       	rjmp	.+148    	; 0x1874 <usbPoll+0x1fc>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    17e0:	80 91 01 01 	lds	r24, 0x0101
    17e4:	8f 3f       	cpi	r24, 0xFF	; 255
    17e6:	09 f4       	brne	.+2      	; 0x17ea <usbPoll+0x172>
    17e8:	45 c0       	rjmp	.+138    	; 0x1874 <usbPoll+0x1fc>
    17ea:	18 2f       	mov	r17, r24
    17ec:	89 30       	cpi	r24, 0x09	; 9
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <usbPoll+0x17a>
    17f0:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    17f2:	81 1b       	sub	r24, r17
    17f4:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    17f8:	80 91 0b 01 	lds	r24, 0x010B
    17fc:	98 e8       	ldi	r25, 0x88	; 136
    17fe:	89 27       	eor	r24, r25
    1800:	80 93 0b 01 	sts	0x010B, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    1804:	11 23       	and	r17, r17
    1806:	41 f1       	breq	.+80     	; 0x1858 <usbPoll+0x1e0>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    1808:	20 91 25 01 	lds	r18, 0x0125
    180c:	30 91 26 01 	lds	r19, 0x0126
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1810:	80 91 03 01 	lds	r24, 0x0103
    1814:	86 ff       	sbrs	r24, 6
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <usbPoll+0x1ba>
    1818:	ac e0       	ldi	r26, 0x0C	; 12
    181a:	b1 e0       	ldi	r27, 0x01	; 1
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
    1820:	f9 01       	movw	r30, r18
    1822:	e8 0f       	add	r30, r24
    1824:	f9 1f       	adc	r31, r25
    1826:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    1828:	ed 93       	st	X+, r30
    182a:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    182c:	18 17       	cp	r17, r24
    182e:	c1 f7       	brne	.-16     	; 0x1820 <usbPoll+0x1a8>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <usbPoll+0x1ca>
    1832:	91 2f       	mov	r25, r17
    1834:	d9 01       	movw	r26, r18
    1836:	ec e0       	ldi	r30, 0x0C	; 12
    1838:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    183a:	8d 91       	ld	r24, X+
    183c:	81 93       	st	Z+, r24
                }while(--i);
    183e:	91 50       	subi	r25, 0x01	; 1
    1840:	e1 f7       	brne	.-8      	; 0x183a <usbPoll+0x1c2>
    1842:	11 50       	subi	r17, 0x01	; 1
    1844:	81 2f       	mov	r24, r17
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	1f 5f       	subi	r17, 0xFF	; 255
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    1850:	90 93 26 01 	sts	0x0126, r25
    1854:	80 93 25 01 	sts	0x0125, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    1858:	8c e0       	ldi	r24, 0x0C	; 12
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	61 2f       	mov	r22, r17
    185e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1862:	61 2f       	mov	r22, r17
    1864:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1866:	6c 30       	cpi	r22, 0x0C	; 12
    1868:	19 f0       	breq	.+6      	; 0x1870 <usbPoll+0x1f8>
            usbMsgLen = USB_NO_MSG;
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    1870:	60 93 00 01 	sts	0x0100, r22
    1874:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    1876:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    1878:	88 71       	andi	r24, 0x18	; 24
    187a:	31 f4       	brne	.+12     	; 0x1888 <usbPoll+0x210>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
    187c:	91 50       	subi	r25, 0x01	; 1
    187e:	d9 f7       	brne	.-10     	; 0x1876 <usbPoll+0x1fe>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
    1880:	10 92 28 01 	sts	0x0128, r1
    usbDeviceAddr = 0;
    1884:	10 92 22 01 	sts	0x0122, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	08 95       	ret

00001890 <usbSetInterrupt3>:
}
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    1890:	1f 93       	push	r17
    1892:	dc 01       	movw	r26, r24
    1894:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    1896:	80 91 41 01 	lds	r24, 0x0141
    189a:	84 ff       	sbrs	r24, 4
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <usbSetInterrupt3+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    189e:	80 91 42 01 	lds	r24, 0x0142
    18a2:	98 e8       	ldi	r25, 0x88	; 136
    18a4:	89 27       	eor	r24, r25
    18a6:	80 93 42 01 	sts	0x0142, r24
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <usbSetInterrupt3+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    18ac:	8a e5       	ldi	r24, 0x5A	; 90
    18ae:	80 93 41 01 	sts	0x0141, r24
    18b2:	91 2f       	mov	r25, r17
    18b4:	e3 e4       	ldi	r30, 0x43	; 67
    18b6:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    18b8:	8d 91       	ld	r24, X+
    18ba:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <usbSetInterrupt3+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    18c0:	83 e4       	ldi	r24, 0x43	; 67
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	61 2f       	mov	r22, r17
    18c6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    18ca:	1c 5f       	subi	r17, 0xFC	; 252
    18cc:	10 93 41 01 	sts	0x0141, r17

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
}
    18d0:	1f 91       	pop	r17
    18d2:	08 95       	ret

000018d4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    18d4:	1f 93       	push	r17
    18d6:	dc 01       	movw	r26, r24
    18d8:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    18da:	80 91 16 01 	lds	r24, 0x0116
    18de:	84 ff       	sbrs	r24, 4
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    18e2:	80 91 17 01 	lds	r24, 0x0117
    18e6:	98 e8       	ldi	r25, 0x88	; 136
    18e8:	89 27       	eor	r24, r25
    18ea:	80 93 17 01 	sts	0x0117, r24
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    18f0:	8a e5       	ldi	r24, 0x5A	; 90
    18f2:	80 93 16 01 	sts	0x0116, r24
    18f6:	91 2f       	mov	r25, r17
    18f8:	e8 e1       	ldi	r30, 0x18	; 24
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    18fc:	8d 91       	ld	r24, X+
    18fe:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    1900:	91 50       	subi	r25, 0x01	; 1
    1902:	e1 f7       	brne	.-8      	; 0x18fc <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    1904:	88 e1       	ldi	r24, 0x18	; 24
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	61 2f       	mov	r22, r17
    190a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    190e:	1c 5f       	subi	r17, 0xFC	; 252
    1910:	10 93 16 01 	sts	0x0116, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    1914:	1f 91       	pop	r17
    1916:	08 95       	ret

00001918 <usbCrc16>:
    1918:	a8 2f       	mov	r26, r24
    191a:	b9 2f       	mov	r27, r25
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	50 ea       	ldi	r21, 0xA0	; 160
    1924:	60 95       	com	r22
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	09 c0       	rjmp	.+18     	; 0x193c <usbCrcLoopEntry>

0000192a <usbCrcByteLoop>:
    192a:	2d 91       	ld	r18, X+
    192c:	82 27       	eor	r24, r18

0000192e <usbCrcBitLoop>:
    192e:	97 95       	ror	r25
    1930:	87 95       	ror	r24
    1932:	10 f0       	brcs	.+4      	; 0x1938 <usbCrcNoXor>
    1934:	84 27       	eor	r24, r20
    1936:	95 27       	eor	r25, r21

00001938 <usbCrcNoXor>:
    1938:	30 5e       	subi	r19, 0xE0	; 224
    193a:	c8 f3       	brcs	.-14     	; 0x192e <usbCrcBitLoop>

0000193c <usbCrcLoopEntry>:
    193c:	6f 5f       	subi	r22, 0xFF	; 255
    193e:	a8 f3       	brcs	.-22     	; 0x192a <usbCrcByteLoop>

00001940 <usbCrcReady>:
    1940:	08 95       	ret

00001942 <usbCrc16Append>:
    1942:	ea df       	rcall	.-44     	; 0x1918 <usbCrc16>
    1944:	8d 93       	st	X+, r24
    1946:	9d 93       	st	X+, r25
    1948:	08 95       	ret

0000194a <__vector_2>:
    194a:	cf 93       	push	r28
    194c:	cf b7       	in	r28, 0x3f	; 63
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29

00001952 <waitForJ>:
    1952:	c3 95       	inc	r28
    1954:	4c 9b       	sbis	0x09, 4	; 9
    1956:	e9 f7       	brne	.-6      	; 0x1952 <waitForJ>

00001958 <waitForK>:
    1958:	4c 9b       	sbis	0x09, 4	; 9
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <foundK>
    195c:	4c 9b       	sbis	0x09, 4	; 9
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <foundK>
    1960:	4c 9b       	sbis	0x09, 4	; 9
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <foundK>
    1964:	4c 9b       	sbis	0x09, 4	; 9
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <foundK>
    1968:	4c 9b       	sbis	0x09, 4	; 9
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <foundK>
    196c:	4c 9b       	sbis	0x09, 4	; 9
    196e:	01 c0       	rjmp	.+2      	; 0x1972 <foundK>
    1970:	8b c0       	rjmp	.+278    	; 0x1a88 <sofError>

00001972 <foundK>:
    1972:	6f 93       	push	r22
    1974:	c0 91 24 01 	lds	r28, 0x0124
    1978:	dd 27       	eor	r29, r29
    197a:	c5 5d       	subi	r28, 0xD5	; 213
    197c:	de 4f       	sbci	r29, 0xFE	; 254
    197e:	2f 93       	push	r18
    1980:	65 e5       	ldi	r22, 0x55	; 85
    1982:	4c 9b       	sbis	0x09, 4	; 9
    1984:	03 c0       	rjmp	.+6      	; 0x198c <haveTwoBitsK>
    1986:	2f 91       	pop	r18
    1988:	6f 91       	pop	r22
    198a:	e6 cf       	rjmp	.-52     	; 0x1958 <waitForK>

0000198c <haveTwoBitsK>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	4f 93       	push	r20
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	40 e1       	ldi	r20, 0x10	; 16
    1996:	5f 93       	push	r21
    1998:	09 b1       	in	r16, 0x09	; 9
    199a:	08 71       	andi	r16, 0x18	; 24
    199c:	04 fb       	bst	r16, 4
    199e:	27 f9       	bld	r18, 7
    19a0:	3f 93       	push	r19
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	3b e0       	ldi	r19, 0x0B	; 11
    19a6:	39 c0       	rjmp	.+114    	; 0x1a1a <rxbit1>

000019a8 <unstuff6>:
    19a8:	18 71       	andi	r17, 0x18	; 24
    19aa:	40 64       	ori	r20, 0x40	; 64
    19ac:	2f 77       	andi	r18, 0x7F	; 127
    19ae:	01 2f       	mov	r16, r17
    19b0:	5f 5f       	subi	r21, 0xFF	; 255
    19b2:	1e c0       	rjmp	.+60     	; 0x19f0 <didUnstuff6>

000019b4 <unstuff7>:
    19b4:	40 68       	ori	r20, 0x80	; 128
    19b6:	19 b1       	in	r17, 0x09	; 9
    19b8:	18 71       	andi	r17, 0x18	; 24
    19ba:	2f 77       	andi	r18, 0x7F	; 127
    19bc:	52 50       	subi	r21, 0x02	; 2
    19be:	1f c0       	rjmp	.+62     	; 0x19fe <didUnstuff7>

000019c0 <unstuffEven>:
    19c0:	40 64       	ori	r20, 0x40	; 64
    19c2:	09 b1       	in	r16, 0x09	; 9
    19c4:	2f 77       	andi	r18, 0x7F	; 127
    19c6:	08 71       	andi	r16, 0x18	; 24
    19c8:	d1 f1       	breq	.+116    	; 0x1a3e <se0>
    19ca:	5f 5f       	subi	r21, 0xFF	; 255
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <unstuffEven+0xe>
    19ce:	23 c0       	rjmp	.+70     	; 0x1a16 <didUnstuffE>

000019d0 <unstuffOdd>:
    19d0:	40 62       	ori	r20, 0x20	; 32
    19d2:	19 b1       	in	r17, 0x09	; 9
    19d4:	2f 77       	andi	r18, 0x7F	; 127
    19d6:	18 71       	andi	r17, 0x18	; 24
    19d8:	91 f1       	breq	.+100    	; 0x1a3e <se0>
    19da:	5f 5f       	subi	r21, 0xFF	; 255
    19dc:	00 c0       	rjmp	.+0      	; 0x19de <unstuffOdd+0xe>
    19de:	25 c0       	rjmp	.+74     	; 0x1a2a <didUnstuffO>

000019e0 <rxByteLoop>:
    19e0:	08 71       	andi	r16, 0x18	; 24
    19e2:	10 27       	eor	r17, r16
    19e4:	51 50       	subi	r21, 0x01	; 1
    19e6:	12 f4       	brpl	.+4      	; 0x19ec <skipLeap>
    19e8:	5d 5f       	subi	r21, 0xFD	; 253
	...

000019ec <skipLeap>:
    19ec:	11 50       	subi	r17, 0x01	; 1
    19ee:	27 95       	ror	r18

000019f0 <didUnstuff6>:
    19f0:	2c 3f       	cpi	r18, 0xFC	; 252
    19f2:	19 b1       	in	r17, 0x09	; 9
    19f4:	c8 f6       	brcc	.-78     	; 0x19a8 <unstuff6>
    19f6:	18 71       	andi	r17, 0x18	; 24
    19f8:	01 27       	eor	r16, r17
    19fa:	01 50       	subi	r16, 0x01	; 1
    19fc:	27 95       	ror	r18

000019fe <didUnstuff7>:
    19fe:	2c 3f       	cpi	r18, 0xFC	; 252
    1a00:	c8 f6       	brcc	.-78     	; 0x19b4 <unstuff7>
    1a02:	42 27       	eor	r20, r18
    1a04:	49 93       	st	Y+, r20

00001a06 <rxBitLoop>:
    1a06:	09 b1       	in	r16, 0x09	; 9
    1a08:	08 71       	andi	r16, 0x18	; 24
    1a0a:	10 27       	eor	r17, r16
    1a0c:	4f 73       	andi	r20, 0x3F	; 63
    1a0e:	11 50       	subi	r17, 0x01	; 1
    1a10:	27 95       	ror	r18
    1a12:	2c 3f       	cpi	r18, 0xFC	; 252
    1a14:	a8 f6       	brcc	.-86     	; 0x19c0 <unstuffEven>

00001a16 <didUnstuffE>:
    1a16:	46 95       	lsr	r20
    1a18:	46 95       	lsr	r20

00001a1a <rxbit1>:
    1a1a:	19 b1       	in	r17, 0x09	; 9
    1a1c:	18 71       	andi	r17, 0x18	; 24
    1a1e:	79 f0       	breq	.+30     	; 0x1a3e <se0>
    1a20:	01 27       	eor	r16, r17
    1a22:	01 50       	subi	r16, 0x01	; 1
    1a24:	27 95       	ror	r18
    1a26:	2c 3f       	cpi	r18, 0xFC	; 252
    1a28:	98 f6       	brcc	.-90     	; 0x19d0 <unstuffOdd>

00001a2a <didUnstuffO>:
    1a2a:	6b 5a       	subi	r22, 0xAB	; 171
    1a2c:	60 f3       	brcs	.-40     	; 0x1a06 <rxBitLoop>
    1a2e:	31 50       	subi	r19, 0x01	; 1
    1a30:	09 b1       	in	r16, 0x09	; 9
    1a32:	b0 f6       	brcc	.-84     	; 0x19e0 <rxByteLoop>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <overflow>

00001a36 <overflow>:
    1a36:	12 e0       	ldi	r17, 0x02	; 2
    1a38:	1c bb       	out	0x1c, r17	; 28

00001a3a <ignorePacket>:
    1a3a:	00 27       	eor	r16, r16
    1a3c:	19 c0       	rjmp	.+50     	; 0x1a70 <handleSetupOrOut>

00001a3e <se0>:
    1a3e:	3b 50       	subi	r19, 0x0B	; 11
    1a40:	31 95       	neg	r19
    1a42:	c3 1b       	sub	r28, r19
    1a44:	d0 40       	sbci	r29, 0x00	; 0
    1a46:	12 e0       	ldi	r17, 0x02	; 2
    1a48:	1c bb       	out	0x1c, r17	; 28
    1a4a:	08 81       	ld	r16, Y
    1a4c:	03 3c       	cpi	r16, 0xC3	; 195
    1a4e:	09 f1       	breq	.+66     	; 0x1a92 <handleData>
    1a50:	0b 34       	cpi	r16, 0x4B	; 75
    1a52:	f9 f0       	breq	.+62     	; 0x1a92 <handleData>
    1a54:	20 91 22 01 	lds	r18, 0x0122
    1a58:	19 81       	ldd	r17, Y+1	; 0x01
    1a5a:	11 0f       	add	r17, r17
    1a5c:	12 13       	cpse	r17, r18
    1a5e:	ed cf       	rjmp	.-38     	; 0x1a3a <ignorePacket>
    1a60:	4a 81       	ldd	r20, Y+2	; 0x02
    1a62:	44 1f       	adc	r20, r20
    1a64:	09 36       	cpi	r16, 0x69	; 105
    1a66:	51 f1       	breq	.+84     	; 0x1abc <handleIn>
    1a68:	0d 32       	cpi	r16, 0x2D	; 45
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <handleSetupOrOut>
    1a6c:	01 3e       	cpi	r16, 0xE1	; 225
    1a6e:	29 f7       	brne	.-54     	; 0x1a3a <ignorePacket>

00001a70 <handleSetupOrOut>:
    1a70:	00 93 29 01 	sts	0x0129, r16

00001a74 <doReturn>:
    1a74:	3f 91       	pop	r19
    1a76:	5f 91       	pop	r21
    1a78:	4f 91       	pop	r20
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	2f 91       	pop	r18
    1a80:	6f 91       	pop	r22
    1a82:	cc b3       	in	r28, 0x1c	; 28
    1a84:	c1 fd       	sbrc	r28, 1
    1a86:	65 cf       	rjmp	.-310    	; 0x1952 <waitForJ>

00001a88 <sofError>:
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	cf bf       	out	0x3f, r28	; 63
    1a8e:	cf 91       	pop	r28
    1a90:	18 95       	reti

00001a92 <handleData>:
    1a92:	20 91 29 01 	lds	r18, 0x0129
    1a96:	22 23       	and	r18, r18
    1a98:	69 f3       	breq	.-38     	; 0x1a74 <doReturn>
    1a9a:	10 91 27 01 	lds	r17, 0x0127
    1a9e:	11 23       	and	r17, r17
    1aa0:	e9 f5       	brne	.+122    	; 0x1b1c <sendNakAndReti>
    1aa2:	34 30       	cpi	r19, 0x04	; 4
    1aa4:	ea f1       	brmi	.+122    	; 0x1b20 <sendAckAndReti>
    1aa6:	30 93 27 01 	sts	0x0127, r19
    1aaa:	20 93 23 01 	sts	0x0123, r18
    1aae:	10 91 24 01 	lds	r17, 0x0124
    1ab2:	3b e0       	ldi	r19, 0x0B	; 11
    1ab4:	31 1b       	sub	r19, r17
    1ab6:	30 93 24 01 	sts	0x0124, r19
    1aba:	32 c0       	rjmp	.+100    	; 0x1b20 <sendAckAndReti>

00001abc <handleIn>:
    1abc:	00 91 27 01 	lds	r16, 0x0127
    1ac0:	01 30       	cpi	r16, 0x01	; 1
    1ac2:	64 f5       	brge	.+88     	; 0x1b1c <sendNakAndReti>
    1ac4:	0a e5       	ldi	r16, 0x5A	; 90
    1ac6:	4f 70       	andi	r20, 0x0F	; 15
    1ac8:	49 f4       	brne	.+18     	; 0x1adc <handleIn1>
    1aca:	30 91 00 01 	lds	r19, 0x0100
    1ace:	34 fd       	sbrc	r19, 4
    1ad0:	28 c0       	rjmp	.+80     	; 0x1b22 <sendCntAndReti>
    1ad2:	00 93 00 01 	sts	0x0100, r16
    1ad6:	cb e0       	ldi	r28, 0x0B	; 11
    1ad8:	d1 e0       	ldi	r29, 0x01	; 1
    1ada:	27 c0       	rjmp	.+78     	; 0x1b2a <usbSendAndReti>

00001adc <handleIn1>:
    1adc:	41 35       	cpi	r20, 0x51	; 81
    1ade:	49 f0       	breq	.+18     	; 0x1af2 <handleIn3>
    1ae0:	30 91 16 01 	lds	r19, 0x0116
    1ae4:	34 fd       	sbrc	r19, 4
    1ae6:	1d c0       	rjmp	.+58     	; 0x1b22 <sendCntAndReti>
    1ae8:	00 93 16 01 	sts	0x0116, r16
    1aec:	c7 e1       	ldi	r28, 0x17	; 23
    1aee:	d1 e0       	ldi	r29, 0x01	; 1
    1af0:	1c c0       	rjmp	.+56     	; 0x1b2a <usbSendAndReti>

00001af2 <handleIn3>:
    1af2:	30 91 41 01 	lds	r19, 0x0141
    1af6:	34 fd       	sbrc	r19, 4
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <sendCntAndReti>
    1afa:	00 93 41 01 	sts	0x0141, r16
    1afe:	c2 e4       	ldi	r28, 0x42	; 66
    1b00:	d1 e0       	ldi	r29, 0x01	; 1
    1b02:	13 c0       	rjmp	.+38     	; 0x1b2a <usbSendAndReti>

00001b04 <bitstuffN>:
    1b04:	05 27       	eor	r16, r21
    1b06:	10 e0       	ldi	r17, 0x00	; 0
    1b08:	00 c0       	rjmp	.+0      	; 0x1b0a <bitstuffN+0x6>
    1b0a:	00 00       	nop
    1b0c:	0b b9       	out	0x0b, r16	; 11
    1b0e:	1a c0       	rjmp	.+52     	; 0x1b44 <didStuffN>

00001b10 <bitstuff6>:
    1b10:	05 27       	eor	r16, r21
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	22 1f       	adc	r18, r18
    1b16:	1d c0       	rjmp	.+58     	; 0x1b52 <didStuff6>

00001b18 <bitstuff7>:
    1b18:	10 e0       	ldi	r17, 0x00	; 0
    1b1a:	21 c0       	rjmp	.+66     	; 0x1b5e <didStuff7>

00001b1c <sendNakAndReti>:
    1b1c:	4a e5       	ldi	r20, 0x5A	; 90
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <sendX3AndReti>

00001b20 <sendAckAndReti>:
    1b20:	32 ed       	ldi	r19, 0xD2	; 210

00001b22 <sendCntAndReti>:
    1b22:	43 2f       	mov	r20, r19

00001b24 <sendX3AndReti>:
    1b24:	c4 e1       	ldi	r28, 0x14	; 20
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	32 e0       	ldi	r19, 0x02	; 2

00001b2a <usbSendAndReti>:
    1b2a:	1a b1       	in	r17, 0x0a	; 10
    1b2c:	18 61       	ori	r17, 0x18	; 24
    1b2e:	5c 9a       	sbi	0x0b, 4	; 11
    1b30:	0b b1       	in	r16, 0x0b	; 11
    1b32:	1a b9       	out	0x0a, r17	; 10
    1b34:	58 e1       	ldi	r21, 0x18	; 24
    1b36:	20 e8       	ldi	r18, 0x80	; 128

00001b38 <txByteLoop>:
    1b38:	65 e3       	ldi	r22, 0x35	; 53

00001b3a <txBitLoop>:
    1b3a:	20 ff       	sbrs	r18, 0
    1b3c:	05 27       	eor	r16, r21
    1b3e:	0b b9       	out	0x0b, r16	; 11
    1b40:	27 95       	ror	r18
    1b42:	17 95       	ror	r17

00001b44 <didStuffN>:
    1b44:	1c 3f       	cpi	r17, 0xFC	; 252
    1b46:	f0 f6       	brcc	.-68     	; 0x1b04 <bitstuffN>
    1b48:	66 95       	lsr	r22
    1b4a:	b8 f7       	brcc	.-18     	; 0x1b3a <txBitLoop>
    1b4c:	b1 f7       	brne	.-20     	; 0x1b3a <txBitLoop>
    1b4e:	20 ff       	sbrs	r18, 0
    1b50:	05 27       	eor	r16, r21

00001b52 <didStuff6>:
    1b52:	0b b9       	out	0x0b, r16	; 11
    1b54:	27 95       	ror	r18
    1b56:	17 95       	ror	r17
    1b58:	1c 3f       	cpi	r17, 0xFC	; 252
    1b5a:	d0 f6       	brcc	.-76     	; 0x1b10 <bitstuff6>
    1b5c:	27 95       	ror	r18

00001b5e <didStuff7>:
    1b5e:	17 95       	ror	r17
    1b60:	17 ff       	sbrs	r17, 7
    1b62:	05 27       	eor	r16, r21
    1b64:	00 00       	nop
    1b66:	1c 3f       	cpi	r17, 0xFC	; 252
    1b68:	0b b9       	out	0x0b, r16	; 11
    1b6a:	b0 f6       	brcc	.-84     	; 0x1b18 <bitstuff7>
    1b6c:	29 91       	ld	r18, Y+
    1b6e:	3a 95       	dec	r19
    1b70:	19 f7       	brne	.-58     	; 0x1b38 <txByteLoop>
    1b72:	07 7e       	andi	r16, 0xE7	; 231
    1b74:	10 91 28 01 	lds	r17, 0x0128
    1b78:	11 0f       	add	r17, r17
    1b7a:	c6 51       	subi	r28, 0x16	; 22
    1b7c:	d0 40       	sbci	r29, 0x00	; 0
    1b7e:	0b b9       	out	0x0b, r16	; 11
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <skipAddrAssign>
    1b82:	10 93 22 01 	sts	0x0122, r17

00001b86 <skipAddrAssign>:
    1b86:	12 e0       	ldi	r17, 0x02	; 2
    1b88:	1c bb       	out	0x1c, r17	; 28
    1b8a:	00 61       	ori	r16, 0x10	; 16
    1b8c:	1a b1       	in	r17, 0x0a	; 10
    1b8e:	17 7e       	andi	r17, 0xE7	; 231
    1b90:	40 2f       	mov	r20, r16
    1b92:	47 7e       	andi	r20, 0xE7	; 231
    1b94:	54 e0       	ldi	r21, 0x04	; 4

00001b96 <se0Delay>:
    1b96:	5a 95       	dec	r21
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <se0Delay>
    1b9a:	0b b9       	out	0x0b, r16	; 11
    1b9c:	1a b9       	out	0x0a, r17	; 10
    1b9e:	4b b9       	out	0x0b, r20	; 11
    1ba0:	69 cf       	rjmp	.-302    	; 0x1a74 <doReturn>

00001ba2 <__eerd_block>:
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    1ba8:	fd e0       	ldi	r31, 0x0D	; 13
    1baa:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__prologue_saves__+0x14>
    1bae:	7c 01       	movw	r14, r24
    1bb0:	eb 01       	movw	r28, r22
    1bb2:	8a 01       	movw	r16, r20
    1bb4:	69 01       	movw	r12, r18
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <__eerd_block+0x28>
    1bb8:	ce 01       	movw	r24, r28
    1bba:	21 96       	adiw	r28, 0x01	; 1
    1bbc:	f6 01       	movw	r30, r12
    1bbe:	09 95       	icall
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	81 93       	st	Z+, r24
    1bc4:	7f 01       	movw	r14, r30
    1bc6:	01 50       	subi	r16, 0x01	; 1
    1bc8:	10 40       	sbci	r17, 0x00	; 0
    1bca:	01 15       	cp	r16, r1
    1bcc:	11 05       	cpc	r17, r1
    1bce:	a1 f7       	brne	.-24     	; 0x1bb8 <__eerd_block+0x16>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	e8 e0       	ldi	r30, 0x08	; 8
    1bd6:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__epilogue_restores__+0x14>

00001bda <__eewr_block>:
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e3 ef       	ldi	r30, 0xF3	; 243
    1be0:	fd e0       	ldi	r31, 0x0D	; 13
    1be2:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__prologue_saves__+0x14>
    1be6:	ec 01       	movw	r28, r24
    1be8:	7b 01       	movw	r14, r22
    1bea:	8a 01       	movw	r16, r20
    1bec:	69 01       	movw	r12, r18
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <__eewr_block+0x28>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	21 96       	adiw	r28, 0x01	; 1
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	61 91       	ld	r22, Z+
    1bf8:	7f 01       	movw	r14, r30
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	09 95       	icall
    1bfe:	01 50       	subi	r16, 0x01	; 1
    1c00:	10 40       	sbci	r17, 0x00	; 0
    1c02:	01 15       	cp	r16, r1
    1c04:	11 05       	cpc	r17, r1
    1c06:	a1 f7       	brne	.-24     	; 0x1bf0 <__eewr_block+0x16>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	e8 e0       	ldi	r30, 0x08	; 8
    1c0e:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__epilogue_restores__+0x14>

00001c12 <__prologue_saves__>:
    1c12:	2f 92       	push	r2
    1c14:	3f 92       	push	r3
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	ca 1b       	sub	r28, r26
    1c3c:	db 0b       	sbc	r29, r27
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	09 94       	ijmp

00001c4a <__epilogue_restores__>:
    1c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4c:	39 88       	ldd	r3, Y+17	; 0x11
    1c4e:	48 88       	ldd	r4, Y+16	; 0x10
    1c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c60:	df 80       	ldd	r13, Y+7	; 0x07
    1c62:	ee 80       	ldd	r14, Y+6	; 0x06
    1c64:	fd 80       	ldd	r15, Y+5	; 0x05
    1c66:	0c 81       	ldd	r16, Y+4	; 0x04
    1c68:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6e:	ce 0f       	add	r28, r30
    1c70:	d1 1d       	adc	r29, r1
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	ed 01       	movw	r28, r26
    1c7e:	08 95       	ret

00001c80 <_exit>:
    1c80:	f8 94       	cli

00001c82 <__stop_program>:
    1c82:	ff cf       	rjmp	.-2      	; 0x1c82 <__stop_program>
